#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import logging
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def sai_thrift_set_port_attribute(self, port_id, thrift_attr):
    """
    Parameters:
     - port_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_fdb_entry(self, thrift_fdb_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_fdb_entry
     - thrift_attr_list
    """
    pass

  def sai_thrift_delete_fdb_entry(self, thrift_fdb_entry):
    """
    Parameters:
     - thrift_fdb_entry
    """
    pass

  def sai_thrift_flush_fdb_entries(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_create_vlan(self, vlan_id):
    """
    Parameters:
     - vlan_id
    """
    pass

  def sai_thrift_delete_vlan(self, vlan_id):
    """
    Parameters:
     - vlan_id
    """
    pass

  def sai_thrift_add_ports_to_vlan(self, vlan_id, thrift_port_list):
    """
    Parameters:
     - vlan_id
     - thrift_port_list
    """
    pass

  def sai_thrift_remove_ports_from_vlan(self, vlan_id, thrift_port_list):
    """
    Parameters:
     - vlan_id
     - thrift_port_list
    """
    pass

  def sai_thrift_get_vlan_stats(self, vlan_id, counter_ids, number_of_counters):
    """
    Parameters:
     - vlan_id
     - counter_ids
     - number_of_counters
    """
    pass

  def sai_thrift_create_virtual_router(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_virtual_router(self, vr_id):
    """
    Parameters:
     - vr_id
    """
    pass

  def sai_thrift_create_route(self, thrift_unicast_route_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_unicast_route_entry
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_route(self, thrift_unicast_route_entry):
    """
    Parameters:
     - thrift_unicast_route_entry
    """
    pass

  def sai_thrift_create_router_interface(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_router_interface(self, rif_id):
    """
    Parameters:
     - rif_id
    """
    pass

  def sai_thrift_create_next_hop(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_next_hop(self, next_hop_id):
    """
    Parameters:
     - next_hop_id
    """
    pass

  def sai_thrift_create_next_hop_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_next_hop_group(self, next_hop_group_id):
    """
    Parameters:
     - next_hop_group_id
    """
    pass

  def sai_thrift_add_next_hop_to_group(self, next_hop_group_id, thrift_nexthops):
    """
    Parameters:
     - next_hop_group_id
     - thrift_nexthops
    """
    pass

  def sai_thrift_remove_next_hop_from_group(self, next_hop_group_id, thrift_nexthops):
    """
    Parameters:
     - next_hop_group_id
     - thrift_nexthops
    """
    pass

  def sai_thrift_create_lag(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_lag(self, lag_id):
    """
    Parameters:
     - lag_id
    """
    pass

  def sai_thrift_create_lag_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_lag_member(self, lag_member_id):
    """
    Parameters:
     - lag_member_id
    """
    pass

  def sai_thrift_create_stp_entry(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_stp_entry(self, stp_id):
    """
    Parameters:
     - stp_id
    """
    pass

  def sai_thrift_set_stp_port_state(self, stp_id, port_id, stp_port_state):
    """
    Parameters:
     - stp_id
     - port_id
     - stp_port_state
    """
    pass

  def sai_thrift_get_stp_port_state(self, stp_id, port_id):
    """
    Parameters:
     - stp_id
     - port_id
    """
    pass

  def sai_thrift_create_neighbor_entry(self, thrift_neighbor_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_neighbor_entry
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_neighbor_entry(self, thrift_neighbor_entry):
    """
    Parameters:
     - thrift_neighbor_entry
    """
    pass

  def sai_thrift_get_switch_attribute(self):
    pass

  def sai_thrift_set_switch_attribute(self, attribute):
    """
    Parameters:
     - attribute
    """
    pass

  def sai_thrift_create_hostif(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_hostif(self, hif_id):
    """
    Parameters:
     - hif_id
    """
    pass

  def sai_thrift_create_hostif_trap_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_hostif_trap_group(self, trap_group_id):
    """
    Parameters:
     - trap_group_id
    """
    pass

  def sai_thrift_create_hostif_trap(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_hostif_trap(self, trap_id):
    """
    Parameters:
     - trap_id
    """
    pass

  def sai_thrift_set_hostif_trap(self, trap_id, thrift_attr):
    """
    Parameters:
     - trap_id
     - thrift_attr
    """
    pass

  def sai_thrift_create_acl_table(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_delete_acl_table(self, acl_table_id):
    """
    Parameters:
     - acl_table_id
    """
    pass

  def sai_thrift_create_acl_entry(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_delete_acl_entry(self, acl_entry):
    """
    Parameters:
     - acl_entry
    """
    pass

  def sai_thrift_create_acl_counter(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_delete_acl_counter(self, acl_counter_id):
    """
    Parameters:
     - acl_counter_id
    """
    pass

  def sai_thrift_get_acl_counter_attribute(self, acl_counter_id, thrift_attr_ids):
    """
    Parameters:
     - acl_counter_id
     - thrift_attr_ids
    """
    pass

  def sai_thrift_create_mirror_session(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_mirror_session(self, session_id):
    """
    Parameters:
     - session_id
    """
    pass

  def sai_thrift_create_policer(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    pass

  def sai_thrift_remove_policer(self, policer_id):
    """
    Parameters:
     - policer_id
    """
    pass

  def sai_thrift_get_policer_stats(self, policer_id, counter_ids):
    """
    Parameters:
     - policer_id
     - counter_ids
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def sai_thrift_set_port_attribute(self, port_id, thrift_attr):
    """
    Parameters:
     - port_id
     - thrift_attr
    """
    self.send_sai_thrift_set_port_attribute(port_id, thrift_attr)
    return self.recv_sai_thrift_set_port_attribute()

  def send_sai_thrift_set_port_attribute(self, port_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_port_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_port_attribute_args()
    args.port_id = port_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_port_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_port_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_port_attribute failed: unknown result")

  def sai_thrift_create_fdb_entry(self, thrift_fdb_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_fdb_entry
     - thrift_attr_list
    """
    self.send_sai_thrift_create_fdb_entry(thrift_fdb_entry, thrift_attr_list)
    return self.recv_sai_thrift_create_fdb_entry()

  def send_sai_thrift_create_fdb_entry(self, thrift_fdb_entry, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_fdb_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_fdb_entry_args()
    args.thrift_fdb_entry = thrift_fdb_entry
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_fdb_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_fdb_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_fdb_entry failed: unknown result")

  def sai_thrift_delete_fdb_entry(self, thrift_fdb_entry):
    """
    Parameters:
     - thrift_fdb_entry
    """
    self.send_sai_thrift_delete_fdb_entry(thrift_fdb_entry)
    return self.recv_sai_thrift_delete_fdb_entry()

  def send_sai_thrift_delete_fdb_entry(self, thrift_fdb_entry):
    self._oprot.writeMessageBegin('sai_thrift_delete_fdb_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_delete_fdb_entry_args()
    args.thrift_fdb_entry = thrift_fdb_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_delete_fdb_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_delete_fdb_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_delete_fdb_entry failed: unknown result")

  def sai_thrift_flush_fdb_entries(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_flush_fdb_entries(thrift_attr_list)
    return self.recv_sai_thrift_flush_fdb_entries()

  def send_sai_thrift_flush_fdb_entries(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_flush_fdb_entries', TMessageType.CALL, self._seqid)
    args = sai_thrift_flush_fdb_entries_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_flush_fdb_entries(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_flush_fdb_entries_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_flush_fdb_entries failed: unknown result")

  def sai_thrift_create_vlan(self, vlan_id):
    """
    Parameters:
     - vlan_id
    """
    self.send_sai_thrift_create_vlan(vlan_id)
    return self.recv_sai_thrift_create_vlan()

  def send_sai_thrift_create_vlan(self, vlan_id):
    self._oprot.writeMessageBegin('sai_thrift_create_vlan', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_vlan_args()
    args.vlan_id = vlan_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_vlan(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_vlan_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_vlan failed: unknown result")

  def sai_thrift_delete_vlan(self, vlan_id):
    """
    Parameters:
     - vlan_id
    """
    self.send_sai_thrift_delete_vlan(vlan_id)
    return self.recv_sai_thrift_delete_vlan()

  def send_sai_thrift_delete_vlan(self, vlan_id):
    self._oprot.writeMessageBegin('sai_thrift_delete_vlan', TMessageType.CALL, self._seqid)
    args = sai_thrift_delete_vlan_args()
    args.vlan_id = vlan_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_delete_vlan(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_delete_vlan_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_delete_vlan failed: unknown result")

  def sai_thrift_add_ports_to_vlan(self, vlan_id, thrift_port_list):
    """
    Parameters:
     - vlan_id
     - thrift_port_list
    """
    self.send_sai_thrift_add_ports_to_vlan(vlan_id, thrift_port_list)
    return self.recv_sai_thrift_add_ports_to_vlan()

  def send_sai_thrift_add_ports_to_vlan(self, vlan_id, thrift_port_list):
    self._oprot.writeMessageBegin('sai_thrift_add_ports_to_vlan', TMessageType.CALL, self._seqid)
    args = sai_thrift_add_ports_to_vlan_args()
    args.vlan_id = vlan_id
    args.thrift_port_list = thrift_port_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_add_ports_to_vlan(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_add_ports_to_vlan_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_add_ports_to_vlan failed: unknown result")

  def sai_thrift_remove_ports_from_vlan(self, vlan_id, thrift_port_list):
    """
    Parameters:
     - vlan_id
     - thrift_port_list
    """
    self.send_sai_thrift_remove_ports_from_vlan(vlan_id, thrift_port_list)
    return self.recv_sai_thrift_remove_ports_from_vlan()

  def send_sai_thrift_remove_ports_from_vlan(self, vlan_id, thrift_port_list):
    self._oprot.writeMessageBegin('sai_thrift_remove_ports_from_vlan', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_ports_from_vlan_args()
    args.vlan_id = vlan_id
    args.thrift_port_list = thrift_port_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_ports_from_vlan(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_ports_from_vlan_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_ports_from_vlan failed: unknown result")

  def sai_thrift_get_vlan_stats(self, vlan_id, counter_ids, number_of_counters):
    """
    Parameters:
     - vlan_id
     - counter_ids
     - number_of_counters
    """
    self.send_sai_thrift_get_vlan_stats(vlan_id, counter_ids, number_of_counters)
    return self.recv_sai_thrift_get_vlan_stats()

  def send_sai_thrift_get_vlan_stats(self, vlan_id, counter_ids, number_of_counters):
    self._oprot.writeMessageBegin('sai_thrift_get_vlan_stats', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_vlan_stats_args()
    args.vlan_id = vlan_id
    args.counter_ids = counter_ids
    args.number_of_counters = number_of_counters
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_vlan_stats(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_vlan_stats_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_vlan_stats failed: unknown result")

  def sai_thrift_create_virtual_router(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_virtual_router(thrift_attr_list)
    return self.recv_sai_thrift_create_virtual_router()

  def send_sai_thrift_create_virtual_router(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_virtual_router', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_virtual_router_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_virtual_router(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_virtual_router_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_virtual_router failed: unknown result")

  def sai_thrift_remove_virtual_router(self, vr_id):
    """
    Parameters:
     - vr_id
    """
    self.send_sai_thrift_remove_virtual_router(vr_id)
    return self.recv_sai_thrift_remove_virtual_router()

  def send_sai_thrift_remove_virtual_router(self, vr_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_virtual_router', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_virtual_router_args()
    args.vr_id = vr_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_virtual_router(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_virtual_router_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_virtual_router failed: unknown result")

  def sai_thrift_create_route(self, thrift_unicast_route_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_unicast_route_entry
     - thrift_attr_list
    """
    self.send_sai_thrift_create_route(thrift_unicast_route_entry, thrift_attr_list)
    return self.recv_sai_thrift_create_route()

  def send_sai_thrift_create_route(self, thrift_unicast_route_entry, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_route', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_route_args()
    args.thrift_unicast_route_entry = thrift_unicast_route_entry
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_route(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_route_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_route failed: unknown result")

  def sai_thrift_remove_route(self, thrift_unicast_route_entry):
    """
    Parameters:
     - thrift_unicast_route_entry
    """
    self.send_sai_thrift_remove_route(thrift_unicast_route_entry)
    return self.recv_sai_thrift_remove_route()

  def send_sai_thrift_remove_route(self, thrift_unicast_route_entry):
    self._oprot.writeMessageBegin('sai_thrift_remove_route', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_route_args()
    args.thrift_unicast_route_entry = thrift_unicast_route_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_route(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_route_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_route failed: unknown result")

  def sai_thrift_create_router_interface(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_router_interface(thrift_attr_list)
    return self.recv_sai_thrift_create_router_interface()

  def send_sai_thrift_create_router_interface(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_router_interface', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_router_interface_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_router_interface(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_router_interface_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_router_interface failed: unknown result")

  def sai_thrift_remove_router_interface(self, rif_id):
    """
    Parameters:
     - rif_id
    """
    self.send_sai_thrift_remove_router_interface(rif_id)
    return self.recv_sai_thrift_remove_router_interface()

  def send_sai_thrift_remove_router_interface(self, rif_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_router_interface', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_router_interface_args()
    args.rif_id = rif_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_router_interface(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_router_interface_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_router_interface failed: unknown result")

  def sai_thrift_create_next_hop(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_next_hop(thrift_attr_list)
    return self.recv_sai_thrift_create_next_hop()

  def send_sai_thrift_create_next_hop(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_next_hop', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_next_hop_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_next_hop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_next_hop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_next_hop failed: unknown result")

  def sai_thrift_remove_next_hop(self, next_hop_id):
    """
    Parameters:
     - next_hop_id
    """
    self.send_sai_thrift_remove_next_hop(next_hop_id)
    return self.recv_sai_thrift_remove_next_hop()

  def send_sai_thrift_remove_next_hop(self, next_hop_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_next_hop', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_next_hop_args()
    args.next_hop_id = next_hop_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_next_hop(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_next_hop_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_next_hop failed: unknown result")

  def sai_thrift_create_next_hop_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_next_hop_group(thrift_attr_list)
    return self.recv_sai_thrift_create_next_hop_group()

  def send_sai_thrift_create_next_hop_group(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_next_hop_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_next_hop_group_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_next_hop_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_next_hop_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_next_hop_group failed: unknown result")

  def sai_thrift_remove_next_hop_group(self, next_hop_group_id):
    """
    Parameters:
     - next_hop_group_id
    """
    self.send_sai_thrift_remove_next_hop_group(next_hop_group_id)
    return self.recv_sai_thrift_remove_next_hop_group()

  def send_sai_thrift_remove_next_hop_group(self, next_hop_group_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_next_hop_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_next_hop_group_args()
    args.next_hop_group_id = next_hop_group_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_next_hop_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_next_hop_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_next_hop_group failed: unknown result")

  def sai_thrift_add_next_hop_to_group(self, next_hop_group_id, thrift_nexthops):
    """
    Parameters:
     - next_hop_group_id
     - thrift_nexthops
    """
    self.send_sai_thrift_add_next_hop_to_group(next_hop_group_id, thrift_nexthops)
    return self.recv_sai_thrift_add_next_hop_to_group()

  def send_sai_thrift_add_next_hop_to_group(self, next_hop_group_id, thrift_nexthops):
    self._oprot.writeMessageBegin('sai_thrift_add_next_hop_to_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_add_next_hop_to_group_args()
    args.next_hop_group_id = next_hop_group_id
    args.thrift_nexthops = thrift_nexthops
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_add_next_hop_to_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_add_next_hop_to_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_add_next_hop_to_group failed: unknown result")

  def sai_thrift_remove_next_hop_from_group(self, next_hop_group_id, thrift_nexthops):
    """
    Parameters:
     - next_hop_group_id
     - thrift_nexthops
    """
    self.send_sai_thrift_remove_next_hop_from_group(next_hop_group_id, thrift_nexthops)
    return self.recv_sai_thrift_remove_next_hop_from_group()

  def send_sai_thrift_remove_next_hop_from_group(self, next_hop_group_id, thrift_nexthops):
    self._oprot.writeMessageBegin('sai_thrift_remove_next_hop_from_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_next_hop_from_group_args()
    args.next_hop_group_id = next_hop_group_id
    args.thrift_nexthops = thrift_nexthops
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_next_hop_from_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_next_hop_from_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_next_hop_from_group failed: unknown result")

  def sai_thrift_create_lag(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_lag(thrift_attr_list)
    return self.recv_sai_thrift_create_lag()

  def send_sai_thrift_create_lag(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_lag', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_lag_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_lag(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_lag_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_lag failed: unknown result")

  def sai_thrift_remove_lag(self, lag_id):
    """
    Parameters:
     - lag_id
    """
    self.send_sai_thrift_remove_lag(lag_id)
    return self.recv_sai_thrift_remove_lag()

  def send_sai_thrift_remove_lag(self, lag_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_lag', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_lag_args()
    args.lag_id = lag_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_lag(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_lag_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_lag failed: unknown result")

  def sai_thrift_create_lag_member(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_lag_member(thrift_attr_list)
    return self.recv_sai_thrift_create_lag_member()

  def send_sai_thrift_create_lag_member(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_lag_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_lag_member_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_lag_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_lag_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_lag_member failed: unknown result")

  def sai_thrift_remove_lag_member(self, lag_member_id):
    """
    Parameters:
     - lag_member_id
    """
    self.send_sai_thrift_remove_lag_member(lag_member_id)
    return self.recv_sai_thrift_remove_lag_member()

  def send_sai_thrift_remove_lag_member(self, lag_member_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_lag_member', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_lag_member_args()
    args.lag_member_id = lag_member_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_lag_member(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_lag_member_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_lag_member failed: unknown result")

  def sai_thrift_create_stp_entry(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_stp_entry(thrift_attr_list)
    return self.recv_sai_thrift_create_stp_entry()

  def send_sai_thrift_create_stp_entry(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_stp_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_stp_entry_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_stp_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_stp_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_stp_entry failed: unknown result")

  def sai_thrift_remove_stp_entry(self, stp_id):
    """
    Parameters:
     - stp_id
    """
    self.send_sai_thrift_remove_stp_entry(stp_id)
    return self.recv_sai_thrift_remove_stp_entry()

  def send_sai_thrift_remove_stp_entry(self, stp_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_stp_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_stp_entry_args()
    args.stp_id = stp_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_stp_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_stp_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_stp_entry failed: unknown result")

  def sai_thrift_set_stp_port_state(self, stp_id, port_id, stp_port_state):
    """
    Parameters:
     - stp_id
     - port_id
     - stp_port_state
    """
    self.send_sai_thrift_set_stp_port_state(stp_id, port_id, stp_port_state)
    return self.recv_sai_thrift_set_stp_port_state()

  def send_sai_thrift_set_stp_port_state(self, stp_id, port_id, stp_port_state):
    self._oprot.writeMessageBegin('sai_thrift_set_stp_port_state', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_stp_port_state_args()
    args.stp_id = stp_id
    args.port_id = port_id
    args.stp_port_state = stp_port_state
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_stp_port_state(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_stp_port_state_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_stp_port_state failed: unknown result")

  def sai_thrift_get_stp_port_state(self, stp_id, port_id):
    """
    Parameters:
     - stp_id
     - port_id
    """
    self.send_sai_thrift_get_stp_port_state(stp_id, port_id)
    return self.recv_sai_thrift_get_stp_port_state()

  def send_sai_thrift_get_stp_port_state(self, stp_id, port_id):
    self._oprot.writeMessageBegin('sai_thrift_get_stp_port_state', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_stp_port_state_args()
    args.stp_id = stp_id
    args.port_id = port_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_stp_port_state(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_stp_port_state_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_stp_port_state failed: unknown result")

  def sai_thrift_create_neighbor_entry(self, thrift_neighbor_entry, thrift_attr_list):
    """
    Parameters:
     - thrift_neighbor_entry
     - thrift_attr_list
    """
    self.send_sai_thrift_create_neighbor_entry(thrift_neighbor_entry, thrift_attr_list)
    return self.recv_sai_thrift_create_neighbor_entry()

  def send_sai_thrift_create_neighbor_entry(self, thrift_neighbor_entry, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_neighbor_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_neighbor_entry_args()
    args.thrift_neighbor_entry = thrift_neighbor_entry
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_neighbor_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_neighbor_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_neighbor_entry failed: unknown result")

  def sai_thrift_remove_neighbor_entry(self, thrift_neighbor_entry):
    """
    Parameters:
     - thrift_neighbor_entry
    """
    self.send_sai_thrift_remove_neighbor_entry(thrift_neighbor_entry)
    return self.recv_sai_thrift_remove_neighbor_entry()

  def send_sai_thrift_remove_neighbor_entry(self, thrift_neighbor_entry):
    self._oprot.writeMessageBegin('sai_thrift_remove_neighbor_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_neighbor_entry_args()
    args.thrift_neighbor_entry = thrift_neighbor_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_neighbor_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_neighbor_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_neighbor_entry failed: unknown result")

  def sai_thrift_get_switch_attribute(self):
    self.send_sai_thrift_get_switch_attribute()
    return self.recv_sai_thrift_get_switch_attribute()

  def send_sai_thrift_get_switch_attribute(self):
    self._oprot.writeMessageBegin('sai_thrift_get_switch_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_switch_attribute_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_switch_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_switch_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_switch_attribute failed: unknown result")

  def sai_thrift_set_switch_attribute(self, attribute):
    """
    Parameters:
     - attribute
    """
    self.send_sai_thrift_set_switch_attribute(attribute)
    return self.recv_sai_thrift_set_switch_attribute()

  def send_sai_thrift_set_switch_attribute(self, attribute):
    self._oprot.writeMessageBegin('sai_thrift_set_switch_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_switch_attribute_args()
    args.attribute = attribute
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_switch_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_switch_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_switch_attribute failed: unknown result")

  def sai_thrift_create_hostif(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_hostif(thrift_attr_list)
    return self.recv_sai_thrift_create_hostif()

  def send_sai_thrift_create_hostif(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_hostif', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_hostif_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_hostif(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_hostif_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif failed: unknown result")

  def sai_thrift_remove_hostif(self, hif_id):
    """
    Parameters:
     - hif_id
    """
    self.send_sai_thrift_remove_hostif(hif_id)
    return self.recv_sai_thrift_remove_hostif()

  def send_sai_thrift_remove_hostif(self, hif_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_hostif', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_hostif_args()
    args.hif_id = hif_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_hostif(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_hostif_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_hostif failed: unknown result")

  def sai_thrift_create_hostif_trap_group(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_hostif_trap_group(thrift_attr_list)
    return self.recv_sai_thrift_create_hostif_trap_group()

  def send_sai_thrift_create_hostif_trap_group(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_hostif_trap_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_hostif_trap_group_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_hostif_trap_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_hostif_trap_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif_trap_group failed: unknown result")

  def sai_thrift_remove_hostif_trap_group(self, trap_group_id):
    """
    Parameters:
     - trap_group_id
    """
    self.send_sai_thrift_remove_hostif_trap_group(trap_group_id)
    return self.recv_sai_thrift_remove_hostif_trap_group()

  def send_sai_thrift_remove_hostif_trap_group(self, trap_group_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_hostif_trap_group', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_hostif_trap_group_args()
    args.trap_group_id = trap_group_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_hostif_trap_group(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_hostif_trap_group_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_hostif_trap_group failed: unknown result")

  def sai_thrift_create_hostif_trap(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_hostif_trap(thrift_attr_list)
    return self.recv_sai_thrift_create_hostif_trap()

  def send_sai_thrift_create_hostif_trap(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_hostif_trap', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_hostif_trap_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_hostif_trap(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_hostif_trap_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_hostif_trap failed: unknown result")

  def sai_thrift_remove_hostif_trap(self, trap_id):
    """
    Parameters:
     - trap_id
    """
    self.send_sai_thrift_remove_hostif_trap(trap_id)
    return self.recv_sai_thrift_remove_hostif_trap()

  def send_sai_thrift_remove_hostif_trap(self, trap_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_hostif_trap', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_hostif_trap_args()
    args.trap_id = trap_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_hostif_trap(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_hostif_trap_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_hostif_trap failed: unknown result")

  def sai_thrift_set_hostif_trap(self, trap_id, thrift_attr):
    """
    Parameters:
     - trap_id
     - thrift_attr
    """
    self.send_sai_thrift_set_hostif_trap(trap_id, thrift_attr)
    return self.recv_sai_thrift_set_hostif_trap()

  def send_sai_thrift_set_hostif_trap(self, trap_id, thrift_attr):
    self._oprot.writeMessageBegin('sai_thrift_set_hostif_trap', TMessageType.CALL, self._seqid)
    args = sai_thrift_set_hostif_trap_args()
    args.trap_id = trap_id
    args.thrift_attr = thrift_attr
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_set_hostif_trap(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_set_hostif_trap_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_set_hostif_trap failed: unknown result")

  def sai_thrift_create_acl_table(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_acl_table(thrift_attr_list)
    return self.recv_sai_thrift_create_acl_table()

  def send_sai_thrift_create_acl_table(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_acl_table', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_acl_table_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_acl_table(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_acl_table_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_table failed: unknown result")

  def sai_thrift_delete_acl_table(self, acl_table_id):
    """
    Parameters:
     - acl_table_id
    """
    self.send_sai_thrift_delete_acl_table(acl_table_id)
    return self.recv_sai_thrift_delete_acl_table()

  def send_sai_thrift_delete_acl_table(self, acl_table_id):
    self._oprot.writeMessageBegin('sai_thrift_delete_acl_table', TMessageType.CALL, self._seqid)
    args = sai_thrift_delete_acl_table_args()
    args.acl_table_id = acl_table_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_delete_acl_table(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_delete_acl_table_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_delete_acl_table failed: unknown result")

  def sai_thrift_create_acl_entry(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_acl_entry(thrift_attr_list)
    return self.recv_sai_thrift_create_acl_entry()

  def send_sai_thrift_create_acl_entry(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_acl_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_acl_entry_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_acl_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_acl_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_entry failed: unknown result")

  def sai_thrift_delete_acl_entry(self, acl_entry):
    """
    Parameters:
     - acl_entry
    """
    self.send_sai_thrift_delete_acl_entry(acl_entry)
    return self.recv_sai_thrift_delete_acl_entry()

  def send_sai_thrift_delete_acl_entry(self, acl_entry):
    self._oprot.writeMessageBegin('sai_thrift_delete_acl_entry', TMessageType.CALL, self._seqid)
    args = sai_thrift_delete_acl_entry_args()
    args.acl_entry = acl_entry
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_delete_acl_entry(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_delete_acl_entry_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_delete_acl_entry failed: unknown result")

  def sai_thrift_create_acl_counter(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_acl_counter(thrift_attr_list)
    return self.recv_sai_thrift_create_acl_counter()

  def send_sai_thrift_create_acl_counter(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_acl_counter', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_acl_counter_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_acl_counter(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_acl_counter_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_acl_counter failed: unknown result")

  def sai_thrift_delete_acl_counter(self, acl_counter_id):
    """
    Parameters:
     - acl_counter_id
    """
    self.send_sai_thrift_delete_acl_counter(acl_counter_id)
    return self.recv_sai_thrift_delete_acl_counter()

  def send_sai_thrift_delete_acl_counter(self, acl_counter_id):
    self._oprot.writeMessageBegin('sai_thrift_delete_acl_counter', TMessageType.CALL, self._seqid)
    args = sai_thrift_delete_acl_counter_args()
    args.acl_counter_id = acl_counter_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_delete_acl_counter(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_delete_acl_counter_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_delete_acl_counter failed: unknown result")

  def sai_thrift_get_acl_counter_attribute(self, acl_counter_id, thrift_attr_ids):
    """
    Parameters:
     - acl_counter_id
     - thrift_attr_ids
    """
    self.send_sai_thrift_get_acl_counter_attribute(acl_counter_id, thrift_attr_ids)
    return self.recv_sai_thrift_get_acl_counter_attribute()

  def send_sai_thrift_get_acl_counter_attribute(self, acl_counter_id, thrift_attr_ids):
    self._oprot.writeMessageBegin('sai_thrift_get_acl_counter_attribute', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_acl_counter_attribute_args()
    args.acl_counter_id = acl_counter_id
    args.thrift_attr_ids = thrift_attr_ids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_acl_counter_attribute(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_acl_counter_attribute_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_acl_counter_attribute failed: unknown result")

  def sai_thrift_create_mirror_session(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_mirror_session(thrift_attr_list)
    return self.recv_sai_thrift_create_mirror_session()

  def send_sai_thrift_create_mirror_session(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_mirror_session', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_mirror_session_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_mirror_session(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_mirror_session_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_mirror_session failed: unknown result")

  def sai_thrift_remove_mirror_session(self, session_id):
    """
    Parameters:
     - session_id
    """
    self.send_sai_thrift_remove_mirror_session(session_id)
    return self.recv_sai_thrift_remove_mirror_session()

  def send_sai_thrift_remove_mirror_session(self, session_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_mirror_session', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_mirror_session_args()
    args.session_id = session_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_mirror_session(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_mirror_session_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_mirror_session failed: unknown result")

  def sai_thrift_create_policer(self, thrift_attr_list):
    """
    Parameters:
     - thrift_attr_list
    """
    self.send_sai_thrift_create_policer(thrift_attr_list)
    return self.recv_sai_thrift_create_policer()

  def send_sai_thrift_create_policer(self, thrift_attr_list):
    self._oprot.writeMessageBegin('sai_thrift_create_policer', TMessageType.CALL, self._seqid)
    args = sai_thrift_create_policer_args()
    args.thrift_attr_list = thrift_attr_list
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_create_policer(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_create_policer_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_create_policer failed: unknown result")

  def sai_thrift_remove_policer(self, policer_id):
    """
    Parameters:
     - policer_id
    """
    self.send_sai_thrift_remove_policer(policer_id)
    return self.recv_sai_thrift_remove_policer()

  def send_sai_thrift_remove_policer(self, policer_id):
    self._oprot.writeMessageBegin('sai_thrift_remove_policer', TMessageType.CALL, self._seqid)
    args = sai_thrift_remove_policer_args()
    args.policer_id = policer_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_remove_policer(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_remove_policer_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_remove_policer failed: unknown result")

  def sai_thrift_get_policer_stats(self, policer_id, counter_ids):
    """
    Parameters:
     - policer_id
     - counter_ids
    """
    self.send_sai_thrift_get_policer_stats(policer_id, counter_ids)
    return self.recv_sai_thrift_get_policer_stats()

  def send_sai_thrift_get_policer_stats(self, policer_id, counter_ids):
    self._oprot.writeMessageBegin('sai_thrift_get_policer_stats', TMessageType.CALL, self._seqid)
    args = sai_thrift_get_policer_stats_args()
    args.policer_id = policer_id
    args.counter_ids = counter_ids
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sai_thrift_get_policer_stats(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = sai_thrift_get_policer_stats_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sai_thrift_get_policer_stats failed: unknown result")


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["sai_thrift_set_port_attribute"] = Processor.process_sai_thrift_set_port_attribute
    self._processMap["sai_thrift_create_fdb_entry"] = Processor.process_sai_thrift_create_fdb_entry
    self._processMap["sai_thrift_delete_fdb_entry"] = Processor.process_sai_thrift_delete_fdb_entry
    self._processMap["sai_thrift_flush_fdb_entries"] = Processor.process_sai_thrift_flush_fdb_entries
    self._processMap["sai_thrift_create_vlan"] = Processor.process_sai_thrift_create_vlan
    self._processMap["sai_thrift_delete_vlan"] = Processor.process_sai_thrift_delete_vlan
    self._processMap["sai_thrift_add_ports_to_vlan"] = Processor.process_sai_thrift_add_ports_to_vlan
    self._processMap["sai_thrift_remove_ports_from_vlan"] = Processor.process_sai_thrift_remove_ports_from_vlan
    self._processMap["sai_thrift_get_vlan_stats"] = Processor.process_sai_thrift_get_vlan_stats
    self._processMap["sai_thrift_create_virtual_router"] = Processor.process_sai_thrift_create_virtual_router
    self._processMap["sai_thrift_remove_virtual_router"] = Processor.process_sai_thrift_remove_virtual_router
    self._processMap["sai_thrift_create_route"] = Processor.process_sai_thrift_create_route
    self._processMap["sai_thrift_remove_route"] = Processor.process_sai_thrift_remove_route
    self._processMap["sai_thrift_create_router_interface"] = Processor.process_sai_thrift_create_router_interface
    self._processMap["sai_thrift_remove_router_interface"] = Processor.process_sai_thrift_remove_router_interface
    self._processMap["sai_thrift_create_next_hop"] = Processor.process_sai_thrift_create_next_hop
    self._processMap["sai_thrift_remove_next_hop"] = Processor.process_sai_thrift_remove_next_hop
    self._processMap["sai_thrift_create_next_hop_group"] = Processor.process_sai_thrift_create_next_hop_group
    self._processMap["sai_thrift_remove_next_hop_group"] = Processor.process_sai_thrift_remove_next_hop_group
    self._processMap["sai_thrift_add_next_hop_to_group"] = Processor.process_sai_thrift_add_next_hop_to_group
    self._processMap["sai_thrift_remove_next_hop_from_group"] = Processor.process_sai_thrift_remove_next_hop_from_group
    self._processMap["sai_thrift_create_lag"] = Processor.process_sai_thrift_create_lag
    self._processMap["sai_thrift_remove_lag"] = Processor.process_sai_thrift_remove_lag
    self._processMap["sai_thrift_create_lag_member"] = Processor.process_sai_thrift_create_lag_member
    self._processMap["sai_thrift_remove_lag_member"] = Processor.process_sai_thrift_remove_lag_member
    self._processMap["sai_thrift_create_stp_entry"] = Processor.process_sai_thrift_create_stp_entry
    self._processMap["sai_thrift_remove_stp_entry"] = Processor.process_sai_thrift_remove_stp_entry
    self._processMap["sai_thrift_set_stp_port_state"] = Processor.process_sai_thrift_set_stp_port_state
    self._processMap["sai_thrift_get_stp_port_state"] = Processor.process_sai_thrift_get_stp_port_state
    self._processMap["sai_thrift_create_neighbor_entry"] = Processor.process_sai_thrift_create_neighbor_entry
    self._processMap["sai_thrift_remove_neighbor_entry"] = Processor.process_sai_thrift_remove_neighbor_entry
    self._processMap["sai_thrift_get_switch_attribute"] = Processor.process_sai_thrift_get_switch_attribute
    self._processMap["sai_thrift_set_switch_attribute"] = Processor.process_sai_thrift_set_switch_attribute
    self._processMap["sai_thrift_create_hostif"] = Processor.process_sai_thrift_create_hostif
    self._processMap["sai_thrift_remove_hostif"] = Processor.process_sai_thrift_remove_hostif
    self._processMap["sai_thrift_create_hostif_trap_group"] = Processor.process_sai_thrift_create_hostif_trap_group
    self._processMap["sai_thrift_remove_hostif_trap_group"] = Processor.process_sai_thrift_remove_hostif_trap_group
    self._processMap["sai_thrift_create_hostif_trap"] = Processor.process_sai_thrift_create_hostif_trap
    self._processMap["sai_thrift_remove_hostif_trap"] = Processor.process_sai_thrift_remove_hostif_trap
    self._processMap["sai_thrift_set_hostif_trap"] = Processor.process_sai_thrift_set_hostif_trap
    self._processMap["sai_thrift_create_acl_table"] = Processor.process_sai_thrift_create_acl_table
    self._processMap["sai_thrift_delete_acl_table"] = Processor.process_sai_thrift_delete_acl_table
    self._processMap["sai_thrift_create_acl_entry"] = Processor.process_sai_thrift_create_acl_entry
    self._processMap["sai_thrift_delete_acl_entry"] = Processor.process_sai_thrift_delete_acl_entry
    self._processMap["sai_thrift_create_acl_counter"] = Processor.process_sai_thrift_create_acl_counter
    self._processMap["sai_thrift_delete_acl_counter"] = Processor.process_sai_thrift_delete_acl_counter
    self._processMap["sai_thrift_get_acl_counter_attribute"] = Processor.process_sai_thrift_get_acl_counter_attribute
    self._processMap["sai_thrift_create_mirror_session"] = Processor.process_sai_thrift_create_mirror_session
    self._processMap["sai_thrift_remove_mirror_session"] = Processor.process_sai_thrift_remove_mirror_session
    self._processMap["sai_thrift_create_policer"] = Processor.process_sai_thrift_create_policer
    self._processMap["sai_thrift_remove_policer"] = Processor.process_sai_thrift_remove_policer
    self._processMap["sai_thrift_get_policer_stats"] = Processor.process_sai_thrift_get_policer_stats

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_sai_thrift_set_port_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_port_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_port_attribute_result()
    try:
      result.success = self._handler.sai_thrift_set_port_attribute(args.port_id, args.thrift_attr)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_set_port_attribute", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_fdb_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_fdb_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_fdb_entry_result()
    try:
      result.success = self._handler.sai_thrift_create_fdb_entry(args.thrift_fdb_entry, args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_fdb_entry", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_delete_fdb_entry(self, seqid, iprot, oprot):
    args = sai_thrift_delete_fdb_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_delete_fdb_entry_result()
    try:
      result.success = self._handler.sai_thrift_delete_fdb_entry(args.thrift_fdb_entry)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_delete_fdb_entry", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_flush_fdb_entries(self, seqid, iprot, oprot):
    args = sai_thrift_flush_fdb_entries_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_flush_fdb_entries_result()
    try:
      result.success = self._handler.sai_thrift_flush_fdb_entries(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_flush_fdb_entries", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_vlan(self, seqid, iprot, oprot):
    args = sai_thrift_create_vlan_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_vlan_result()
    try:
      result.success = self._handler.sai_thrift_create_vlan(args.vlan_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_vlan", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_delete_vlan(self, seqid, iprot, oprot):
    args = sai_thrift_delete_vlan_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_delete_vlan_result()
    try:
      result.success = self._handler.sai_thrift_delete_vlan(args.vlan_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_delete_vlan", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_add_ports_to_vlan(self, seqid, iprot, oprot):
    args = sai_thrift_add_ports_to_vlan_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_add_ports_to_vlan_result()
    try:
      result.success = self._handler.sai_thrift_add_ports_to_vlan(args.vlan_id, args.thrift_port_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_add_ports_to_vlan", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_ports_from_vlan(self, seqid, iprot, oprot):
    args = sai_thrift_remove_ports_from_vlan_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_ports_from_vlan_result()
    try:
      result.success = self._handler.sai_thrift_remove_ports_from_vlan(args.vlan_id, args.thrift_port_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_ports_from_vlan", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_vlan_stats(self, seqid, iprot, oprot):
    args = sai_thrift_get_vlan_stats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_vlan_stats_result()
    try:
      result.success = self._handler.sai_thrift_get_vlan_stats(args.vlan_id, args.counter_ids, args.number_of_counters)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_get_vlan_stats", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_virtual_router(self, seqid, iprot, oprot):
    args = sai_thrift_create_virtual_router_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_virtual_router_result()
    try:
      result.success = self._handler.sai_thrift_create_virtual_router(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_virtual_router", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_virtual_router(self, seqid, iprot, oprot):
    args = sai_thrift_remove_virtual_router_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_virtual_router_result()
    try:
      result.success = self._handler.sai_thrift_remove_virtual_router(args.vr_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_virtual_router", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_route(self, seqid, iprot, oprot):
    args = sai_thrift_create_route_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_route_result()
    try:
      result.success = self._handler.sai_thrift_create_route(args.thrift_unicast_route_entry, args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_route", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_route(self, seqid, iprot, oprot):
    args = sai_thrift_remove_route_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_route_result()
    try:
      result.success = self._handler.sai_thrift_remove_route(args.thrift_unicast_route_entry)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_route", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_router_interface(self, seqid, iprot, oprot):
    args = sai_thrift_create_router_interface_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_router_interface_result()
    try:
      result.success = self._handler.sai_thrift_create_router_interface(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_router_interface", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_router_interface(self, seqid, iprot, oprot):
    args = sai_thrift_remove_router_interface_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_router_interface_result()
    try:
      result.success = self._handler.sai_thrift_remove_router_interface(args.rif_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_router_interface", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_next_hop(self, seqid, iprot, oprot):
    args = sai_thrift_create_next_hop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_next_hop_result()
    try:
      result.success = self._handler.sai_thrift_create_next_hop(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_next_hop", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_next_hop(self, seqid, iprot, oprot):
    args = sai_thrift_remove_next_hop_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_next_hop_result()
    try:
      result.success = self._handler.sai_thrift_remove_next_hop(args.next_hop_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_next_hop", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_next_hop_group(self, seqid, iprot, oprot):
    args = sai_thrift_create_next_hop_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_next_hop_group_result()
    try:
      result.success = self._handler.sai_thrift_create_next_hop_group(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_next_hop_group", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_next_hop_group(self, seqid, iprot, oprot):
    args = sai_thrift_remove_next_hop_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_next_hop_group_result()
    try:
      result.success = self._handler.sai_thrift_remove_next_hop_group(args.next_hop_group_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_next_hop_group", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_add_next_hop_to_group(self, seqid, iprot, oprot):
    args = sai_thrift_add_next_hop_to_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_add_next_hop_to_group_result()
    try:
      result.success = self._handler.sai_thrift_add_next_hop_to_group(args.next_hop_group_id, args.thrift_nexthops)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_add_next_hop_to_group", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_next_hop_from_group(self, seqid, iprot, oprot):
    args = sai_thrift_remove_next_hop_from_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_next_hop_from_group_result()
    try:
      result.success = self._handler.sai_thrift_remove_next_hop_from_group(args.next_hop_group_id, args.thrift_nexthops)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_next_hop_from_group", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_lag(self, seqid, iprot, oprot):
    args = sai_thrift_create_lag_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_lag_result()
    try:
      result.success = self._handler.sai_thrift_create_lag(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_lag", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_lag(self, seqid, iprot, oprot):
    args = sai_thrift_remove_lag_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_lag_result()
    try:
      result.success = self._handler.sai_thrift_remove_lag(args.lag_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_lag", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_lag_member(self, seqid, iprot, oprot):
    args = sai_thrift_create_lag_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_lag_member_result()
    try:
      result.success = self._handler.sai_thrift_create_lag_member(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_lag_member", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_lag_member(self, seqid, iprot, oprot):
    args = sai_thrift_remove_lag_member_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_lag_member_result()
    try:
      result.success = self._handler.sai_thrift_remove_lag_member(args.lag_member_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_lag_member", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_stp_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_stp_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_stp_entry_result()
    try:
      result.success = self._handler.sai_thrift_create_stp_entry(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_stp_entry", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_stp_entry(self, seqid, iprot, oprot):
    args = sai_thrift_remove_stp_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_stp_entry_result()
    try:
      result.success = self._handler.sai_thrift_remove_stp_entry(args.stp_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_stp_entry", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_stp_port_state(self, seqid, iprot, oprot):
    args = sai_thrift_set_stp_port_state_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_stp_port_state_result()
    try:
      result.success = self._handler.sai_thrift_set_stp_port_state(args.stp_id, args.port_id, args.stp_port_state)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_set_stp_port_state", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_stp_port_state(self, seqid, iprot, oprot):
    args = sai_thrift_get_stp_port_state_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_stp_port_state_result()
    try:
      result.success = self._handler.sai_thrift_get_stp_port_state(args.stp_id, args.port_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_get_stp_port_state", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_neighbor_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_neighbor_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_neighbor_entry_result()
    try:
      result.success = self._handler.sai_thrift_create_neighbor_entry(args.thrift_neighbor_entry, args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_neighbor_entry", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_neighbor_entry(self, seqid, iprot, oprot):
    args = sai_thrift_remove_neighbor_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_neighbor_entry_result()
    try:
      result.success = self._handler.sai_thrift_remove_neighbor_entry(args.thrift_neighbor_entry)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_neighbor_entry", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_switch_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_switch_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_switch_attribute_result()
    try:
      result.success = self._handler.sai_thrift_get_switch_attribute()
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_get_switch_attribute", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_switch_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_set_switch_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_switch_attribute_result()
    try:
      result.success = self._handler.sai_thrift_set_switch_attribute(args.attribute)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_set_switch_attribute", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_hostif(self, seqid, iprot, oprot):
    args = sai_thrift_create_hostif_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_hostif_result()
    try:
      result.success = self._handler.sai_thrift_create_hostif(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_hostif", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_hostif(self, seqid, iprot, oprot):
    args = sai_thrift_remove_hostif_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_hostif_result()
    try:
      result.success = self._handler.sai_thrift_remove_hostif(args.hif_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_hostif", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_hostif_trap_group(self, seqid, iprot, oprot):
    args = sai_thrift_create_hostif_trap_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_hostif_trap_group_result()
    try:
      result.success = self._handler.sai_thrift_create_hostif_trap_group(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_hostif_trap_group", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_hostif_trap_group(self, seqid, iprot, oprot):
    args = sai_thrift_remove_hostif_trap_group_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_hostif_trap_group_result()
    try:
      result.success = self._handler.sai_thrift_remove_hostif_trap_group(args.trap_group_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_hostif_trap_group", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_hostif_trap(self, seqid, iprot, oprot):
    args = sai_thrift_create_hostif_trap_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_hostif_trap_result()
    try:
      result.success = self._handler.sai_thrift_create_hostif_trap(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_hostif_trap", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_hostif_trap(self, seqid, iprot, oprot):
    args = sai_thrift_remove_hostif_trap_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_hostif_trap_result()
    try:
      result.success = self._handler.sai_thrift_remove_hostif_trap(args.trap_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_hostif_trap", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_set_hostif_trap(self, seqid, iprot, oprot):
    args = sai_thrift_set_hostif_trap_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_set_hostif_trap_result()
    try:
      result.success = self._handler.sai_thrift_set_hostif_trap(args.trap_id, args.thrift_attr)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_set_hostif_trap", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_acl_table(self, seqid, iprot, oprot):
    args = sai_thrift_create_acl_table_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_acl_table_result()
    try:
      result.success = self._handler.sai_thrift_create_acl_table(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_acl_table", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_delete_acl_table(self, seqid, iprot, oprot):
    args = sai_thrift_delete_acl_table_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_delete_acl_table_result()
    try:
      result.success = self._handler.sai_thrift_delete_acl_table(args.acl_table_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_delete_acl_table", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_acl_entry(self, seqid, iprot, oprot):
    args = sai_thrift_create_acl_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_acl_entry_result()
    try:
      result.success = self._handler.sai_thrift_create_acl_entry(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_acl_entry", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_delete_acl_entry(self, seqid, iprot, oprot):
    args = sai_thrift_delete_acl_entry_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_delete_acl_entry_result()
    try:
      result.success = self._handler.sai_thrift_delete_acl_entry(args.acl_entry)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_delete_acl_entry", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_acl_counter(self, seqid, iprot, oprot):
    args = sai_thrift_create_acl_counter_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_acl_counter_result()
    try:
      result.success = self._handler.sai_thrift_create_acl_counter(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_acl_counter", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_delete_acl_counter(self, seqid, iprot, oprot):
    args = sai_thrift_delete_acl_counter_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_delete_acl_counter_result()
    try:
      result.success = self._handler.sai_thrift_delete_acl_counter(args.acl_counter_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_delete_acl_counter", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_acl_counter_attribute(self, seqid, iprot, oprot):
    args = sai_thrift_get_acl_counter_attribute_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_acl_counter_attribute_result()
    try:
      result.success = self._handler.sai_thrift_get_acl_counter_attribute(args.acl_counter_id, args.thrift_attr_ids)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_get_acl_counter_attribute", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_mirror_session(self, seqid, iprot, oprot):
    args = sai_thrift_create_mirror_session_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_mirror_session_result()
    try:
      result.success = self._handler.sai_thrift_create_mirror_session(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_mirror_session", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_mirror_session(self, seqid, iprot, oprot):
    args = sai_thrift_remove_mirror_session_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_mirror_session_result()
    try:
      result.success = self._handler.sai_thrift_remove_mirror_session(args.session_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_mirror_session", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_create_policer(self, seqid, iprot, oprot):
    args = sai_thrift_create_policer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_create_policer_result()
    try:
      result.success = self._handler.sai_thrift_create_policer(args.thrift_attr_list)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_create_policer", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_remove_policer(self, seqid, iprot, oprot):
    args = sai_thrift_remove_policer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_remove_policer_result()
    try:
      result.success = self._handler.sai_thrift_remove_policer(args.policer_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_remove_policer", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sai_thrift_get_policer_stats(self, seqid, iprot, oprot):
    args = sai_thrift_get_policer_stats_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sai_thrift_get_policer_stats_result()
    try:
      result.success = self._handler.sai_thrift_get_policer_stats(args.policer_id, args.counter_ids)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("sai_thrift_get_policer_stats", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class sai_thrift_set_port_attribute_args:
  """
  Attributes:
   - port_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'port_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, port_id=None, thrift_attr=None,):
    self.port_id = port_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.port_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_port_attribute_args')
    if self.port_id is not None:
      oprot.writeFieldBegin('port_id', TType.I64, 1)
      oprot.writeI64(self.port_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.port_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_port_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_port_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_fdb_entry_args:
  """
  Attributes:
   - thrift_fdb_entry
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_fdb_entry', (sai_thrift_fdb_entry_t, sai_thrift_fdb_entry_t.thrift_spec), None, ), # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, thrift_fdb_entry=None, thrift_attr_list=None,):
    self.thrift_fdb_entry = thrift_fdb_entry
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_fdb_entry = sai_thrift_fdb_entry_t()
          self.thrift_fdb_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = sai_thrift_attribute_t()
            _elem26.read(iprot)
            self.thrift_attr_list.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_fdb_entry_args')
    if self.thrift_fdb_entry is not None:
      oprot.writeFieldBegin('thrift_fdb_entry', TType.STRUCT, 1)
      self.thrift_fdb_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter27 in self.thrift_attr_list:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_fdb_entry)
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_fdb_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_fdb_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_delete_fdb_entry_args:
  """
  Attributes:
   - thrift_fdb_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_fdb_entry', (sai_thrift_fdb_entry_t, sai_thrift_fdb_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_fdb_entry=None,):
    self.thrift_fdb_entry = thrift_fdb_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_fdb_entry = sai_thrift_fdb_entry_t()
          self.thrift_fdb_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_delete_fdb_entry_args')
    if self.thrift_fdb_entry is not None:
      oprot.writeFieldBegin('thrift_fdb_entry', TType.STRUCT, 1)
      self.thrift_fdb_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_fdb_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_delete_fdb_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_delete_fdb_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_flush_fdb_entries_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = sai_thrift_attribute_t()
            _elem33.read(iprot)
            self.thrift_attr_list.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_flush_fdb_entries_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter34 in self.thrift_attr_list:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_flush_fdb_entries_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_flush_fdb_entries_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_vlan_args:
  """
  Attributes:
   - vlan_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'vlan_id', None, None, ), # 1
  )

  def __init__(self, vlan_id=None,):
    self.vlan_id = vlan_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.vlan_id = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_vlan_args')
    if self.vlan_id is not None:
      oprot.writeFieldBegin('vlan_id', TType.I16, 1)
      oprot.writeI16(self.vlan_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vlan_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_vlan_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_vlan_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_delete_vlan_args:
  """
  Attributes:
   - vlan_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'vlan_id', None, None, ), # 1
  )

  def __init__(self, vlan_id=None,):
    self.vlan_id = vlan_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.vlan_id = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_delete_vlan_args')
    if self.vlan_id is not None:
      oprot.writeFieldBegin('vlan_id', TType.I16, 1)
      oprot.writeI16(self.vlan_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vlan_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_delete_vlan_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_delete_vlan_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_add_ports_to_vlan_args:
  """
  Attributes:
   - vlan_id
   - thrift_port_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'vlan_id', None, None, ), # 1
    (2, TType.LIST, 'thrift_port_list', (TType.STRUCT,(sai_thrift_vlan_port_t, sai_thrift_vlan_port_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, vlan_id=None, thrift_port_list=None,):
    self.vlan_id = vlan_id
    self.thrift_port_list = thrift_port_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.vlan_id = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_port_list = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = sai_thrift_vlan_port_t()
            _elem40.read(iprot)
            self.thrift_port_list.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_add_ports_to_vlan_args')
    if self.vlan_id is not None:
      oprot.writeFieldBegin('vlan_id', TType.I16, 1)
      oprot.writeI16(self.vlan_id)
      oprot.writeFieldEnd()
    if self.thrift_port_list is not None:
      oprot.writeFieldBegin('thrift_port_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_port_list))
      for iter41 in self.thrift_port_list:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vlan_id)
    value = (value * 31) ^ hash(self.thrift_port_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_add_ports_to_vlan_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_add_ports_to_vlan_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_ports_from_vlan_args:
  """
  Attributes:
   - vlan_id
   - thrift_port_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'vlan_id', None, None, ), # 1
    (2, TType.LIST, 'thrift_port_list', (TType.STRUCT,(sai_thrift_vlan_port_t, sai_thrift_vlan_port_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, vlan_id=None, thrift_port_list=None,):
    self.vlan_id = vlan_id
    self.thrift_port_list = thrift_port_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.vlan_id = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_port_list = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = sai_thrift_vlan_port_t()
            _elem47.read(iprot)
            self.thrift_port_list.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_ports_from_vlan_args')
    if self.vlan_id is not None:
      oprot.writeFieldBegin('vlan_id', TType.I16, 1)
      oprot.writeI16(self.vlan_id)
      oprot.writeFieldEnd()
    if self.thrift_port_list is not None:
      oprot.writeFieldBegin('thrift_port_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_port_list))
      for iter48 in self.thrift_port_list:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vlan_id)
    value = (value * 31) ^ hash(self.thrift_port_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_ports_from_vlan_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_ports_from_vlan_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_vlan_stats_args:
  """
  Attributes:
   - vlan_id
   - counter_ids
   - number_of_counters
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'vlan_id', None, None, ), # 1
    (2, TType.LIST, 'counter_ids', (TType.I32,None), None, ), # 2
    (3, TType.I32, 'number_of_counters', None, None, ), # 3
  )

  def __init__(self, vlan_id=None, counter_ids=None, number_of_counters=None,):
    self.vlan_id = vlan_id
    self.counter_ids = counter_ids
    self.number_of_counters = number_of_counters

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.vlan_id = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.counter_ids = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = iprot.readI32()
            self.counter_ids.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.number_of_counters = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_vlan_stats_args')
    if self.vlan_id is not None:
      oprot.writeFieldBegin('vlan_id', TType.I16, 1)
      oprot.writeI16(self.vlan_id)
      oprot.writeFieldEnd()
    if self.counter_ids is not None:
      oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.counter_ids))
      for iter55 in self.counter_ids:
        oprot.writeI32(iter55)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.number_of_counters is not None:
      oprot.writeFieldBegin('number_of_counters', TType.I32, 3)
      oprot.writeI32(self.number_of_counters)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vlan_id)
    value = (value * 31) ^ hash(self.counter_ids)
    value = (value * 31) ^ hash(self.number_of_counters)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_vlan_stats_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = iprot.readI64()
            self.success.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_vlan_stats_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter62 in self.success:
        oprot.writeI64(iter62)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_virtual_router_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = sai_thrift_attribute_t()
            _elem68.read(iprot)
            self.thrift_attr_list.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_virtual_router_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter69 in self.thrift_attr_list:
        iter69.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_virtual_router_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_virtual_router_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_virtual_router_args:
  """
  Attributes:
   - vr_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'vr_id', None, None, ), # 1
  )

  def __init__(self, vr_id=None,):
    self.vr_id = vr_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.vr_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_virtual_router_args')
    if self.vr_id is not None:
      oprot.writeFieldBegin('vr_id', TType.I64, 1)
      oprot.writeI64(self.vr_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vr_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_virtual_router_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_virtual_router_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_route_args:
  """
  Attributes:
   - thrift_unicast_route_entry
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_unicast_route_entry', (sai_thrift_unicast_route_entry_t, sai_thrift_unicast_route_entry_t.thrift_spec), None, ), # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, thrift_unicast_route_entry=None, thrift_attr_list=None,):
    self.thrift_unicast_route_entry = thrift_unicast_route_entry
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_unicast_route_entry = sai_thrift_unicast_route_entry_t()
          self.thrift_unicast_route_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = sai_thrift_attribute_t()
            _elem75.read(iprot)
            self.thrift_attr_list.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_route_args')
    if self.thrift_unicast_route_entry is not None:
      oprot.writeFieldBegin('thrift_unicast_route_entry', TType.STRUCT, 1)
      self.thrift_unicast_route_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter76 in self.thrift_attr_list:
        iter76.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_unicast_route_entry)
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_route_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_route_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_route_args:
  """
  Attributes:
   - thrift_unicast_route_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_unicast_route_entry', (sai_thrift_unicast_route_entry_t, sai_thrift_unicast_route_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_unicast_route_entry=None,):
    self.thrift_unicast_route_entry = thrift_unicast_route_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_unicast_route_entry = sai_thrift_unicast_route_entry_t()
          self.thrift_unicast_route_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_route_args')
    if self.thrift_unicast_route_entry is not None:
      oprot.writeFieldBegin('thrift_unicast_route_entry', TType.STRUCT, 1)
      self.thrift_unicast_route_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_unicast_route_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_route_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_route_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_router_interface_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in xrange(_size77):
            _elem82 = sai_thrift_attribute_t()
            _elem82.read(iprot)
            self.thrift_attr_list.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_router_interface_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter83 in self.thrift_attr_list:
        iter83.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_router_interface_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_router_interface_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_router_interface_args:
  """
  Attributes:
   - rif_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'rif_id', None, None, ), # 1
  )

  def __init__(self, rif_id=None,):
    self.rif_id = rif_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.rif_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_router_interface_args')
    if self.rif_id is not None:
      oprot.writeFieldBegin('rif_id', TType.I64, 1)
      oprot.writeI64(self.rif_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rif_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_router_interface_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_router_interface_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_next_hop_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype87, _size84) = iprot.readListBegin()
          for _i88 in xrange(_size84):
            _elem89 = sai_thrift_attribute_t()
            _elem89.read(iprot)
            self.thrift_attr_list.append(_elem89)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_next_hop_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter90 in self.thrift_attr_list:
        iter90.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_next_hop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_next_hop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_next_hop_args:
  """
  Attributes:
   - next_hop_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'next_hop_id', None, None, ), # 1
  )

  def __init__(self, next_hop_id=None,):
    self.next_hop_id = next_hop_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.next_hop_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_next_hop_args')
    if self.next_hop_id is not None:
      oprot.writeFieldBegin('next_hop_id', TType.I64, 1)
      oprot.writeI64(self.next_hop_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.next_hop_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_next_hop_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_next_hop_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_next_hop_group_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype94, _size91) = iprot.readListBegin()
          for _i95 in xrange(_size91):
            _elem96 = sai_thrift_attribute_t()
            _elem96.read(iprot)
            self.thrift_attr_list.append(_elem96)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_next_hop_group_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter97 in self.thrift_attr_list:
        iter97.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_next_hop_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_next_hop_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_next_hop_group_args:
  """
  Attributes:
   - next_hop_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'next_hop_group_id', None, None, ), # 1
  )

  def __init__(self, next_hop_group_id=None,):
    self.next_hop_group_id = next_hop_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.next_hop_group_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_next_hop_group_args')
    if self.next_hop_group_id is not None:
      oprot.writeFieldBegin('next_hop_group_id', TType.I64, 1)
      oprot.writeI64(self.next_hop_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.next_hop_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_next_hop_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_next_hop_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_add_next_hop_to_group_args:
  """
  Attributes:
   - next_hop_group_id
   - thrift_nexthops
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'next_hop_group_id', None, None, ), # 1
    (2, TType.LIST, 'thrift_nexthops', (TType.I64,None), None, ), # 2
  )

  def __init__(self, next_hop_group_id=None, thrift_nexthops=None,):
    self.next_hop_group_id = next_hop_group_id
    self.thrift_nexthops = thrift_nexthops

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.next_hop_group_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_nexthops = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = iprot.readI64()
            self.thrift_nexthops.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_add_next_hop_to_group_args')
    if self.next_hop_group_id is not None:
      oprot.writeFieldBegin('next_hop_group_id', TType.I64, 1)
      oprot.writeI64(self.next_hop_group_id)
      oprot.writeFieldEnd()
    if self.thrift_nexthops is not None:
      oprot.writeFieldBegin('thrift_nexthops', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.thrift_nexthops))
      for iter104 in self.thrift_nexthops:
        oprot.writeI64(iter104)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.next_hop_group_id)
    value = (value * 31) ^ hash(self.thrift_nexthops)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_add_next_hop_to_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_add_next_hop_to_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_next_hop_from_group_args:
  """
  Attributes:
   - next_hop_group_id
   - thrift_nexthops
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'next_hop_group_id', None, None, ), # 1
    (2, TType.LIST, 'thrift_nexthops', (TType.I64,None), None, ), # 2
  )

  def __init__(self, next_hop_group_id=None, thrift_nexthops=None,):
    self.next_hop_group_id = next_hop_group_id
    self.thrift_nexthops = thrift_nexthops

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.next_hop_group_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_nexthops = []
          (_etype108, _size105) = iprot.readListBegin()
          for _i109 in xrange(_size105):
            _elem110 = iprot.readI64()
            self.thrift_nexthops.append(_elem110)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_next_hop_from_group_args')
    if self.next_hop_group_id is not None:
      oprot.writeFieldBegin('next_hop_group_id', TType.I64, 1)
      oprot.writeI64(self.next_hop_group_id)
      oprot.writeFieldEnd()
    if self.thrift_nexthops is not None:
      oprot.writeFieldBegin('thrift_nexthops', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.thrift_nexthops))
      for iter111 in self.thrift_nexthops:
        oprot.writeI64(iter111)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.next_hop_group_id)
    value = (value * 31) ^ hash(self.thrift_nexthops)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_next_hop_from_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_next_hop_from_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_lag_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype115, _size112) = iprot.readListBegin()
          for _i116 in xrange(_size112):
            _elem117 = sai_thrift_attribute_t()
            _elem117.read(iprot)
            self.thrift_attr_list.append(_elem117)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_lag_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter118 in self.thrift_attr_list:
        iter118.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_lag_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_lag_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_lag_args:
  """
  Attributes:
   - lag_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'lag_id', None, None, ), # 1
  )

  def __init__(self, lag_id=None,):
    self.lag_id = lag_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.lag_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_lag_args')
    if self.lag_id is not None:
      oprot.writeFieldBegin('lag_id', TType.I64, 1)
      oprot.writeI64(self.lag_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.lag_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_lag_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_lag_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_lag_member_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = sai_thrift_attribute_t()
            _elem124.read(iprot)
            self.thrift_attr_list.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_lag_member_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter125 in self.thrift_attr_list:
        iter125.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_lag_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_lag_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_lag_member_args:
  """
  Attributes:
   - lag_member_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'lag_member_id', None, None, ), # 1
  )

  def __init__(self, lag_member_id=None,):
    self.lag_member_id = lag_member_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.lag_member_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_lag_member_args')
    if self.lag_member_id is not None:
      oprot.writeFieldBegin('lag_member_id', TType.I64, 1)
      oprot.writeI64(self.lag_member_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.lag_member_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_lag_member_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_lag_member_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_stp_entry_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype129, _size126) = iprot.readListBegin()
          for _i130 in xrange(_size126):
            _elem131 = sai_thrift_attribute_t()
            _elem131.read(iprot)
            self.thrift_attr_list.append(_elem131)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_stp_entry_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter132 in self.thrift_attr_list:
        iter132.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_stp_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_stp_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_stp_entry_args:
  """
  Attributes:
   - stp_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'stp_id', None, None, ), # 1
  )

  def __init__(self, stp_id=None,):
    self.stp_id = stp_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.stp_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_stp_entry_args')
    if self.stp_id is not None:
      oprot.writeFieldBegin('stp_id', TType.I64, 1)
      oprot.writeI64(self.stp_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stp_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_stp_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_stp_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_stp_port_state_args:
  """
  Attributes:
   - stp_id
   - port_id
   - stp_port_state
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'stp_id', None, None, ), # 1
    (2, TType.I64, 'port_id', None, None, ), # 2
    (3, TType.BYTE, 'stp_port_state', None, None, ), # 3
  )

  def __init__(self, stp_id=None, port_id=None, stp_port_state=None,):
    self.stp_id = stp_id
    self.port_id = port_id
    self.stp_port_state = stp_port_state

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.stp_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.port_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BYTE:
          self.stp_port_state = iprot.readByte()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_stp_port_state_args')
    if self.stp_id is not None:
      oprot.writeFieldBegin('stp_id', TType.I64, 1)
      oprot.writeI64(self.stp_id)
      oprot.writeFieldEnd()
    if self.port_id is not None:
      oprot.writeFieldBegin('port_id', TType.I64, 2)
      oprot.writeI64(self.port_id)
      oprot.writeFieldEnd()
    if self.stp_port_state is not None:
      oprot.writeFieldBegin('stp_port_state', TType.BYTE, 3)
      oprot.writeByte(self.stp_port_state)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stp_id)
    value = (value * 31) ^ hash(self.port_id)
    value = (value * 31) ^ hash(self.stp_port_state)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_stp_port_state_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_stp_port_state_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_stp_port_state_args:
  """
  Attributes:
   - stp_id
   - port_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'stp_id', None, None, ), # 1
    (2, TType.I64, 'port_id', None, None, ), # 2
  )

  def __init__(self, stp_id=None, port_id=None,):
    self.stp_id = stp_id
    self.port_id = port_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.stp_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.port_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_stp_port_state_args')
    if self.stp_id is not None:
      oprot.writeFieldBegin('stp_id', TType.I64, 1)
      oprot.writeI64(self.stp_id)
      oprot.writeFieldEnd()
    if self.port_id is not None:
      oprot.writeFieldBegin('port_id', TType.I64, 2)
      oprot.writeI64(self.port_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.stp_id)
    value = (value * 31) ^ hash(self.port_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_stp_port_state_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BYTE, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BYTE:
          self.success = iprot.readByte()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_stp_port_state_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BYTE, 0)
      oprot.writeByte(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_neighbor_entry_args:
  """
  Attributes:
   - thrift_neighbor_entry
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_neighbor_entry', (sai_thrift_neighbor_entry_t, sai_thrift_neighbor_entry_t.thrift_spec), None, ), # 1
    (2, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, thrift_neighbor_entry=None, thrift_attr_list=None,):
    self.thrift_neighbor_entry = thrift_neighbor_entry
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_neighbor_entry = sai_thrift_neighbor_entry_t()
          self.thrift_neighbor_entry.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype136, _size133) = iprot.readListBegin()
          for _i137 in xrange(_size133):
            _elem138 = sai_thrift_attribute_t()
            _elem138.read(iprot)
            self.thrift_attr_list.append(_elem138)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_neighbor_entry_args')
    if self.thrift_neighbor_entry is not None:
      oprot.writeFieldBegin('thrift_neighbor_entry', TType.STRUCT, 1)
      self.thrift_neighbor_entry.write(oprot)
      oprot.writeFieldEnd()
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter139 in self.thrift_attr_list:
        iter139.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_neighbor_entry)
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_neighbor_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_neighbor_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_neighbor_entry_args:
  """
  Attributes:
   - thrift_neighbor_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'thrift_neighbor_entry', (sai_thrift_neighbor_entry_t, sai_thrift_neighbor_entry_t.thrift_spec), None, ), # 1
  )

  def __init__(self, thrift_neighbor_entry=None,):
    self.thrift_neighbor_entry = thrift_neighbor_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.thrift_neighbor_entry = sai_thrift_neighbor_entry_t()
          self.thrift_neighbor_entry.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_neighbor_entry_args')
    if self.thrift_neighbor_entry is not None:
      oprot.writeFieldBegin('thrift_neighbor_entry', TType.STRUCT, 1)
      self.thrift_neighbor_entry.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_neighbor_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_neighbor_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_neighbor_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_switch_attribute_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_switch_attribute_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_switch_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (sai_thrift_attribute_list_t, sai_thrift_attribute_list_t.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = sai_thrift_attribute_list_t()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_switch_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_switch_attribute_args:
  """
  Attributes:
   - attribute
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'attribute', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 1
  )

  def __init__(self, attribute=None,):
    self.attribute = attribute

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.attribute = sai_thrift_attribute_t()
          self.attribute.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_switch_attribute_args')
    if self.attribute is not None:
      oprot.writeFieldBegin('attribute', TType.STRUCT, 1)
      self.attribute.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.attribute)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_switch_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_switch_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hostif_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype143, _size140) = iprot.readListBegin()
          for _i144 in xrange(_size140):
            _elem145 = sai_thrift_attribute_t()
            _elem145.read(iprot)
            self.thrift_attr_list.append(_elem145)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hostif_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter146 in self.thrift_attr_list:
        iter146.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hostif_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hostif_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hostif_args:
  """
  Attributes:
   - hif_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'hif_id', None, None, ), # 1
  )

  def __init__(self, hif_id=None,):
    self.hif_id = hif_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.hif_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hostif_args')
    if self.hif_id is not None:
      oprot.writeFieldBegin('hif_id', TType.I64, 1)
      oprot.writeI64(self.hif_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.hif_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hostif_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hostif_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hostif_trap_group_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype150, _size147) = iprot.readListBegin()
          for _i151 in xrange(_size147):
            _elem152 = sai_thrift_attribute_t()
            _elem152.read(iprot)
            self.thrift_attr_list.append(_elem152)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hostif_trap_group_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter153 in self.thrift_attr_list:
        iter153.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hostif_trap_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hostif_trap_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hostif_trap_group_args:
  """
  Attributes:
   - trap_group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'trap_group_id', None, None, ), # 1
  )

  def __init__(self, trap_group_id=None,):
    self.trap_group_id = trap_group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.trap_group_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hostif_trap_group_args')
    if self.trap_group_id is not None:
      oprot.writeFieldBegin('trap_group_id', TType.I64, 1)
      oprot.writeI64(self.trap_group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.trap_group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hostif_trap_group_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hostif_trap_group_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hostif_trap_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype157, _size154) = iprot.readListBegin()
          for _i158 in xrange(_size154):
            _elem159 = sai_thrift_attribute_t()
            _elem159.read(iprot)
            self.thrift_attr_list.append(_elem159)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hostif_trap_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter160 in self.thrift_attr_list:
        iter160.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_hostif_trap_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_hostif_trap_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hostif_trap_args:
  """
  Attributes:
   - trap_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'trap_id', None, None, ), # 1
  )

  def __init__(self, trap_id=None,):
    self.trap_id = trap_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.trap_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hostif_trap_args')
    if self.trap_id is not None:
      oprot.writeFieldBegin('trap_id', TType.I32, 1)
      oprot.writeI32(self.trap_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.trap_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_hostif_trap_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_hostif_trap_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_hostif_trap_args:
  """
  Attributes:
   - trap_id
   - thrift_attr
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'trap_id', None, None, ), # 1
    (2, TType.STRUCT, 'thrift_attr', (sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec), None, ), # 2
  )

  def __init__(self, trap_id=None, thrift_attr=None,):
    self.trap_id = trap_id
    self.thrift_attr = thrift_attr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.trap_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.thrift_attr = sai_thrift_attribute_t()
          self.thrift_attr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_hostif_trap_args')
    if self.trap_id is not None:
      oprot.writeFieldBegin('trap_id', TType.I32, 1)
      oprot.writeI32(self.trap_id)
      oprot.writeFieldEnd()
    if self.thrift_attr is not None:
      oprot.writeFieldBegin('thrift_attr', TType.STRUCT, 2)
      self.thrift_attr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.trap_id)
    value = (value * 31) ^ hash(self.thrift_attr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_set_hostif_trap_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_set_hostif_trap_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_table_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype164, _size161) = iprot.readListBegin()
          for _i165 in xrange(_size161):
            _elem166 = sai_thrift_attribute_t()
            _elem166.read(iprot)
            self.thrift_attr_list.append(_elem166)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_table_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter167 in self.thrift_attr_list:
        iter167.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_table_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_table_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_delete_acl_table_args:
  """
  Attributes:
   - acl_table_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_table_id', None, None, ), # 1
  )

  def __init__(self, acl_table_id=None,):
    self.acl_table_id = acl_table_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_table_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_delete_acl_table_args')
    if self.acl_table_id is not None:
      oprot.writeFieldBegin('acl_table_id', TType.I64, 1)
      oprot.writeI64(self.acl_table_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_table_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_delete_acl_table_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_delete_acl_table_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_entry_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype171, _size168) = iprot.readListBegin()
          for _i172 in xrange(_size168):
            _elem173 = sai_thrift_attribute_t()
            _elem173.read(iprot)
            self.thrift_attr_list.append(_elem173)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_entry_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter174 in self.thrift_attr_list:
        iter174.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_delete_acl_entry_args:
  """
  Attributes:
   - acl_entry
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_entry', None, None, ), # 1
  )

  def __init__(self, acl_entry=None,):
    self.acl_entry = acl_entry

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_entry = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_delete_acl_entry_args')
    if self.acl_entry is not None:
      oprot.writeFieldBegin('acl_entry', TType.I64, 1)
      oprot.writeI64(self.acl_entry)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_entry)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_delete_acl_entry_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_delete_acl_entry_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_counter_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype178, _size175) = iprot.readListBegin()
          for _i179 in xrange(_size175):
            _elem180 = sai_thrift_attribute_t()
            _elem180.read(iprot)
            self.thrift_attr_list.append(_elem180)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_counter_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter181 in self.thrift_attr_list:
        iter181.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_acl_counter_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_acl_counter_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_delete_acl_counter_args:
  """
  Attributes:
   - acl_counter_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_counter_id', None, None, ), # 1
  )

  def __init__(self, acl_counter_id=None,):
    self.acl_counter_id = acl_counter_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_counter_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_delete_acl_counter_args')
    if self.acl_counter_id is not None:
      oprot.writeFieldBegin('acl_counter_id', TType.I64, 1)
      oprot.writeI64(self.acl_counter_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_counter_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_delete_acl_counter_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_delete_acl_counter_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_acl_counter_attribute_args:
  """
  Attributes:
   - acl_counter_id
   - thrift_attr_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'acl_counter_id', None, None, ), # 1
    (2, TType.LIST, 'thrift_attr_ids', (TType.I32,None), None, ), # 2
  )

  def __init__(self, acl_counter_id=None, thrift_attr_ids=None,):
    self.acl_counter_id = acl_counter_id
    self.thrift_attr_ids = thrift_attr_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.acl_counter_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.thrift_attr_ids = []
          (_etype185, _size182) = iprot.readListBegin()
          for _i186 in xrange(_size182):
            _elem187 = iprot.readI32()
            self.thrift_attr_ids.append(_elem187)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_acl_counter_attribute_args')
    if self.acl_counter_id is not None:
      oprot.writeFieldBegin('acl_counter_id', TType.I64, 1)
      oprot.writeI64(self.acl_counter_id)
      oprot.writeFieldEnd()
    if self.thrift_attr_ids is not None:
      oprot.writeFieldBegin('thrift_attr_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.thrift_attr_ids))
      for iter188 in self.thrift_attr_ids:
        oprot.writeI32(iter188)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.acl_counter_id)
    value = (value * 31) ^ hash(self.thrift_attr_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_acl_counter_attribute_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(sai_thrift_attribute_value_t, sai_thrift_attribute_value_t.thrift_spec)), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype192, _size189) = iprot.readListBegin()
          for _i193 in xrange(_size189):
            _elem194 = sai_thrift_attribute_value_t()
            _elem194.read(iprot)
            self.success.append(_elem194)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_acl_counter_attribute_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter195 in self.success:
        iter195.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_mirror_session_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype199, _size196) = iprot.readListBegin()
          for _i200 in xrange(_size196):
            _elem201 = sai_thrift_attribute_t()
            _elem201.read(iprot)
            self.thrift_attr_list.append(_elem201)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_mirror_session_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter202 in self.thrift_attr_list:
        iter202.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_mirror_session_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_mirror_session_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_mirror_session_args:
  """
  Attributes:
   - session_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'session_id', None, None, ), # 1
  )

  def __init__(self, session_id=None,):
    self.session_id = session_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.session_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_mirror_session_args')
    if self.session_id is not None:
      oprot.writeFieldBegin('session_id', TType.I64, 1)
      oprot.writeI64(self.session_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.session_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_mirror_session_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_mirror_session_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_policer_args:
  """
  Attributes:
   - thrift_attr_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'thrift_attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, thrift_attr_list=None,):
    self.thrift_attr_list = thrift_attr_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.thrift_attr_list = []
          (_etype206, _size203) = iprot.readListBegin()
          for _i207 in xrange(_size203):
            _elem208 = sai_thrift_attribute_t()
            _elem208.read(iprot)
            self.thrift_attr_list.append(_elem208)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_policer_args')
    if self.thrift_attr_list is not None:
      oprot.writeFieldBegin('thrift_attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.thrift_attr_list))
      for iter209 in self.thrift_attr_list:
        iter209.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.thrift_attr_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_create_policer_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_create_policer_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_policer_args:
  """
  Attributes:
   - policer_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'policer_id', None, None, ), # 1
  )

  def __init__(self, policer_id=None,):
    self.policer_id = policer_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.policer_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_policer_args')
    if self.policer_id is not None:
      oprot.writeFieldBegin('policer_id', TType.I64, 1)
      oprot.writeI64(self.policer_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.policer_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_remove_policer_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_remove_policer_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_policer_stats_args:
  """
  Attributes:
   - policer_id
   - counter_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'policer_id', None, None, ), # 1
    (2, TType.LIST, 'counter_ids', (TType.I32,None), None, ), # 2
  )

  def __init__(self, policer_id=None, counter_ids=None,):
    self.policer_id = policer_id
    self.counter_ids = counter_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.policer_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.counter_ids = []
          (_etype213, _size210) = iprot.readListBegin()
          for _i214 in xrange(_size210):
            _elem215 = iprot.readI32()
            self.counter_ids.append(_elem215)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_policer_stats_args')
    if self.policer_id is not None:
      oprot.writeFieldBegin('policer_id', TType.I64, 1)
      oprot.writeI64(self.policer_id)
      oprot.writeFieldEnd()
    if self.counter_ids is not None:
      oprot.writeFieldBegin('counter_ids', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.counter_ids))
      for iter216 in self.counter_ids:
        oprot.writeI32(iter216)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.policer_id)
    value = (value * 31) ^ hash(self.counter_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_get_policer_stats_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.I64,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype220, _size217) = iprot.readListBegin()
          for _i221 in xrange(_size217):
            _elem222 = iprot.readI64()
            self.success.append(_elem222)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_get_policer_stats_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.I64, len(self.success))
      for iter223 in self.success:
        oprot.writeI64(iter223)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
