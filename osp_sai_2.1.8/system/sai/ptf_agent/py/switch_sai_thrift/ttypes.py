#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class sai_thrift_fdb_entry_t:
  """
  Attributes:
   - mac_address
   - vlan_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mac_address', None, None, ), # 1
    (2, TType.I16, 'vlan_id', None, None, ), # 2
  )

  def __init__(self, mac_address=None, vlan_id=None,):
    self.mac_address = mac_address
    self.vlan_id = vlan_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mac_address = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.vlan_id = iprot.readI16()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_fdb_entry_t')
    if self.mac_address is not None:
      oprot.writeFieldBegin('mac_address', TType.STRING, 1)
      oprot.writeString(self.mac_address)
      oprot.writeFieldEnd()
    if self.vlan_id is not None:
      oprot.writeFieldBegin('vlan_id', TType.I16, 2)
      oprot.writeI16(self.vlan_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.mac_address)
    value = (value * 31) ^ hash(self.vlan_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_vlan_port_t:
  """
  Attributes:
   - port_id
   - tagging_mode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'port_id', None, None, ), # 1
    (2, TType.BYTE, 'tagging_mode', None, None, ), # 2
  )

  def __init__(self, port_id=None, tagging_mode=None,):
    self.port_id = port_id
    self.tagging_mode = tagging_mode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.port_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.tagging_mode = iprot.readByte()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_vlan_port_t')
    if self.port_id is not None:
      oprot.writeFieldBegin('port_id', TType.I64, 1)
      oprot.writeI64(self.port_id)
      oprot.writeFieldEnd()
    if self.tagging_mode is not None:
      oprot.writeFieldBegin('tagging_mode', TType.BYTE, 2)
      oprot.writeByte(self.tagging_mode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.port_id)
    value = (value * 31) ^ hash(self.tagging_mode)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_ip_t:
  """
  Attributes:
   - ip4
   - ip6
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ip4', None, None, ), # 1
    (2, TType.STRING, 'ip6', None, None, ), # 2
  )

  def __init__(self, ip4=None, ip6=None,):
    self.ip4 = ip4
    self.ip6 = ip6

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ip4 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ip6 = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_ip_t')
    if self.ip4 is not None:
      oprot.writeFieldBegin('ip4', TType.STRING, 1)
      oprot.writeString(self.ip4)
      oprot.writeFieldEnd()
    if self.ip6 is not None:
      oprot.writeFieldBegin('ip6', TType.STRING, 2)
      oprot.writeString(self.ip6)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.ip4)
    value = (value * 31) ^ hash(self.ip6)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_ip_address_t:
  """
  Attributes:
   - addr_family
   - addr
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'addr_family', None, None, ), # 1
    (2, TType.STRUCT, 'addr', (sai_thrift_ip_t, sai_thrift_ip_t.thrift_spec), None, ), # 2
  )

  def __init__(self, addr_family=None, addr=None,):
    self.addr_family = addr_family
    self.addr = addr

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.addr_family = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.addr = sai_thrift_ip_t()
          self.addr.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_ip_address_t')
    if self.addr_family is not None:
      oprot.writeFieldBegin('addr_family', TType.BYTE, 1)
      oprot.writeByte(self.addr_family)
      oprot.writeFieldEnd()
    if self.addr is not None:
      oprot.writeFieldBegin('addr', TType.STRUCT, 2)
      self.addr.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.addr_family)
    value = (value * 31) ^ hash(self.addr)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_ip_prefix_t:
  """
  Attributes:
   - addr_family
   - addr
   - mask
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'addr_family', None, None, ), # 1
    (2, TType.STRUCT, 'addr', (sai_thrift_ip_t, sai_thrift_ip_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'mask', (sai_thrift_ip_t, sai_thrift_ip_t.thrift_spec), None, ), # 3
  )

  def __init__(self, addr_family=None, addr=None, mask=None,):
    self.addr_family = addr_family
    self.addr = addr
    self.mask = mask

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.addr_family = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.addr = sai_thrift_ip_t()
          self.addr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.mask = sai_thrift_ip_t()
          self.mask.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_ip_prefix_t')
    if self.addr_family is not None:
      oprot.writeFieldBegin('addr_family', TType.BYTE, 1)
      oprot.writeByte(self.addr_family)
      oprot.writeFieldEnd()
    if self.addr is not None:
      oprot.writeFieldBegin('addr', TType.STRUCT, 2)
      self.addr.write(oprot)
      oprot.writeFieldEnd()
    if self.mask is not None:
      oprot.writeFieldBegin('mask', TType.STRUCT, 3)
      self.mask.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.addr_family)
    value = (value * 31) ^ hash(self.addr)
    value = (value * 31) ^ hash(self.mask)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_object_list_t:
  """
  Attributes:
   - count
   - object_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'count', None, None, ), # 1
    (2, TType.LIST, 'object_id_list', (TType.I64,None), None, ), # 2
  )

  def __init__(self, count=None, object_id_list=None,):
    self.count = count
    self.object_id_list = object_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.object_id_list = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64()
            self.object_id_list.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_object_list_t')
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 1)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.object_id_list is not None:
      oprot.writeFieldBegin('object_id_list', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.object_id_list))
      for iter6 in self.object_id_list:
        oprot.writeI64(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.object_id_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_vlan_list_t:
  """
  Attributes:
   - vlan_count
   - vlan_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'vlan_count', None, None, ), # 1
    (2, TType.LIST, 'vlan_list', (TType.I16,None), None, ), # 2
  )

  def __init__(self, vlan_count=None, vlan_list=None,):
    self.vlan_count = vlan_count
    self.vlan_list = vlan_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.vlan_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.vlan_list = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI16()
            self.vlan_list.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_vlan_list_t')
    if self.vlan_count is not None:
      oprot.writeFieldBegin('vlan_count', TType.I32, 1)
      oprot.writeI32(self.vlan_count)
      oprot.writeFieldEnd()
    if self.vlan_list is not None:
      oprot.writeFieldBegin('vlan_list', TType.LIST, 2)
      oprot.writeListBegin(TType.I16, len(self.vlan_list))
      for iter13 in self.vlan_list:
        oprot.writeI16(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vlan_count)
    value = (value * 31) ^ hash(self.vlan_list)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_acl_mask_t:
  """
  Attributes:
   - u8
   - s8
   - u16
   - s16
   - u32
   - s32
   - mac
   - ip4
   - ip6
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'u8', None, None, ), # 1
    (2, TType.BYTE, 's8', None, None, ), # 2
    (3, TType.I16, 'u16', None, None, ), # 3
    (4, TType.I16, 's16', None, None, ), # 4
    (5, TType.I32, 'u32', None, None, ), # 5
    (6, TType.I32, 's32', None, None, ), # 6
    (7, TType.STRING, 'mac', None, None, ), # 7
    (8, TType.STRING, 'ip4', None, None, ), # 8
    (9, TType.STRING, 'ip6', None, None, ), # 9
  )

  def __init__(self, u8=None, s8=None, u16=None, s16=None, u32=None, s32=None, mac=None, ip4=None, ip6=None,):
    self.u8 = u8
    self.s8 = s8
    self.u16 = u16
    self.s16 = s16
    self.u32 = u32
    self.s32 = s32
    self.mac = mac
    self.ip4 = ip4
    self.ip6 = ip6

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.u8 = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.s8 = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.u16 = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.s16 = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.u32 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.s32 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.mac = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.ip4 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.ip6 = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_acl_mask_t')
    if self.u8 is not None:
      oprot.writeFieldBegin('u8', TType.BYTE, 1)
      oprot.writeByte(self.u8)
      oprot.writeFieldEnd()
    if self.s8 is not None:
      oprot.writeFieldBegin('s8', TType.BYTE, 2)
      oprot.writeByte(self.s8)
      oprot.writeFieldEnd()
    if self.u16 is not None:
      oprot.writeFieldBegin('u16', TType.I16, 3)
      oprot.writeI16(self.u16)
      oprot.writeFieldEnd()
    if self.s16 is not None:
      oprot.writeFieldBegin('s16', TType.I16, 4)
      oprot.writeI16(self.s16)
      oprot.writeFieldEnd()
    if self.u32 is not None:
      oprot.writeFieldBegin('u32', TType.I32, 5)
      oprot.writeI32(self.u32)
      oprot.writeFieldEnd()
    if self.s32 is not None:
      oprot.writeFieldBegin('s32', TType.I32, 6)
      oprot.writeI32(self.s32)
      oprot.writeFieldEnd()
    if self.mac is not None:
      oprot.writeFieldBegin('mac', TType.STRING, 7)
      oprot.writeString(self.mac)
      oprot.writeFieldEnd()
    if self.ip4 is not None:
      oprot.writeFieldBegin('ip4', TType.STRING, 8)
      oprot.writeString(self.ip4)
      oprot.writeFieldEnd()
    if self.ip6 is not None:
      oprot.writeFieldBegin('ip6', TType.STRING, 9)
      oprot.writeString(self.ip6)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.u8)
    value = (value * 31) ^ hash(self.s8)
    value = (value * 31) ^ hash(self.u16)
    value = (value * 31) ^ hash(self.s16)
    value = (value * 31) ^ hash(self.u32)
    value = (value * 31) ^ hash(self.s32)
    value = (value * 31) ^ hash(self.mac)
    value = (value * 31) ^ hash(self.ip4)
    value = (value * 31) ^ hash(self.ip6)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_acl_data_t:
  """
  Attributes:
   - u8
   - s8
   - u16
   - s16
   - u32
   - s32
   - mac
   - ip4
   - ip6
   - oid
   - objlist
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'u8', None, None, ), # 1
    (2, TType.BYTE, 's8', None, None, ), # 2
    (3, TType.I16, 'u16', None, None, ), # 3
    (4, TType.I16, 's16', None, None, ), # 4
    (5, TType.I32, 'u32', None, None, ), # 5
    (6, TType.I32, 's32', None, None, ), # 6
    (7, TType.STRING, 'mac', None, None, ), # 7
    (8, TType.STRING, 'ip4', None, None, ), # 8
    (9, TType.STRING, 'ip6', None, None, ), # 9
    (10, TType.I64, 'oid', None, None, ), # 10
    (11, TType.STRUCT, 'objlist', (sai_thrift_object_list_t, sai_thrift_object_list_t.thrift_spec), None, ), # 11
  )

  def __init__(self, u8=None, s8=None, u16=None, s16=None, u32=None, s32=None, mac=None, ip4=None, ip6=None, oid=None, objlist=None,):
    self.u8 = u8
    self.s8 = s8
    self.u16 = u16
    self.s16 = s16
    self.u32 = u32
    self.s32 = s32
    self.mac = mac
    self.ip4 = ip4
    self.ip6 = ip6
    self.oid = oid
    self.objlist = objlist

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.u8 = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.s8 = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.u16 = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.s16 = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.u32 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.s32 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.mac = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.ip4 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.ip6 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.oid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.objlist = sai_thrift_object_list_t()
          self.objlist.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_acl_data_t')
    if self.u8 is not None:
      oprot.writeFieldBegin('u8', TType.BYTE, 1)
      oprot.writeByte(self.u8)
      oprot.writeFieldEnd()
    if self.s8 is not None:
      oprot.writeFieldBegin('s8', TType.BYTE, 2)
      oprot.writeByte(self.s8)
      oprot.writeFieldEnd()
    if self.u16 is not None:
      oprot.writeFieldBegin('u16', TType.I16, 3)
      oprot.writeI16(self.u16)
      oprot.writeFieldEnd()
    if self.s16 is not None:
      oprot.writeFieldBegin('s16', TType.I16, 4)
      oprot.writeI16(self.s16)
      oprot.writeFieldEnd()
    if self.u32 is not None:
      oprot.writeFieldBegin('u32', TType.I32, 5)
      oprot.writeI32(self.u32)
      oprot.writeFieldEnd()
    if self.s32 is not None:
      oprot.writeFieldBegin('s32', TType.I32, 6)
      oprot.writeI32(self.s32)
      oprot.writeFieldEnd()
    if self.mac is not None:
      oprot.writeFieldBegin('mac', TType.STRING, 7)
      oprot.writeString(self.mac)
      oprot.writeFieldEnd()
    if self.ip4 is not None:
      oprot.writeFieldBegin('ip4', TType.STRING, 8)
      oprot.writeString(self.ip4)
      oprot.writeFieldEnd()
    if self.ip6 is not None:
      oprot.writeFieldBegin('ip6', TType.STRING, 9)
      oprot.writeString(self.ip6)
      oprot.writeFieldEnd()
    if self.oid is not None:
      oprot.writeFieldBegin('oid', TType.I64, 10)
      oprot.writeI64(self.oid)
      oprot.writeFieldEnd()
    if self.objlist is not None:
      oprot.writeFieldBegin('objlist', TType.STRUCT, 11)
      self.objlist.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.u8)
    value = (value * 31) ^ hash(self.s8)
    value = (value * 31) ^ hash(self.u16)
    value = (value * 31) ^ hash(self.s16)
    value = (value * 31) ^ hash(self.u32)
    value = (value * 31) ^ hash(self.s32)
    value = (value * 31) ^ hash(self.mac)
    value = (value * 31) ^ hash(self.ip4)
    value = (value * 31) ^ hash(self.ip6)
    value = (value * 31) ^ hash(self.oid)
    value = (value * 31) ^ hash(self.objlist)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_acl_field_data_t:
  """
  Attributes:
   - enable
   - mask
   - data
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'enable', None, None, ), # 1
    (2, TType.STRUCT, 'mask', (sai_thrift_acl_mask_t, sai_thrift_acl_mask_t.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'data', (sai_thrift_acl_data_t, sai_thrift_acl_data_t.thrift_spec), None, ), # 3
  )

  def __init__(self, enable=None, mask=None, data=None,):
    self.enable = enable
    self.mask = mask
    self.data = data

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.enable = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mask = sai_thrift_acl_mask_t()
          self.mask.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.data = sai_thrift_acl_data_t()
          self.data.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_acl_field_data_t')
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.BOOL, 1)
      oprot.writeBool(self.enable)
      oprot.writeFieldEnd()
    if self.mask is not None:
      oprot.writeFieldBegin('mask', TType.STRUCT, 2)
      self.mask.write(oprot)
      oprot.writeFieldEnd()
    if self.data is not None:
      oprot.writeFieldBegin('data', TType.STRUCT, 3)
      self.data.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.enable)
    value = (value * 31) ^ hash(self.mask)
    value = (value * 31) ^ hash(self.data)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_acl_parameter_t:
  """
  Attributes:
   - u8
   - s8
   - u16
   - s16
   - u32
   - s32
   - mac
   - ip4
   - ip6
   - oid
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'u8', None, None, ), # 1
    (2, TType.BYTE, 's8', None, None, ), # 2
    (3, TType.I16, 'u16', None, None, ), # 3
    (4, TType.I16, 's16', None, None, ), # 4
    (5, TType.I32, 'u32', None, None, ), # 5
    (6, TType.I32, 's32', None, None, ), # 6
    (7, TType.STRING, 'mac', None, None, ), # 7
    (8, TType.STRING, 'ip4', None, None, ), # 8
    (9, TType.STRING, 'ip6', None, None, ), # 9
    (10, TType.I64, 'oid', None, None, ), # 10
  )

  def __init__(self, u8=None, s8=None, u16=None, s16=None, u32=None, s32=None, mac=None, ip4=None, ip6=None, oid=None,):
    self.u8 = u8
    self.s8 = s8
    self.u16 = u16
    self.s16 = s16
    self.u32 = u32
    self.s32 = s32
    self.mac = mac
    self.ip4 = ip4
    self.ip6 = ip6
    self.oid = oid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.u8 = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.s8 = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.u16 = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.s16 = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.u32 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.s32 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.mac = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.ip4 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.ip6 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.oid = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_acl_parameter_t')
    if self.u8 is not None:
      oprot.writeFieldBegin('u8', TType.BYTE, 1)
      oprot.writeByte(self.u8)
      oprot.writeFieldEnd()
    if self.s8 is not None:
      oprot.writeFieldBegin('s8', TType.BYTE, 2)
      oprot.writeByte(self.s8)
      oprot.writeFieldEnd()
    if self.u16 is not None:
      oprot.writeFieldBegin('u16', TType.I16, 3)
      oprot.writeI16(self.u16)
      oprot.writeFieldEnd()
    if self.s16 is not None:
      oprot.writeFieldBegin('s16', TType.I16, 4)
      oprot.writeI16(self.s16)
      oprot.writeFieldEnd()
    if self.u32 is not None:
      oprot.writeFieldBegin('u32', TType.I32, 5)
      oprot.writeI32(self.u32)
      oprot.writeFieldEnd()
    if self.s32 is not None:
      oprot.writeFieldBegin('s32', TType.I32, 6)
      oprot.writeI32(self.s32)
      oprot.writeFieldEnd()
    if self.mac is not None:
      oprot.writeFieldBegin('mac', TType.STRING, 7)
      oprot.writeString(self.mac)
      oprot.writeFieldEnd()
    if self.ip4 is not None:
      oprot.writeFieldBegin('ip4', TType.STRING, 8)
      oprot.writeString(self.ip4)
      oprot.writeFieldEnd()
    if self.ip6 is not None:
      oprot.writeFieldBegin('ip6', TType.STRING, 9)
      oprot.writeString(self.ip6)
      oprot.writeFieldEnd()
    if self.oid is not None:
      oprot.writeFieldBegin('oid', TType.I64, 10)
      oprot.writeI64(self.oid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.u8)
    value = (value * 31) ^ hash(self.s8)
    value = (value * 31) ^ hash(self.u16)
    value = (value * 31) ^ hash(self.s16)
    value = (value * 31) ^ hash(self.u32)
    value = (value * 31) ^ hash(self.s32)
    value = (value * 31) ^ hash(self.mac)
    value = (value * 31) ^ hash(self.ip4)
    value = (value * 31) ^ hash(self.ip6)
    value = (value * 31) ^ hash(self.oid)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_acl_action_data_t:
  """
  Attributes:
   - enable
   - parameter
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'enable', None, None, ), # 1
    (2, TType.STRUCT, 'parameter', (sai_thrift_acl_parameter_t, sai_thrift_acl_parameter_t.thrift_spec), None, ), # 2
  )

  def __init__(self, enable=None, parameter=None,):
    self.enable = enable
    self.parameter = parameter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.enable = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.parameter = sai_thrift_acl_parameter_t()
          self.parameter.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_acl_action_data_t')
    if self.enable is not None:
      oprot.writeFieldBegin('enable', TType.BOOL, 1)
      oprot.writeBool(self.enable)
      oprot.writeFieldEnd()
    if self.parameter is not None:
      oprot.writeFieldBegin('parameter', TType.STRUCT, 2)
      self.parameter.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.enable)
    value = (value * 31) ^ hash(self.parameter)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_attribute_value_t:
  """
  Attributes:
   - booldata
   - chardata
   - u8
   - s8
   - u16
   - s16
   - u32
   - s32
   - u64
   - s64
   - mac
   - oid
   - ip4
   - ip6
   - ipaddr
   - objlist
   - vlanlist
   - aclfield
   - aclaction
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'booldata', None, None, ), # 1
    (2, TType.STRING, 'chardata', None, None, ), # 2
    (3, TType.BYTE, 'u8', None, None, ), # 3
    (4, TType.BYTE, 's8', None, None, ), # 4
    (5, TType.I16, 'u16', None, None, ), # 5
    (6, TType.I16, 's16', None, None, ), # 6
    (7, TType.I32, 'u32', None, None, ), # 7
    (8, TType.I32, 's32', None, None, ), # 8
    (9, TType.I64, 'u64', None, None, ), # 9
    (10, TType.I64, 's64', None, None, ), # 10
    (11, TType.STRING, 'mac', None, None, ), # 11
    (12, TType.I64, 'oid', None, None, ), # 12
    (13, TType.STRING, 'ip4', None, None, ), # 13
    (14, TType.STRING, 'ip6', None, None, ), # 14
    (15, TType.STRUCT, 'ipaddr', (sai_thrift_ip_address_t, sai_thrift_ip_address_t.thrift_spec), None, ), # 15
    (16, TType.STRUCT, 'objlist', (sai_thrift_object_list_t, sai_thrift_object_list_t.thrift_spec), None, ), # 16
    (17, TType.STRUCT, 'vlanlist', (sai_thrift_vlan_list_t, sai_thrift_vlan_list_t.thrift_spec), None, ), # 17
    (18, TType.STRUCT, 'aclfield', (sai_thrift_acl_field_data_t, sai_thrift_acl_field_data_t.thrift_spec), None, ), # 18
    (19, TType.STRUCT, 'aclaction', (sai_thrift_acl_action_data_t, sai_thrift_acl_action_data_t.thrift_spec), None, ), # 19
  )

  def __init__(self, booldata=None, chardata=None, u8=None, s8=None, u16=None, s16=None, u32=None, s32=None, u64=None, s64=None, mac=None, oid=None, ip4=None, ip6=None, ipaddr=None, objlist=None, vlanlist=None, aclfield=None, aclaction=None,):
    self.booldata = booldata
    self.chardata = chardata
    self.u8 = u8
    self.s8 = s8
    self.u16 = u16
    self.s16 = s16
    self.u32 = u32
    self.s32 = s32
    self.u64 = u64
    self.s64 = s64
    self.mac = mac
    self.oid = oid
    self.ip4 = ip4
    self.ip6 = ip6
    self.ipaddr = ipaddr
    self.objlist = objlist
    self.vlanlist = vlanlist
    self.aclfield = aclfield
    self.aclaction = aclaction

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.booldata = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.chardata = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BYTE:
          self.u8 = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BYTE:
          self.s8 = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.u16 = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.s16 = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.u32 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.s32 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.u64 = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.s64 = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.mac = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.oid = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.ip4 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.ip6 = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.ipaddr = sai_thrift_ip_address_t()
          self.ipaddr.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRUCT:
          self.objlist = sai_thrift_object_list_t()
          self.objlist.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRUCT:
          self.vlanlist = sai_thrift_vlan_list_t()
          self.vlanlist.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRUCT:
          self.aclfield = sai_thrift_acl_field_data_t()
          self.aclfield.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRUCT:
          self.aclaction = sai_thrift_acl_action_data_t()
          self.aclaction.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_attribute_value_t')
    if self.booldata is not None:
      oprot.writeFieldBegin('booldata', TType.BOOL, 1)
      oprot.writeBool(self.booldata)
      oprot.writeFieldEnd()
    if self.chardata is not None:
      oprot.writeFieldBegin('chardata', TType.STRING, 2)
      oprot.writeString(self.chardata)
      oprot.writeFieldEnd()
    if self.u8 is not None:
      oprot.writeFieldBegin('u8', TType.BYTE, 3)
      oprot.writeByte(self.u8)
      oprot.writeFieldEnd()
    if self.s8 is not None:
      oprot.writeFieldBegin('s8', TType.BYTE, 4)
      oprot.writeByte(self.s8)
      oprot.writeFieldEnd()
    if self.u16 is not None:
      oprot.writeFieldBegin('u16', TType.I16, 5)
      oprot.writeI16(self.u16)
      oprot.writeFieldEnd()
    if self.s16 is not None:
      oprot.writeFieldBegin('s16', TType.I16, 6)
      oprot.writeI16(self.s16)
      oprot.writeFieldEnd()
    if self.u32 is not None:
      oprot.writeFieldBegin('u32', TType.I32, 7)
      oprot.writeI32(self.u32)
      oprot.writeFieldEnd()
    if self.s32 is not None:
      oprot.writeFieldBegin('s32', TType.I32, 8)
      oprot.writeI32(self.s32)
      oprot.writeFieldEnd()
    if self.u64 is not None:
      oprot.writeFieldBegin('u64', TType.I64, 9)
      oprot.writeI64(self.u64)
      oprot.writeFieldEnd()
    if self.s64 is not None:
      oprot.writeFieldBegin('s64', TType.I64, 10)
      oprot.writeI64(self.s64)
      oprot.writeFieldEnd()
    if self.mac is not None:
      oprot.writeFieldBegin('mac', TType.STRING, 11)
      oprot.writeString(self.mac)
      oprot.writeFieldEnd()
    if self.oid is not None:
      oprot.writeFieldBegin('oid', TType.I64, 12)
      oprot.writeI64(self.oid)
      oprot.writeFieldEnd()
    if self.ip4 is not None:
      oprot.writeFieldBegin('ip4', TType.STRING, 13)
      oprot.writeString(self.ip4)
      oprot.writeFieldEnd()
    if self.ip6 is not None:
      oprot.writeFieldBegin('ip6', TType.STRING, 14)
      oprot.writeString(self.ip6)
      oprot.writeFieldEnd()
    if self.ipaddr is not None:
      oprot.writeFieldBegin('ipaddr', TType.STRUCT, 15)
      self.ipaddr.write(oprot)
      oprot.writeFieldEnd()
    if self.objlist is not None:
      oprot.writeFieldBegin('objlist', TType.STRUCT, 16)
      self.objlist.write(oprot)
      oprot.writeFieldEnd()
    if self.vlanlist is not None:
      oprot.writeFieldBegin('vlanlist', TType.STRUCT, 17)
      self.vlanlist.write(oprot)
      oprot.writeFieldEnd()
    if self.aclfield is not None:
      oprot.writeFieldBegin('aclfield', TType.STRUCT, 18)
      self.aclfield.write(oprot)
      oprot.writeFieldEnd()
    if self.aclaction is not None:
      oprot.writeFieldBegin('aclaction', TType.STRUCT, 19)
      self.aclaction.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.booldata)
    value = (value * 31) ^ hash(self.chardata)
    value = (value * 31) ^ hash(self.u8)
    value = (value * 31) ^ hash(self.s8)
    value = (value * 31) ^ hash(self.u16)
    value = (value * 31) ^ hash(self.s16)
    value = (value * 31) ^ hash(self.u32)
    value = (value * 31) ^ hash(self.s32)
    value = (value * 31) ^ hash(self.u64)
    value = (value * 31) ^ hash(self.s64)
    value = (value * 31) ^ hash(self.mac)
    value = (value * 31) ^ hash(self.oid)
    value = (value * 31) ^ hash(self.ip4)
    value = (value * 31) ^ hash(self.ip6)
    value = (value * 31) ^ hash(self.ipaddr)
    value = (value * 31) ^ hash(self.objlist)
    value = (value * 31) ^ hash(self.vlanlist)
    value = (value * 31) ^ hash(self.aclfield)
    value = (value * 31) ^ hash(self.aclaction)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_attribute_t:
  """
  Attributes:
   - id
   - value
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRUCT, 'value', (sai_thrift_attribute_value_t, sai_thrift_attribute_value_t.thrift_spec), None, ), # 2
  )

  def __init__(self, id=None, value=None,):
    self.id = id
    self.value = value

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.value = sai_thrift_attribute_value_t()
          self.value.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_attribute_t')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRUCT, 2)
      self.value.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.value)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_unicast_route_entry_t:
  """
  Attributes:
   - vr_id
   - destination
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'vr_id', None, None, ), # 1
    (2, TType.STRUCT, 'destination', (sai_thrift_ip_prefix_t, sai_thrift_ip_prefix_t.thrift_spec), None, ), # 2
  )

  def __init__(self, vr_id=None, destination=None,):
    self.vr_id = vr_id
    self.destination = destination

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.vr_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.destination = sai_thrift_ip_prefix_t()
          self.destination.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_unicast_route_entry_t')
    if self.vr_id is not None:
      oprot.writeFieldBegin('vr_id', TType.I64, 1)
      oprot.writeI64(self.vr_id)
      oprot.writeFieldEnd()
    if self.destination is not None:
      oprot.writeFieldBegin('destination', TType.STRUCT, 2)
      self.destination.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.vr_id)
    value = (value * 31) ^ hash(self.destination)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_neighbor_entry_t:
  """
  Attributes:
   - rif_id
   - ip_address
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'rif_id', None, None, ), # 1
    (2, TType.STRUCT, 'ip_address', (sai_thrift_ip_address_t, sai_thrift_ip_address_t.thrift_spec), None, ), # 2
  )

  def __init__(self, rif_id=None, ip_address=None,):
    self.rif_id = rif_id
    self.ip_address = ip_address

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.rif_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ip_address = sai_thrift_ip_address_t()
          self.ip_address.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_neighbor_entry_t')
    if self.rif_id is not None:
      oprot.writeFieldBegin('rif_id', TType.I64, 1)
      oprot.writeI64(self.rif_id)
      oprot.writeFieldEnd()
    if self.ip_address is not None:
      oprot.writeFieldBegin('ip_address', TType.STRUCT, 2)
      self.ip_address.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.rif_id)
    value = (value * 31) ^ hash(self.ip_address)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sai_thrift_attribute_list_t:
  """
  Attributes:
   - attr_list
   - attr_count
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'attr_list', (TType.STRUCT,(sai_thrift_attribute_t, sai_thrift_attribute_t.thrift_spec)), None, ), # 1
    (2, TType.I32, 'attr_count', None, None, ), # 2
  )

  def __init__(self, attr_list=None, attr_count=None,):
    self.attr_list = attr_list
    self.attr_count = attr_count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.attr_list = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = sai_thrift_attribute_t()
            _elem19.read(iprot)
            self.attr_list.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.attr_count = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sai_thrift_attribute_list_t')
    if self.attr_list is not None:
      oprot.writeFieldBegin('attr_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.attr_list))
      for iter20 in self.attr_list:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.attr_count is not None:
      oprot.writeFieldBegin('attr_count', TType.I32, 2)
      oprot.writeI32(self.attr_count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.attr_list)
    value = (value * 31) ^ hash(self.attr_count)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
