/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SWITCH_SAI_RPC_H
#define SWITCH_SAI_RPC_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "switch_sai_types.h"

/* switch_sai_rpc service interface */
typedef struct _switch_sai_rpcIf switch_sai_rpcIf;  /* dummy object */

struct _switch_sai_rpcIfInterface
{
  GTypeInterface parent;

  gboolean (*sai_thrift_set_port_attribute) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t * thrift_attr, GError **error);
  gboolean (*sai_thrift_create_fdb_entry) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_fdb_entry_t * thrift_fdb_entry, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_delete_fdb_entry) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_fdb_entry_t * thrift_fdb_entry, GError **error);
  gboolean (*sai_thrift_flush_fdb_entries) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_create_vlan) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, GError **error);
  gboolean (*sai_thrift_delete_vlan) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, GError **error);
  gboolean (*sai_thrift_add_ports_to_vlan) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, const GPtrArray * thrift_port_list, GError **error);
  gboolean (*sai_thrift_remove_ports_from_vlan) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, const GPtrArray * thrift_port_list, GError **error);
  gboolean (*sai_thrift_get_vlan_stats) (switch_sai_rpcIf *iface, GArray ** _return, const gint16 vlan_id, const GArray * counter_ids, const gint32 number_of_counters, GError **error);
  gboolean (*sai_thrift_create_virtual_router) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_virtual_router) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t vr_id, GError **error);
  gboolean (*sai_thrift_create_route) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_unicast_route_entry_t * thrift_unicast_route_entry, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_route) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_unicast_route_entry_t * thrift_unicast_route_entry, GError **error);
  gboolean (*sai_thrift_create_router_interface) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_router_interface) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t rif_id, GError **error);
  gboolean (*sai_thrift_create_next_hop) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_next_hop) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_id, GError **error);
  gboolean (*sai_thrift_create_next_hop_group) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_next_hop_group) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, GError **error);
  gboolean (*sai_thrift_add_next_hop_to_group) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, const GArray * thrift_nexthops, GError **error);
  gboolean (*sai_thrift_remove_next_hop_from_group) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, const GArray * thrift_nexthops, GError **error);
  gboolean (*sai_thrift_create_lag) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_lag) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t lag_id, GError **error);
  gboolean (*sai_thrift_create_lag_member) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_lag_member) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t lag_member_id, GError **error);
  gboolean (*sai_thrift_create_stp_entry) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_stp_entry) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t stp_id, GError **error);
  gboolean (*sai_thrift_set_stp_port_state) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state, GError **error);
  gboolean (*sai_thrift_get_stp_port_state) (switch_sai_rpcIf *iface, sai_thrift_port_stp_port_state_t* _return, const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, GError **error);
  gboolean (*sai_thrift_create_neighbor_entry) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_neighbor_entry_t * thrift_neighbor_entry, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_neighbor_entry) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_neighbor_entry_t * thrift_neighbor_entry, GError **error);
  gboolean (*sai_thrift_get_switch_attribute) (switch_sai_rpcIf *iface, sai_thrift_attribute_list_t ** _return, GError **error);
  gboolean (*sai_thrift_set_switch_attribute) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_attribute_t * attribute, GError **error);
  gboolean (*sai_thrift_create_hostif) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_hostif) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t hif_id, GError **error);
  gboolean (*sai_thrift_create_hostif_trap_group) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_hostif_trap_group) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t trap_group_id, GError **error);
  gboolean (*sai_thrift_create_hostif_trap) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_hostif_trap) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_hostif_trap_id_t trap_id, GError **error);
  gboolean (*sai_thrift_set_hostif_trap) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_hostif_trap_id_t trap_id, const sai_thrift_attribute_t * thrift_attr, GError **error);
  gboolean (*sai_thrift_create_acl_table) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_delete_acl_table) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_table_id, GError **error);
  gboolean (*sai_thrift_create_acl_entry) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_delete_acl_entry) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_entry, GError **error);
  gboolean (*sai_thrift_create_acl_counter) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_delete_acl_counter) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_counter_id, GError **error);
  gboolean (*sai_thrift_get_acl_counter_attribute) (switch_sai_rpcIf *iface, GPtrArray ** _return, const sai_thrift_object_id_t acl_counter_id, const GArray * thrift_attr_ids, GError **error);
  gboolean (*sai_thrift_create_mirror_session) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_mirror_session) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t session_id, GError **error);
  gboolean (*sai_thrift_create_policer) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_policer) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t policer_id, GError **error);
  gboolean (*sai_thrift_get_policer_stats) (switch_sai_rpcIf *iface, GArray ** _return, const sai_thrift_object_id_t policer_id, const GArray * counter_ids, GError **error);
};
typedef struct _switch_sai_rpcIfInterface switch_sai_rpcIfInterface;

GType switch_sai_rpc_if_get_type (void);
#define TYPE_SWITCH_SAI_RPC_IF (switch_sai_rpc_if_get_type())
#define SWITCH_SAI_RPC_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SWITCH_SAI_RPC_IF, switch_sai_rpcIf))
#define IS_SWITCH_SAI_RPC_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SWITCH_SAI_RPC_IF))
#define SWITCH_SAI_RPC_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_SWITCH_SAI_RPC_IF, switch_sai_rpcIfInterface))

gboolean switch_sai_rpc_if_sai_thrift_set_port_attribute (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t * thrift_attr, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_fdb_entry (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_fdb_entry_t * thrift_fdb_entry, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_delete_fdb_entry (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_fdb_entry_t * thrift_fdb_entry, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_flush_fdb_entries (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_vlan (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_delete_vlan (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_add_ports_to_vlan (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, const GPtrArray * thrift_port_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_ports_from_vlan (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, const GPtrArray * thrift_port_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_get_vlan_stats (switch_sai_rpcIf *iface, GArray ** _return, const gint16 vlan_id, const GArray * counter_ids, const gint32 number_of_counters, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_virtual_router (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_virtual_router (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t vr_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_route (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_unicast_route_entry_t * thrift_unicast_route_entry, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_route (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_unicast_route_entry_t * thrift_unicast_route_entry, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_router_interface (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_router_interface (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t rif_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_next_hop (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_next_hop (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_next_hop_group (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_next_hop_group (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_add_next_hop_to_group (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, const GArray * thrift_nexthops, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_next_hop_from_group (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, const GArray * thrift_nexthops, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_lag (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_lag (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t lag_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_lag_member (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_lag_member (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t lag_member_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_stp_entry (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_stp_entry (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t stp_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_set_stp_port_state (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_get_stp_port_state (switch_sai_rpcIf *iface, sai_thrift_port_stp_port_state_t* _return, const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_neighbor_entry (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_neighbor_entry_t * thrift_neighbor_entry, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_neighbor_entry (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_neighbor_entry_t * thrift_neighbor_entry, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_get_switch_attribute (switch_sai_rpcIf *iface, sai_thrift_attribute_list_t ** _return, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_set_switch_attribute (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_attribute_t * attribute, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_hostif (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_hostif (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t hif_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_hostif_trap_group (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_hostif_trap_group (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t trap_group_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_hostif_trap (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_hostif_trap (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_hostif_trap_id_t trap_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_set_hostif_trap (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_hostif_trap_id_t trap_id, const sai_thrift_attribute_t * thrift_attr, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_acl_table (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_delete_acl_table (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_table_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_acl_entry (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_delete_acl_entry (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_entry, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_acl_counter (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_delete_acl_counter (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_counter_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_get_acl_counter_attribute (switch_sai_rpcIf *iface, GPtrArray ** _return, const sai_thrift_object_id_t acl_counter_id, const GArray * thrift_attr_ids, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_mirror_session (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_mirror_session (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t session_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_create_policer (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_remove_policer (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t policer_id, GError **error);
gboolean switch_sai_rpc_if_sai_thrift_get_policer_stats (switch_sai_rpcIf *iface, GArray ** _return, const sai_thrift_object_id_t policer_id, const GArray * counter_ids, GError **error);

/* switch_sai_rpc service client */
struct _switch_sai_rpcClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _switch_sai_rpcClient switch_sai_rpcClient;

struct _switch_sai_rpcClientClass
{
  GObjectClass parent;
};
typedef struct _switch_sai_rpcClientClass switch_sai_rpcClientClass;

GType switch_sai_rpc_client_get_type (void);
#define TYPE_SWITCH_SAI_RPC_CLIENT (switch_sai_rpc_client_get_type())
#define SWITCH_SAI_RPC_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SWITCH_SAI_RPC_CLIENT, switch_sai_rpcClient))
#define SWITCH_SAI_RPC_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_SWITCH_SAI_RPC_CLIENT, switch_sai_rpcClientClass))
#define SWITCH_SAI_RPC_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SWITCH_SAI_RPC_CLIENT))
#define SWITCH_SAI_RPC_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SWITCH_SAI_RPC_CLIENT))
#define SWITCH_SAI_RPC_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SWITCH_SAI_RPC_CLIENT, switch_sai_rpcClientClass))

gboolean switch_sai_rpc_client_sai_thrift_set_port_attribute (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t * thrift_attr, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_set_port_attribute (switch_sai_rpcIf * iface, const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t * thrift_attr, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_set_port_attribute (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_fdb_entry (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_fdb_entry_t * thrift_fdb_entry, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_fdb_entry (switch_sai_rpcIf * iface, const sai_thrift_fdb_entry_t * thrift_fdb_entry, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_fdb_entry (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_delete_fdb_entry (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_fdb_entry_t * thrift_fdb_entry, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_delete_fdb_entry (switch_sai_rpcIf * iface, const sai_thrift_fdb_entry_t * thrift_fdb_entry, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_delete_fdb_entry (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_flush_fdb_entries (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_flush_fdb_entries (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_flush_fdb_entries (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_vlan (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const gint16 vlan_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_vlan (switch_sai_rpcIf * iface, const gint16 vlan_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_vlan (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_delete_vlan (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const gint16 vlan_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_delete_vlan (switch_sai_rpcIf * iface, const gint16 vlan_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_delete_vlan (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_add_ports_to_vlan (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const gint16 vlan_id, const GPtrArray * thrift_port_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_add_ports_to_vlan (switch_sai_rpcIf * iface, const gint16 vlan_id, const GPtrArray * thrift_port_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_add_ports_to_vlan (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_ports_from_vlan (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const gint16 vlan_id, const GPtrArray * thrift_port_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_ports_from_vlan (switch_sai_rpcIf * iface, const gint16 vlan_id, const GPtrArray * thrift_port_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_ports_from_vlan (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_get_vlan_stats (switch_sai_rpcIf * iface, GArray ** _return, const gint16 vlan_id, const GArray * counter_ids, const gint32 number_of_counters, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_get_vlan_stats (switch_sai_rpcIf * iface, const gint16 vlan_id, const GArray * counter_ids, const gint32 number_of_counters, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_get_vlan_stats (switch_sai_rpcIf * iface, GArray ** _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_virtual_router (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_virtual_router (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_virtual_router (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_virtual_router (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t vr_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_virtual_router (switch_sai_rpcIf * iface, const sai_thrift_object_id_t vr_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_virtual_router (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_route (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_unicast_route_entry_t * thrift_unicast_route_entry, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_route (switch_sai_rpcIf * iface, const sai_thrift_unicast_route_entry_t * thrift_unicast_route_entry, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_route (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_route (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_unicast_route_entry_t * thrift_unicast_route_entry, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_route (switch_sai_rpcIf * iface, const sai_thrift_unicast_route_entry_t * thrift_unicast_route_entry, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_route (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_router_interface (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_router_interface (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_router_interface (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_router_interface (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t rif_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_router_interface (switch_sai_rpcIf * iface, const sai_thrift_object_id_t rif_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_router_interface (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_next_hop (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_next_hop (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_next_hop (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_next_hop (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_next_hop (switch_sai_rpcIf * iface, const sai_thrift_object_id_t next_hop_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_next_hop (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_next_hop_group (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_next_hop_group (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_next_hop_group (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_next_hop_group (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_next_hop_group (switch_sai_rpcIf * iface, const sai_thrift_object_id_t next_hop_group_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_next_hop_group (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_add_next_hop_to_group (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, const GArray * thrift_nexthops, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_add_next_hop_to_group (switch_sai_rpcIf * iface, const sai_thrift_object_id_t next_hop_group_id, const GArray * thrift_nexthops, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_add_next_hop_to_group (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_next_hop_from_group (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, const GArray * thrift_nexthops, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_next_hop_from_group (switch_sai_rpcIf * iface, const sai_thrift_object_id_t next_hop_group_id, const GArray * thrift_nexthops, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_next_hop_from_group (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_lag (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_lag (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_lag (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_lag (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t lag_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_lag (switch_sai_rpcIf * iface, const sai_thrift_object_id_t lag_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_lag (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_lag_member (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_lag_member (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_lag_member (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_lag_member (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t lag_member_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_lag_member (switch_sai_rpcIf * iface, const sai_thrift_object_id_t lag_member_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_lag_member (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_stp_entry (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_stp_entry (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_stp_entry (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_stp_entry (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t stp_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_stp_entry (switch_sai_rpcIf * iface, const sai_thrift_object_id_t stp_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_stp_entry (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_set_stp_port_state (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_set_stp_port_state (switch_sai_rpcIf * iface, const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_set_stp_port_state (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_get_stp_port_state (switch_sai_rpcIf * iface, sai_thrift_port_stp_port_state_t* _return, const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_get_stp_port_state (switch_sai_rpcIf * iface, const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_get_stp_port_state (switch_sai_rpcIf * iface, sai_thrift_port_stp_port_state_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_neighbor_entry (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_neighbor_entry_t * thrift_neighbor_entry, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_neighbor_entry (switch_sai_rpcIf * iface, const sai_thrift_neighbor_entry_t * thrift_neighbor_entry, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_neighbor_entry (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_neighbor_entry (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_neighbor_entry_t * thrift_neighbor_entry, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_neighbor_entry (switch_sai_rpcIf * iface, const sai_thrift_neighbor_entry_t * thrift_neighbor_entry, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_neighbor_entry (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_get_switch_attribute (switch_sai_rpcIf * iface, sai_thrift_attribute_list_t ** _return, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_get_switch_attribute (switch_sai_rpcIf * iface, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_get_switch_attribute (switch_sai_rpcIf * iface, sai_thrift_attribute_list_t ** _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_set_switch_attribute (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_attribute_t * attribute, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_set_switch_attribute (switch_sai_rpcIf * iface, const sai_thrift_attribute_t * attribute, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_set_switch_attribute (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_hostif (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_hostif (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_hostif (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_hostif (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t hif_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_hostif (switch_sai_rpcIf * iface, const sai_thrift_object_id_t hif_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_hostif (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_hostif_trap_group (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_hostif_trap_group (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_hostif_trap_group (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_hostif_trap_group (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t trap_group_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_hostif_trap_group (switch_sai_rpcIf * iface, const sai_thrift_object_id_t trap_group_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_hostif_trap_group (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_hostif_trap (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_hostif_trap (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_hostif_trap (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_hostif_trap (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_hostif_trap_id_t trap_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_hostif_trap (switch_sai_rpcIf * iface, const sai_thrift_hostif_trap_id_t trap_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_hostif_trap (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_set_hostif_trap (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_hostif_trap_id_t trap_id, const sai_thrift_attribute_t * thrift_attr, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_set_hostif_trap (switch_sai_rpcIf * iface, const sai_thrift_hostif_trap_id_t trap_id, const sai_thrift_attribute_t * thrift_attr, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_set_hostif_trap (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_acl_table (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_acl_table (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_acl_table (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_delete_acl_table (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_table_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_delete_acl_table (switch_sai_rpcIf * iface, const sai_thrift_object_id_t acl_table_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_delete_acl_table (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_acl_entry (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_acl_entry (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_acl_entry (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_delete_acl_entry (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_entry, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_delete_acl_entry (switch_sai_rpcIf * iface, const sai_thrift_object_id_t acl_entry, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_delete_acl_entry (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_acl_counter (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_acl_counter (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_acl_counter (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_delete_acl_counter (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_counter_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_delete_acl_counter (switch_sai_rpcIf * iface, const sai_thrift_object_id_t acl_counter_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_delete_acl_counter (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_get_acl_counter_attribute (switch_sai_rpcIf * iface, GPtrArray ** _return, const sai_thrift_object_id_t acl_counter_id, const GArray * thrift_attr_ids, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_get_acl_counter_attribute (switch_sai_rpcIf * iface, const sai_thrift_object_id_t acl_counter_id, const GArray * thrift_attr_ids, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_get_acl_counter_attribute (switch_sai_rpcIf * iface, GPtrArray ** _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_mirror_session (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_mirror_session (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_mirror_session (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_mirror_session (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t session_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_mirror_session (switch_sai_rpcIf * iface, const sai_thrift_object_id_t session_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_mirror_session (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_create_policer (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_create_policer (switch_sai_rpcIf * iface, const GPtrArray * thrift_attr_list, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_create_policer (switch_sai_rpcIf * iface, sai_thrift_object_id_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_remove_policer (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t policer_id, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_remove_policer (switch_sai_rpcIf * iface, const sai_thrift_object_id_t policer_id, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_remove_policer (switch_sai_rpcIf * iface, sai_thrift_status_t* _return, GError ** error);
gboolean switch_sai_rpc_client_sai_thrift_get_policer_stats (switch_sai_rpcIf * iface, GArray ** _return, const sai_thrift_object_id_t policer_id, const GArray * counter_ids, GError ** error);
gboolean switch_sai_rpc_client_send_sai_thrift_get_policer_stats (switch_sai_rpcIf * iface, const sai_thrift_object_id_t policer_id, const GArray * counter_ids, GError ** error);
gboolean switch_sai_rpc_client_recv_sai_thrift_get_policer_stats (switch_sai_rpcIf * iface, GArray ** _return, GError ** error);
void switch_sai_rpc_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void switch_sai_rpc_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* switch_sai_rpc handler (abstract base class) */
struct _switch_sai_rpcHandler
{
  GObject parent;
};
typedef struct _switch_sai_rpcHandler switch_sai_rpcHandler;

struct _switch_sai_rpcHandlerClass
{
  GObjectClass parent;

  gboolean (*sai_thrift_set_port_attribute) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t * thrift_attr, GError **error);
  gboolean (*sai_thrift_create_fdb_entry) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_fdb_entry_t * thrift_fdb_entry, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_delete_fdb_entry) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_fdb_entry_t * thrift_fdb_entry, GError **error);
  gboolean (*sai_thrift_flush_fdb_entries) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_create_vlan) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, GError **error);
  gboolean (*sai_thrift_delete_vlan) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, GError **error);
  gboolean (*sai_thrift_add_ports_to_vlan) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, const GPtrArray * thrift_port_list, GError **error);
  gboolean (*sai_thrift_remove_ports_from_vlan) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, const GPtrArray * thrift_port_list, GError **error);
  gboolean (*sai_thrift_get_vlan_stats) (switch_sai_rpcIf *iface, GArray ** _return, const gint16 vlan_id, const GArray * counter_ids, const gint32 number_of_counters, GError **error);
  gboolean (*sai_thrift_create_virtual_router) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_virtual_router) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t vr_id, GError **error);
  gboolean (*sai_thrift_create_route) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_unicast_route_entry_t * thrift_unicast_route_entry, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_route) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_unicast_route_entry_t * thrift_unicast_route_entry, GError **error);
  gboolean (*sai_thrift_create_router_interface) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_router_interface) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t rif_id, GError **error);
  gboolean (*sai_thrift_create_next_hop) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_next_hop) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_id, GError **error);
  gboolean (*sai_thrift_create_next_hop_group) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_next_hop_group) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, GError **error);
  gboolean (*sai_thrift_add_next_hop_to_group) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, const GArray * thrift_nexthops, GError **error);
  gboolean (*sai_thrift_remove_next_hop_from_group) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, const GArray * thrift_nexthops, GError **error);
  gboolean (*sai_thrift_create_lag) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_lag) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t lag_id, GError **error);
  gboolean (*sai_thrift_create_lag_member) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_lag_member) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t lag_member_id, GError **error);
  gboolean (*sai_thrift_create_stp_entry) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_stp_entry) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t stp_id, GError **error);
  gboolean (*sai_thrift_set_stp_port_state) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state, GError **error);
  gboolean (*sai_thrift_get_stp_port_state) (switch_sai_rpcIf *iface, sai_thrift_port_stp_port_state_t* _return, const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, GError **error);
  gboolean (*sai_thrift_create_neighbor_entry) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_neighbor_entry_t * thrift_neighbor_entry, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_neighbor_entry) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_neighbor_entry_t * thrift_neighbor_entry, GError **error);
  gboolean (*sai_thrift_get_switch_attribute) (switch_sai_rpcIf *iface, sai_thrift_attribute_list_t ** _return, GError **error);
  gboolean (*sai_thrift_set_switch_attribute) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_attribute_t * attribute, GError **error);
  gboolean (*sai_thrift_create_hostif) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_hostif) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t hif_id, GError **error);
  gboolean (*sai_thrift_create_hostif_trap_group) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_hostif_trap_group) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t trap_group_id, GError **error);
  gboolean (*sai_thrift_create_hostif_trap) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_hostif_trap) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_hostif_trap_id_t trap_id, GError **error);
  gboolean (*sai_thrift_set_hostif_trap) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_hostif_trap_id_t trap_id, const sai_thrift_attribute_t * thrift_attr, GError **error);
  gboolean (*sai_thrift_create_acl_table) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_delete_acl_table) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_table_id, GError **error);
  gboolean (*sai_thrift_create_acl_entry) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_delete_acl_entry) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_entry, GError **error);
  gboolean (*sai_thrift_create_acl_counter) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_delete_acl_counter) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_counter_id, GError **error);
  gboolean (*sai_thrift_get_acl_counter_attribute) (switch_sai_rpcIf *iface, GPtrArray ** _return, const sai_thrift_object_id_t acl_counter_id, const GArray * thrift_attr_ids, GError **error);
  gboolean (*sai_thrift_create_mirror_session) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_mirror_session) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t session_id, GError **error);
  gboolean (*sai_thrift_create_policer) (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
  gboolean (*sai_thrift_remove_policer) (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t policer_id, GError **error);
  gboolean (*sai_thrift_get_policer_stats) (switch_sai_rpcIf *iface, GArray ** _return, const sai_thrift_object_id_t policer_id, const GArray * counter_ids, GError **error);
};
typedef struct _switch_sai_rpcHandlerClass switch_sai_rpcHandlerClass;

GType switch_sai_rpc_handler_get_type (void);
#define TYPE_SWITCH_SAI_RPC_HANDLER (switch_sai_rpc_handler_get_type())
#define SWITCH_SAI_RPC_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SWITCH_SAI_RPC_HANDLER, switch_sai_rpcHandler))
#define IS_SWITCH_SAI_RPC_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SWITCH_SAI_RPC_HANDLER))
#define SWITCH_SAI_RPC_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_SWITCH_SAI_RPC_HANDLER, switch_sai_rpcHandlerClass))
#define IS_SWITCH_SAI_RPC_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SWITCH_SAI_RPC_HANDLER))
#define SWITCH_SAI_RPC_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SWITCH_SAI_RPC_HANDLER, switch_sai_rpcHandlerClass))

gboolean switch_sai_rpc_handler_sai_thrift_set_port_attribute (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t port_id, const sai_thrift_attribute_t * thrift_attr, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_fdb_entry (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_fdb_entry_t * thrift_fdb_entry, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_delete_fdb_entry (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_fdb_entry_t * thrift_fdb_entry, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_flush_fdb_entries (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_vlan (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_delete_vlan (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_add_ports_to_vlan (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, const GPtrArray * thrift_port_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_ports_from_vlan (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const gint16 vlan_id, const GPtrArray * thrift_port_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_get_vlan_stats (switch_sai_rpcIf *iface, GArray ** _return, const gint16 vlan_id, const GArray * counter_ids, const gint32 number_of_counters, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_virtual_router (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_virtual_router (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t vr_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_route (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_unicast_route_entry_t * thrift_unicast_route_entry, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_route (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_unicast_route_entry_t * thrift_unicast_route_entry, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_router_interface (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_router_interface (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t rif_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_next_hop (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_next_hop (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_next_hop_group (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_next_hop_group (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_add_next_hop_to_group (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, const GArray * thrift_nexthops, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_next_hop_from_group (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t next_hop_group_id, const GArray * thrift_nexthops, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_lag (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_lag (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t lag_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_lag_member (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_lag_member (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t lag_member_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_stp_entry (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_stp_entry (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t stp_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_set_stp_port_state (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, const sai_thrift_port_stp_port_state_t stp_port_state, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_get_stp_port_state (switch_sai_rpcIf *iface, sai_thrift_port_stp_port_state_t* _return, const sai_thrift_object_id_t stp_id, const sai_thrift_object_id_t port_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_neighbor_entry (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_neighbor_entry_t * thrift_neighbor_entry, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_neighbor_entry (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_neighbor_entry_t * thrift_neighbor_entry, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_get_switch_attribute (switch_sai_rpcIf *iface, sai_thrift_attribute_list_t ** _return, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_set_switch_attribute (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_attribute_t * attribute, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_hostif (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_hostif (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t hif_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_hostif_trap_group (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_hostif_trap_group (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t trap_group_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_hostif_trap (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_hostif_trap (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_hostif_trap_id_t trap_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_set_hostif_trap (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_hostif_trap_id_t trap_id, const sai_thrift_attribute_t * thrift_attr, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_acl_table (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_delete_acl_table (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_table_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_acl_entry (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_delete_acl_entry (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_entry, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_acl_counter (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_delete_acl_counter (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t acl_counter_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_get_acl_counter_attribute (switch_sai_rpcIf *iface, GPtrArray ** _return, const sai_thrift_object_id_t acl_counter_id, const GArray * thrift_attr_ids, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_mirror_session (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_mirror_session (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t session_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_create_policer (switch_sai_rpcIf *iface, sai_thrift_object_id_t* _return, const GPtrArray * thrift_attr_list, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_remove_policer (switch_sai_rpcIf *iface, sai_thrift_status_t* _return, const sai_thrift_object_id_t policer_id, GError **error);
gboolean switch_sai_rpc_handler_sai_thrift_get_policer_stats (switch_sai_rpcIf *iface, GArray ** _return, const sai_thrift_object_id_t policer_id, const GArray * counter_ids, GError **error);

/* switch_sai_rpc processor */
struct _switch_sai_rpcProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  switch_sai_rpcHandler *handler;
  GHashTable *process_map;
};
typedef struct _switch_sai_rpcProcessor switch_sai_rpcProcessor;

struct _switch_sai_rpcProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _switch_sai_rpcProcessorClass switch_sai_rpcProcessorClass;

GType switch_sai_rpc_processor_get_type (void);
#define TYPE_SWITCH_SAI_RPC_PROCESSOR (switch_sai_rpc_processor_get_type())
#define SWITCH_SAI_RPC_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SWITCH_SAI_RPC_PROCESSOR, switch_sai_rpcProcessor))
#define IS_SWITCH_SAI_RPC_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SWITCH_SAI_RPC_PROCESSOR))
#define SWITCH_SAI_RPC_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_SWITCH_SAI_RPC_PROCESSOR, switch_sai_rpcProcessorClass))
#define IS_SWITCH_SAI_RPC_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SWITCH_SAI_RPC_PROCESSOR))
#define SWITCH_SAI_RPC_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SWITCH_SAI_RPC_PROCESSOR, switch_sai_rpcProcessorClass))

#endif /* SWITCH_SAI_RPC_H */
