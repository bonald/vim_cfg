################################################################################
# Note:
# 1. Table用于产生 tbl_xxx_define.h/tbl_xxx.h/tbl_xxx.c
# 2. Table的顺序应该与note.txt里面顺序且一一对应，否则会报错
# 3. "#" 注释
# 4. Table之间以"-----"分隔
# 5. 一个Table有 [TBL] [KEY] [DATA] [FLAGS] [MASTER] 5个选项
# 6. [TBL]有4列
#    1) table name
#    2) tbl_xxx.h中的参数名  if -> p_if
#    3) 表的数据结构有  GLOBAL, HASH, LIST, ARRAY, HASH+LIST (其中HASH+LIST, HASH 查找，LIST显示)
#    4) 表示需要初始化该table的PM, 可选switch, routed, chsm, fea, all，其中all表示所有PMs, 如果有多个可以用','连接, e.g. "switch,routed"
#        cds会初始化所有table，用于产生函数 cdb_tbl_pm_init()
# 7. [KEY] 如果数据结构为GLOBAL, [KEY]为空, 否则需要
#    1) key只支持1个field, 如果需要多个数据类型组成, 徐自己定义一个数据结构, 然后放在[KEY]中, e.g. TBL_FDB_KEY/fdb_key_t, TBL_ROUTE_NODE_KEY/route_node_key_t
# 8. [DATA]有4列，如果有key的话，必须放在第一行
#    1) data type, 所有的datatype必须在datatype.txt中定义
#    2) data name, 可以带指针或者数组
#    3) access property, READ/RW/SUB/FLAGS/INTERNAL, INTERNAL在dump时不可见，PM内部为方便而使用
#       其中SUB表示是DS, 注意DS必须通过指针附着在TBL上
#       FLAGS表示包含多个flag, 具体见[FLAGS]
#    4) note, 这一列会copy到源代码中
# 9. [FLAGS] 如果[DATA]中有FLAGS项, 需要有该选项, 有4列
#    1) data name
#    2) field name
#    3) FLAG定义, 必须在proto.h里面定义好
#    4) access property, READ/RW
# 10.[MASTER]有2列, 存放TBL的数据结构的master指针, 也可存放一些内部使用的全局变量
#    1) data type, 需要与[TBL]里面的第3列对应
#    2) data name
# 11. 其他注意事项
#    1) 除了DS外, 尽量避免使用指针. 譬如interface.desc
#    2) 除了FLAGS外, data name与field name是一一对应的
#    3) REFERLIST_TBL用于挂接指向另一个TBL的指针
#    4) REFERLIST_DS用于挂接指向另一个DS的指针
################################################################################
--------------------------------------------------------------------------------
[TBL]
TBL_INTERFACE           if                      HASH+LIST       all
[KEY]
char                    name[IFNAME_SIZE]
[DATA]
TBL_INTERFACE_KEY       key                     READ
uint32                  ifindex                 READ            /* ifindex assign in user-space(PMs, Fea) to indicate an interface */
uint64                  portid                  READ            /* port id for ASIC mapping */
uint64                  hostifid                READ            /* hostif id for SAI */
char                    desc[DESC_SIZE+1]       RW
glb_port_speed_t        speed                   RW
glb_port_duplex_t       duplex                  RW
glb_port_unidir_t       unidir                  RW
FLAGS8                  flowcontrol             FLAGS           /* bitmap of GLB_IF_FLOW_CONTROL_ */
uint8                   fec                     RW
uint8                   pfc_admin               RW
uint8                   pfc_oper                RW
uint8                   pfc_priority            RW
uint8                   jumboframe_en           RW
uint8                   isolate_group_id        RW
uint8                   dhcp_snooping_trust     RW              /* dhcp snooping trust interface or not for L2 */
uint8                   phy_status              RW              /* physical port status, glb_port_oper_status_t*/
uint8                   phy_loopback_mode	RW				/* physical port loopback mode, glb_lb_phy_t, valid when phyport_flag is GLB_PHYPORT_FLAG_LOOPBACK */
uint32                  internal_lp_ifindex	RW				/*  this is parameters only use when phy_loopback_mode is internal mode */
glb_if_pvlan_type_t     pvlan_type              RW              /* glb_if_pvlan_type_t */
vid_t                   private_vlan            RW
vid_t                   community_vlan          RW
uint32                  ntp_disable             RW
uint32                  ntp_broadcast_client    RW
uint8                   pvlan_group_id          RW
uint8                   support_speed           READ            /* bitmap of GLB_SUPPORT_SPEED_ */
glb_if_mode_t           mode                    RW              /* glb_if_mode_t */
glb_vlan_port_type_t    vlan_type               RW              /* glb_vlan_port_type_t */
FLAGS32                 flags                   FLAGS
uint32                  mtu                     RW              /* MTU */
glb_port_speed_t        oper_speed              READ
glb_port_speed_t        prev_oper_speed         READ            /* prev oper speed */
glb_port_duplex_t       oper_duplex             READ
glb_port_unidir_t       oper_unidir             RW
uint8                   oper_fec                RW
uint8                   oper_loopback            RW
uint32                  bandwidth               RW              /* bandwidth */
uint32                  tap_used                RW
uint32                  tap_ingress_enable      RW              /* tap group ingress bind to this interface */
char                    tap[TAP_NAME_SIZE]      RW              /* tap group name who used this ingress */
uint32                  tap_mark_vlan           RW              /* tap group mark source vlan */
uint32                  mirror_enable           RW              /* mirror source or destination enable */
uint8                   mirror_igs_id           RW              /* mirror ingress session id */
uint8                   mirror_egs_id           RW              /* mirror egress session id */
uint8                   mirror_dest_id          RW              /* mirror dest session id */
uint8                   admin_up                RW              /* admin_up is used for running-config and snmp get, same to up without errdisable */
uint32                  ip_source_en            RW              /* ip source guard enable */
uint32                  ip_source_type          RW              /* ip source guard type */
uint32                  ip_source_item_number   RW              /* ip source guard num */
uint32                  unicast_rpf_en          RW
uint32                  oper_bandwidth          READ            /* operate bandwidth */
uint32                  bandwidth_may_change      RW           /*used for openflow agg get bandwith*/
uint32                  errdisable_reason       RW              /* port Error disable reason*/
uint32                  fdb_loop_occur          RW              /* occur FDB loop, to trigger errdisable */
uint32                  link_flap_cnt           RW              /* link flap number*/
uint32                  static_security_num     RW              /* static port-security mac num*/
ctc_task_t              *errdisable_timer       READ
uint32                  sflow_flow_en           RW              /* sflow enable flow */
uint32                  sflow_flow_ingress      RW              /* sflow flow ingress */
uint32                  sflow_flow_egress       RW              /* sflow flow egress */
uint32                  sflow_counter_en        RW              /* sflow enable counter */
uint32                  sflow_rate              RW              /* sflow flow rate*/
uint32                  sflow_sequence          RW              /* sflow flow sequence, incremented with each flow sample */
uint32                  sflow_sample_pool       RW              /* sflow total number of packets that could have been sampled */
mac_addr_t              mac_addr                READ            /* l2: hw_mac_addr, l3: route_mac */
mac_addr_t              hw_mac_addr             READ            /* l2 mac addr */
glb_if_type_t           hw_type                 READ            /* glb_if_type_t */
glb_phy_type_t          phy_type                READ            /* glb_phy_type_t */
glb_port_media_t        media                   RW            /* configured media for combo port, glb_port_media_t */
FLAGS8                  phyport_flag            FLAGS           /* bitmap of GLB_PHYPORT_FLAG_ */
FLAGS8                  support_speed_flag      FLAGS           /* bitmap of GLB_SUPPORT_SPEED_ */
REFERLIST_DS_CIRCUIT_ID circuit_id              SUB             /* circuit id hash for dhcp snooping */
char                    igs_acl[ACL_NAME_FULL_NAME_SIZE+1]  RW            /* ingress ACL name*/
char                    egs_acl[ACL_NAME_FULL_NAME_SIZE+1]  RW            /* egress ACL name*/
char                    igs_ipv6_acl[ACL_NAME_FULL_NAME_SIZE+1]  RW       /* ingress Ipv6 ACL name*/
char                    egs_ipv6_acl[ACL_NAME_FULL_NAME_SIZE+1]  RW       /* egress IPv6 ACL name*/
char                    igs_mac_acl[ACL_NAME_FULL_NAME_SIZE+1]  RW       /* ingress MAC ACL name*/
char                    egs_mac_acl[ACL_NAME_FULL_NAME_SIZE+1]  RW       /* egress MAC ACL name*/
char                    igs_policy_map[PMAP_NAME_SIZE+1]  RW    /* ingress ACL name*/
char                    egs_policy_map[PMAP_NAME_SIZE+1]  RW    /* egress ACL name*/
ds_brgif_t              *brgif                  SUB             /* bridge interface info */
ds_lag_t                *lag                    SUB             /* LAG info */
ds_lacp_t               *lacp                   SUB             /* LACP link info */
ds_storm_control_t      *storm_control          SUB             /* storm control information */
ds_aclqos_if_t          *aclqos_if              SUB             /* acl&qos interface configurateion info */
ds_openflow_if_t        *openflow_if            SUB             /* openflow interface configurateion info */
ds_dhclient_if_t        *dhclient_if            SUB             /* dhclient interface configurateion info */
REFERLIST_DS_L2PROTOCOL l2protocol              SUB
void                    *mstp_port              INTERNAL        /* refer to tbl_mstp_port_t */
uint32                  crc_error_check_en      RW              /* crc error check enable */
uint32                  crc_recalculation_en    RW              /* crc recalculation enable */ 
uint32                  mlag_id                 READ            /* MLAG ID */
uint32                  erps_enable             RW
uint32                  erps_pdu_action         RW
uint32                  dot1x_enable            RW
FLAGS32                 dot1x_flag              FLAGS
uint32                  dot1x_guest_vlan        RW
uint32                  vlanclass_group_id        RW
uint32                  vlanclass_active_type    RW
uint32                  vlanclass_default_action RW
uint32                  dot1x_cfg_guest_vlan    RW              /* configurable guest vlan  */
uint8                   egs_acl_en               RW              /* set port egress acl enable or disable */
uint32                  tap_group_igs_ref_cnt    RW              /* tap group ingress configured count  */
uint32                  tap_group_egs_ref_cnt    RW              /* tap group egress configured count  */
uint32                  tap_flow_decap_cnt       RW
uint32                  tap_flow_udf_cnt         RW
uint32                  metadata_enable          RW             /* port enable metadata */
uint32					arpinsp_trust_enable	 RW				/*arp inspection enable/disable on port*/
uint32					arp_numberlimit_enable	 RW				/*arp number limit enable/disable*/
uint32					arp_numberlimit_number	 RW				/*arp number limit number*/
uint32					arp_numberlimit_violate	 RW				/*arp number limit violate: protect, restrict, errdisable*/
uint32                  arp_numberlimit_occur    RW              /* arp number limit occur, to trigger errdisable */
uint32                  arp_rate_limit_errdisable_occur    RW              /* arp rate limit occur, to trigger errdisable */
uint32                  inband_snat_type         RW              /* refer to inband_snat_type_t  */
uint32                  latency_event_high          RW            /* set latency event high threshold */
uint32                  latency_event_low          RW            /* set latency event low threshold */
uint32                  latency_event_enable      RW            /* enable latency event */
uint32                  reflective_bridge_en        RW            /*enable reflective bridge*/
uint32					support_ssm_en			 RW				/*Interface support synce ssm or not*/
uint32                  svlan_tpid        RW            /*svlan-tpid type value*/
l2pro_if_action_vlan_t	l2pro_if_action_vlan		RW		/* l2 protocol action and vlan*/
uint32					l2pro_uplink				RW		/* l2 protocol uplink port*/
uint32                  static_agg_priority                            RW
uint32                  static_agg_is_active                          RW
uint32                  fec_status                          RW
uint32                  cl73_ability                          RW
uint8                   ifg_stats_en                RW       /* flow statistic include ipg(default enable) */
uint8                   openflow_en                RW       /* check openflow enable in fea*/
uint8                   openflow_operation_agg    RW  /*1 is add, 0 is del*/
uint32                  openflow_operation_agg_mem_ifindex  RW 
uint32                  carrier_down_holdtime_interval      RW 
uint32                  hash_value_profile_id  				RW 
uint32                  hash_value_profile_dir  		    RW
uint32                  hash_value_profile_id_agg  		    RW
uint32                  hash_value_agg_hash  		    	RW
glb_poe_cfg_t        poe       RW
uint32                  current_g8032_ring_count            RW 
uint32                  g8032_ring_first[2]			RW
uint32                   cfm_lmep_num                        RW
uint32                   cfm_rmep_num                        RW
[FLAGS]
flowcontrol             flowcontrol_send                GLB_IF_FLOW_CONTROL_SEND                RW
flowcontrol             flowcontrol_receive             GLB_IF_FLOW_CONTROL_RECEIVE             RW
flowcontrol             flowcontrol_oper_send           GLB_IF_FLOW_OPER_CONTROL_SEND           RW
flowcontrol             flowcontrol_oper_receive        GLB_IF_FLOW_OPER_CONTROL_RECEIVE        RW
flags                   up                              GLB_IFF_UP                              RW
flags                   running                         GLB_IFF_RUNNING                         READ
phyport_flag            phyport_combo                   GLB_PHYPORT_FLAG_COMBO                  READ
phyport_flag            phyport_loopback                GLB_PHYPORT_FLAG_LOOPBACK              	RW
phyport_flag            phyport_eee                     GLB_PHYPORT_FLAG_EEE                    READ
phyport_flag            phyport_poe                     GLB_PHYPORT_FLAG_POE                    READ
phyport_flag            phyport_master                  GLB_PHYPORT_FLAG_MASTER                 READ
phyport_flag            phyport_slave                   GLB_PHYPORT_FLAG_SLAVE                  READ
phyport_flag            phyport_unidir                  GLB_PHYPORT_FLAG_UNIDIR                 READ
support_speed_flag      support_100m                    GLB_SUPPORT_SPEED_100M                  READ
support_speed_flag      support_1g                      GLB_SUPPORT_SPEED_1G                    READ
support_speed_flag      support_10g                     GLB_SUPPORT_SPEED_10G                   READ
support_speed_flag      support_40g                     GLB_SUPPORT_SPEED_40G                   READ
support_speed_flag      support_100g                    GLB_SUPPORT_SPEED_100G                  READ
support_speed_flag      support_2_5g                    GLB_SUPPORT_SPEED_2_5G                  READ
support_speed_flag      support_5g                      GLB_SUPPORT_SPEED_5G                    READ
support_speed_flag      support_25g                      GLB_SUPPORT_SPEED_25G                    READ
support_speed_flag      support_50g                      GLB_SUPPORT_SPEED_50G                    READ
dot1x_flag              dot1x_unauthorized              GLB_IF_DOT1X_UNAUTHED                   RW
dot1x_flag              dot1x_dir_in                    GLB_IF_DOT1X_DIR_IN                     RW
dot1x_flag              dot1x_dir_out                   GLB_IF_DOT1X_DIR_OUT                    RW
dot1x_flag              dot1x_mode_mac                  GLB_IF_DOT1X_MODE_MAC                   RW
[MASTER]
ctclib_hash_t           *if_hash
ctclib_slist_t          *if_list
--------------------------------------------------------------------------------
[TBL]
TBL_ROUTE_IF            rtif       HASH+LIST       routed,switch,authd,dhcsnooping,dhcrelay,dhclient,dhcpd6,dhclient6,opm
[KEY]
char                    name[IFNAME_SIZE]
[DATA]
TBL_ROUTE_IF_KEY        key                     READ
uint32                  mtu                     RW              /* MTU same to interface */
mac_addr_t              mac                     RW              /* route-mac address */
glb_if_mode_t           mode_set_before         RW              /* glb_if_mode_t *//*add by chenc for bug 50407, 2018-12-20*/
uint32                  ipv4_enable             RW              /* ipv4 enable */
uint32                  ipv6_enable             RW              /* ipv6 enable */
uint32                  arp_retrans_time        RW              /* retrans time */
uint32                  arp_timeout             RW              /* arp timeout */
uint32                  ifindex                 READ
uint32                  kernel_ifindex          READ            /* ifindex assign in kernel to indicate an interface  */
uint32                  arp_retry_timeout       RW
uint8					rip_recv_version		RW 
uint8					rip_send_version		RW 
uint8					rip_v2_broadcast		RW 
uint8					rip_split_horizon		RW 
uint8					rip_poisoned_reverse	RW 
uint8					rip_auth_mode			RW 
char					rip_auth_string[256]	RW
uint8					ripng_split_horizon		RW 
uint8					ripng_poisoned_reverse	RW 
uint32                  ospf_priority        	RW
uint32                  ospf_cost          		RW
uint32                  ospf_mtu_ignore        	RW
uint32                  ospf_timer_hello        RW
uint32                  ospf_timer_dead        	RW
uint32                  ospf_auth_type        	RW
char                  	ospf_auth_key[256]      RW
uint8                   ospf_network_type       RW
uint32                  ospf6_timer_hello       RW
uint32                  ospf6_timer_dead        RW
uint32                  ospf6_mtu_ignore        RW
uint32                  ospf6_cost          	RW
uint32                  ospf6_priority        	RW
uint8                   ospf6_network_type      RW
uint8                   arp_proxy_en            RW
uint8                   local_arp_proxy_en      RW
uint32                  unicast_rpf_en          RW
uint32                  unicast_rpf_en_v6       RW
uint32                  unicast_en_v6           RW
uint32                  is_up_running           RW
uint32                  ipv6_link_local_had_delete     RW
uint8                   ip_unreachable_en       RW
uint8                   ip_redirects_en         RW
uint8                   dhcp_relay_option_trust RW              /* trust this interface */
uint8                   dhcp_server_group       RW              /* server group for dhcp relay <1-16> */
uint8                   dhcp_pdu_enabled        READ            /* DHCP PDU to CPU enbaled or not */
uint32                  dhcp_client_flags       RW              /* dhcp client flags */
uint8                   dhcp_client_enable      RW              /* dhcp client enable */
char                    dhcp_client_ipv4[GLB_IPV4_MAX_PREFIXLEN]      RW              /* dhcp client ip */
char                    dhcp_client_ipv4_mask[GLB_MAX_IPV4_MASK_LEN]  RW              /* dhcp client mask */
uint32					arp_curr_dynamic		READ			/* arp numberlimit current dynamic arp number */
uint64					arp_attack_number		READ			/* arp numberlimit attack number */
uint8               	arp_rate_limit_en		RW    /* arp rate limit enable flag */
uint32               	arp_rate_limit_pkt_max	RW    /* arp rate limit max pkt rcv in 30s */
uint8               	arp_rate_limit_violation	RW    /* arp rate limit rcv pkts exceed max num , then follow this action to do :restrict, errdisable */
uint32               	arp_rate_limit_pkt_curr	READ    /* arp rate limit current pkt number */
uint8               	arp_rate_limit_port_abnormal_flag	RW    /* arp rate limit rcv pkts exceed max num */
mac_addr_t              vmac1                    RW         /* vrrp vmac address for session1 */
mac_addr_t              vmac2                    RW         /* vrrp vmac address for session2 */
mac_addr_t              vmac3                    RW         /* vrrp vmac address for session3 */
uint8                 	vrrp_session_num        RW              /* vrrp session number */
uint32                 nd_flags                                     RW      /* configuration flags */
uint32                 nd_ra_currrent_hop_limit              RW      /* Current Hop Limit */
uint8                   nd_ra_advertise                          RW      /* ra suppress */
uint8                   nd_ra_advertise_mtu                   RW      /* ra mtu suppress */
uint8                   nd_managed_config                    RW       /* Hosts should use DHCP for address config */
uint8                   nd_other_config                          RW      /* Hosts should use DHCP for non-address config */
uint32                 nd_ra_interval_min                      RW       /* Min RA interval in msec. */
uint32                 nd_ra_interval_max                      RW      /* Max RA interval in msec. */
uint32                 nd_ra_interval                             RW       /* RA interval in msec. */
uint32                 nd_ra_min_delay                         RW       /* RA minimum interval in msec. */
uint32                 nd_retransmit_timer                     RW       /* Retransmit interval in msec. */
uint32                 nd_router_lifetime                        RW       /* Router lifetime  in sec. */
uint32                 nd_base_reachable_time               RW       /* Base reachable time. */
uint32                 nd_reachable_time                       RW       /* Reachable time. */
uint32                 nd_delay_probe_time                    RW       /* time from DELAY to PROBE,  default is DELAY_FIRST_PROBE_TIME */
uint32                 nd_dad_attempts                         RW       /* DAD retry numbers. */
addr_t                 nd_dst                                        RW       /* Destination address for the unicast Router Advertisement. */
uint64                 nd_last_ra_solicited                      RW       /* last time for packet sending, unit is msec */
uint64                 nd_last_ra_unsolicited                   RW       /* last time for packet sending, unit is msec */
uint32                 nd_ra_ocount                               RW       /* number of output ra packets */
uint32                 nd_ra_solicited_ocount                  RW       /* number of solicited ra packets */
uint32                 nd_ra_init_unsolicited_ocount         RW       /* number of unsolicited ra packets */
uint32                 nd_ra_solicited_time                      RW       /* solicited RA delay time. */
uint32                 nd_ra_prefix_default_vlifetime        RW        /* prefix default vlifetime */
uint32                 nd_ra_prefix_default_plifetime        RW        /* prefix default plifetime */
uint16                 nd_ra_prefix_default_onlink            RW        /* prefix default onlink */
uint16                 nd_ra_prefix_default_auto              RW        /* prefix default auto */
addr_t                 nd_rs_dest_addr                           RW        /* RS unicast dest address */
ctc_task_t           *t_ra_solicited                              READ      /* Solicited Router Advertisement */
ctc_task_t           *t_ra_unsolicited                           READ      /* Unsolicited Router Advertisement */
ctc_task_t           *t_delete_all_v6_addr_timer          READ
uint32                 dhcpv6_client_flags        RW              /* dhcpv6 client flags */
uint8                   dhcpv6_client_enable      RW              /* dhcpv6 client enable */
uint8                   nat_enable                RW              /* nat enable, GLB_IF_NAT_DISABLE, GLB_IF_NAT_INSIDE, GLB_IF_NAT_OUTSIDE, default is DISABLE*/
uint8                   nat_category_id           RW              /* nat category id, valid when nat_enable equals to outside.*/
uint32                  set_mirror_enable         RW              /* set mirror source or destination enable */
ctc_task_t             *t_ospf_cost_timer                        READ
ctc_task_t             *t_send_arp_timer                        READ
REFERLIST_DS_CONNECTED  ifc_ipv4                SUB
REFERLIST_DS_CONNECTED_V6  ifc_ipv6                SUB
REFERLIST_DS_OSPF_AUTH 	ospf_md5_key			SUB
REFERLIST_DS_ND_PREFIX     nd_prefix                 SUB    /* nd prefix */
uint8                   pim_mode                RW   
uint8                   multicast               RW   
uint8                   igmp                    RW              /*add by zhw for igmp on/off*/
char                    igmp_version[3]                         RW  /*add by zhw for interface igmp version*/
uint32                  igmp_intf_limit_number          RW              /*add by zhw for interface groups limit number, 1-8192*/
[MASTER]
ctclib_hash_t           *if_hash
ctclib_slist_t          *if_list
--------------------------------------------------------------------------------
[TBL]
TBL_KERNEL_IF           kernel_if               HASH+LIST       routed,switch
[KEY]
uint32                  ifindex
[DATA]
TBL_KERNEL_IF_KEY       key                     READ
char                    name[IFNAME_SIZE]       RW
addr_ipv4_t             ip_addr                 RW
uint32                  masklen                 RW
kernel_if_ipv6_addr_t          ip_addr_prefix_length_v6                 RW
uint32                  vrf_id                  RW
[MASTER]
ctclib_hash_t           *kernel_if_hash
ctclib_slist_t          *kernel_if_list
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_PORT_IF         portif                  HASH+LIST     fea
[KEY]
uint64                  portid
[DATA]
TBL_FEA_PORT_IF_KEY     key                     READ
uint32                  ifindex                 RW              /* ifindex assign in user-space(PMs, Fea) to indicate an interface */
char                    name[IFNAME_SIZE]       RW
uint64                  lag_member              RW
[MASTER]
ctclib_hash_t           *portif_hash
ctclib_slist_t          *portif_list
--------------------------------------------------------------------------------
[TBL]
TBL_VLAN                vlan                    ARRAY        switch,routed,opm,authd,dhcsnooping,dhcrelay,dhcpd6,dhclient6
[KEY]
vid_t                   vid
[DATA]
TBL_VLAN_KEY            key                     READ
uint32                  max_mac_count           RW
uint32                  cur_mac_count           READ
uint32                  instance                RW
uint32                  dhcsnooping             RW
uint32                  arpsnooping             RW
glb_vlan_security_action_t   security_action    RW
uint16                  enable                  RW
uint16                  mac_learning_en         RW
uint64                  op_ifindex              RW
vlan_memberport_t       member_port             READ
char                    name[VLANNAME_SIZE+1]   RW
uint32                  erps_domain_id			RW
uint32                  dot1x_guest_vlan_num    RW
uint32                  stats_en                       RW
uint32                  g8032_ring_id                       RW
[MASTER]
tbl_vlan_t              *vlan_array[GLB_MAX_VLAN_ID]
--------------------------------------------------------------------------------
[TBL]
TBL_PVLAN                       pvlan                   ARRAY           switch
[KEY]
vid_t                           primary_vid
[DATA]
TBL_PVLAN_KEY                   key                     READ
bmp_32_t                        community_group_id      READ            /* bitmap of alloced community group ID */
REFERLIST_DS_PVLAN_COMMUNITY    community_groups        SUB             /* list of community group */
REFERLIST_TBL_INTERFACE         isloate_ports           RW              /* list of isloate ports */
REFERLIST_TBL_INTERFACE         promiscuous_ports       RW              /* list of promiscuous ports */
[MASTER]
tbl_pvlan_t                     *pvlan_array[GLB_MAX_VLAN_ID]
--------------------------------------------------------------------------------
[TBL]
TBL_FDB                 fdb                     HASH            switch,opm,openflow
[KEY]
fdb_key_t                                                       /* mac address and vlan id */
[DATA]
TBL_FDB_KEY             key                     READ
uint32                  ifindex                 RW              /* out interface */
FLAGS32                 flags                   FLAGS
[FLAGS]
flags                   static                  GLB_FDB_FLAG_STATIC             READ
flags                   security                GLB_FDB_FLAG_MAC_SECURITY_EN    READ
flags                   hybrid_flow             GLB_FDB_FLAG_HYBRID_FLOW        READ
[MASTER]
ctclib_hash_t           *fdb_hash
--------------------------------------------------------------------------------
[TBL]
TBL_MCFDB               mcfdb                   HASH            switch
[KEY]
fdb_key_t
[DATA]
TBL_MCFDB_KEY           key                     READ
port_bmp_t              l2mc_port               READ            /* bitmap of ifindex */
uint32                  action_ifindex          READ            /* newest changed action (high u16) and ifindex (low u16) */
uint32                  manual                  READ
[MASTER]
ctclib_hash_t           *mcfdb_hash
--------------------------------------------------------------------------------
[TBL]
TBL_MACFILTER           macflt                  LIST            switch,routed,dhcsnooping,openflow
[KEY]
mac_addr_t              mac
[DATA]
TBL_MACFILTER_KEY       key                     READ
[MASTER]
ctclib_slist_t          *macflt_list
--------------------------------------------------------------------------------
[TBL]
TBL_PSFDB               psfdb                   HASH            switch
[KEY]
fdb_key_t
[DATA]
TBL_PSFDB_KEY           key                     READ
uint32                  ifindex                 RW
FLAGS32                 flags                   FLAGS
[FLAGS]
flags                   port_security           GLB_FDB_FLAG_MAC_SECURITY_EN    READ
[MASTER]
ctclib_hash_t           *psfdb_hash
--------------------------------------------------------------------------------
[TBL]
TBL_IPSG_S_IP           ipsg_s_ip                       HASH+LIST    switch
[KEY]
prefix_t                ip
[DATA]
TBL_IPSG_S_IP_KEY       key                             READ
vid_t                   vid                             RW      /* VLAN id */
uint32                  ifindex                         RW
char                    ifname[IFNAME_SIZE]             RW
mac_addr_t              mac_addr                        RW
prefix_t                ip_addr                         RW
[MASTER]
ctclib_hash_t           *ipsg_s_ip_hash
ctclib_slist_t          *ipsg_s_ip_list
--------------------------------------------------------------------------------
[TBL]
TBL_IPSG_S_MAC          ipsg_s_mac                      HASH+LIST    switch,dhcsnooping
[KEY]
mac_addr_t              mac
[DATA]
TBL_IPSG_S_MAC_KEY      key                             READ
vid_t                   vid                             RW      /* VLAN id */
uint32                  ifindex                         RW
char                    ifname[IFNAME_SIZE]             RW
mac_addr_t              mac_addr                        RW
prefix_t                ip_addr                         RW
[MASTER]
ctclib_hash_t           *ipsg_s_mac_hash
ctclib_slist_t          *ipsg_s_mac_list
--------------------------------------------------------------------------------
[TBL]
TBL_IPSG_FIB             ipsg_fib                       HASH+LIST    switch,dhcsnooping,dhcrelay,dhcpd6,dhclient6
[KEY]
fdb_key_t
[DATA]
TBL_IPSG_FIB_KEY        key                             READ
vid_t                   vid                             RW      /* VLAN id */
uint32                  ifindex                         RW
char                    ifname[IFNAME_SIZE]             RW
mac_addr_t              mac_addr                        RW
prefix_t                ip_addr                         RW
uint32                  ipsg_type                       RW      /* ip source guard type */
uint32               set_dhcbinding_ipsg_tbl_exsit		RW      /* notify dhcp snooping the correspondence IPSG tbl status */
[MASTER]
ctclib_hash_t           *ipsg_fib_hash
ctclib_slist_t          *ipsg_fib_list
--------------------------------------------------------------------------------
[TBL]
TBL_BRG_GLOBAL          brg_glb                 GLOBAL          switch
[KEY]
[DATA]
uint32                  max_static_fdb          RW              /* static unicast FDB */
uint32                  max_l2mcast_fdb         RW              /* static multicast FDB */
uint32                  fdb_aging_time          RW              /* configured ageing-time */
uint32                  oper_fdb_aging_time     RW              /* operate ageing-time, maybe changed for STP topo change */
uint32                  hw_learning_enable      RW
uint32                  ipsg_max_port_binding   RW
uint32                  cur_ipv4_source_guard   RW
glb_port_isolate_t      port_isolate_mode       RW
bmp_64_t                instance                RW
bmp_32_t                pvlan_isolate_id        RW
uint32                  max_instance            READ
uint32                  max_pvlan_isolate_id    READ
uint32                  fdb_loop_errdis_en      RW
uint32                  fdb_loop_max_size       RW
uint32                  fdb_loop_add_rate       RW
uint32                  fdb_loop_disc_cnt       RW
uint32                  fdb_loop_curr_size      RW
uint32                  trap_delay_up           RW
uint32                  trap_delay_down         RW
uint32                  fdb_all_flushing        RW
uint32                  mac_based_vlan_class    RW
uint32                  ipv4_based_vlan_class   RW
uint32                  ipv6_based_vlan_class   RW
uint32                  max_mirror_mac_escape   RW
uint32                  l2protocol_cos   		RW
uint32                  vlan_mapping_entry_cnt  RW
uint32                  vlan_tpid_type1         RW
uint32                  tpid_type1_ref_cnt      RW
uint32                  vlan_tpid_type2         RW
uint32                  tpid_type2_ref_cnt      RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_MSTP_PORT           mstp_port                       HASH+LIST       all
[KEY]
char                    name[IFNAME_SIZE]
[DATA]
TBL_MSTP_PORT_KEY       key                             READ
uint32                  ifindex                         READ
uint32                  adminPortPathCost               RW              /* configured PortPathCost */
uint32                  portPathCost                    READ            /* 17.13.11 PortPathCost, equal to adminPortPathCost or calc by bandwidth */
uint32                  forward_transitions             READ
uint32                  tx_bpdu_count                   READ
uint32                  tx_error_count                  READ
uint32                  rx_bpdu_count                   READ
uint32                  rx_error_count                  READ
uint8                   port_enable                     RW
uint8                   bpdu_loop_count                 READ
uint8                   restricted_role                 RW
uint8                   restricted_tcn                  RW
mstp_edgeport_t         admin_bpduguard                 RW
uint8                   oper_bpduguard                  READ
mstp_edgeport_t         admin_bpdufilter                RW
uint8                   oper_bpdufilter                 READ
uint8                   admin_rootguard                 RW
uint8                   oper_rootguard                  READ
uint8                   admin_loopguard                 RW
uint8                   oper_loopguard                  READ
uint8                   cisco_cfg_format_id             READ
mstp_link_t             adminP2PMac                     RW              /* 6.4.3 Point-to-Point MAC parameters, adminPointToPointMAC, mstp_link_t */
uint8                   operP2PMac                      READ            /* 6.4.3 Point-to-Point MAC parameters, operPointToPointMAC, TRUE/FALSE */
uint8                   agree                           READ            /* 17.19.2 agree */
uint8                   agreed                          READ            /* 17.19.3 agreed */
uint8                   adminForceVersion               RW              /* Configured forceVersion */
uint8                   forceVersion                    READ            /* 17.13.4 Force Protocol Version */
mstp_brg_id_t           designated_rootId               READ            /* 17.19.4/13.24.2 designatedPriority rootId */
uint32                  designated_rootPathCost         READ            /* 17.19.4/13.24.2 designatedPriority rootPathCost */
mstp_brg_id_t           designated_regionRootId         READ            /* 17.19.4/13.24.2 designatedPriority regionRootId */
uint32                  designated_intRootPathCost      READ            /* 17.19.4/13.24.2 designatedPriority internalRootPathCost */
mstp_brg_id_t           designated_designatedBridgeId   READ            /* 17.19.4/13.24.2 designatedPriority designatedBridgeId */
uint16                  designated_designatedPortId     READ            /* 17.19.4/13.24.2 designatedPriority designatedPortId */
uint16                  designated_bridgePortId         READ            /* 17.19.4/13.24.2 designatedPriority bridgePortId */
uint8                   designated_messageAge           READ            /* 17.19.5 designatedTimes - messageAge */
uint8                   designated_fwdDelay             READ            /* 17.19.5 designatedTimes - 17.20.6 FwdDelay */
uint8                   designated_helloTime            READ            /* 17.19.5 designatedTimes - 17.20.7 HelloTime */
uint8                   designated_maxAge               READ            /* 17.19.5 designatedTimes - 17.20.8 MaxAge */
uint8                   disputed                        READ            /* 17.19.6 disputed */
uint8                   fdbFlush                        READ            /* 17.19.7 fdbFlush */
uint8                   forward                         READ            /* 17.19.8 forward */
uint8                   forwarding                      READ            /* 17.19.9 forwarding */
mstp_info_t             infoIs                          READ            /* 17.19.10 infoIs */
uint8                   learn                           READ            /* 17.19.11 learn */
uint8                   learning                        READ            /* 17.19.12 learning */
uint8                   mcheck                          RW              /* 17.19.13 mcheck */
uint8                   newInfo                         READ            /* 17.19.16 newInfo */
uint8                   newInfoMsti                     READ            /* 13.24.8 newInfoMsti */
uint8                   adminEdge                       RW              /* 17.13.1 Admin Edge Port */
uint8                   operEdge                        READ            /* 17.19.17 operEdge */
uint8                   portEnabled                     READ            /* 17.19.18 portEnabled */
uint16                  portId                          READ            /* 17.19.19 portId, Combo of ifindex and priority */
uint16                  priority                        RW              /* port priority */
mstp_brg_id_t           port_rootId                     READ            /* 17.19.21/13.24.12 portPriority - rootId */
uint32                  port_rootPathCost               READ            /* 17.19.21/13.24.12 portPriority - rootPathCost */
mstp_brg_id_t           port_regionRootId               READ            /* 17.19.21/13.24.12 portPriority - regionRootId */
uint32                  port_intRootPathCost            READ            /* 17.19.21/13.24.12 portPriority - internalRootPathCost */
mstp_brg_id_t           port_designatedBridgeId         READ            /* 17.19.21/13.24.12 portPriority - designatedBridgeId */
uint16                  port_designatedPortId           READ            /* 17.19.21/13.24.12 portPriority - designatedPortId */
uint16                  port_bridgePortId               READ            /* 17.19.21/13.24.12 portPriority - bridgePortId */
uint8                   port_messageAge                 READ            /* 17.19.22 portTimes - messageAge */
uint8                   port_fwdDelay                   READ            /* 17.19.22 portTimes - 17.20.6 FwdDelay */
uint8                   port_helloTime                  READ            /* 17.19.22 portTimes - 17.20.7 HelloTime */
uint8                   port_maxAge                     READ            /* 17.19.22 portTimes - 17.20.8 MaxAge */
uint8                   proposed                        READ            /* 17.19.23 proposed */
uint8                   proposing                       READ            /* 17.19.24 proposing */
uint8                   rcvdBpdu                        READ            /* 17.19.25 rcvdBpdu */
mstp_rcvd_info_t        rcvdInfo                        READ            /* 17.19.26 rcvdInfo, result of the rcvInfo() procedure (17.21.8). */
uint8                   rcvdInfoUpdateTimers            READ            /* add for update timers */
uint8                   rcvdMsg                         READ            /* 17.19.27 rcvdMsg */
uint8                   rcvdMSTP                        READ
uint8                   rcvdRSTP                        READ            /* 17.19.28 rcvdRSTP */
uint8                   rcvdSTP                         READ            /* 17.19.29 rcvdSTP */
uint8                   rcvdTc                          READ            /* 17.19.30 rcvdTc */
uint8                   rcvdTcAck                       READ            /* 17.19.31 rcvdTcAck*/
uint8                   rcvdTcn                         READ            /* 17.19.32 rcvdTcn */
uint8                   reRoot                          READ            /* 17.19.33 reRoot */
uint8                   reselect                        READ            /* 17.19.34 reselect */
mstp_port_role_t        role                            READ            /* 17.19.35 role, mstp_port_role_t */
uint8                   selected                        READ            /* 17.19.36 selected */
mstp_port_role_t        selectedRole                    READ            /* 17.19.37 selectedRole, mstp_port_role_t */
uint8                   sendRstp                        READ            /* 17.19.38 sendRSTP */
uint8                   sync                            READ            /* 17.19.39 sync */
uint8                   synced                          READ            /* 17.19.40 synced */
uint8                   tcAck                           READ            /* 17.19.41 tcAck */
uint8                   tcProp                          READ            /* 17.19.42 tcProp */
uint8                   txCount                         READ            /* 17.19.44 txCount */
uint8                   updtInfo                        READ            /* 17.19.45 updtInfo */
uint8                   reRooted                        READ            /* 17.20.10 reRooted */
uint8                   rstpVersion                     READ            /* 17.20.11 rstpVersion */
uint8                   stpVersion                      READ            /* 17.20.12 stpVersion */
uint8                   rcvdInternal                    READ            /* 13.24.14 rcvdInternal */
uint8                   rcvdInternalChange              READ            /* store the port rcvdInternal is changed compare previous rcvdInternal  */
uint8                   hopCount                        READ            /* 13.24.3 remaining Hops */
prx_state_t             prx_state                       READ            /* 17.23 prx_state_t - Port Receive */
ppm_state_t             ppm_state                       READ            /* 17.24 ppm_state_t - Port Protocol Migration */
bdm_state_t             bdm_state                       READ            /* 17.25 bdm_state_t - Bridge Detection */
ptx_state_t             ptx_state                       READ            /* 17.26 ptx_state_t - Port Transmit */
pim_state_t             pim_state                       READ            /* 17.27 pim_state_t - Port Information */
prt_state_t             prt_state                       READ            /* 17.29 prt_state_t - Port Role Transition */
pst_state_t             pst_state                       READ            /* 17.30 pst_state_t - Port State Transition */
tcm_state_t             tcm_state                       READ            /* 17.31 tcm_state_t - Topology Change */
uint8                   fea_state                       READ            /* Port hw state, GLB_BR_PORT_STATE_XXX */
# for stp
#mstp_port_state_t       cist_state                      READ            /* mstp_port_state_t */
#mstp_tc_state_t         cist_tc_state                   READ            /* mstp_tc_state_t */
void                    *bpdu                           READ            /* bpdu_t */
ctc_task_t              *port_timer                     READ
ctc_task_t              *edgeDelayWhile_timer           READ            /* edgeDelayWhile timer Section 17.17.1 */
ctc_task_t              *fdWhile_timer                  READ            /* fdWhile timer Section 17.17.2 */
ctc_task_t              *helloWhen_timer                READ            /* helloWhen timer Section 17.17.3 */
ctc_task_t              *mdelayWhile_timer              READ            /* mdelayWhile Timer Section 17.17.4 */
ctc_task_t              *rbWhile_timer                  READ            /* rbWhile timer Section 17.17.5 */
ctc_task_t              *rcvdInfoWhile_timer            READ            /* rcvdInfoWhile Section 17.17.6 */
ctc_task_t              *rrWhile_timer                  READ            /* rrWhile timer Section 17.17.7 */
ctc_task_t              *tcWhile_timer                  READ            /* tcWhile timer Section 17.17.8 */
ctc_task_t              *hold_timer                     READ
REFERLIST_TBL_MSTI_PORT  msti_list                      READ            /* MSTI instance list */
void                    *p_if                           INTERNAL        /* refer to tbl_interface_t */
[MASTER]
ctclib_hash_t           *port_hash
ctclib_slist_t          *port_list
--------------------------------------------------------------------------------
[TBL]
TBL_MSTI_PORT           msti_port                       HASH+LIST       switch,fea
[KEY]
msti_port_key_t
[DATA]
TBL_MSTI_PORT_KEY       key                             READ
uint32                  ifindex                         READ
uint32                  adminPortPathCost               RW              /* configured PortPathCost */
uint32                  portPathCost                    READ            /* 17.13.11 PortPathCost, equal to adminPortPathCost or calc by bandwidth */
uint32                  forward_transitions             READ
uint8                   newInfoMsti                     READ
uint8                   bpdu_loop_count                 READ
uint8                   restricted_role                 RW
uint8                   restricted_tcn                  RW
uint8                   oper_rootguard                  READ
uint8                   oper_loopguard                  READ
uint8                   agree                           READ            /* 17.19.2 agree */
uint8                   agreed                          READ            /* 17.19.3 agreed */
uint8                   adminForceVersion               RW              /* Configured forceVersion */
mstp_brg_id_t           designated_regionRootId         READ            /* 17.19.4/13.24.2 designatedPriority regionRootId */
uint32                  designated_intRootPathCost      READ            /* 17.19.4/13.24.2 designatedPriority internalRootPathCost */
mstp_brg_id_t           designated_designatedBridgeId   READ            /* 17.19.4/13.24.2 designatedPriority designatedBridgeId */
uint16                  designated_designatedPortId     READ            /* 17.19.4/13.24.2 designatedPriority designatedPortId */
uint16                  designated_bridgePortId         READ            /* 17.19.4/13.24.2 designatedPriority bridgePortId */
uint8                   designated_messageAge           READ            /* 17.19.5 designatedTimes - messageAge */
uint8                   designated_fwdDelay             READ            /* 17.19.5 designatedTimes - 17.20.6 FwdDelay */
uint8                   designated_helloTime            READ            /* 17.19.5 designatedTimes - 17.20.7 HelloTime */
uint8                   designated_maxAge               READ            /* 17.19.5 designatedTimes - 17.20.8 MaxAge */
uint8                   disputed                        READ            /* 17.19.6 disputed */
uint8                   fdbFlush                        READ            /* 17.19.7 fdbFlush */
uint8                   forward                         READ            /* 17.19.8 forward */
uint8                   forwarding                      READ            /* 17.19.9 forwarding */
mstp_info_t             infoIs                          READ            /* 17.19.10 infoIs */
uint8                   learn                           READ            /* 17.19.11 learn */
uint8                   learning                        READ            /* 17.19.12 learning */
uint8                   newInfo                         READ            /* 17.19.16 newInfo */
uint16                  portId                          READ            /* 17.19.19 portId, Combo of ifindex and priority */
uint16                  priority                        RW              /* port priority */
mstp_brg_id_t           port_rootId                     READ            /* 17.19.21 portPriority - rootId */
uint32                  port_rootPathCost               READ            /* 17.19.21 portPriority - rootPathCost */
mstp_brg_id_t           port_designatedBridgeId         READ            /* 17.19.21 portPriority - designatedBridgeId */
uint16                  port_designatedPortId           READ            /* 17.19.21 portPriority - designatedPortId */
uint16                  port_bridgePortId               READ            /* 17.19.21 portPriority - bridgePortId */
uint8                   port_messageAge                 READ            /* 17.19.22 portTimes - messageAge */
uint8                   port_fwdDelay                   READ            /* 17.19.22 portTimes - 17.20.6 FwdDelay */
uint8                   port_helloTime                  READ            /* 17.19.22 portTimes - 17.20.7 HelloTime */
uint8                   port_maxAge                     READ            /* 17.19.22 portTimes - 17.20.8 MaxAge */
uint8                   proposed                        READ            /* 17.19.23 proposed */
uint8                   proposing                       READ            /* 17.19.24 proposing */
uint8                   rcvdBpdu                        READ            /* 17.19.25 rcvdBpdu */
mstp_rcvd_info_t        rcvdInfo                        READ            /* 17.19.26 rcvdInfo, result of the rcvInfo() procedure (17.21.8). */
uint8                   rcvdMsg                         READ            /* 17.19.27 rcvdMsg */
uint8                   rcvdRSTP                        READ            /* 17.19.28 rcvdRSTP */
uint8                   rcvdSTP                         READ            /* 17.19.29 rcvdSTP */
uint8                   rcvdTc                          READ            /* 17.19.30 rcvdTc */
uint8                   rcvdTcAck                       READ            /* 17.19.31 rcvdTcAck*/
uint8                   rcvdTcn                         READ            /* 17.19.32 rcvdTcn */
uint8                   reRoot                          READ            /* 17.19.33 reRoot */
uint8                   reselect                        READ            /* 17.19.34 reselect */
mstp_port_role_t        role                            READ            /* 17.19.35 role, mstp_port_role_t */
uint8                   selected                        READ            /* 17.19.36 selected */
mstp_port_role_t        selectedRole                    READ            /* 17.19.37 selectedRole, mstp_port_role_t */
uint8                   sync                            READ            /* 17.19.39 sync */
uint8                   synced                          READ            /* 17.19.40 synced */
uint8                   tcAck                           READ            /* 17.19.41 tcAck */
uint8                   tcProp                          READ            /* 17.19.42 tcProp */
uint8                   txCount                         READ            /* 17.19.44 txCount */
uint8                   updtInfo                        READ            /* 17.19.45 updtInfo */
uint8                   reRooted                        READ            /* 17.20.10 reRooted */
uint8                   hopCount                        READ            /* 13.24.3 remaining Hops */
#prx_state_t             prx_state                       READ            /* 17.23 prx_state_t - Port Receive */
ppm_state_t             ppm_state                       READ            /* 17.24 ppm_state_t - Port Protocol Migration */
#bdm_state_t             bdm_state                       READ            /* 17.25 bdm_state_t - Bridge Detection */
#ptx_state_t             ptx_state                       READ            /* 17.26 ptx_state_t - Port Transmit */
pim_state_t             pim_state                       READ            /* 17.27 pim_state_t - Port Information */
prt_state_t             prt_state                       READ            /* 17.29 prt_state_t - Port Role Transition */
pst_state_t             pst_state                       READ            /* 17.30 pst_state_t - Port State Transition */
tcm_state_t             tcm_state                       READ            /* 17.31 tcm_state_t - Topology Change */
uint8                   fea_state                       READ            /* Port hw state, GLB_BR_PORT_STATE_XXX */
void                    *bpdu                           READ            /* msti_bpdu_t */
ctc_task_t              *fdWhile_timer                  READ            /* fdWhile timer Section 17.17.2 */
ctc_task_t              *mdelayWhile_timer              READ            /* mdelayWhile Timer Section 17.17.4 */
ctc_task_t              *rbWhile_timer                  READ            /* rbWhile timer Section 17.17.5 */
ctc_task_t              *rcvdInfoWhile_timer            READ            /* rcvdInfoWhile Section 17.17.6 */
ctc_task_t              *rrWhile_timer                  READ            /* rrWhile timer Section 17.17.7 */
ctc_task_t              *tcWhile_timer                  READ            /* tcWhile timer Section 17.17.8 */
ctc_task_t              *hold_timer                     READ
void                    *p_if                           INTERNAL        /* refer to tbl_interface_t */
void                    *p_port                         INTERNAL        /* refer to tbl_mstp_port_t */
[MASTER]
ctclib_hash_t           *port_msti_hash
ctclib_slist_t          *port_msti_list
--------------------------------------------------------------------------------
[TBL]
TBL_MSTP_INSTANCE       inst                            LIST            switch,opm,fea
[KEY]
uint32                  instance
[DATA]
TBL_MSTP_INSTANCE_KEY   key                             READ
uint64                  instance_oid                    READ            /* OID alloced by SAI */
vlan_bmp_t              vlan                            RW
uint32                  bridge_priority                 RW              /* MSTI instance priority */
mstp_brg_id_t           bridge_id                       READ            /* 17.18.2 BridgeIdentifier */
uint32                  root_portId                     READ            /* 17.18.5 rootPortId */
mstp_brg_id_t           root_rootId                     READ            /* 17.18.6/13.23.6 rootPriority - rootId */
uint32                  root_rootPathCost               READ            /* 17.18.6/13.23.6 rootPriority - rootPathCost */
mstp_brg_id_t           root_designatedBridgeId         READ            /* 17.18.6/13.23.6 rootPriority - designatedBridgeId */
uint16                  root_designatedPortId           READ            /* 17.18.6/13.23.6 rootPriority - designatedPortId */
uint16                  root_bridgePortId               READ            /* 17.18.6/13.23.6 rootPriority - bridgePortId */
uint32                  root_messageAge                 READ            /* 17.18.7 rootTimes - messageAge */
uint32                  root_fwdDelay                   READ            /* 17.18.7 rootTimes - 17.20.6 fwdDelay */
uint32                  root_helloTime                  READ            /* 17.18.7 rootTimes - 17.20.7 helloTime */
uint32                  root_maxAge                     READ            /* 17.18.7 rootTimes - 17.20.8 maxAge */
uint8                   prs_state                       READ            /* prs_state_t - Port Role Selection */
uint8                   hopCount                        READ
tbl_msti_port_t         *root_port                      INTERNAL
uint32                g8032_ring_id                RW
REFERLIST_TBL_MSTI_PORT port_list                       READ            /* MSTI port list */
[MASTER]
ctclib_slist_t          *inst_list
--------------------------------------------------------------------------------
[TBL]
TBL_MSTP_GLOBAL         mstp_glb                        GLOBAL          switch,opm,fea
[KEY]
[DATA]
mstp_type_t             type                            RW              /* mstp_type_t */
uint32                  no_mst_config                   RW              /* remove all mst configuration */
uint32                  external_root_path_cost         READ
uint32                  internal_root_path_cost         READ
uint32                  root_portId                     READ            /* 17.18.5 rootPortId */
mstp_brg_id_t           root_rootId                     READ            /* 17.18.6/13.23.6 rootPriority - rootId */
uint32                  root_rootPathCost               READ            /* 17.18.6/13.23.6 rootPriority - rootPathCost */
mstp_brg_id_t           root_regionRootId               READ            /* 17.18.6/13.23.6 rootPriority - regionRootId */
uint32                  root_intRootPathCost            READ            /* 17.18.6/13.23.6 rootPriority - internalRootPathCost */
mstp_brg_id_t           root_designatedBridgeId         READ            /* 17.18.6/13.23.6 rootPriority - designatedBridgeId */
uint16                  root_designatedPortId           READ            /* 17.18.6/13.23.6 rootPriority - designatedPortId */
uint16                  root_bridgePortId               READ            /* 17.18.6/13.23.6 rootPriority - bridgePortId */
uint32                  root_messageAge                 READ            /* 17.18.7 rootTimes - messageAge */
uint32                  root_fwdDelay                   READ            /* 17.18.7 rootTimes - 17.20.6 fwdDelay */
uint32                  root_helloTime                  READ            /* 17.18.7 rootTimes - 17.20.7 helloTime */
uint32                  root_maxAge                     READ            /* 17.18.7 rootTimes - 17.20.8 maxAge */
uint32                  bridge_fwdDelay                 RW              /* 17.20.6 FwdDelay */
uint32                  bridge_helloTime                RW              /* 17.20.7 HelloTime */
uint32                  bridge_maxAge                   RW              /* 17.20.8 MaxAge */
uint32                  bridge_maxHops                  RW
uint32                  bridge_priority                 RW              /* 17.18.3 BridgePriority */
mstp_brg_id_t           bridge_id                       READ            /* 17.18.2 BridgeIdentifier */
sal_time_t              last_tc_time                    READ
uint32                  num_topo_changes                READ
mlag_role_t             mlag_role                       READ            /* MLAG module notified mlag_role */
uint8                   mlag_enable                     READ            /* MLAG module notified mlag_enable */
uint8                   enable                          RW              /* enable xSTP global */
#uint8                   topology_change                 READ
uint8                   topology_change_detected        READ
uint8                   bpduguard                       RW
uint8                   bpdufilter                      RW
uint8                   admin_cisco                     RW
uint8                   oper_cisco                      READ
uint8                   txHoldCount                     RW              /* 17.13.12 Transmit Hold Count */
mstp_path_cost_t        pathcost_standard               RW              /* mstp_path_cost_t */
uint8                   tc_protection                   RW
uint8                   hopCount                        READ
uint16                  recv_tcn_threshold              READ
uint16                  recv_tcn_number                 READ
uint32                  root_port_ifindex               READ            /* ifindex of root port */
uint32                  alternate_port_ifndex           READ            /* ifindex of alternate port */
prs_state_t             prs_state                       READ            /* prs_state_t - Port Role Selection */
uint8                   mstp_format_id                  READ
uint16                  mstp_revision_level             RW
char                    mstp_region_name[MSTP_REGION_NAME_LEN+1] RW
mstp_digest_t           mstp_digest                     READ
tbl_mstp_port_t         *root_port                      INTERNAL
tbl_mstp_port_t         *alternate_port                 INTERNAL
ctc_task_t              *tc_protection_timer            READ
uint32                  of_exclude_all_vlan             RW              /* openflow exclude all VLANs */
vlan_bmp_t              of_include_vlan_bmp             RW              /* openflow include VLAN bitmap */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_LLDP_GLOBAL         lldp_glb                        GLOBAL          switch
[KEY]
[DATA]
uint8                   enable                          RW
uint8                   system_mac_en                   RW
uint8                   config_flag                     RW
mac_addr_t              system_mac                      RW
addr_t                  management_ip                   RW
uint32                  tx_hold                         RW
uint32                  tx_interval                     RW
uint32                  tx_delay                        RW
uint32                  reinit_delay                    RW
uint32                  system_capability               RW            /* bitmap of lldp_sys_cap_t */
char                    system_name[LLDP_NAME_SIZE+1]   RW
char                    system_desc[LLDP_DESCRIPTION_SIZE+1] RW
char                    system_desc_default[LLDP_DESCRIPTION_SIZE+1] RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_LLDP_IF             lldp_if                         LIST            switch
[KEY]
uint32                  ifindex
[DATA]
TBL_LLDP_IF_KEY         key                             RW
lldp_if_mode_t          mode                            RW              /* lldp_if_mode_t */
uint32                  tx_ttl                          RW
uint32                  tx_count                        RW
uint32                  rx_count                        READ
uint32                  rx_error_count                  READ
uint32                  rx_discard_count                READ
uint32                  tlv_discard_count               READ
uint32                  tlv_unrecognized_count          READ
uint32                  aged_count                      READ
uint32                  tlv_enable_basic                RW            /*basic tvl*/
uint32                  tlv_enable_8021                 RW            /*8021 tvl*/
uint32                  tlv_enable_8023                 RW            /*8023 tvl*/
uint32                  tlv_enable_med                  RW            /*med tvl*/
uint32                  ppvid_flag                      RW            /*8021 prot-protocol-vlan-id TLV:flag*/
uint32                  ppvid                           RW            /*8021 prot-protocol-vlan-id TLV:value*/
uint32                  protocol_id                     RW            /*8021 protocol-id TLV*/   /* bitmap of lldp_proto_t */
char                    vlan_name[VLANNAME_SIZE+1]      RW            /*8021 vlan-name TLV: vlan-name*/
uint32                  vlan_name_id                    RW            /*8021 vlan-name TLV: vlan-name-id*/
uint32                  mdi_support                     READ          /*8023 Power Via MDI TLV :mdi_support*/
uint32                  pse_power_pair                  READ          /*8023 Power Via MDI TLV :pse_power_pair*/
uint32                  power_class                     READ          /*8023 Power Via MDI TLV :power_class*/
uint32                  med_capbility                   READ          /*med LLDP-MED Capabilities TLV :med_capbility*/
uint32                  med_dev_type                    READ          /*med LLDP-MED Capabilities TLV :med_dev_type*/
uint32                  med_power_flag                  READ          /*med Extended Power-via-MDI TLV :med_power_flag*/
uint32                  med_power_value                 READ          /*med Extended Power-via-MDI TLV :med_power_value*/
uint32                  med_policy_flag                 READ          /*med Network Policy TLV：med_policy_flag*/
uint32                  med_lci_format                  RW            /*med Location id TLV：location_id format*/
char                    med_lci_coordinate[LLDP_MED_LCI_COORDINATE_SIZE+1]  RW     /*med Location id TLV：location_id format: coordinate*/
char                    med_lci_elin[LLDP_MED_LCI_ELIN_MAX_SIZE+1]          RW     /*med Location id TLV：location_id format: ecs-elin*/
lldp_civic_address_t    med_lci_civic                                       RW     /*med Location id TLV：location_id format: civic*/
ctc_task_t              *tx_timer                       RW
void                    *intf                           INTERNAL        /* refer to tbl_interface_t */
REFERLIST_DS_LLDP_NEIGHBOUR   neigh_list                SUB
[MASTER]
ctclib_slist_t          *if_list
--------------------------------------------------------------------------------
[TBL]
TBL_MLAG                mlag                            GLOBAL          switch,dhcsnooping
[KEY]
[DATA]
uint32                  enable                          RW
addr_t                  local_addr                      RW
uint32                  reload_delay_interval           RW
uint32                  reload_delay_auto               RW
mlag_role_t             role                            READ
mac_addr_t              local_sysid                     READ
mac_addr_t              remote_sysid                    READ
mac_addr_t              mlag_sysid                      READ
mac_addr_t              peer_routemac                   READ
uint16                  local_syspri                    READ
uint16                  remote_syspri                   READ
uint16                  mlag_syspri                     READ
vlan_bmp_t              peer_vlanif_bmp                 READ
vlan_bmp_t              peer_fdb_bmp                    READ
uint32                  peer_link_ifindex               RW
uint32                  flush_fdb_mi                    READ            /* flush FDB MI when MLAG connection is closed */
ctc_task_t             *reload_delay_timer              READ
void                   *peer_link_if                    INTERNAL        /* refer to tbl_interface_t */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_MLAG_PEER           peer                            GLOBAL          switch,dhcsnooping
[KEY]
[DATA]
addr_t                  peer_addr                       RW
uint32                  set_timers                      RW
uint32                  holdtime                        RW
uint32                  keepalive                       RW
int32                   server_sock                     READ            /* server socket ID */
int32                   client_sock                     READ            /* client socket ID */
uint32                  v_auto_start                    READ            /* Peer FSM Timer value auto_start */
uint32                  v_connect                       READ            /* Peer FSM Timer value connect */
uint32                  v_holdtime                      READ            /* Peer FSM Timer value holdtime */
uint32                  v_keepalive                     READ            /* Peer FSM Timer value keepalive */
uint32                  open_in                         READ            /* Open message input count */
uint32                  open_out                        READ            /* Open message output count */
uint32                  keepalive_in                    READ            /* Keepalive input count */
uint32                  keepalive_out                   READ            /* Keepalive output count */
uint32                  disconnect_in                   READ            /* Disconnect input count */
uint32                  disconnect_out                  READ            /* Disconnect output count */
uint32                  fdbsync_in                      READ            /* Fdbsync input count */
uint32                  fdbsync_out                     READ            /* Fdbsync output count */
uint32                  failover_in                     READ            /* Failover input count */
uint32                  failover_out                    READ            /* Failover output count */
uint32                  conf_in                         READ            /* Conf input count */
uint32                  conf_out                        READ            /* Conf output count */
uint32                  syspri_in                       READ            /* Syspri input count */
uint32                  syspri_out                      READ            /* Syspri output count */
uint32                  peer_fdb_in                     READ
uint32                  peer_fdb_out                    READ
uint32                  stp_in                          READ
uint32                  stp_out                         READ
uint32                  stp_global_in                   READ
uint32                  stp_global_out                  READ
uint32                  stp_port_in                     READ
uint32                  stp_port_out                    READ
uint32                  stp_packet_in                   READ
uint32                  stp_packet_out                  READ
uint32                  stp_instance_in                 READ
uint32                  stp_instance_out                READ
uint32                  stp_state_in                    READ
uint32                  stp_state_out                   READ
uint32                  established                     READ
uint32                  dropped                         READ
uint8                   ttl                             READ
sal_time_t              uptime                          READ
sal_time_t              lastread                        READ
uint32                  mpf_state                       READ           /* mlag_state_t */
ctc_task_t             *t_auto_start                    READ
ctc_task_t             *t_holdtime                      READ
ctc_task_t             *t_keepalive                     READ
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_MLAG_PORT           port                            LIST          switch,dhcsnooping
[KEY]
uint32                  id
[DATA]
TBL_MLAG_PORT_KEY       key                             READ
uint32                  peer_conf                       READ
uint32                  peer_if_up                      READ
uint32                  stp_port_enable                 READ
uint32                  ifindex                         READ
uint32                  protect_en                      READ            /* is MLAG local port protect enable, update FDB to peer-link port */
void                   *p_if                            INTERNAL        /* refer to tbl_interface_t */
[MASTER]
ctclib_slist_t          *port_list
--------------------------------------------------------------------------------
[TBL]
TBL_ISOLATION           iso                     ARRAY           switch
[KEY]
uint32                  isolation_id
[DATA]
TBL_ISOLATION_KEY       key                     READ
uint64                  isolation_oid           READ
REFERLIST_TBL_INTERFACE ports                   READ            /* list of isolation ports */
[MASTER]
tbl_isolation_t         *iso_array[GLB_PORT_ISOLATE_GROUP_MAX]
--------------------------------------------------------------------------------
[TBL]
TBL_ROUTE_GLOBAL        rt_glb                  GLOBAL          routed,fea
[KEY]
[DATA]
uint32                  gratuitous_arp_learn_en RW
uint32                  arp_pkt_rx_count        READ
uint32                  arp_pkt_tx_count        READ
uint32                  arp_pkt_discard_count   READ
uint32                  arp_count               READ
uint32                  multipath_num           READ
uint32                  max_static              RW
uint32                  icmp_error_ratelimit    RW
uint8                   ip_redirects_global_en         RW
uint32                  current_static_routes   READ
uint32                  current_ecmp_routes     READ   /*maybe not used*/
uint32                  current_ecmp_groups     READ   /*regardless interface up down*/
uint32                  current_remote_routes   READ
uint32                  current_host_routes     READ
uint32                  current_indirect_ipv4_route_num                  READ       /*regardless interface up down*/
uint32                  current_static_v6_routes   READ     /*ipv6*/
uint32                  current_ecmp_v6_routes     READ     /*ipv6*/
uint32                  current_ecmp_v6_groups     READ     /*ipv6*//*regardless interface up down*/
uint32                  current_remote_v6_routes   READ     /*ipv6*/
uint32                  current_indirect_ipv6_route_num                  READ       /*regardless interface up down*/
uint32                  active_local            READ
uint32                  active_static           READ
uint32                  active_connected        READ
uint32                  active_rip              READ
uint32                  active_ospf             READ
uint32                  active_bgp              READ
uint32					arpinsp_logbuf_entrynum RW
uint32					arpinsp_logbuf_curnum 	RW
uint32					arpinsp_logbuf_lognum	RW
uint32					arpinsp_logbuf_logsec	RW
uint32					arpinsp_validate_flag	RW
uint32                  fib_full                READ
uint32                  ipv6_enable             RW
uint32                  nd_hop_limit            RW
uint32                  vty_connected           READ         /* vty connected flag */
uint32                  vty_nonconn_count       READ         /* vty non-connected cmd count */
glb_vty_mode_t          vty_mode                READ         /* glb_vty_mode_t */
ctc_task_t             *arp_aging_timer         READ
ctc_task_t             *arpratelimit_timer      READ  
sal_time_t              arpratelimit_timer_start_time_sec   RW
sal_time_t              arpratelimit_timer_start_time_msec   RW
uint8                   buf[GLB_ND_PKT_BUF]                     RW    /* nd packet buffer */
uint32                  pkt_len                 RW
uint32                  nd_count                RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_BGP        			bgp                  	HASH+LIST          routed
[KEY]
uint32					as_id
[DATA]
TBL_BGP_KEY				key						READ
addr_ipv4_t             router_id        		READ
uint32					redistribute				READ 
uint32					red_metric[RT_ROUTE_MAX]	READ 
[MASTER]
ctclib_hash_t           *bgp_hash
ctclib_slist_t          *bgp_list
--------------------------------------------------------------------------------
[TBL]
TBL_BGP_NETWORK         bgp_network            HASH+LIST          routed
[KEY]
addr_t
[DATA]
TBL_BGP_NETWORK_KEY		key						READ
addr_ipv4_t                   mask	 				READ
[MASTER]
ctclib_hash_t           *bgp_network_hash
ctclib_slist_t          *bgp_network_list
-------------------------------------------------------------------------------- 
[TBL] 
TBL_BGP_NEIGHBOR       	bgp_neighbor          		HASH+LIST          routed 
[KEY] 
addr_t
[DATA] 
TBL_BGP_NEIGHBOR_KEY	key							READ 
uint32                  remote_as	 				READ
uint32                  ebgp_multihop	 			READ
char                  	password[32]	 			READ
char                  	intf_name[IFNAME_SIZE]		READ
addr_ipv4_t             intf_addr        			READ
uint32                  shutdown	 				READ
uint32                  next_hop_self	 			READ
[MASTER] 
ctclib_hash_t           *bgp_neighbor_hash 
ctclib_slist_t          *bgp_neighbor_list
--------------------------------------------------------------------------------
[TBL]
TBL_OSPF        		ospf                  	HASH+LIST          routed
[KEY]
uint32					id
[DATA]
TBL_OSPF_KEY			key						READ
addr_ipv4_t             router_id        		READ
uint32					default_originate		READ
uint32					redistribute			READ
ctc_task_t               *t_ospf_redistribute_connected_timer                 READ
ctc_task_t               *t_ospf_redistribute_static_timer                        READ
[MASTER]
ctclib_hash_t           *ospf_hash
ctclib_slist_t          *ospf_list
--------------------------------------------------------------------------------
[TBL]
TBL_OSPF6        		ospf6                  	HASH+LIST          routed
[KEY]
uint32					id
[DATA]
TBL_OSPF6_KEY			key						READ
addr_ipv4_t             router_id        		READ
uint32					default_originate		READ
uint32					redistribute			READ
ctc_task_t               *t_ospf6_redistribute_connected_timer                 READ
ctc_task_t               *t_ospf6_redistribute_static_timer                        READ
[MASTER]
ctclib_hash_t           *ospf6_hash
ctclib_slist_t          *ospf6_list
--------------------------------------------------------------------------------
[TBL]
TBL_OSPF6_INTERFACE        		ospf6_interface                  	HASH+LIST          routed
[KEY]
char                    name[IFNAME_SIZE]
[DATA]
TBL_OSPF6_INTERFACE_KEY			key							READ
char					interface[IFNAME_SIZE]		READ
addr_ipv4_t             area_id        				READ
[MASTER]
ctclib_hash_t           *ospf6_interface_hash
ctclib_slist_t          *ospf6_interface_list
--------------------------------------------------------------------------------
[TBL]
TBL_OSPF_NETWORK        ospf_network            HASH+LIST          routed
[KEY]
prefix_t
[DATA]
TBL_OSPF_NETWORK_KEY	key						READ
uint32                  area_id 				READ
[MASTER]
ctclib_hash_t           *ospf_network_hash
ctclib_slist_t          *ospf_network_list
--------------------------------------------------------------------------------
[TBL]
TBL_OSPF_AREA_AUTH      ospf_area_auth          HASH+LIST          routed
[KEY]
uint32					areaid
[DATA]
TBL_OSPF_AREA_AUTH_KEY	key						READ
uint32                  auth_type 				READ
[MASTER]
ctclib_hash_t           *ospf_area_auth_hash
ctclib_slist_t          *ospf_area_auth_list
--------------------------------------------------------------------------------
[TBL]
TBL_OSPF_AREA_RANGE      ospf_area_range          HASH+LIST          routed
[KEY]
ospf_area_range_key_t
[DATA]
TBL_OSPF_AREA_RANGE_KEY	key						READ
uint32                  advertise 				READ
[MASTER]
ctclib_hash_t           *ospf_area_range_hash
ctclib_slist_t          *ospf_area_range_list
--------------------------------------------------------------------------------
[TBL]
TBL_OSPF6_AREA_RANGE      ospf6_area_range          HASH+LIST          routed
[KEY]
ospf6_area_range_key_t
[DATA]
TBL_OSPF6_AREA_RANGE_KEY	key						READ
uint32                  advertise 				READ
[MASTER]
ctclib_hash_t           *ospf6_area_range_hash
ctclib_slist_t          *ospf6_area_range_list
--------------------------------------------------------------------------------
[TBL]
TBL_IPROUTE_NODE        rn                      HASH+LIST       routed,openflow
[KEY]
route_node_key_t
[DATA]
TBL_IPROUTE_NODE_KEY    key                     READ
uint32                  route_type            READ
uint32                  distance                READ
uint32                  multipath               READ
nexthop_key_t           nh_key                  RW
nexthop_ecmp_t          nh_group                RW
[MASTER]
ctclib_hash_t           *rn_hash
ctclib_slist_t          *rn_list
--------------------------------------------------------------------------------
[TBL]
TBL_IPROUTE_NODE_ADD_FAIL        rn                      HASH+LIST       routed
[KEY]
route_node_key_t
[DATA]
TBL_IPROUTE_NODE_ADD_FAIL_KEY    key                     READ
uint32                  distance                READ
uint32                  multipath               READ
nexthop_key_t           nh_key                  RW
nexthop_ecmp_t          nh_group                RW
[MASTER]
ctclib_hash_t           *add_fail_hash
ctclib_slist_t          *add_fail_list
--------------------------------------------------------------------------------
[TBL]
TBL_IPROUTE_NODE_ADD_FAIL_COUNT        rn                      HASH+LIST       routed
[KEY]
route_node_key_t
[DATA]
TBL_IPROUTE_NODE_ADD_FAIL_COUNT_KEY    key                     READ
uint32                  distance                READ
uint32                  multipath               READ
nexthop_key_t           nh_key                  RW
nexthop_ecmp_t          nh_group                RW
[MASTER]
ctclib_hash_t           *add_fail_hash
ctclib_slist_t          *add_fail_list
--------------------------------------------------------------------------------
[TBL]
TBL_STATIC_ROUTE_CFG    rst_cfg                 HASH+LIST       routed
[KEY]
route_node_key_t
[DATA]
TBL_STATIC_ROUTE_CFG_KEY        key             READ
uint32                          distance        READ
uint16                          track_id        RW      /* track object id */
uint16                          track_status    RW      /* track object status */
uint8                           nexthop_type_v6     RW     /*for ipv6*/
uint8                           dhcp_client            RW
[MASTER]
ctclib_hash_t           *rst_cfg_hash
ctclib_slist_t          *rst_cfg_list
--------------------------------------------------------------------------------
[TBL]
TBL_STATIC_RT_CNT       rt_cnt                  HASH       routed
[KEY]
route_node_key_with_ad_t
[DATA]
TBL_STATIC_RT_CNT_KEY   key                     READ
uint32                  refer_cnt               READ
uint32                  has_blackhole               READ
nexthop_ecmp_routed_t       nh_group    RW
[MASTER]
ctclib_hash_t           *rt_cnt_hash
--------------------------------------------------------------------------------
[TBL]
TBL_ARP_FIB             arp_fib                HASH           routed,openflow
[KEY]
addr_ipv4_t             ip
[DATA]
TBL_ARP_FIB_KEY         key                     READ
uint32                  ifindex                 READ
arp_type_t              type                    READ           /* arp_type_t */
uint32                  vrf_id                  READ
char                    ifname[IFNAME_SIZE]     RW
uint32                  flags                   READ
mac_addr_t              mac_addr                READ
uint32                  is_router               READ
uint32                  route_ref               READ
[MASTER]
ctclib_hash_t           *arp_fib_hash
--------------------------------------------------------------------------------
[TBL]
TBL_ARP                 arp                     HASH+LIST           routed,ptp
[KEY]
addr_ipv4_t             ip
[DATA]
TBL_ARP_KEY             key                     READ
arp_type_t              type                    RW            /* arp_type_t */
char                    ifname[IFNAME_SIZE]     RW
uint8                   vrf_id                  RW
mac_addr_t              mac_addr                RW
uint64                  rif_id                  RW
uint32                  ifindex                 READ
uint32                  flags                   READ
as_t                    status                  READ
uint32                  route_ref               READ
sal_time_t              uptime                  READ
uint32                  aging_delay             READ
uint32                  is_gratuitous           READ           /* if entry is due to gratuitous ARP Request */
uint32                  is_proxy                READ
uint32                  is_router               READ
uint32                  retry_count             READ
uint32                  is_bfd_ref              READ
uint8                  *rx_buf                  INTERNAL       /* receive ARP packet buf */
uint32                  is_static_route_dup      READ
REFERLIST_DS_STATIC_ROUTE_DUP_IPV4_NH          static_route_dup_ipv4_nh    SUB
ctc_task_t             *retry_timer             READ
ctc_task_t             *refresh_timer           READ
ctc_task_t             *gra_rsp_timer           READ
[MASTER]
ctclib_hash_t           *arp_hash
ctclib_slist_t          *arp_list
--------------------------------------------------------------------------------
[TBL]
TBL_NEXTHOP              nh                     HASH         routed
[KEY]
nexthop_key_t
[DATA]
TBL_NEXTHOP_KEY          key                    READ
uint32                   refcnt                 RW
[MASTER]
ctclib_hash_t           *nh_hash
--------------------------------------------------------------------------------
[TBL]
TBL_NEXTHOP_GROUP        nhg                     HASH+LIST         routed
[KEY]
nexthop_ecmp_t		     
[DATA]
TBL_NEXTHOP_GROUP_KEY   key						READ
nexthop_ecmp_t          nh_group                RW
uint64                  nhg_oid                 RW
uint32                  ref_cnt                 RW
uint32                  ecmp_hash               RW
[MASTER]
ctclib_hash_t           *nhg_hash
ctclib_slist_t          *nhg_list
--------------------------------------------------------------------------------
[TBL]
TBL_NEXTHOP_GROUP_ROUTED        nhg_routed                     HASH+LIST         routed
[KEY]
nexthop_ecmp_routed_t		     
[DATA]
TBL_NEXTHOP_GROUP_ROUTED_KEY   key						READ
uint64                  nhg_oid                 RW
uint32                  ref_cnt                 RW
uint32                  ecmp_hash               RW
[MASTER]
ctclib_hash_t           *nhg_hash
ctclib_slist_t          *nhg_list
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_NEXTHOP          nh                     HASH         fea
[KEY]
nexthop_key_t
[DATA]
TBL_FEA_NEXTHOP_KEY     key                     READ
uint64                  nhid                    RW
[MASTER]
ctclib_hash_t           *nh_hash
--------------------------------------------------------------------------------
[TBL]
TBL_MRT                 mrt                     HASH              routed
[KEY]
mrt_key_t
[DATA]
TBL_MRT_KEY             key                     READ
uint32                  rpf_ifindex             READ   /* data packet in ifindex */
port_vlan_bmp_t         oif_index_bmp           READ   /* output ifindex */
uint64                  nhg_oid                 RW
uint64                  packet_match            RW       /*stats from hardware*/ 
uint64                  byte_match              RW
uint32					static_mroute			RW		/*static mroute or dynamic mroute*/
[MASTER]
ctclib_hash_t           *mrt_hash
-----------------------------------------------------------------------------
[TBL]
TBL_IPMC_GLOBAL          pim_glb                GLOBAL            routed
[KEY]
[DATA]
uint32                  mcast_route_en          RW
uint32                  register_suppress_time  RW
uint32                  pim_packet_process      RW
uint32                  keep_alive_time         RW
uint32                  rp_keep_alive_time      RW
uint32                  join_prune_interval     RW
uint32                  switchover_mode         RW     /* IMMEDIATE or INFINITY */
[MASTER]
-----------------------------------------------------------------------------
[TBL]
TBL_IPMC_INTF           pim_intf                HASH+LIST         routed
[KEY]
char                    name[IFNAME_SIZE]
[DATA]
TBL_IPMC_INTF_KEY       key                     READ
addr_ipv4_t             primary_address         RW
uint8                   igmp_enable             RW
uint8                   pim_enable              RW
int32                   igmp_version            RW     /* igmp configuration */
int32                   igmp_query_interval       RW
int32                   igmp_query_max_response_time   RW
int32                   pim_hello_period           RW    /* pim hello configuration */
int32                   pim_hello_holdtime         RW
uint32                  pim_generation_id          RW
uint16                  pim_propagation_delay_msec RW
uint16                  pim_override_interval_msec RW
uint32                  pim_dr_priority            RW
[MASTER]
ctclib_hash_t           *pim_intf_hash
ctclib_slist_t          *pim_intf_list
-----------------------------------------------------------------------------
[TBL]
TBL_PIM_STATIC_RP       pim_static_rp           HASH+LIST         routed
[KEY]
prefix_t                group_range
[DATA]
TBL_PIM_STATIC_RP_KEY   key                     READ
addr_ipv4_t             rp_addr                 RW 
[MASTER]
ctclib_hash_t           *pim_static_rp_hash
ctclib_slist_t          *pim_static_rp_list
-----------------------------------------------------------------------------
[TBL]
TBL_SYS_GLOBAL          sys_glb                         GLOBAL          all
[KEY]
[DATA]
char                    hostname[HOSTNAME_SIZE+1]       RW
mac_addr_t              route_mac                       READ
uint32                  mac_num                         READ
int32                   curr_vlanif_count               READ
uint32                  init_done                       READ
uint32                  startup_done                    READ
uint32                  max_frame_size                  READ
uint32                  jumbo_frame_size                READ
glb_reboot_type_t       reboot_type                     READ /* glb_reboot_type_t, this boot reason */
uint8                   ipg_shaping_enable              RW
uint8                   ipg_policing_enable             RW
uint8                   ipg_storm_control_enable        RW
uint8                   aaa_new_model                   RW  /* AAA new model or not, default not */
uint8                   service_password_encryption     RW  /* encrypt password or not */
uint8                   max_vty                         RW  /* MAX vty numbers */
uint8                   aaa_privilege1                  RW  
uint8                   aaa_privilege2                  RW
uint8                   aaa_privilege3                  RW
uint8                   dhcp_service_enable             RW  /* enable DHCP service or not */
uint8                   dhcp_relay_enable               RW  /* enable DHCP relay or not */
uint8                   dhcp_snooping_enable            RW  /* enable DHCP snooping or not */
uint8                   http_service_enable             RW  /* TODO, enable RPC HTTP service */
char                    http_image_name[HTTP_IMAGE_NAME_SIZE]   RW  /* TODO, HTTP image file name */
uint32                  errdisable_interval             RW  /* errdisable recovery interval*/
uint32                  trunction_length                RW  /* Truncation length */
mac_addr_t              tap_ts_macda                    RW  /* TAP Timestamp macda */
mac_addr_t              tap_ts_macsa                    RW  /* TAP Timestamp macsa */
uint16                  ether_type                      RW  /* TAP Timestamp ethernet type */
uint32                  ptf_port                        RW  /* PTF test TCP port, 0 means PTF disable */
uint32                  telnet_disable                  RW  /* disable telnet service */
uint32                  telnet_port                     RW  /* modify telnet service port */
char                    telnet_acl[ACL_NAME_FULL_NAME_SIZE+1]  RW  /* Telnet ACL name*/
char                    ssh_acl[ACL_NAME_FULL_NAME_SIZE+1]     RW  /* SSH ACL name*/
uint32                  http_disable                    RW  /* disable http service */
uint32                  http_port                       RW  /* modify http service port*/
uint32                  http_timeout                    RW  /* modify http timeout interval*/
uint32                  https_disable                   RW  /* disable https service */
uint32                  https_port                      RW  /* modify https service port*/
uint32                  rpcapi_disable                  RW  /* disable rpcapi service */
uint32                  rpcapi_port                     RW  /* modify rpcapi service port*/
uint32                  rpcapi_ssl_en                   RW  /* rpcapi ssl enable */
uint32                  rpcapi_ssl_port                 RW  /* rpcapi ssl port, default is 443 */
uint32                  rpcapi_auth_mode                RW  /* refer to glb_rpcapi_auth_mode_t */
uint32                  oper_rpcapi_auth_mode           RW  /* refer to glb_rpcapi_auth_mode_t, effective auth_mode */
uint8                   cut_through_enable              RW  /* Enable cut through or not */
uint32                  protected_vlan_cnt              RW  /*protected vlan count*/
uint32                  vlan_stats_cnt                   RW  /*vlan statistics count*/
uint32                  mib_port_stats_read_num         RW  /* MIB port stats read number per round */
uint32                  mib_flow_stats_read_num         RW  /* MIB flow stats read number per round */
uint32                  memory_threshold1               RW  /*memory threshold one*/
uint32                  memory_threshold2               RW  /*memory threshold two*/
uint32                  memory_threshold3               RW  /*memory threshold three*/
uint32                  system_memchk_state             RW  /*syslimit_memchk_state_t*/
uint32                  mgmt_if_running                 READ    /* mgmt if up/down state */
ctc_task_t              *mgmt_if_timer                  READ    /* monitor mgmt if up/down timer */
glb_warmboot_type_t     warmboot_type                   READ  /* fastboot/warmboot type */
uint32                  warmboot_time                   READ  /* fastboot/warmboot time */
uint32                  warmboot_count                  READ  /* fastboot/warmboot count */
uint32                  system_time_update              READ  /* ntp sync, after update system time */
uint32                  sflow_counter_ifindex           READ  /* update counters */
uint8                   dhcp_server_enable              RW  /* enable DHCP server or not */
uint32					add_gre_ace_entry_num			RW	/*add-l2gre or add-l3gre ace entry number*/
uint32					add_vxlan_entry_num			    RW	/*add-vxlan ace entry number*/
uint32					system_product			        RW	
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_LAG_GLOBAL          lag_glb                 GLOBAL          switch
[KEY]
[DATA]
uint16                  system_priority               RW
mac_addr_t              system_id                     READ
uint16                  mlag_system_priority          READ
mac_addr_t              mlag_system_id                READ
uint32                  load_balance                  RW
uint32                  load_balance_inner_field_en   RW
uint8			hash_arithmetic	          RW
uint8			load_balance_mode[GLB_LAG_GROUP_NUM+1] RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_ECMP_GLOBAL         ecmp_glb                GLOBAL          routed,switch
[KEY]
[DATA]
uint32                  hash_key                      RW
uint32                  hash_algorithm	              RW
uint32                  load_balance_mode             RW
uint32                  dlb_mode_type                 RW
uint32                  rr_prefix_num                 RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_RR_PREFIX           rr_prefix                ARRAY          routed
[KEY]
uint8                   rr_prefix_index
[DATA]
TBL_RR_PREFIX_KEY       key                      READ
prefix_t                rr_prefix                RW
[MASTER]
tbl_rr_prefix_t        *rr_prefix_array[GLB_MAX_ECMP_ROUND_ROBIN+1]
--------------------------------------------------------------------------------
[TBL]
TBL_MEM_SUMMARY         mem_info                GLOBAL          appcfg
[KEY]
[DATA]
uint32                  total                                   READ
uint32                  used                                    READ
uint32                  free                                    READ
uint32                  buffer                                  READ
uint32                  cached                                  READ
uint32                  mem_high                                READ
uint32                  cpu_high                                READ
uint32                  cpu_high_threshold                      RW
uint32                  cpu_low_threshold                       RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_CPU_MEM_HISTORY     cpu_mem_history         GLOBAL          appcfg
[KEY]
[DATA]
uint64                  polling_index                              READ
uint64                  saving_index                               READ
uint32                  hour_start                                 READ
uint32                  day_start                                  READ
uint64                  hour_last_save                             READ
uint64                  day_last_save                              READ
uint8                   cpu_polling_save[GLB_CPU_MEM_MINUTE_SIZE]  READ
uint8                   cpu_history_hour[GLB_CPU_MEM_HOUR_SIZE]    READ
uint8                   cpu_history_day[GLB_CPU_MEM_DAY_SIZE]      READ
uint8                   mem_polling_save[GLB_CPU_MEM_MINUTE_SIZE]  READ
uint8                   mem_history_hour[GLB_CPU_MEM_HOUR_SIZE]    READ
uint8                   mem_history_day[GLB_CPU_MEM_DAY_SIZE]      READ
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_CHSM_DEBUG          chsmdbg                 GLOBAL          chsm
[KEY]
[DATA]
FLAGS32                 chsm                    FLAGS           /* bitmap of CHSMDBG_FLAG_CHSM_ */
[FLAGS]
chsm                    chsm_chassis            CHSMDBG_FLAG_CHSM_CHASSIS               RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_SWITCH_DEBUG        swthdbg                 GLOBAL          switch
[KEY]
[DATA]
FLAGS32                 stp                     FLAGS           /* bitmap of SWTHDBG_FLAG_STP_ */
FLAGS32                 mlag                    FLAGS           /* bitmap of SWTHDBG_FLAG_MLAG_ */
FLAGS32                 lacp                    FLAGS           /* bitmap of SWTHDBG_FLAG_LACP_ */
FLAGS32                 igsp                    FLAGS           /* bitmap of SWTHDBG_FLAG_IGSP_ */
FLAGS32                 ipsg                    FLAGS           /* bitmap of SWTHDBG_FLAG_IPSG_ */
FLAGS32                 lldp                    FLAGS           /* bitmap of SWTHDBG_FLAG_LLDP_ */
FLAGS32                 rpcapi                  FLAGS           /* bitmap of SWTHDBG_FLAG_RPCAPI_ */
[FLAGS]
stp                     stp_event               SWTHDBG_FLAG_STP_EVENT                  RW
stp                     stp_packet_tx           SWTHDBG_FLAG_STP_PACKET_TX              RW
stp                     stp_packet_rx           SWTHDBG_FLAG_STP_PACKET_RX              RW
stp                     stp_protocol_cist       SWTHDBG_FLAG_STP_PROTO_CIST             RW
stp                     stp_protocol_msti       SWTHDBG_FLAG_STP_PROTO_MSTI             RW
stp                     stp_timer               SWTHDBG_FLAG_STP_TIMER                  RW
mlag                    mlag_event              SWTHDBG_FLAG_MLAG_EVENT                 RW
mlag                    mlag_packet             SWTHDBG_FLAG_MLAG_PACKET                RW
mlag                    mlag_protocol           SWTHDBG_FLAG_MLAG_PROTO                 RW
mlag                    mlag_timer              SWTHDBG_FLAG_MLAG_TIMER                 RW
lacp                    lacp_event              SWTHDBG_FLAG_LACP_EVENT                 RW
lacp                    lacp_packet             SWTHDBG_FLAG_LACP_PACKET                RW
lacp                    lacp_protocol           SWTHDBG_FLAG_LACP_PROTO                 RW
lacp                    lacp_timer              SWTHDBG_FLAG_LACP_TIMER                 RW
igsp                    igsp_event              SWTHDBG_FLAG_IGSP_EVENT                 RW
igsp                    igsp_packet_tx          SWTHDBG_FLAG_IGSP_PACKET_TX             RW
igsp                    igsp_packet_rx          SWTHDBG_FLAG_IGSP_PACKET_RX             RW
igsp                    igsp_protocol           SWTHDBG_FLAG_IGSP_PROTO                 RW
igsp                    igsp_timer              SWTHDBG_FLAG_IGSP_TIMER                 RW
ipsg                    ipsg_event              SWTHDBG_FLAG_IPSG_EVENT                 RW
ipsg                    ipsg_error              SWTHDBG_FLAG_IPSG_ERROR                 RW
lldp                    lldp_event              SWTHDBG_FLAG_LLDP_EVENT                 RW
lldp                    lldp_packet_tx          SWTHDBG_FLAG_LLDP_PACKET_TX             RW
lldp                    lldp_packet_rx          SWTHDBG_FLAG_LLDP_PACKET_RX             RW
lldp                    lldp_protocol           SWTHDBG_FLAG_LLDP_PROTO                 RW
lldp                    lldp_timer              SWTHDBG_FLAG_LLDP_TIMER                 RW
rpcapi                  rpcapi_request          SWTHDBG_FLAG_RPCAPI_REQUEST               RW
rpcapi                  rpcapi_command          SWTHDBG_FLAG_RPCAPI_COMMAND               RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_ROUTE_DEBUG         rtdbg                   GLOBAL          routed
[KEY]
[DATA]
FLAGS32                 route                   FLAGS           /* bitmap of RTDBG_FLAG_ROUTE_ */
FLAGS32                 arp                     FLAGS           /* bitmap of RTDBG_FLAG_ARP_ */
FLAGS32                 arpinspection           FLAGS           /* bitmap of RTDBG_FLAG_ARPINSPECTION_ */
FLAGS32                 vrrp                    FLAGS           /* bitmap of RTDBG_FLAG_VRRP_ */
FLAGS32                 ipsla                   FLAGS           /* bitmap of RTDBG_FLAG_IPSLA_ */
FLAGS32                 track                   FLAGS           /* bitmap of RTDBG_FLAG_TRACK_ */
FLAGS32                 nd                      FLAGS           /* bitmap of RTDBG_FLAG_ND_ */
FLAGS32                 nat                     FLAGS           /* bitmap of RTDBG_FLAG_NAT_ */
FLAGS32                 pimsm                   FLAGS           /* bitmap of RTDBG_FLAG_PIMSM_ */ 
[FLAGS]
route                   route_ipv4             RTDBG_FLAG_ROUTE_IPV4              RW
route                   route_ipv6             RTDBG_FLAG_ROUTE_IPV6              RW
route                   route_netlink             RTDBG_FLAG_ROUTE_NETLINK              RW
arp                     arp_event               RTDBG_FLAG_ARP_EVENT                RW
arp                     arp_packet              RTDBG_FLAG_ARP_PACKET               RW
arp                     arp_protocol            RTDBG_FLAG_ARP_PROTO                RW
arp                     arp_timer               RTDBG_FLAG_ARP_TIMER                RW
arpinspection           arpinspection_event     RTDBG_FLAG_ARPINSPECTION_EVENT      RW
arpinspection           arpinspection_packet    RTDBG_FLAG_ARPINSPECTION_PACKET     RW
arpinspection           arpinspection_protocol  RTDBG_FLAG_ARPINSPECTION_PROTO      RW
arpinspection           arpinspection_timer     RTDBG_FLAG_ARPINSPECTION_TIMER      RW
vrrp                    vrrp_all                RTDBG_FLAG_VRRP_ALL                 RW 
vrrp                    vrrp_events             RTDBG_FLAG_VRRP_EVENTS              RW 
vrrp                    vrrp_packet_send        RTDBG_FLAG_VRRP_PACKET_TX           RW
vrrp                    vrrp_packet_recv        RTDBG_FLAG_VRRP_PACKET_RX           RW
vrrp                    vrrp_packet_detail      RTDBG_FLAG_VRRP_PACKET_DETAIL       RW
ipsla                   ipsla_event             RTDBG_FLAG_IPSLA_EVENT              RW
ipsla                   ipsla_packet            RTDBG_FLAG_IPSLA_PACKET             RW
track                   track_event             RTDBG_FLAG_TRACK_EVENT              RW
nd                      nd_event                RTDBG_FLAG_ND_EVENT                RW
nd                      nd_packet               RTDBG_FLAG_ND_PACKET               RW
nd                      nd_protocol             RTDBG_FLAG_ND_PROTO                RW
nd                      nd_timer                RTDBG_FLAG_ND_TIMER                RW
nat                     nat_event               RTDBG_FLAG_NAT_EVENT               RW
nat                     nat_timer               RTDBG_FLAG_NAT_TIMER               RW
pimsm                   pimsm_all               RTDBG_FLAG_PIMSM_ALL                RW 
pimsm                   pimsm_pim               RTDBG_FLAG_PIMSM_PIM                RW 
pimsm                   pimsm_igmp              RTDBG_FLAG_PIMSM_IGMP               RW 
pimsm                   pimsm_timer             RTDBG_FLAG_PIMSM_TIMER              RW 
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_SSM_DEBUG         	ssmdbg                  GLOBAL          ssm
[KEY]
[DATA]
FLAGS32                 ssm                   	FLAGS           /* bitmap of SSM_DEBUG_FLAG_ */
[FLAGS]
ssm                     ssm_event               SSM_DEBUG_FLAG_EVENT                RW
ssm                     ssm_packet_tx           SSM_DEBUG_FLAG_PACKET_TX            RW
ssm                     ssm_packet_rx           SSM_DEBUG_FLAG_PACKET_RX            RW
ssm                     ssm_timer               SSM_DEBUG_FLAG_TIMER                RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_PTP_DEBUG         ptpdbg                   GLOBAL          ptp
[KEY]
[DATA]
FLAGS32                 ptp           FLAGS           /* bitmap of PTPDBG_FLAG_ */
[FLAGS]
ptp                    ptp_communication_debug      PTPDBG_FLAG_COMMUNICATION_DBG       RW
ptp                    ptp_bmc_debug      PTPDBG_FLAG_BMC_DBG       RW
ptp                    ptp_timer_debug      PTPDBG_FLAG_TIMER_DBG       RW
ptp                    ptp_synchronization_debug      PTPDBG_FLAG_SYNCHRONIZATION_DBG       RW
ptp                    ptp_packet_rx_debug      PTPDBG_FLAG_PACKET_RX_DBG       RW
ptp                    ptp_packet_tx_debug      PTPDBG_FLAG_PACKET_TX_DBG       RW
ptp                    ptp_packet_discard_debug      PTPDBG_FLAG_PACKET_DISCARD_DBG       RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_QUAGGA_DEBUG        dbg                     GLOBAL          routed
[KEY]
[DATA]
FLAGS32                 rip	                    FLAGS           /* bitmap of RIPDBG_FLAG_ */
FLAGS32                 ospf                    FLAGS           /* bitmap of OSPFDBG_FLAG_ */
FLAGS32                 bgp                     FLAGS           /* bitmap of BGPDBG_FLAG_ */
FLAGS32                 igmp                    FLAGS           /* bitmap of IGMPDBG_FLAG_ */
FLAGS32                 mroute                  FLAGS           /* bitmap of MROUTEDBG_FLAG_ */
FLAGS32                 pim                     FLAGS           /* bitmap of PIMDBG_FLAG_ */
[FLAGS]
rip						rip_event				RIPDBG_FLAG_EVENT		    RW 
rip						rip_packet				RIPDBG_FLAG_PACKET		    RW 
rip						rip_zebra				RIPDBG_FLAG_ZEBRA	   	    RW
ospf                    ospf_event              OSPFDBG_FLAG_EVENT                  RW
ospf                    ospf_ism_events         OSPFDBG_FLAG_ISM_EVENTS             RW
ospf                    ospf_ism_status         OSPFDBG_FLAG_ISM_STATUS             RW
ospf                    ospf_ism_timers         OSPFDBG_FLAG_ISM_TIMERS             RW
ospf                    ospf_lsa_flooding       OSPFDBG_FLAG_LSA_FLOODING           RW
ospf                    ospf_lsa_generate       OSPFDBG_FLAG_LSA_GENERATE           RW
ospf                    ospf_lsa_install        OSPFDBG_FLAG_LSA_INSTALL            RW
ospf                    ospf_lsa_refresh        OSPFDBG_FLAG_LSA_REFRESH            RW
ospf                    ospf_nsm_events         OSPFDBG_FLAG_NSM_EVENTS             RW
ospf                    ospf_nsm_status         OSPFDBG_FLAG_NSM_STATUS             RW
ospf                    ospf_nsm_timers         OSPFDBG_FLAG_NSM_TIMERS             RW
ospf                    ospf_nssa               OSPFDBG_FLAG_NSSA                   RW
ospf                    ospf_packet_dd          OSPFDBG_FLAG_PACKET_DD              RW
ospf                    ospf_packet_hello       OSPFDBG_FLAG_PACKET_HELLO           RW
ospf                    ospf_packet_ls_ack      OSPFDBG_FLAG_PACKET_LS_ACK          RW
ospf                    ospf_packet_ls_request  OSPFDBG_FLAG_PACKET_LS_REQUEST      RW
ospf                    ospf_packet_ls_update   OSPFDBG_FLAG_PACKET_LS_UPDATE       RW
ospf                    ospf_zebra_interface    OSPFDBG_FLAG_ZEBRA_INTERFACE        RW
ospf                    ospf_zebra_redistribute OSPFDBG_FLAG_ZEBRA_REDISTRIBUTE     RW
ospf                    ospf_event_abr          OSPFDBG_FLAG_EVENT_ABR              RW
ospf                    ospf_event_ia           OSPFDBG_FLAG_EVENT_IA               RW
ospf                    ospf_event_route        OSPFDBG_FLAG_EVENT_ROUTE            RW
ospf                    ospf_event_spf          OSPFDBG_FLAG_EVENT_SPF              RW
bgp                     bgp_as4_segment         BGPDBG_FLAG_AS4_SEGMENT             RW
bgp                     bgp_event               BGPDBG_FLAG_EVENT                   RW
bgp                     bgp_filters             BGPDBG_FLAG_FILTERS                 RW
bgp                     bgp_fsm                 BGPDBG_FLAG_FSM                     RW
bgp                     bgp_keepalives          BGPDBG_FLAG_KEEPALIVES              RW
bgp                     bgp_updates_in          BGPDBG_FLAG_UPDATES_IN              RW
bgp                     bgp_updates_out         BGPDBG_FLAG_UPDATES_OUT             RW
bgp                     bgp_zebra               BGPDBG_FLAG_ZEBRA                   RW
igmp                    igmp_event              IGMPDBG_FLAG_EVENT                  RW
igmp                    igmp_packet             IGMPDBG_FLAG_PACKET                 RW
igmp                    igmp_trace              IGMPDBG_FLAG_TRACE                  RW
mroute                  mroute_on               MROUTEDBG_FLAG_ON                   RW
mroute                  mroute_detail           MROUTEDBG_FLAG_DETAIL               RW
pim                     pim_event               PIMDBG_FLAG_EVENT                   RW
pim                     pim_packet              PIMDBG_FLAG_PACKET                  RW
pim                     pim_packetdump_send     PIMDBG_FLAG_PACKET_DUMP_SEND        RW
pim                     pim_packetdump_receive  PIMDBG_FLAG_PACKET_DUMP_RCV         RW
pim                     pim_trace               PIMDBG_FLAG_TRACE                   RW
pim                     pim_zebra               PIMDBG_FLAG_ZEBRA                   RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_LSRV_DEBUG          lsrvdbg                 GLOBAL          fea
[KEY]
[DATA]
FLAGS32                 card                    FLAGS           /* bitmap of LSRVDBG_FLAG_CARD_ */
FLAGS32                 synce                   FLAGS           /* bitmap of LSRVDBG_FLAG_SYNCE_ */

[FLAGS]
card                    card                    LSRVDBG_FLAG_CARD_CARD            RW
card                    port                    LSRVDBG_FLAG_CARD_PORT            RW
card                    fiber                   LSRVDBG_FLAG_CARD_FIBER           RW
card                    fan                     LSRVDBG_FLAG_CARD_FAN             RW
card                    psu                     LSRVDBG_FLAG_CARD_PSU             RW
card                    led                     LSRVDBG_FLAG_CARD_LED             RW
card                    thermal                 LSRVDBG_FLAG_CARD_SENSOR          RW
card                    vcm                      LSRVDBG_FLAG_CARD_VCM          RW
card                    poe                      LSRVDBG_FLAG_CARD_POE          RW
synce                   synce                   LSRVDBG_FLAG_SYNCE_SYNCE          RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_HSRV_DEBUG          hsrvdbg                 GLOBAL          fea
[KEY]
[DATA]
FLAGS32                 vswitch                 FLAGS           /* bitmap of HSRVDBG_FLAG_VSWITCH_ */
FLAGS32                 interface               FLAGS           /* bitmap of HSRVDBG_FLAG_INTERFACE_ */
FLAGS32                 message                 FLAGS           /* bitmap of HSRVDBG_FLAG_MESSAGE_ */
FLAGS32                 cpu                     FLAGS           /* bitmap of HSRVDBG_FLAG_CPU_ */
FLAGS32                 ip                      FLAGS           /* bitmap of HSRVDBG_FLAG_IP_ */
FLAGS32                 nexthop                 FLAGS           /* bitmap of HSRVDBG_FLAG_NEXTHOP_ */
FLAGS32                 vlan                    FLAGS           /* bitmap of HSRVDBG_FLAG_VLAN_ */
FLAGS32                 mirror                  FLAGS           /* bitmap of HSRVDBG_FLAG_MIRROR_ */
FLAGS32                 fdb                     FLAGS           /* bitmap of HSRVDBG_FLAG_FDB_ */
FLAGS32                 l2mc                    FLAGS           /* bitmap of HSRVDBG_FLAG_L2MC_ */
FLAGS32                 agg                     FLAGS           /* bitmap of HSRVDBG_FLAG_AGG_ */
FLAGS32                 ipuc                    FLAGS           /* bitmap of HSRVDBG_FLAG_IPUC_ */
FLAGS32                 neighbor                FLAGS           /* bitmap of HSRVDBG_FLAG_NEIGHBOR_ */
FLAGS32                 ecmp                    FLAGS           /* bitmap of HSRVDBG_FLAG_ECMP_ */
FLAGS32                 acl                     FLAGS           /* bitmap of HSRVDBG_FLAG_ACL_ */
FLAGS32                 stats                   FLAGS           /* bitmap of HSRVDBG_FLAG_STATS_ */
FLAGS32                 qos                     FLAGS           /* bitmap of HSRVDBG_FLAG_QOS_ */
FLAGS32                 ipsour                  FLAGS           /* bitmap of HSRVDBG_FLAG_QOS_ */
FLAGS32                 dot1x                   FLAGS           /* bitmap of HSRVDBG_FLAG_DOT1X_ */
FLAGS32                 stp                     FLAGS           /* bitmap of HSRVDBG_FLAG_STP_ */
FLAGS32                 ptp                     FLAGS           /* bitmap of HSRVDBG_FLAG_PTP_ */
FLAGS32                 ipmc                    FLAGS           /* bitmap of HSRVDBG_FLAG_IPMC_ */
FLAGS32                 tpoam                     FLAGS           /* bitmap of HSRVDBG_FLAG_TPOAM_ */
FLAGS32                 l2protocol              FLAGS           /* bitmap of HSRVDBG_FLAG_L2PROTOCOL_ */
FLAGS32                 nat                     FLAGS           /* bitmap of HSRVDBG_FLAG_NAT_ */
FLAGS32                 g8032                   FLAGS           /* bitmap of HSRVDBG_FLAG_NAT_ */
[FLAGS]
vswitch                 vswitch                 HSRVDBG_FLAG_VSWITCH_VSWITCH            RW
interface               interface_l2if          HSRVDBG_FLAG_INTERFACE_L2IF             RW
interface               interface_l3if          HSRVDBG_FLAG_INTERFACE_L3IF             RW
interface               interface_ifdb          HSRVDBG_FLAG_INTERFACE_IFDB             RW
message                 message_pm2hsrv         HSRVDBG_FLAG_MESSAGE_PM2HSRV            RW
message                 message_hsrv2pm         HSRVDBG_FLAG_MESSAGE_HSRV2PM            RW
cpu                     cpu_rx                  HSRVDBG_FLAG_CPU_TRAFFIC_RX             RW
cpu                     cpu_tx                  HSRVDBG_FLAG_CPU_TRAFFIC_TX             RW
cpu                     cpu_bpdu                HSRVDBG_FLAG_CPU_TRAFFIC_BPDU           RW
cpu                     cpu_slowproto           HSRVDBG_FLAG_CPU_TRAFFIC_SLOW_PROTO     RW
cpu                     cpu_eapol               HSRVDBG_FLAG_CPU_TRAFFIC_EAPOL          RW
cpu                     cpu_lldp                HSRVDBG_FLAG_CPU_TRAFFIC_LLDP           RW
cpu                     cpu_erps                HSRVDBG_FLAG_CPU_TRAFFIC_ERPS           RW
cpu                     cpu_macda               HSRVDBG_FLAG_CPU_TRAFFIC_MACDA          RW
cpu                     cpu_rip                 HSRVDBG_FLAG_CPU_TRAFFIC_RIP            RW
cpu                     cpu_ospf                HSRVDBG_FLAG_CPU_TRAFFIC_OSPF           RW
cpu                     cpu_bgp                 HSRVDBG_FLAG_CPU_TRAFFIC_BGP            RW
cpu                     cpu_arp                 HSRVDBG_FLAG_CPU_TRAFFIC_ARP            RW
cpu                     cpu_dhcp                HSRVDBG_FLAG_CPU_TRAFFIC_DHCP           RW
cpu                     cpu_ipda                HSRVDBG_FLAG_CPU_TRAFFIC_IPDA           RW
cpu                     cpu_igmp                HSRVDBG_FLAG_CPU_TRAFFIC_IGMP           RW
cpu                     cpu_maclimit            HSRVDBG_FLAG_CPU_TRAFFIC_MAC_LIMIT      RW
cpu                     cpu_macmismatch         HSRVDBG_FLAG_CPU_TRAFFIC_MAC_MISMATCH   RW
cpu                     cpu_l3copycpu           HSRVDBG_FLAG_CPU_TRAFFIC_L3COPY_CPU     RW
cpu                     cpu_other               HSRVDBG_FLAG_CPU_TRAFFIC_OTHER          RW
cpu                     cpu_raw                 HSRVDBG_FLAG_CPU_TRAFFIC_RAW            RW
cpu                     cpu_ptp                 HSRVDBG_FLAG_CPU_TRAFFIC_PTP            RW
ip                      ip_icmp                 HSRVDBG_FLAG_IP_ICMP                    RW
nexthop                 nexthop                 HSRVDBG_FLAG_NEXTHOP_NEXTHOP            RW
vlan                    vlan                    HSRVDBG_FLAG_VLAN_VLAN                  RW
mirror                  mirror                  HSRVDBG_FLAG_MIRROR_MIRROR              RW
fdb                     fdb                     HSRVDBG_FLAG_FDB_FDB                    RW
l2mc                    l2mc                    HSRVDBG_FLAG_L2MC_L2MC                  RW
agg                     agg                     HSRVDBG_FLAG_AGG_AGG                    RW
ipuc                    ipuc                    HSRVDBG_FLAG_IPUC_IPUC                  RW
neighbor                neighbor                HSRVDBG_FLAG_NEIGHBOR_NEIGHBOR          RW
ecmp                    ecmp                    HSRVDBG_FLAG_ECMP_ECMP                  RW
acl                     acl                     HSRVDBG_FLAG_ACL_ACL                    RW
stats                   stats                   HSRVDBG_FLAG_STATS_STATS                RW
qos                     qos_class               HSRVDBG_FLAG_QOS_CLASS                  RW
qos                     qos_policer             HSRVDBG_FLAG_QOS_POLICER                RW
qos                     qos_process             HSRVDBG_FLAG_QOS_PROCESS                RW
qos                     qos_queue               HSRVDBG_FLAG_QOS_QUEUE                  RW
ipsour                  ipsour                  HSRVDBG_FLAG_IPSOUR_IPSOUR              RW
dot1x                   dot1x                   HSRVDBG_FLAG_DOT1X_DOT1X                RW
stp                     stp                     HSRVDBG_FLAG_STP_STP                    RW
ptp                     ptp_pkt_rx                     HSRVDBG_FLAG_PTP_PKT_RX                    RW
ptp                     ptp_pkt_tx                     HSRVDBG_FLAG_PTP_PKT_TX                    RW
ptp                     ptp_cfg                     HSRVDBG_FLAG_PTP_CFG                    RW
ptp                     ptp_interrupt                     HSRVDBG_FLAG_PTP_INTERRUPT                    RW
ipmc                    ipmc                    HSRVDBG_FLAG_IPMC_IPMC                  RW
tpoam                  tpoam_common                     HSRVDBG_FLAG_TPOAM_COMMON                    RW
tpoam                  tpoam_event                     HSRVDBG_FLAG_TPOAM_EVENT                    RW
tpoam                  tpoam_update                     HSRVDBG_FLAG_TPOAM_UPDATE                    RW
tpoam                  tpoam_pkt_rx                     HSRVDBG_FLAG_TPOAM_PKT_RX                    RW
tpoam                  tpoam_pkt_tx                     HSRVDBG_FLAG_TPOAM_PKT_TX                    RW
l2protocol             l2protocol_pkt_rx                HSRVDBG_FLAG_L2PROTOCOL_PKT_RX                    RW
l2protocol             l2protocol_pkt_tx                HSRVDBG_FLAG_L2PROTOCOL_PKT_TX                    RW
nat                    nat_rule                         HSRVDBG_FLAG_NAT_RULE           RW
nat                    nat_session                      HSRVDBG_FLAG_NAT_SESSION        RW
nat                    nat_timer                        HSRVDBG_FLAG_NAT_TIMER          RW
g8032                    g8032_event                    HSRVDBG_FLAG_G8032_EVENT          RW
[MASTER]
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_APP_DEBUG           appdbg                  GLOBAL          appcfg
[KEY]
[DATA]
FLAGS32                 snmp                    FLAGS           /* bitmap of APPDBG_FLAG_SNMP_ */
FLAGS32                 rmon                    FLAGS           /* bitmap of APPDBG_FLAG_RMON_ */
FLAGS32                 ntp                     FLAGS           /* bitmap of APPDBG_FLAG_RMON_ */
FLAGS32                 netconf                 FLAGS           /* bitmap of APPDBG_FLAG_NETCONF_ */
[FLAGS]
snmp                    snmp_agent              APPDBG_FLAG_SNMP_AGENT              RW
rmon                    rmon_event              APPDBG_FLAG_RMON_EVENT              RW
rmon                    rmon_alarm              APPDBG_FLAG_RMON_ALARM              RW
rmon                    rmon_stats              APPDBG_FLAG_RMON_STATS              RW
rmon                    rmon_history            APPDBG_FLAG_RMON_HISTORY            RW
ntp                     ntp_debug_level         APPDBG_FLAG_NTP_DEBUG_LEVEL         RW
netconf                 netconf_rpc             APPDBG_FLAG_NETCONF_RPC             RW
netconf                 netconf_rpc_clear       APPDBG_FLAG_NETCONF_RPC_CLEAR       RW
netconf                 netconf_debug           APPDBG_FLAG_NETCONF_DEBUG           RW

[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_OPENFLOW_DEBUG      openflowdbg              GLOBAL          openflow
[KEY]
[DATA]
FLAGS32                 openflow                 FLAGS           /* bitmap of OPENFLOWDBG_FLAG_ */
[FLAGS]
openflow                openflow_vconn           OPENFLOWDBG_FLAG_VCONN             RW
openflow                openflow_rconn           OPENFLOWDBG_FLAG_RCONN             RW

[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_RIF                 rif                     HASH+LIST          fea
[KEY]
char                    name[IFNAME_SIZE]
[DATA]
TBL_RIF_KEY             key                     READ
uint64                  rif_id                  RW
uint64                  hostif_id               RW
[MASTER]
ctclib_hash_t           *rif_hash
ctclib_slist_t          *if_list
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_LAG             fea_lag                  HASH          fea
[KEY]
uint32                    id
[DATA]
TBL_FEA_LAG_KEY         key                     READ
uint64                  lag_id                  RW
[MASTER]
ctclib_hash_t           *fea_lag_hash
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_GLOBAL          fea_global             GLOBAL          fea
[KEY]
[DATA]
uint64                  router_id              RW
uint32                  port_stats_ms          RW
[MASTER]
-------------------------------------------------------------------------------
[TBL]
TBL_FEA_ACL_TABLE       fea_acl_table           HASH           fea
[KEY]
uint64                  acl_table_id
[DATA]
TBL_FEA_ACL_TABLE_KEY   key                     READ
uint32                  direct_in               RW
uint32                  priority                RW
char                    table_name[ACL_NAME_FULL_NAME_SIZE+1] RW
uint64                  sai_table_id            RW

[MASTER]
ctclib_hash_t           *fea_acl_table_hash
-------------------------------------------------------------------------------
[TBL]
TBL_FEA_ACL             fea_acl                 HASH           fea,switch
[KEY]
uint64                  acl_id
[DATA]
TBL_FEA_ACL_KEY         key                     READ
uint8					is_mac_acl				RW
uint64                  sai_acl_id              RW
uint64                  sai_acl_id_ipv4         RW
uint64                  sai_acl_id_ipv6         RW
uint64                  counter_id              RW
uint64                  stats_packet            RW
uint64                  stats_byte              RW
[MASTER]
ctclib_hash_t           *fea_acl_hash
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_FDB             fdb                     HASH            fea
[KEY]
fdb_key_t                                                       /* mac address and vlan id */
[DATA]
TBL_FEA_FDB_KEY         key                     READ
uint32                  ifindex                 READ            /* out interface */
uint32                  mlag_source_ifindex     READ            /* store previous MLAG interface after protect-switch */
uint64                  portid                  READ
uint32                  flags                   READ
uint32                  fea_fail                READ
CTCLIB_TAILQ_ENTRY      port_entry              INTERNAL        /* for port FDB tail-q list */
CTCLIB_TAILQ_ENTRY      vlan_entry              INTERNAL        /* for vlan FDB tail-q list */
[MASTER]
ctclib_hash_t           *fdb_hash
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_BRG_IF          brgif                   HASH            fea
[KEY]
uint32                  ifindex
[DATA]
TBL_FEA_BRG_IF_KEY      key                     READ
uint32                  flags                   READ            /* copy from TBL_INTERFACE flags */
uint32                  lag_id                  READ            /* non-zero indicate port is LAG's member port */
uint32                  mac_learning_en         READ
uint32                  port_security_en        READ            /* port security enable */
uint32                  max_mac                 READ            /* port security max MAC count */
int32                   curr_mac                READ            /* port security current MAC count */
int32                   curr_mac_static         READ            /* port security current static MAC count */
uint32                  mlag_id                 READ            /* mlag ID */
uint32                  mlag_peer_conf          READ            /* mlag peer conf */
uint32                  mlag_peer_if_up         READ            /* mlag peer if up */
uint32                  mlag_is_group           READ            /* mlag is group, if set, FDB on this port should with MLAG flag */
uint32					is_mirror_dest			READ			/* whether is mirror dest port*/
glb_if_type_t           hw_type                 READ            /* glb_if_type_t */
uint64                  portid                  READ            /* LAGID or PORTID */
uint8                   disable_learn[GLB_STP_INSTANCE_MAX] READ    /* MSTP instance state for FDB check */
ctclib_slist_t          *fdb_list               INTERNAL        /* for store fdb in this interface */
fea_fdb_tailq_head_t    fdb_queue               INTERNAL        /* for store fdb in this interface */
[MASTER]
ctclib_hash_t           *brgif_hash
-------------------------------------------------------------------------------
[TBL]
TBL_ACL_WORM_FILTER     acl_worm_filter         HASH+LIST      switch,fea
[KEY]
char                    worm_filter_name[ACL_NAME_FULL_NAME_SIZE+1]
[DATA]
TBL_ACL_WORM_FILTER_KEY key                     READ
uint32                  seq_num                 RW
uint32                  enable                  RW
uint32                  istcp                   RW
uint32                  dstport                 RW
uint32                  isrange                 RW
uint32                  stats_en                RW

[MASTER]
ctclib_hash_t           *acl_worm_filter_hash
ctclib_slist_t          *acl_worm_filter_list
-------------------------------------------------------------------------------
[TBL]
TBL_ACL_CONFIG          acl_config               HASH+LIST           appcfg,switch,routed
[KEY]
char                    name[ACL_NAME_FULL_NAME_SIZE+1]
[DATA]
TBL_ACL_CONFIG_KEY      key                                     READ
uint32                  ace_ref                                 RW
uint32                  acev6_ref                               RW
uint32                  acemac_ref                              RW
uint32                  intf_ref_in                             RW
uint32                  intf_ref_out                            RW
uint32                  l4_port_ref                             RW
uint32                  tcp_flags_ref                           RW
char                    remark[ACL_REMARK_SIZE+1]               RW
uint32                  seq_ref                                 RW
uint32                  ether_ref                               RW
uint32                  arp_ref                               	RW
uint32                  tap_ref                                 RW    /* tap ingress group flow used count */
uint32                  type_identifying                        RW      /* identifying how  to use this acl flow */
uint32                  ace_truncation_ref_cnt                  RW
uint32                  decap_en                                RW      /* decap en */
uint32                  decap_inner_match_seq_max               RW      /* decap type use */
uint32                  decap_normal_seq_min                    RW      /* decap type use */
uint32                  service_ipt_attached                    RW      /* attached by system service iptables rules based on acl */
[MASTER]
ctclib_hash_t           *acl_config_hash
ctclib_slist_t          *acl_config_list
-------------------------------------------------------------------------------
[TBL]
TBL_ACE_CONFIG          ace_config               HASH+LIST      switch,appcfg
[KEY]
ace_config_key_t
[DATA]
TBL_ACE_CONFIG_KEY      key                                     READ
uint32                  key_flags                               RW
uint32                  key_flags2                              RW
uint32                  key_ipv6_flags                          RW
uint32                  is_ipv6                                 RW      /* is ipv6 entry */
uint32					acl_type								RW		/*glb_acl_config_type_t*/
uint32                  key_arp_flags                           RW
uint32                  arp_op_code                             RW
uint32                  arp_op_code_mask                        RW
char                    time_range[TIME_RANGE_SIZE+1]           RW
uint16                  apply_cnt                               READ    /* ace apply count: if not zero, time-range is started either*/
uint32                  in_port                                 RW
uint32                  out_port                                RW
uint32                  ether_type                              RW
uint32                  ether_type_mask                         RW
mac_addr_t              src_mac                                 RW
mac_addr_t              src_mac_mask                            RW
mac_addr_t              dst_mac                                 RW
mac_addr_t              dst_mac_mask                            RW
uint32                  svlan                                   RW
uint32                  svlan_mask                              RW
uint32                  svlan_cos                               RW
uint32                  svlan_cos_mask                          RW
uint32                  cvlan                                   RW
uint32                  cvlan_mask                              RW
uint32                  cvlan_cos                               RW
uint32                  cvlan_cos_mask                          RW
uint32                  untag_vlan                          	RW
uint32                  ip_type                                 RW
uint32                  ip_type_mask                            RW
uint32                  ip_flags                                RW
uint32                  ip_flags_mask                           RW
prefix_t                src_ip                                  RW
prefix_t                src_ip_mask                             RW
prefix_t                dst_ip                                  RW
prefix_t                dst_ip_mask                             RW
uint32                  ipv6_flow_label                         RW
uint32                  ipv6_flow_label_mask                    RW
uint32                  dscp                                    RW
uint32                  dscp_mask                               RW
uint32                  ip_precedence                           RW
uint32                  ip_precedence_mask                      RW
uint32                  ip_protocol                             RW
uint32                  ip_protocol_mask                        RW
uint32                  l4_src_port_type                        RW
uint32                  l4_src_port                             RW
uint32                  l4_src_port_mask                        RW
uint32                  l4_dst_port_type                        RW
uint32                  l4_dst_port                             RW
uint32                  l4_dst_port_mask                        RW
uint32                  ip_frag                                 RW
uint32                  tcp_flags                               RW
uint32                  tcp_flags_mask                          RW
uint32                  igmp_type                               RW
uint32                  icmp_type                               RW
uint32                  icmp_code                               RW
uint32                  udf_id                                  RW  /* Duet2 udf */
uint32                  udf_type                                RW  /* 0-disable, l3-udf: 1, l4_udf: 2, same with group type */
uint32                  udf_offset                              RW
uint32                  udf_value[GLB_ACL_UDF_FIELD_NUM_MAX]    RW
uint32                  udf_mask[GLB_ACL_UDF_FIELD_NUM_MAX]     RW
uint32                  udf_value_valid[GLB_ACL_UDF_FIELD_NUM_MAX]  RW  /* Check uniformity of udf entry */
uint32                  erspan_id                               RW  
uint32                  erspan_id_mask                          RW  

uint32                  strip_header_pos                        RW
uint32                  strip_header_offset                     RW

uint32                  l4_vxlan_vni                            RW
uint32                  l4_vxlan_vni_mask                       RW

uint32                  l4_gre_type                             RW
uint32                  l4_gre_key                              RW
uint32                  l4_gre_key_mask                         RW

uint32					l2gre_add_header						RW
addr_t                  l2gre_src_ip                            RW
addr_t                  l2gre_dst_ip                            RW
mac_addr_t              l2gre_dst_mac                           RW
uint32                  l2gre_key_num                           RW
uint32                  l2gre_key_len                           RW

uint32					l3gre_add_header						RW
addr_t                  l3gre_src_ip                            RW
addr_t                  l3gre_dst_ip                            RW
mac_addr_t              l3gre_dst_mac                           RW

uint32                  deny                                    RW
uint32                  stats_en                                RW

uint32                  options                                 RW
char                    flow_match_name[ACL_NAME_FULL_NAME_SIZE+1]  READ

uint32                  action_strip_header                     RW

uint32                  tap_action_redirect                     RW
uint32                  tap_action_mark_vlan                    RW
uint32                  tap_action_untag                        RW
uint32                  tap_action_trunction                    RW
uint32					tap_action_edit_dest_mac_en             RW
mac_addr_t              tap_action_edit_dest_mac                RW
uint32                  tap_action_edit_src_mac_en              RW
mac_addr_t              tap_action_edit_src_mac                 RW
uint32                  tap_action_edit_ipda_en                 RW 
addr_t                  tap_action_edit_ipda                    RW      /* ip address v4/v6 */
uint32                  tap_action_edit_ipsa_en                 RW
addr_t                  tap_action_edit_ipsa                    RW      /* ip address v4/v6 */
uint32                  tap_action_edit_vlan_en                 RW
uint16                  tap_action_edit_vlan                    RW
uint16                  tap_action_edit_vlan_action             RW      /* 0:repalce/ 1:add/ 2:add_or_replace */
uint32                  tap_snmp_set                            RW

uint32					add_vxlan_header						RW
mac_addr_t           	vxlan_dst_mac							RW
addr_t               	vxlan_src_ip							RW
addr_t               	vxlan_dst_ip							RW
uint32                  vxlan_srcport                       	RW
uint32                  vxlan_destport                      	RW
uint32                  vxlan_vni                            	RW

[MASTER]
ctclib_hash_t           *ace_config_hash
ctclib_slist_t          *ace_config_list
-------------------------------------------------------------------------------
[TBL]
TBL_ACL_ENTRY           acl_entry                HASH+LIST          switch

[KEY]
uint64                  aclid

[DATA]
TBL_ACL_ENTRY_KEY       key                                     READ
uint32                  tblid                                   RW
uint32                  entry_priority                          RW
char                    time_range[TIME_RANGE_SIZE+1]           RW
uint32                  key_flags                               RW
uint32                  key_flags2                              RW
uint32                  key_ipv6_flags                          RW
uint32                  is_ipv6                                 RW      /* is ipv6 entry */
uint32					acl_type								RW		/*glb_acl_config_type_t*/
uint32                  key_arp_flags                           RW
uint32                  arp_op_code                             RW
uint32                  arp_op_code_mask                        RW
uint32                  invalid                                 RW
uint32                  is_copp                                 RW
uint64                  in_port                                 RW
uint64                  out_port                                RW
uint32                  ether_type                              RW
uint32                  ether_type_mask                         RW
mac_addr_t              src_mac                                 RW
mac_addr_t              src_mac_mask                            RW
mac_addr_t              dst_mac                                 RW
mac_addr_t              dst_mac_mask                            RW
uint32                  svlan                                   RW
uint32                  svlan_mask                              RW
uint32                  svlan_cos                               RW
uint32                  svlan_cos_mask                          RW
uint32                  cvlan                                   RW
uint32                  cvlan_mask                              RW
uint32                  cvlan_cos                               RW
uint32                  cvlan_cos_mask                          RW
uint32                  untag_vlan                          	RW
uint32                  ip_type                                 RW
uint32                  ip_type_mask                            RW
uint32                  ip_flags                                RW
uint32                  ip_flags_mask                           RW
prefix_t                src_ip                                  RW
prefix_t                src_ip_mask                             RW
prefix_t                dst_ip                                  RW
prefix_t                dst_ip_mask                             RW
uint32                  ipv6_flow_label                         RW
uint32                  ipv6_flow_label_mask                    RW
uint32                  dscp                                    RW
uint32                  dscp_mask                               RW
uint32                  ip_precedence                           RW
uint32                  ip_precedence_mask                      RW
uint32                  ip_protocol                             RW
uint32                  ip_protocol_mask                        RW
uint32                  l4_src_port_type                        RW
uint32                  l4_src_port                             RW
uint32                  l4_src_port_mask                        RW
uint32                  l4_dst_port_type                        RW
uint32                  l4_dst_port                             RW
uint32                  l4_dst_port_mask                        RW
uint32                  ip_frag                                 RW
uint32                  tcp_flags                               RW
uint32                  tcp_flags_mask                          RW
uint32                  igmp_type                               RW
uint32                  icmp_type                               RW
uint32                  icmp_code                               RW
uint32                  udf_id                                  RW  /* Duet2 udf */
uint32                  udf_type                                RW  /* 0-disable, l3-udf: 1, l4_udf: 2, same with group type */
uint32                  udf_offset                              RW
uint32                  udf_value[GLB_ACL_UDF_FIELD_NUM_MAX]    RW
uint32                  udf_mask[GLB_ACL_UDF_FIELD_NUM_MAX]     RW
uint32                  udf_value_valid[GLB_ACL_UDF_FIELD_NUM_MAX]  RW  /* Check uniformity of udf entry */
uint32                  erspan_id                               RW
uint32                  erspan_id_mask                          RW

uint32                  strip_header_pos                        RW
uint32                  strip_header_offset                     RW

uint32                  l4_vxlan_vni                            RW
uint32                  l4_vxlan_vni_mask                       RW

uint32                  l4_gre_type                             RW
uint32                  l4_gre_key                              RW
uint32                  l4_gre_key_mask                         RW

uint32					l2gre_add_header						RW
addr_t                  l2gre_src_ip                            RW
addr_t                  l2gre_dst_ip                            RW
mac_addr_t              l2gre_dst_mac                           RW
uint32                  l2gre_key_num                           RW
uint32                  l2gre_key_len                           RW

uint32					l3gre_add_header						RW
addr_t                  l3gre_src_ip                            RW
addr_t                  l3gre_dst_ip                            RW
mac_addr_t              l3gre_dst_mac                           RW

uint32                  category_id                             RW
uint32                  deny                                    RW
uint32                  stats_en                                RW

uint32                  options                                 RW


uint64                  inner_key_flags                         READ
uint32                  inner_key_ipv6_flags                    READ
uint32                  inner_is_ipv6                           RW      /* is ipv6 entry */
uint32                  inner_ether_type                        RW
uint32                  inner_ether_type_mask                   RW
mac_addr_t              inner_src_mac                           RW
mac_addr_t              inner_src_mac_mask                      RW
mac_addr_t              inner_dst_mac                           RW
mac_addr_t              inner_dst_mac_mask                      RW
uint32                  inner_svlan                             RW
uint32                  inner_svlan_mask                        RW
uint32                  inner_svlan_cos                         RW
uint32                  inner_svlan_cos_mask                    RW
uint32                  inner_cvlan                             RW
uint32                  inner_cvlan_mask                        RW
uint32                  inner_cvlan_cos                         RW
uint32                  inner_cvlan_cos_mask                    RW
uint32                  inner_ip_type                           RW
uint32                  inner_ip_type_mask                      RW
uint32                  inner_ip_flags                          RW
uint32                  inner_ip_flags_mask                     RW
prefix_t                inner_src_ip                            RW
prefix_t                inner_src_ip_mask                       RW
prefix_t                inner_dst_ip                            RW
prefix_t                inner_dst_ip_mask                       RW
uint32                  inner_ipv6_flow_label                   RW
uint32                  inner_ipv6_flow_label_mask              RW
uint32                  inner_dscp                              RW
uint32                  inner_dscp_mask                         RW
uint32                  inner_ip_precedence                     RW
uint32                  inner_ip_precedence_mask                RW
uint32                  inner_ip_protocol                       RW
uint32                  inner_ip_protocol_mask                  RW
uint32                  inner_l4_src_port_type                  RW
uint32                  inner_l4_src_port                       RW
uint32                  inner_l4_src_port_mask                  RW
uint32                  inner_l4_dst_port_type                  RW
uint32                  inner_l4_dst_port                       RW
uint32                  inner_l4_dst_port_mask                  RW
uint32                  inner_ip_frag                           RW
uint32                  inner_tcp_flags                         RW
uint32                  inner_tcp_flags_mask                    RW
uint32                  inner_igmp_type                         RW
uint32                  inner_icmp_type                         RW
uint32                  inner_icmp_code                         RW
uint32                  inner_options                           RW

uint32                  action_strip_header                     RW

uint32                  tap_action_redirect                     RW
uint32                  tap_action_mark_vlan                    RW
uint32                  tap_action_untag                        RW
uint32                  tap_action_trunction                    RW
uint32					tap_action_edit_dest_mac_en             RW
mac_addr_t              tap_action_edit_dest_mac                RW
uint32                  tap_action_edit_src_mac_en              RW
mac_addr_t              tap_action_edit_src_mac                 RW
uint32                  tap_action_edit_ipda_en                 RW 
addr_t                  tap_action_edit_ipda                    RW      /* ip address v4/v6 */
uint32                  tap_action_edit_ipsa_en                 RW
addr_t                  tap_action_edit_ipsa                    RW      /* ip address v4/v6 */
uint32                  tap_action_edit_vlan_en                 RW
uint16                  tap_action_edit_vlan                    RW
uint16                  tap_action_edit_vlan_action             RW      /* 0:repalce/ 1:add/ 2:add_or_replace */
uint64                  tap_group_oid                           RW

uint32					add_vxlan_header						RW
mac_addr_t           	vxlan_dst_mac							RW
addr_t               	vxlan_src_ip							RW
addr_t               	vxlan_dst_ip							RW
uint32                  vxlan_srcport                       	RW
uint32                  vxlan_destport                      	RW
uint32                  vxlan_vni                            	RW

[MASTER]
ctclib_hash_t           *acl_entry_hash
ctclib_slist_t          *acl_entry_list
-------------------------------------------------------------------------------
[TBL]
TBL_ACL_ENTRY_ACTION    acl_entry_action                HASH          switch

[KEY]
uint64                  aclid

[DATA]
TBL_ACL_ENTRY_ACTION_KEY key                            READ
uint32                  action_flag                     RW
uint32                  deny                            RW
uint32                  stats_enale                     RW
char                    policer[POLICER_NAME_SIZE]      RW
uint32                  nexthop_group                   RW
uint32                  logen                           RW
uint32                  tc                              RW
uint32                  color                           RW
uint8                   dscp                            RW
uint8                   snat_cancel                     RW
uint32                  session_id                      RW
uint32                  new_svlan_id                    RW
uint32                  new_cvlan_id                    RW
uint8                   new_scos                        RW
uint8                   new_ccos                        RW
uint32                 redirect_port_ifindex                    RW

[MASTER]
ctclib_hash_t           *acl_entry_action_hash
-------------------------------------------------------------------------------
[TBL]
TBL_ACL_NEXTHOP_GROUP       acl_nexthop_group           HASH            switch
[KEY]
uint32                      nexthop_group
[DATA]
TBL_ACL_NEXTHOP_GROUP_KEY   key                         READ
uint32                      acl_nexthop_key[MAX_MEMBER] RW

[MASTER]
ctclib_hash_t               *acl_nexthop_group_hash
-------------------------------------------------------------------------------
[TBL]
TBL_ACL_NEXTHOP         acl_nexthop                 HASH             switch
[KEY]
uint32                  acl_nexthop_id
[DATA]
TBL_ACL_NEXTHOP_KEY     key                         READ
uint32                  edit_flags                  RW
uint32                  port                        RW
mac_addr_t              src_mac                     RW
mac_addr_t              dst_mac                     RW
uint32                  vlan                        RW
addr_ipv4_t             src_ipv4                    RW
addr_ipv4_t             dst_ipv4                    RW
uint32                  dscp                        RW
uint32                  l4_src_port                 RW
uint32                  l4_dst_port                 RW
uint32                  ref                         RW

[MASTER]
ctclib_hash_t           *acl_nexthop_hash
-------------------------------------------------------------------------------
[TBL]
TBL_TIME_RANGE          time_range              HASH+LIST       switch
[KEY]
char                    name[TIME_RANGE_NAME_SIZE+1]
[DATA]
TBL_TIME_RANGE_KEY      key                     RW
time_range_value_t      time                    RW
uint32                  ref_cnt                 READ    /* ace using this time-range, no matter is ace is appiled, for CLI check */
time_range_timer_t      running_timer           READ    /*time-range running ace list*/
[FLAGS]
[MASTER]
ctclib_hash_t           *time_range_hash
ctclib_slist_t          *time_range_list
TIME_RANGE_CB           invalid_func[TIME_RANGE_ARG_TYPE_MAX]
-------------------------------------------------------------------------------
[TBL]
TBL_SSH_CFG             ssh_cfg                 GLOBAL          appcfg,switch
[KEY]
[DATA]
ssh_version_t           version                 RW
uint8                   enable                  RW
uint8                   auth_retry              RW              /* authentication retry counts */
uint8                   auth_timeout            RW              /* authentication timeout in seconds */
uint16                  rekey_interval          RW              /* rekey interval in minutes */
uint16                  auth_type               RW              /* authentication types: SSH_AUTH_TYPE_ */
uint16                  listen_port             RW              /* listen port */
char                    hostkey[M_RSA_KEY_NAMESZ+1]   RW        /* host RSA key */
uint16                  netconf_port            RW              /* netconf service port */
uint8                   netconf_service			RW				/* netconf service on/off */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_SNMP_CFG            snmp_cfg                        GLOBAL          all
[KEY]
[DATA]
uint8                   enable                          RW  /* Default process is enable */
uint8                   server_enable                   RW  /* Enable / Disable agent */
snmp_version_t          version                         RW  /* Agent version: all, v1, v2c, v3 */
char                    engineid[SNMP_ENGINEID_SIZE]    RW  /* engine id hex string */
snmp_info_t             contact                         RW  /* system contact */
snmp_info_t             location                        RW  /* system location */
FLAGS32                 trap_enable                     FLAGS  /* bitmap of GLB_TRAP_TYPE_ */
uint32                  watch_restart_count             READ
uint32                  agent_stats                     RW  /* 0: clear stats, 1: show stats */
ctc_task_t             *t_snmp_trap_all_timer           READ
ctc_task_t             *t_snmp_enable_timer             READ
[FLAGS]
trap_enable             trap_enable_coldstart           GLB_TRAP_TYPE_COLDSTART  RW
trap_enable             trap_enable_warmstart           GLB_TRAP_TYPE_WARMSTART  RW
trap_enable             trap_enable_linkdown            GLB_TRAP_TYPE_LINKDOWN   RW
trap_enable             trap_enable_linkup              GLB_TRAP_TYPE_LINKUP     RW
trap_enable             trap_enable_system              GLB_TRAP_TYPE_SYSTEM     RW
trap_enable             trap_enable_vrrp                GLB_TRAP_TYPE_VRRP       RW
trap_enable             trap_enable_ptp_master_change   GLB_TRAP_TYPE_PTP_MASTER_CHANGE    RW
trap_enable             trap_enable_ptp_state_change    GLB_TRAP_TYPE_PTP_STATE_CHANGE     RW
trap_enable             trap_enable_ptp_accuracy_change GLB_TRAP_TYPE_PTP_ACCURACY_CHANGE  RW
trap_enable             trap_enable_all                 GLB_TRAP_TYPE_ALL        RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_SNMP_VIEW           snmp_view                       LIST          appcfg
[KEY]
snmp_view_key_t         view    
[DATA]
TBL_SNMP_VIEW_KEY       key                             RW
snmp_view_class_t       type                            RW      /* include or exclude */
char                    mask[SNMP_MASK_SIZE]            RW      /* subtree mask hex string */
uint8                   access_cnt                      RW      /* access view reference cnt */
uint8                   refcnt                          READ    /* reference count */
[MASTER]
ctclib_slist_t          *snmp_view_list
--------------------------------------------------------------------------------
[TBL]
TBL_SNMP_COMMUNITY      snmp_community                  LIST          appcfg
[KEY]
char                    name[SNMP_COMMUNITY_SIZE]
[DATA]
TBL_SNMP_COMMUNITY_KEY  key                             RW
snmp_community_t        type                            RW      /* read-only or read-write */
char                    view[SNMP_NAME_SIZE]            RW      /* view name */
uint8                   secidx                          READ    /* sec name index: commXX */
[MASTER]
ctclib_slist_t          *snmp_community_list
--------------------------------------------------------------------------------
[TBL]
TBL_SNMP_CONTEXT        snmp_context                   HASH+LIST          appcfg
[KEY]
char                    context_name[SNMP_NAME_SIZE]    
[DATA]
TBL_SNMP_CONTEXT_KEY    key                             RW
uint8                   flags                           RW      /* delete entry 0xFF */

[MASTER]
ctclib_hash_t           *snmp_context_hash
ctclib_slist_t          *snmp_context_list
--------------------------------------------------------------------------------
[TBL]
TBL_SNMP_USM_USER       snmp_usm_user                   HASH+LIST          appcfg
[KEY]
char                    usm_user_name[SNMP_NAME_SIZE]    
[DATA]
TBL_SNMP_USM_USER_KEY   key                             RW
uint8                   flags                           RW      /* delete entry 0xFF */
char                    remo_engid[SNMP_ENGINEID_SIZE]  RW      /* remote engine id hex string */
uint8                   auth_type                       RW      /* authentication type md5 or sha */
char                    auth_pwd[PASSWD_SIZE]           RW      /* authentication password 8-64 */
char                    enc_auth_pwd[PASSWD_SIZE]       RW      /* authentication enc password */
uint8                   priv_type                       RW      /* privacy type des or aes */
char                    priv_pwd[PASSWD_SIZE]           RW      /* privacy password 8-64 */
char                    enc_priv_pwd[PASSWD_SIZE]       RW      /* privacy enc password */

[MASTER]
ctclib_hash_t           *snmp_usm_user_hash
ctclib_slist_t          *snmp_usm_user_list
--------------------------------------------------------------------------------
[TBL]
TBL_SNMP_GROUP_USM      snmp_group_usm                 HASH+LIST          appcfg
[KEY]
snmp_group_usm_key_t    group_usm    
[DATA]
TBL_SNMP_GROUP_USM_KEY  key                             RW      /* usm group name+security name */
uint8                   flags                           RW      /* delete entry 0xFF */
char                    security_name[SNMP_NAME_SIZE]   RW      /* usm security name */

[MASTER]
ctclib_hash_t           *snmp_group_usm_hash
ctclib_slist_t          *snmp_group_usm_list
--------------------------------------------------------------------------------
[TBL]
TBL_SNMP_ACCESS_USM     snmp_access_usm                 HASH+LIST          appcfg
[KEY]
char                    usm_access_name[SNMP_NAME_SIZE]    
[DATA]
TBL_SNMP_ACCESS_USM_KEY key                             RW      /* access group name */
uint8                   flags                           RW      /* delete entry 0xFF */
uint8                   usm_level                       RW      /* usm level noauth or auth or priv */
char                    read_view[SNMP_NAME_SIZE]       RW      /* read view name */
char                    write_view[SNMP_NAME_SIZE]      RW      /* write view name */
char                    notify_view[SNMP_NAME_SIZE]     RW      /* notify view name */
char                    context_name[SNMP_NAME_SIZE]    RW      /* context name */
uint8                   isprefix                        RW      /* exact or prefix, default is exact */

[MASTER]
ctclib_hash_t           *snmp_access_usm_hash
ctclib_slist_t          *snmp_access_usm_list
--------------------------------------------------------------------------------
[TBL]
TBL_SNMP_NOTIFY         snmp_notify                     HASH+LIST          appcfg
[KEY]
char                    notify_name[SNMP_NAME_SIZE]    
[DATA]
TBL_SNMP_NOTIFY_KEY     key                             RW      /* notify name */
uint8                   flags                           RW      /* delete entry 0xFF */
char                    tag_name[SNMP_INFO_SIZE]        RW      /* tag name, max 255, not allow 0x20,0x9,0xd,0xb */
uint8                   notify_type                     RW      /* trap-0 or inform-1, default is trap */

[MASTER]
ctclib_hash_t           *snmp_notify_hash
ctclib_slist_t          *snmp_notify_list
--------------------------------------------------------------------------------
[TBL]
TBL_SNMP_TARGET_ADDR    snmp_target_addr                HASH+LIST          appcfg
[KEY]
char                    taraddr_name[SNMP_NAME_SIZE]    
[DATA]
TBL_SNMP_TARGET_ADDR_KEY   key                             RW      /* notify name */
uint8                      flags                           RW      /* delete entry 0xFF */
char                       para_name[SNMP_NAME_SIZE]       RW      /* param name */
addr_t                     ip_addr                         RW      /* target address ipv4 or ipv6 */
uint32                     upd_port                        RW      /* udp_port, default is 162, 0-65535 */
uint32                     timeout                         RW      /* timeout, default is 1500, 0-65535 */
uint8                      retries                         RW      /* retries, default is 3, 0-255 */
uint8                      mgmt_if                         RW      /* mgmt-if */
char                       tag_list[SNMP_TAGLIST_MAX_LEN]  RW      /* tag name list,default is tar-addr name max 255, max support 128 */

[MASTER]
ctclib_hash_t           *snmp_target_addr_hash
ctclib_slist_t          *snmp_target_addr_list
--------------------------------------------------------------------------------
[TBL]
TBL_SNMP_TARGET_PARAMS  snmp_target_params             HASH+LIST          appcfg
[KEY]
char                    params_name[SNMP_NAME_SIZE]    
[DATA]
TBL_SNMP_TARGET_PARAMS_KEY     key                      RW      /* target params name */
uint8                   flags                           RW      /* delete entry 0xFF */
char                    user_name[SNMP_NAME_SIZE]       RW      /* user name */
uint8                   usm_level                       RW      /* usm level noauth or auth or priv */

[MASTER]
ctclib_hash_t           *snmp_target_params_hash
ctclib_slist_t          *snmp_target_params_list
--------------------------------------------------------------------------------
[TBL]
TBL_SNMP_TRAP           snmp_trap                  LIST          appcfg
[KEY]
snmp_trap_key_t         trap
[DATA]
TBL_SNMP_TRAP_KEY       key                        RW
uint32                  is_inband                  RW
[MASTER]
ctclib_slist_t          *snmp_trap_list            /* no sort */
--------------------------------------------------------------------------------
[TBL]
TBL_SNMP_INFORM         snmp_inform                LIST          appcfg
[KEY]
snmp_inform_key_t       inform
[DATA]
TBL_SNMP_INFORM_KEY     key                        RW
uint32                  is_inband                  RW
uint32                  timeout                    RW      /* timeout, default is 1500, 0-65535 */
uint8                   retries                    RW      /* retries, default is 3, 0-255 */
[MASTER]
ctclib_slist_t          *snmp_inform_list          /* no sort */
--------------------------------------------------------------------------------
[TBL]
TBL_SNMP_TRAP_MSG       trap                       GLOBAL       all
[KEY]
[DATA]
char                    msg[CMD_BUF_1024]          RW      
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_RMON_EVENT         rmon_event                  HASH+LIST    appcfg
[KEY]
uint32                 index
[DATA]
TBL_RMON_EVENT_KEY     key                                READ
uint32                 conf                               RW
uint32                 type                               RW       /* 1- none, 2- log, 3-snmpTrap, 4-logandTrap */
uint32                 status                             RW       /* 1-Valid, 2-createRequest, *3-UnderCreation, 4- invalid, *5-nonExistent */
uint64                 last_sent                          RW 
char                   desc[RMON_DESCR_LENGTH+1]          RW
char                   community[SNMP_COMMUNITY_SIZE+1]   RW
char                   owner[RMON_OWNER_NAME_SIZE+1]      RW
ctc_task_t             *t_under_creation_timer            READ
[MASTER]
ctclib_hash_t          *rmon_event_hash
ctclib_slist_t         *rmon_event_list
--------------------------------------------------------------------------------
[TBL]
TBL_RMON_ALARM         rmon_alarm                  HASH+LIST    appcfg
[KEY]
uint32                 index
[DATA]
TBL_RMON_ALARM_KEY     key                                READ
uint32                 conf                               RW
uint32                 interval                           RW
uint32                 variable[RMON_ALARM_VARIABLE_MAXSIZE]        RW
char                   variable_word[RMON_ALARM_VAR_WORD_LENGTH+1]  RW
uint32                 sample_type                        RW       /*1- absoluteValue, 2- deltaValue */
int64                  value                              RW
uint32                 startup_alarm                      RW
int32                  rising_threshold                   RW       /* For ether stats type is uint64 */
int32                  falling_threshold                  RW
uint32                 rising_event_index                 RW
uint32                 falling_event_index                RW
char                   owner[RMON_OWNER_NAME_SIZE+1]      RW
uint32                 status                             RW       /* 1-Valid, 2-createRequest, *3-UnderCreation, 4- invalid, *5-nonExistent */
uint32                 last_event                         RW
uint64                 prev_value                         RW
uint64                 curr_value                         RW
ctc_task_t             *t_alarm_timer                     READ
ctc_task_t             *t_under_creation_timer            READ
[MASTER]
ctclib_hash_t          *rmon_alarm_hash
ctclib_slist_t         *rmon_alarm_list
--------------------------------------------------------------------------------
[TBL]
TBL_RMON_ETHER_STATS   rmon_ether_stats             HASH+LIST    appcfg
[KEY]
uint32                 index
[DATA]
TBL_RMON_ETHER_STATS_KEY    key                           READ
uint32                 status                             RW      /*1-Valid, 2-createRequest, *3-UnderCreation, 4- invalid, *5-nonExistent */
char                   owner[RMON_OWNER_NAME_SIZE+1]      RW
uint32                 data_source[RMON_ETHERSTAT_DATASOURCE_MAXSIZE]  RW
uint32                 data_source_ifindex                RW
uint64                 drop_events                        RW
uint64                 octets                             RW
uint64                 pkts                               RW
uint64                 broadcast_pkts                     RW
uint64                 multicast_pkts                     RW
uint64                 crc_align_errors                   RW
uint64                 undersize_pkts                     RW
uint64                 oversize_pkts                      RW
uint64                 fragments                          RW
uint64                 jabbers                            RW
uint64                 collisions                         RW
uint64                 pkts_64_octets                     RW
uint64                 pkts_65to127_octets                RW
uint64                 pkts_128to255_octets               RW
uint64                 pkts_256to511_octets               RW
uint64                 pkts_512to1023_octets              RW
uint64                 pkts_1024to1518_octets             RW
ctc_task_t             *t_under_creation_timer            READ
[MASTER]
ctclib_hash_t          *rmon_ether_stats_hash
ctclib_slist_t         *rmon_ether_stats_list
--------------------------------------------------------------------------------
[TBL]
TBL_RMON_HISTORY       rmon_history                HASH+LIST    appcfg
[KEY]
uint32                 index
[DATA]
TBL_RMON_HISTORY_KEY   key                                READ
uint32                 status                             RW       /* 1-Valid, 2-createRequest, *3-UnderCreation, 4- invalid, *5-nonExistent */
char                   owner[RMON_OWNER_NAME_SIZE+1]      RW
uint32                 data[RMON_HISTORY_CONTROL_MAXSIZE] RW
uint32                 data_source                        RW       /* As of now it is ifindex */
uint32                 buckets_requested                  RW
uint32                 buckets_granted                    RW
uint32                 interval                           RW
uint32                 current_sample_no                  RW
ctc_task_t             *t_under_creation_timer            READ
ctc_task_t             *t_coll_history_timer              READ
[MASTER]
ctclib_hash_t          *rmon_history_hash
ctclib_slist_t         *rmon_history_list
--------------------------------------------------------------------------------
[TBL]
TBL_RMON_STATS_HISTORY rmon_stats_history          HASH+LIST    appcfg
[KEY]
rmon_stats_history_key_t
[DATA]
TBL_RMON_STATS_HISTORY_KEY  key                           READ
uint64                 interval_start                     RW
uint64                 drop_events                        RW
uint64                 octets                             RW
uint64                 pkts                               RW
uint64                 broadcast_pkts                     RW
uint64                 multicast_pkts                     RW
uint64                 crc_align_errors                   RW
uint64                 undersize_pkts                     RW
uint64                 oversize_pkts                      RW
uint64                 fragments                          RW
uint64                 jabbers                            RW
uint64                 collisions                         RW
uint32                 utilization                        RW
uint64                 total_drop_events                  RW
uint64                 total_octets                       RW
uint64                 total_pkts                         RW
uint64                 total_broadcast_pkts               RW
uint64                 total_multicast_pkts               RW
uint64                 total_crc_align_errors             RW
uint64                 total_undersize_pkts               RW
uint64                 total_oversize_pkts                RW
uint64                 total_fragments                    RW
uint64                 total_jabbers                      RW
uint64                 total_collisions                   RW
[MASTER]
ctclib_hash_t          *rmon_stats_history_hash
ctclib_slist_t         *rmon_stats_history_list
--------------------------------------------------------------------------------
[TBL]
TBL_SYSLOG_CFG          syslog_cfg                      GLOBAL  appcfg,routed
[KEY]
[DATA]
uint8                   enable_to_server                RW      /* enable send log to server */
uint8                   enable_to_file                  RW      /* enable send log to local file */
uint8                   enable_to_trap                  RW      /* enable send log to trap */
uint8                   enable_to_diag                  RW      /* enable send log to diag */
uint16                  logging_lines                   RW      /* logging buffer size <10-1000> */
char                    server_addr[M_SRV_ADDR_BUF_SZ]  RW      /* remote server ip address, format: vrfid,addr;vrfid2,addr2;vrfid3,addr3 */
syslog_facility_t       server_facility                 RW      /* facility for logs send to server */
syslog_severity_t       server_severity                 RW      /* severity for logs send to server */
syslog_facility_t       trap_facility                   RW      /* facility for traps send to server */
syslog_severity_t       trap_severity                   RW      /* severity for logs for trap */
syslog_timestamp_t      timestamp                       RW      /* timestamp option of the log */
syslog_severity_t       file_severity                   RW      /* severity for logs send to local file */
syslog_severity_t       module_severity                 RW      /* severity for logs send to logging buffer */
uint8                   enable_merge                    RW      /* enable logging merge */
uint8                   enable_operate                  RW      /* operate enable */
uint16                  merge_timeout                   RW      /* merge timeout <1-300> seconds */
uint16                  merge_fifosize                  RW      /* merge fifo-size <100-10240> */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_NTP_SERVER          ntp_server              LIST      appcfg
[KEY]
char                    host[NTP_MAX_HOST_IP_SIZE]
[DATA]
TBL_NTP_SERVER_KEY      key                     RW
uint32                  keyid                   RW
uint32                  version                 RW
uint32                  prefer                  RW
uint32                  type                    RW
uint32                  is_inband               RW
[MASTER]
ctclib_slist_t          *ntp_server_list
--------------------------------------------------------------------------------
[TBL]
TBL_NTP_ACE             ntp_ace                 LIST      appcfg
[KEY]
char                    host[NTP_MAX_HOST_IP_SIZE]
char                    mask[NTP_MAX_HOST_IP_SIZE]
[DATA]
TBL_NTP_ACE_KEY         key                     RW
uint32                  option                  RW
uint32                  family                  RW
uint32                  masklen                 RW
[MASTER]
ctclib_slist_t          *ntp_ace_list
--------------------------------------------------------------------------------
[TBL]
TBL_NTP_KEY             ntp_key                 LIST      appcfg
[KEY]
uint32                  keyid
[DATA]
TBL_NTP_KEY_KEY         key                     RW
char                    value[NTP_MAX_KEY_LEN]  RW
uint32                  trusted                 RW
[MASTER]
ctclib_slist_t          *ntp_key_list
--------------------------------------------------------------------------------
[TBL]
TBL_NTP_CFG             ntp_cfg                 GLOBAL      appcfg
[KEY]
[DATA]
int32                  aclCount                 RW
int32                  ucastServerCount         RW
int32                  ucastClientCount         RW
int32                  bcastServerCount         RW
int32                  mcastClientCount         RW
int32                  mcastServerCount         RW
int32                  bcastDelay               RW
int32                  minimumDistance          RW
int32                  authentication           RW   /* authentication mode, 1 enable, 0 disable */
int32                  brefclock                RW
int32                  refclock_stratum         RW
int32                  ifreloadCount            RW
int32                  clearStats               RW
int32                  debug_level              RW   /* default is 2(crit) */
int32                  ucastServerCount_inband         RW
int32                  ucastServerCount_outband       RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_NTP_IF             ntp_if                   GLOBAL      appcfg
[KEY]
[DATA]
int32                  disable                  RW
int32                  broadcastClient          RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_NTP_SYNCSTATUS             ntp_syncstatus           GLOBAL      appcfg
[KEY]
[DATA]
char                   status[NTP_MAX_KEY_LEN]          RW
char                   stratum[NTP_MAX_KEY_LEN]         RW
char                   frequency[NTP_MAX_KEY_LEN]       RW
char                   precision[NTP_MAX_KEY_LEN]       RW
char                   reference_time[NTP_MAX_KEY_LEN]  RW
char                   root_delay[NTP_MAX_KEY_LEN]      RW
char                   root_dispersion[NTP_MAX_KEY_LEN] RW
char                   stability[NTP_MAX_KEY_LEN]       RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_STATIC_DNS          static_cfg              LIST          appcfg
[KEY]
char                    name[DNS_HOSTNAME_SIZE+1]
[DATA]
TBL_STATIC_DNS_KEY      key                     RW
addr_t                  ip_addr                 RW  /* read-only or read-write */

[MASTER]
ctclib_slist_t          *static_list                /* no sort */
--------------------------------------------------------------------------------
[TBL]
TBL_DYNAMIC_DNS_DOMAIN  dynamic_domain_cfg      LIST          appcfg
[KEY]
char                    name[DNS_HOSTNAME_SIZE+1]
[DATA]
TBL_DYNAMIC_DNS_DOMAIN_KEY key                  RW

[MASTER]
ctclib_slist_t          *dynamic_domain_list       /* no sort */
--------------------------------------------------------------------------------
[TBL]
TBL_DYNAMIC_DNS_SERVER  dynamic_server_cfg      LIST          appcfg
[KEY]
addr_t                  ip_addr
[DATA]
TBL_DYNAMIC_DNS_SERVER_KEY  key                 RW

[MASTER]
ctclib_slist_t          *dynamic_server_list    /* no sort */
--------------------------------------------------------------------------------
[TBL]
TBL_QOS_DOMAIN          qos_domain                                      ARRAY           switch
[KEY]
uint32                  id
[DATA]
TBL_QOS_DOMAIN_KEY      key                                             RW
uint32                  phb_enable                                      READ       /* used for dump */
uint32                  cfi_enable                                      RW
uint32                  cos2pri[GLB_QOS_COS_NUM]                        RW
uint32                  cos2color[GLB_QOS_COS_NUM]                      RW
uint32                  cos2phb[GLB_QOS_COS_NUM]                        RW
uint32                  dscp2pri[GLB_QOS_DSCP_NUM]                      RW
uint32                  dscp2color[GLB_QOS_DSCP_NUM]                    RW
uint32                  dscp2phb[GLB_QOS_DSCP_NUM]                      RW
uint32                  prec2pri[GLB_QOS_IP_PREC_NUM]                   RW
uint32                  prec2color[GLB_QOS_IP_PREC_NUM]                 RW
uint32                  prec2phb[GLB_QOS_IP_PREC_NUM]                   RW
uint32                  exp2pri[GLB_QOS_EXP_NUM]                        RW
uint32                  exp2color[GLB_QOS_EXP_NUM]                      RW
uint32                  exp2phb[GLB_QOS_EXP_NUM]                        RW
uint32                  pri_color2cos[GLB_QOS_PRI_COLOR_TABLE_SIZE]     RW         /* priority << 3 + color == > cos */
uint32                  pri_color2dscp[GLB_QOS_PRI_COLOR_TABLE_SIZE]    RW
uint32                  pri_color2exp[GLB_QOS_PRI_COLOR_TABLE_SIZE]     RW
uint32                  phb2cos[GLB_QOS_PHB_MAX]                        RW         /* PHB ==> COS */
uint32                  phb2dscp[GLB_QOS_PHB_MAX]                       RW
uint32                  phb2exp[GLB_QOS_PHB_MAX]                        RW
uint32                  cos2tc[GLB_QOS_COS_NUM]                         RW
uint32                  dscp2tc[GLB_QOS_DSCP_NUM]                       RW
uint32  			exp2tc[GLB_QOS_EXP_NUM]					RW
uint32                  tc_color2cos[GLB_QOS_TC_COLOR_TABLE_SIZE]       RW         /* tc << 2 + color == > cos */
uint32                  tc_color2dscp[GLB_QOS_TC_COLOR_TABLE_SIZE]      RW
uint32  			tc_color2exp[GLB_QOS_TC_COLOR_TABLE_SIZE]  	   RW
[MASTER]
tbl_qos_domain_t        *domain_array[GLB_QOS_DOMAIN_NUM]
tbl_qos_domain_t        *default_domain  /* store default mapping info */
--------------------------------------------------------------------------------
[TBL]
TBL_QOS_MPLS_DOMAIN           qos_mpls_domain                  HASH+LIST           switch
[KEY]
uint32                        mpls_label
[DATA]
TBL_QOS_MPLS_DOMAIN_KEY       key                              READ
uint32                        exp_domain                       RW              /* exp domain id */
[MASTER]
ctclib_hash_t                 *qos_mpls_domain_hash
ctclib_slist_t                *qos_mpls_domain_list
--------------------------------------------------------------------------------
[TBL]
TBL_QOS_POLICER_RES           qos_policer_res                  HASH           switch
[KEY]
qos_policer_res_key_t           
[DATA]
TBL_QOS_POLICER_RES_KEY       key                              READ
uint32                        ref_cnt                          RW
[MASTER]
ctclib_hash_t                 *qos_policer_res_hash
--------------------------------------------------------------------------------
[TBL]
TBL_QOS_POLICER_ACTION_PROFILE         qos_policer_action_profile       ARRAY           switch
[KEY]
uint32                  id
[DATA]
TBL_QOS_POLICER_ACTION_PROFILE_KEY     key                      READ
char                    name[QOS_NAME_SIZE+1]                   RW
glb_qos_color_action_t  confirm_action                          RW              /* green color action */
glb_qos_color_action_t  exceed_action                           RW              /* yellow color action */
glb_qos_color_action_t  violate_action                          RW              /* red color action */
uint32                  ref_cnt                                 RW
[MASTER]
tbl_qos_policer_action_profile_t       *qos_policer_action_profile_array[GLB_QOS_POLICER_ACTION_PROFILE_NUM]
--------------------------------------------------------------------------------
[TBL]
TBL_QOS_POLICER_PROFILE         qos_policer_profile             ARRAY           switch
[KEY]
#compile error: uint8 id <= GLB_QOS_POLICER_PROFILE_NUM
#uint8                  id
uint32                  id
[DATA]
TBL_QOS_POLICER_PROFILE_KEY     key                             READ
char                    name[QOS_NAME_SIZE+1]                   RW
FLAGS32                 flags                                   FLAGS           /* GLB_POLICER_PROFILE_FLAGS_AGP */
uint8                   apply_dir                               INTERNAL        /* for aggreate policer checking*/
uint8                   algorithm_mode                          RW
uint8                   color_mode                              RW              /* 0:color-blind; 1:color-aware */
uint8                   drop_color                              RW              /* 1: red; 2:yellow, refer to glb_qos_color_t*/
uint64                  cir                                     RW              /* kbits/s */
uint32                  cbs                                     RW
uint64                  eir_or_pir                              RW              /* depend on algorithm mode */
uint32                  ebs_or_pbs                              RW
uint64                  confirm_pkt                             RW              /* used for dump */
uint64                  confirm_byte                            RW              /* used for dump */
uint64                  exceed_pkt                              RW              /* used for dump */
uint64                  exceed_byte                             RW              /* used for dump */
uint64                  violate_pkt                             RW              /* used for dump */
uint64                  violate_byte                            RW              /* used for dump */
uint8                   is_pps                                  RW              /* 0:bps mode; 1:pps mode */
char                    action_profile_name[QOS_NAME_SIZE+1]    RW              /* tbl_qos_policer_action_profile_t */
uint32                  ref_cnt                                 RW
[FLAGS]
flags                   flags_policer_agp               GLB_POLICER_PROFILE_FLAGS_AGP                   RW
flags                   flags_algorithm_mode            GLB_POLICER_PROFILE_FLAGS_ALGORITHM_MODE        READ
flags                   flags_color_mode                GLB_POLICER_PROFILE_FLAGS_COLOR_MODE            READ
flags                   flags_cir                       GLB_POLICER_PROFILE_FLAGS_CIR                   READ
flags                   flags_cbs                       GLB_POLICER_PROFILE_FLAGS_CBS                   READ
flags                   flags_eir_or_pir                GLB_POLICER_PROFILE_FLAGS_EIR_OR_PIR            READ
flags                   flags_ebs_or_pbs                GLB_POLICER_PROFILE_FLAGS_EBS_OR_PBS            READ
flags                   flags_drop_color                GLB_POLICER_PROFILE_FLAGS_DROP_COLOR            RW
flags                   flags_use_l3_legth              GLB_POLICER_PROFILE_FLAGS_USE_L3_LENGTH         RW
flags                   flags_stats                     GLB_POLICER_PROFILE_FLAGS_STATS                 RW
/* for dump only */
flags                   flags_dump_stats                GLB_POLICER_PROFILE_FLAGS_DUMP_STATS            READ
[MASTER]
tbl_qos_policer_profile_t       *qos_policer_profile_array[GLB_QOS_POLICER_PROFILE_NUM]
--------------------------------------------------------------------------------
[TBL]
TBL_QOS_DROP_PROFILE    qos_drop_profile                ARRAY           switch
[KEY]
uint32                  id
[DATA]
TBL_QOS_DROP_PROFILE_KEY        key                     RW
char                    name[QOS_NAME_SIZE+1]           RW
FLAGS32                 flags                           FLAGS   /* GLB_DROP_PROFILE_FLAGS_GREEN_MAX_THRD */
uint32                  green_max_threashold            RW
uint32                  green_min_threashold            RW
uint32                  green_probability               RW
uint32                  yellow_max_threashold           RW
uint32                  yellow_min_threashold           RW
uint32                  yellow_probability              RW
uint32                  red_max_threashold              RW
uint32                  red_min_threashold              RW
uint32                  red_probability                 RW
uint32                  ref_cnt                         RW
[FLAGS]
flags                   flags_green_max_threshold       GLB_DROP_PROFILE_FLAGS_GREEN_MAX_THRD       READ
flags                   flags_green_min_threshold       GLB_DROP_PROFILE_FLAGS_GREEN_MIN_THRD       READ
flags                   flags_green_probabilty          GLB_DROP_PROFILE_FLAGS_GREEN_PROB           READ
flags                   flags_yellow_max_threshold      GLB_DROP_PROFILE_FLAGS_YELLOW_MAX_THRD      READ
flags                   flags_yellow_min_threshold      GLB_DROP_PROFILE_FLAGS_YELLOW_MIN_THRD      READ
flags                   flags_yellow_probabilty         GLB_DROP_PROFILE_FLAGS_YELLOW_PROB          READ
flags                   flags_red_max_threshold         GLB_DROP_PROFILE_FLAGS_RED_MAX_THRD         READ
flags                   flags_red_min_threshold         GLB_DROP_PROFILE_FLAGS_RED_MIN_THRD         READ
flags                   flags_red_probabilty            GLB_DROP_PROFILE_FLAGS_RED_PROB             READ
/* for dump only */
flags                   flags_random_detect             GLB_DROP_PROFILE_FLAGS_RANDOM_DETECT        READ
[MASTER]
tbl_qos_drop_profile_t  *qos_drop_profile_array[GLB_QOS_DROP_PROFILE_NUM]
--------------------------------------------------------------------------------
[TBL]
TBL_QOS_QUEUE_SHAPE_PROFILE  qos_queue_shape_profile            ARRAY           switch
[KEY]
uint32                  id
[DATA]
TBL_QOS_QUEUE_SHAPE_PROFILE_KEY       key                       RW
char                    name[QOS_NAME_SIZE+1]                   RW
uint32                  pir                                     RW      /* kbits/s */
uint32                  cir                                     RW      /* kbits/s */
scheduler_mode_t         mode                                   RW      /* queue class */
uint32                  queue_weight                            RW      /* queue weight */
uint32                  ref_cnt                                 RW
FLAGS32                 flags                                   FLAGS   /* GLB_QUEUE_SHAPE_PROFILE_FLAGS_PIR */
[FLAGS]
flags                   flags_pir               GLB_QUEUE_SHAPE_PROFILE_FLAGS_PIR       READ
flags                   flags_cir               GLB_QUEUE_SHAPE_PROFILE_FLAGS_CIR       READ
flags                   flags_mode              GLB_QUEUE_SHAPE_PROFILE_FLAGS_MODE      READ
flags                   flags_weight            GLB_QUEUE_SHAPE_PROFILE_FLAGS_WEIGHT    READ
[MASTER]
tbl_qos_queue_shape_profile_t         *qos_queue_shape_profile_array[GLB_QOS_SHAPE_PROFILE_NUM]
--------------------------------------------------------------------------------
[TBL]
TBL_QOS_PORT_SHAPE_PROFILE           qos_port_shape_profile     ARRAY           switch
[KEY]
uint32                  id
[DATA]
TBL_QOS_PORT_SHAPE_PROFILE_KEY       key                        RW
char                    name[QOS_NAME_SIZE+1]                   RW
uint32                  pir                                     RW      /* kbits/s */
uint32                  ref_cnt                                 RW
FLAGS32                 flags                                   FLAGS   /* GLB_PORT_SHAPE_PROFILE_FLAGS_PIR */
[FLAGS]
flags                   flags_pir               GLB_PORT_SHAPE_PROFILE_FLAGS_PIR       READ
[MASTER]
tbl_qos_port_shape_profile_t         *qos_port_shape_profile_array[GLB_QOS_PORT_SHAPE_PROFILE_NUM]
--------------------------------------------------------------------------------
[TBL]
TBL_QOS_QUEUE_SMART_BUFFER    qos_queue_smart_buffer   			ARRAY           switch
[KEY]
uint32                  queue_id
[DATA]
TBL_QOS_QUEUE_SMART_BUFFER_KEY       key                        RW
uint32                  smart_buffer_enable                     RW      
[MASTER]
tbl_qos_queue_smart_buffer_t         *qos_queue_smart_buffer_array[GLB_QOS_QUEUE_SMART_BUFFER_NUM]
--------------------------------------------------------------------------------
[TBL]
TBL_QOS_GLOBAL          qos_glb                                 GLOBAL                  switch
[KEY]
[DATA]
uint8                   qos_enable                              RW
uint8                   phb_enable                              RW
uint8                   port_policer_first_enable               RW
uint8                   policer_stats_enable                    RW
uint32                  cur_cpu_rate                            RW      /* total cpu rate*/
uint32                  def_cpu_rate                            READ    /* total cpu rate*/
uint32                  latency_range[GLB_MONITOR_LATENCY_RANGE_ID_MAX]   RW  /* latency event 8 ranges */
uint32                  buffer_event_enable                   RW      /* enable buffer event */
uint32                  buffer_event_high				RW      /* set buffer event high threshold  */
uint32                  buffer_event_low				RW      /* set buffer event low threshold  */
uint32                  check_qos_enable                      RW      /*check qos enable*/
uint8                   qos_ipg_enable                  RW       /* enable qos policing/shaping include ipg */
uint32                  in_port_policer_res_cnt                 RW      /* tbl_qos_policer_res_t */
uint32                  eg_port_policer_res_cnt                 RW      /* tbl_qos_policer_res_t */
uint32                  in_flow_policer_res_cnt                 RW      /* tbl_qos_policer_res_t */
uint32                  eg_flow_policer_res_cnt                 RW      /* tbl_qos_policer_res_t */
uint32                  queue_shape_enable                 		RW      /* queue shape enable */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_MIRROR              mirror                      ARRAY           switch,routed
[KEY]
uint32                  id
[DATA]
TBL_MIRROR_KEY          key                         READ
port_bmp_t              source_igs_port_bmp         RW
port_bmp_t              source_egs_port_bmp         RW
vlan_bmp_t              source_igs_vlan_bmp         RW
vlan_bmp_t              source_egs_vlan_bmp         RW
uint32                  cpu_source_dir              RW
mirror_dest_type_t      dest_type                   RW
port_bmp_t              dest_port_bmp               RW
uint32                  dest_port                   RW
uint32                  dest_group                  RW
vid_t                   dest_vlan                   RW
[MASTER]
tbl_mirror_t      *mirror_array[GLB_MIRROR_MAX_SESSION_ID+1]
--------------------------------------------------------------------------------
[TBL]
TBL_MIRROR_MAC_ESCAPE   mirror_mac_escape           LIST           switch
[KEY]
mirror_mac_escape_key_t                                     /* mac address and mask address*/
[DATA]
TBL_MIRROR_MAC_ESCAPE_KEY key                       READ      
[MASTER]
ctclib_slist_t           *mirror_mac_escape_list
--------------------------------------------------------------------------------
[TBL]
TBL_TAP_GROUP_INGRESS        tap_group_ingress        	        HASH+LIST   switch,fea
[KEY]
tap_group_ingress_key_t
[DATA]
TBL_TAP_GROUP_INGRESS_KEY    key                        		READ
uint32					 ing_mark_vlan_en						RW
uint32					 ing_mark_vlan_vid	                    RW
uint32					 ing_untag_en                           RW
uint32					 ing_trunction_en                       RW
uint64					 ing_tap_group_member_oid				RW              /* tap_group_member_oid id for ASIC mapping*/
uint32					 ing_edit_dest_mac_en                   RW
mac_addr_t               ing_edit_dest_mac                      RW
uint32                   ing_edit_src_mac_en                    RW
mac_addr_t               ing_edit_src_mac                       RW
uint32                   ing_edit_ipda_en                       RW 
addr_t                   ing_edit_ipda                          RW      /* ip address v4/v6 */
uint32                   ing_edit_ipsa_en                       RW
addr_t                   ing_edit_ipsa                          RW      /* ip address v4/v6 */
uint32                   ing_edit_vlan_en                       RW 
uint16                   ing_edit_vlan                          RW 

[MASTER]
ctclib_hash_t            *tap_group_ingress_hash
ctclib_slist_t           *tap_group_ingress_list
--------------------------------------------------------------------------------
[TBL]
TBL_TAP_GROUP_INGRESS_FLOW        tap_group_ingress_flow        HASH+LIST   switch,fea
[KEY]
tap_group_ingress_flow_key_t
[DATA]
TBL_TAP_GROUP_INGRESS_FLOW_KEY    key                        	READ
uint32                   tap_grp_id                             RW
uint32                   if_idx                                 RW
uint32					 ing_untag_en    						RW
uint32					 ing_mark_vlan_en						RW
uint32					 ing_mark_vlan_vid	                    RW
uint64					 ing_tap_group_member_oid				RW              /* tap_group_member_oid id for ASIC mapping*/

[MASTER]
ctclib_hash_t            *tap_group_ingress_hash
ctclib_slist_t           *tap_group_ingress_list
--------------------------------------------------------------------------------
[TBL]
TBL_TAP_GROUP_EGRESS          tap_group_egress            HASH+LIST      switch,fea
[KEY]
tap_group_egress_key_t
[DATA]
TBL_TAP_GROUP_EGRESS_KEY      key                               READ
uint32					      timestamp_en						RW
uint64					 	  tap_group_member_oid				RW              /* tap_group_member_oid id for ASIC mapping*/
[MASTER]
ctclib_hash_t            *tap_group_egress_hash
ctclib_slist_t           *tap_group_egress_list
--------------------------------------------------------------------------------
[TBL]
TBL_TAP_GROUP           			tap_group                   HASH+LIST switch,fea
[KEY]
char                    			name[TAP_NAME_SIZE]
[DATA]
TBL_TAP_GROUP_KEY       			key                         READ
uint32                  			id                          RW
uint32                              flags                       RW
char                    			desc[TAP_DESC_SIZE]         RW
uint8                               truncation_use              RW
uint64								tap_group_oid				READ				/* tap_group id for ASIC mapping*/
[MASTER]
ctclib_hash_t           			*tap_group_hash
ctclib_slist_t          			*tap_group_list
--------------------------------------------------------------------------------
[TBL]
TBL_TAP_FIVE_TUPLE        		    tap_five_tuple              HASH+LIST     switch,fea
[KEY]
tap_five_tuple_key_t
[DATA]
TBL_TAP_FIVE_TUPLE_KEY              key                         READ
uint32                  			acl_entry_id                RW
uint32                  			stats_id                    RW
uint64                  			packet_count                RW
uint64                  			byte_count                  RW
[MASTER] 
ctclib_hash_t           		   *tap_five_tuple_hash
ctclib_slist_t          		   *tap_five_tuple_list
--------------------------------------------------------------------------------
[TBL]
TBL_TAP_DPI_GLOBAL                  tap_dpi_global              GLOBAL     switch,fea
[KEY]
[DATA]
uint32                              dpi_action                  RW
char                                redir_if[IFNAME_SIZE+1]     RW      /* tap dpi redirect interface */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_USER                user                            LIST          appcfg,switch
[KEY]
char                    name[USERNAME_SIZE+1]
[DATA]
TBL_USER_KEY            key                             READ
uint32                  uid                             READ    /* user's id */
uint8                   privilege                       RW      /* user's privilege <1-4> */
char                    enc_passwd[PASSWD_SIZE]         RW      /* encrypted password */
char                    passwd[PASSWD_SIZE]             RW      /* password of this user */
char                    rsakey[M_RSA_KEY_NAMESZ+1]      RW      /* RSA key name for this user */
uint8                   service_type					RW      /* service_type */
[MASTER]
ctclib_slist_t          *user_list
--------------------------------------------------------------------------------
[TBL]
TBL_LOGIN_RECORD        login_record                      LIST          appcfg
[KEY]
char                    name[USERNAME_SIZE+1]
[DATA]
TBL_LOGIN_RECORD_KEY    key                             READ
uint32                  locked                          RW    	
uint32                  first_fail_ts 					RW      /* first fail timestamp */
uint32                  lock_ts         				RW      /* lock timestamp */
uint32                  fail_count            			RW      /* fail count */
uint32               	invalid_user                    RW      /* is invalid user */
[MASTER]
ctclib_slist_t          *user_list
--------------------------------------------------------------------------------
[TBL]
TBL_LOGIN_SECURITY_GLB      login_security_glb                 GLOBAL          appcfg
[KEY]
[DATA]
uint32                 enable                           RW    	/* login security enable */
uint32                 max_fail_num 					RW      /* maxinum fail number */
uint32                 fail_period         			    RW      /* lock duration*/
uint32                 lock_duration            		RW      /* record time */
uint32                 curr_invalid_user                RW      /* current invalid user count */
uint32                 max_invalid_user                 RW      /* maximum invalid user number */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_VTY                 vty                                 ARRAY          appcfg,authd,switch
[KEY]
uint8                   id
[DATA]
TBL_VTY_KEY             key                                 READ
uint32                  timeout_min                         RW          /* line's timeout minutes */
uint32                  timeout_sec                         RW          /* line's timeout seconds */
char                    protocol[LINE_PROTOCOL_BUF_SIZE]    RW          /* protocol's enabled on this line, ssh,telnet... */
login_method_t          login                               RW          /* login method type: nologin,login,local,auth */
uint8                   privilege                           RW          /* vty's privilege <1-4> */
char                    enc_passwd[PASSWD_SIZE]             RW          /* encrypted line password */
char                    passwd[PASSWD_SIZE]                 RW          /* line password */
char                    auth_method[LINE_AUTH_METHOD_NAME_SIZE+1]  RW   /* line auth method list name */
uint8                   inuse                               READ        /* vty currently in use flag */
char                    author_method[LINE_AUTH_METHOD_NAME_SIZE+1]  RW  /* authorization method list name */
char                    account_method[LINE_AUTH_METHOD_NAME_SIZE+1]  RW  /* accounting method list name */
char                    accountcmd_method[LINE_AUTH_METHOD_NAME_SIZE+1]  RW  /* accounting commands method list name */
char                    ipv4_acl[ACL_NAME_FULL_NAME_SIZE+1]           RW 
char                    ipv6_acl[ACL_NAME_FULL_NAME_SIZE+1]           RW 
uint8                   aaa_privilege                       RW
uint8                   config_privilege                    RW
uint32                  aaa_start_time                      RW
uint8                   cmd_buf[GLB_MAX_CMD_BUFSZ]          RW
uint8                   old_cmd_buf[GLB_MAX_CMD_BUFSZ]      RW
char                    acct_stop_ipaddr[IPADDR_BUF_SIZE]   RW      /* ipv4/6 address */
uint32                  acct_stop_pid                       RW      /* clish pid */
uint8                   acct_stop_privilege                 RW
uint32                  is_not_ssh_key                      RW      /* not ssh key mode*/
uint32                  is_ssh_login                      	RW      /* is ssh login mode*/
[MASTER]
tbl_vty_t              *vty_array[GLB_MAX_VTY_NUM]
--------------------------------------------------------------------------------
[TBL]
TBL_CONSOLE             console                             GLOBAL          appcfg
[DATA]
uint32                  timeout_min                         RW          /* line's timeout minutes */
uint32                  timeout_sec                         RW          /* line's timeout seconds */
login_method_t          login                               RW          /* login method type: nologin,login,local,auth */
uint8                   privilege                           RW          /* console's privilege <1-4> */
char                    enc_passwd[PASSWD_SIZE]             RW          /* encrypted line password */
char                    passwd[PASSWD_SIZE]                 RW          /* line password */
char                    auth_method[LINE_AUTH_METHOD_NAME_SIZE+1]  RW   /* line auth method list name */
uint8                   stopbits                            RW          /* 1 or 2 */
parity_t                parity                              RW          /* even or none or odd */
uint8                   databits                            RW          /* 7 or 8 */
uint32                  baudrate                            RW          /* baud rate */
uint8                   inuse                               READ        /* console currently in use flag */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_AUTHEN              authen                                  LIST          appcfg
[KEY]
char                    name[LINE_AUTH_METHOD_NAME_SIZE+1]
[DATA]
TBL_AUTHEN_KEY          key                                     READ
char                    methods[LINE_AUTH_METHOD_LINE_SIZE]     RW      /* auth method list */
[MASTER]
ctclib_slist_t          *authen_list
--------------------------------------------------------------------------------
[TBL]
TBL_LOGIN               login                               LIST          appcfg,authd
[KEY]
char                    name[VTY_BUF_SIZE]
[DATA]
TBL_LOGIN_KEY           key                                 READ
user_t                  user                                RW      /* username, maybe '\0' */
char                    vty[VTY_BUF_SIZE]                   READ    /* vty name: console/vty0/vty1/.../vty7 */
uint8                   privilege                           READ    /* session's privilege <1-4> */
char                    ipaddr[IPADDR_BUF_SIZE]             RW      /* ipv4/6 address */
char                    dest_ipaddr[IPADDR_BUF_SIZE]             RW
uint32                  remote_port                            RW
uint32                  dest_port                            RW
char                    protocol[LINE_PROTOCOL_BUF_SIZE]    RW      /* telnet / ssh / web */
uint32                  expire_time                         RW      /* expire time for web session */
uint32                  pid                                 RW      /* clish pid */
[MASTER]
ctclib_slist_t          *login_list
--------------------------------------------------------------------------------
[TBL]
TBL_RSA                 rsa                                 LIST          appcfg
[KEY]
char                    name[M_RSA_KEY_NAMESZ+1]
[DATA]
TBL_RSA_KEY             key                                 READ
key_type_t              type                                READ        /* private or public */
uint8                   refcnt                              READ        /* reference count */
rsa_keystr_t            pem                                 RW          /* RSA key in pem format (base64 encoding) */
char                    enc_passwd[PASSWD_SIZE]             RW          /* encrypted password for private key */
char                    passwd[PASSWD_SIZE]                 RW          /* password for private key */
void                    *pstRsa                             INTERNAL    /* RSA key pointer */
[MASTER]
ctclib_slist_t          *rsa_list
--------------------------------------------------------------------------------
[TBL]
TBL_OPENFLOW            openflow                            GLOBAL      openflow,opm,fea
[KEY]
[DATA]
uint32                  group_hash_key                      RW         /* group hash key */
uint32                  bond_hash_key                       RW         /* bond hash key */
uint32                  bond_hash_use                       RW         /* bond hash use */
uint32                  lacp_local_proc                     RW         /* bond hash use */
addr_ipv4_t             local_vtep_ip                       RW         /* local vtep ip */
char                    decap_mode[GLB_MAX_DESC_STR_LEN]    RW         /* decapsulation mode */
uint8                   flow_drop_pkt_to_ingress_port       RW         /* flow drop pkt to ingress port */
uint8                   group_drop_pkt_to_ingress_port      RW         /* group drop pkt to ingress port */
uint8                   udf_parser                          RW         /* udf parser */
uint8                   meter_ipg                           RW         /* meter ipg */
uint8                   inband_en                           RW         /* inband enable */
uint8                   ptp_e2e_en                          RW         /* e2e enable */
vid_t                   inband_stag                         RW         /* inband stag */
prefix_ipv4_t           inband_addr                         RW         /* inband ip address */
addr_ipv4_t             inband_gw                           RW         /* inband gw address */
uint8                   mpls_parser                         RW         /* mpls parser */
int32                 	stpid                               RW         /* stpid */ 
int32                 	ctpid                               RW         /* ctpid */
port_bmp_t          	inband_downlink_port_bmp            RW 
char                    inband_uplink_port_name[IFNAME_SIZE]        RW 
uint32                 	flow_hash_key                      	RW         /* flow hash key */ 
uint8                   vxlan_hash_merge_en           		RW         /* flow hash vxlan merge enable */ 
uint8                   nvgre_hash_merge_en           		RW         /* flow hash nvgre merge enable */ 
uint8                   efd_tcp_only_enable              	RW         /* efd tcp-only enable*/
uint32                 	efd_granularity                     RW         /* efd granularity*/ 
uint32                 	efd_detect_speed                  	RW         /* efd detect speed*/ 
uint32                 	efd_detect_time_interval        	RW         /* efd detect time-interval*/ 
uint32                 	efd_aging_timer                     RW         /* efd aging-timer*/ 
uint32                 	efd_flow_traffic_class             	RW         /* efd_flow_traffic_class*/ 
uint32                 	efd_flow_color                      RW         /* efd_flow_color*/ 
uint8                   efd_ipg_enable                     	RW         /* efd ipg enable*/
char                    dpid[GLB_MAX_DPID_STR_LEN]          RW         /* openflow set dpid*/
uint32                  dpid_is_set                         RW         /* openflow dpid is set*/
char                    private_key[FILE_NAME_SIZE]         RW         /* ssl private_key*/
char                    certificate[FILE_NAME_SIZE]         RW         /* ssl certificate*/
char                    ca_cert[FILE_NAME_SIZE]             RW         /* ssl ca_cert*/
uint32                  vxlan_srcport                       RW
uint32                  vxlan_srcport_is_set                RW
uint32                  vxlan_destport                      RW
uint32                  vxlan_destport_is_set               RW
uint32                  tp_oam_oam_interval                 RW
uint32                  tp_oam_oam_interval_is_set          RW
uint32                  tp_oam_oam_cycle_is_disable         RW
uint32                  tp_oam_aps_interval                 RW
uint32                  tp_oam_aps_interval_is_set          RW
uint32                  tp_oam_aps_cycle_is_disable         RW
uint32                  pw_not_standard_mode                RW        /* pw mode, default is  standard */
uint32                  check_port_bind_oam                 RW        /* ifindex*/
uint32                  oam_packet_in_cycle_cnt             RW
uint32                  oam_packet_in_event_ccm_cnt         RW
uint32                  oam_packet_in_event_lm_cnt          RW
uint32                  oam_packet_in_event_dm_cnt          RW
uint32                  aps_packet_in_cycle_cnt             RW
uint32                  aps_packet_in_event_path_change_cnt RW
uint32                  oam_packet_in_cycle_packet_cnt      RW
uint32                  oam_packet_in_event_packet_ccm_cnt  RW
uint32                  oam_packet_in_event_packet_lm_cnt   RW
uint32                  oam_packet_in_event_packet_dm_cnt   RW
uint32                  aps_packet_in_cycle_packet_cnt      RW
uint32                  aps_packet_in_event_path_change_packet_cnt  RW
uint32                  openflow_mac_learning_enable        RW
uint8                   controller_affect_flow_disable      RW
uint8                   async_msgid_en                      RW
uint8                   fdb_flow_en                         RW
uint8                   fdb_flow_valid                      RW
uint8                   ffgroup_switchback_en               RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_CPU_TRAFFIC         cpu_traffic                     ARRAY           all
[KEY]
uint32                  reason_id
[DATA]
TBL_CPU_TRAFFIC_KEY     key                             READ
uint64                  rate                            RW
uint32                  class_id                        RW
[MASTER]
tbl_cpu_traffic_t       *array[GLB_CPU_TRAFFIC_MAX]
--------------------------------------------------------------------------------
[TBL]
TBL_CPU_TRAFFIC_GROUP   cpu_traffic_group               ARRAY           all
[KEY]
uint32                  class_id
[DATA]
TBL_CPU_TRAFFIC_GROUP_KEY     key                       READ
uint64                  rate                            RW
[MASTER]
tbl_cpu_traffic_group_t       *array[GLB_CPU_TRAFFIC_GROUP_MAX]
--------------------------------------------------------------------------------
[TBL]
TBL_CPU_UTILIZATION     cpu_utilize                     HASH+LIST       appcfg
[KEY]
char                    name[COMM_NAME_SIZE]
[DATA]
TBL_CPU_UTILIZATION_KEY key                             READ
double                  cpu_usage                       READ
[MASTER]
ctclib_hash_t           *cpu_utilize_hash
ctclib_slist_t          *cpu_utilize_list
--------------------------------------------------------------------------------
[TBL]
TBL_CPU_LIMIT           cpu_limit                   LIST       appcfg
[KEY]
char                    name[COMM_NAME_SIZE]
[DATA]
TBL_CPU_LIMIT_KEY       key                         READ
uint32                  percent                     RW
[MASTER]
ctclib_slist_t          *cpu_limit_list
--------------------------------------------------------------------------------
[TBL]
TBL_DHCRELAY    dhcrelay                            GLOBAL          dhcrelay,dhcpd6,dhclient6
[DATA]
uint8           enable                              RW      /* enable / disable */
uint8           drop_agent_mismatch                 RW      /* drop agent mismatch packets */
uint8           add_agent_options                   RW      /* add agent options or not */
uint8           agent_proc_option                   RW      /* append / replace / untouched / discard */
uint8           trust_all                           RW      /* trust all interface or not */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_DHCSRVGRP           dhcsrvgrp                       ARRAY   dhcrelay,dhcpd6,dhclient6
[KEY]
uint8                   id
[DATA]
TBL_DHCSRVGRP_KEY       key                             READ
[DATA]
uint8                   cnt                             READ    /* dhcp server addresses count, max 8 */
char                    addrs[DHCP_SRV_ADDRS_BUF_SIZE]  RW      /* server addresses buffer, format: address;address2;...;address16 */
[MASTER]
tbl_dhcsrvgrp_t         *dhcsrvgrp_array[GLB_MAX_DHCSRVGRP_NUM]
--------------------------------------------------------------------------------
[TBL]
TBL_DHCP_DEBUG          dhcp_debug      GLOBAL       dhcrelay,dhclient,dhcsnooping,dhcpd6,dhclient6
[KEY]
[DATA]
FLAGS32                 flags           FLAGS           /* bitmap of DHCDBG_FLAG_ */
[FLAGS]
flags                   relay_error          DHCDBG_FLAG_RELAY_ERROR         RW
flags                   relay_events         DHCDBG_FLAG_RELAY_EVENTS        RW
flags                   relay_packet         DHCDBG_FLAG_RELAY_PACKET        RW
flags                   relay_dump           DHCDBG_FLAG_RELAY_DUMP          RW
flags                   snooping_error       DHCDBG_FLAG_SNOOPING_ERROR      RW
flags                   snooping_event       DHCDBG_FLAG_SNOOPING_EVENTS     RW
flags                   snooping_packet      DHCDBG_FLAG_SNOOPING_PACKET     RW
flags                   snooping_dump        DHCDBG_FLAG_SNOOPING_DUMP       RW
flags                   snoopingv6_error     DHCDBG_FLAG_SNOOPINGV6_ERROR    RW
flags                   snoopingv6_events    DHCDBG_FLAG_SNOOPINGV6_EVENTS   RW
flags                   snoopingv6_packet    DHCDBG_FLAG_SNOOPINGV6_PACKET   RW
flags                   snoopingv6_dump      DHCDBG_FLAG_SNOOPINGV6_DUMP     RW
flags                   client_error         DHCDBG_FLAG_CLIENT_ERROR        RW
flags                   client_events        DHCDBG_FLAG_CLIENT_EVENTS       RW
flags                   client_packet        DHCDBG_FLAG_CLIENT_PACKET       RW
flags                   client_dump          DHCDBG_FLAG_CLIENT_DUMP         RW
flags                   clientv6_error         DHCDBG_FLAG_CLIENTV6_ERROR        RW
flags                   clientv6_events        DHCDBG_FLAG_CLIENTV6_EVENTS       RW
flags                   clientv6_packet        DHCDBG_FLAG_CLIENTV6_PACKET       RW
flags                   clientv6_dump          DHCDBG_FLAG_CLIENTV6_DUMP         RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_DHCLIENT    dhclient                        GLOBAL          dhclient,dhclient6
[DATA]
uint8           enable                          RW      /* enable / disable */
uint8           distance                        RW      /* default-router distance 254 */
uint8           broadcast                       RW      /* client can’t receive unicast IP datagrams until been configured with an IP address */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_DHCSNOOPING dhcsnooping     GLOBAL  dhcsnooping,switch,routed
[DATA]
uint8           verify_mac_address                  RW      /* verify mac address */
uint8           add_agent_options                   RW      /* add agent options or not */
uint8           allow_untrusted                     RW      /* Allow untrusted ports to accept incoming DHCP packets with relay agent information */
uint8           hostname_as_remote_id               RW      /* use hostname as remote id or not */
char            remote_id_string[DHCSNOOPING_MAX_REMOTE_ID_STRING]  RW      /* remote id string */
uint16          database_save_interval              RW      /* binding database save interval */
vlan_bmp_t      vlans                               RW      /* snooping vlan bit map */
vlan_bmp_t      snooping_acl_applied                READ    /* is snooping acl applied */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_DHCBINDING  dhcbinding     HASH+LIST  dhcsnooping,switch,routed
[KEY]
binding_key_t
[DATA]
TBL_DHCBINDING_KEY  key                     READ
vid_t               vid                     RW      /* VLAN id */
char                ifname[IFNAME_SIZE+1]   RW      /* interface name */
char                ifname_new[IFNAME_SIZE+1]   RW      /* interface name , the same mac client new request from diff interface*/
mac_addr_t          client_mac              RW
addr_t              client_ip               RW      /* ip address v4/v6 */
uint32              cIpsour                 RW
uint32              lease                   RW      /* lease time, seconds */
uint32              lease_new               RW    /* lease time, seconds, for new ifname expire*/
uint32              transid                 RW      /* trans id, 4 bytes for v4 and 3 bytes for v6 */
uint32              ipsg_tbl_exsit                 RW      /* for after static IPSG tbl delete, dhcp snooping learning tbl add to ipsg */
dhcbinding_state_t  state                   RW      /* entry state: request, running or all */
dhcbinding_type_t   type                    RW      /* entry type: learning, configed or all */
[MASTER]
ctclib_hash_t       *dhcbinding_hash
ctclib_slist_t      *dhcbinding_list
ctclib_hash_t       *dhcbinding_ip_hash
uint32              dhcbinding_count
uint32              dhcbindingv6_count
--------------------------------------------------------------------------------
[TBL]
TBL_IPTABLES_PREVENT  iptables_prevent  GLOBAL       switch,fea
[KEY]
[DATA]
FLAGS32         flags                                       FLAGS           /* bitmap of GLB_IPTABLES_CFG_FLAG_ */
uint16          icmp_rate_limit                             RW
uint16          tcp_rate_limit                              RW
uint16          udp_rate_limit                              RW
uint16          small_pkt_length                            RW
uint32          pkt_statistic_update                        RW
uint32          small_pkt_static_base                       RW
uint32          small_pkt_mgmt_static_base                  RW
uint32          icmp_count                                  READ
uint32          smurf_count                                 READ
uint32          fraggle_count                               READ
uint32          udp_count                                   READ
uint32          tcp_count                                   READ
uint32          small_pkt_count                             READ
uint32          icmp_mgmt_count                             READ
uint32          smurf_mgmt_count                            READ
uint32          fraggle_mgmt_count                          READ
uint32          udp_mgmt_count                              READ
uint32          tcp_mgmt_count                              READ
uint32          small_pkt_mgmt_count                        READ
[FLAGS]
flags           ipt_cfg_icmp              GLB_IPTABLES_CFG_FLAG_ICMP         RW
flags           ipt_cfg_smurf             GLB_IPTABLES_CFG_FLAG_SMURF        RW
flags           ipt_cfg_fraggle           GLB_IPTABLES_CFG_FLAG_FRAGGLE      RW
flags           ipt_cfg_udp               GLB_IPTABLES_CFG_FLAG_UDP          RW
flags           ipt_cfg_tcp               GLB_IPTABLES_CFG_FLAG_TCP          RW
flags           ipt_cfg_small_pkt         GLB_IPTABLES_CFG_FLAG_SMALL_PKT    RW
flags           ipt_cfg_maceq             GLB_IPTABLES_CFG_FLAG_MACEQ        RW
flags           ipt_cfg_ipeq              GLB_IPTABLES_CFG_FLAG_IPEQ         RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_ERRDISABLE          errdisable                                  ARRAY           all
[KEY]
errdis_rsn_t            reason
[DATA]
TBL_ERRDISABLE_KEY      key                                         READ
uint8                   errdisable_en                               RW
uint8                   recovery_en                                 RW
[MASTER]
tbl_errdisable_t       *errdisable_array[ERRDIS_RSN_MAX]
--------------------------------------------------------------------------------
[TBL]
TBL_NS_PORT_FORWARDING   ns_port_forwarding           HASH+LIST       switch
[KEY]
ns_port_forwarding_key_t
[DATA]
TBL_NS_PORT_FORWARDING_KEY  key                       READ
addr_ipv4_t                 ip                        RW
[MASTER]
ctclib_hash_t           *ns_port_forwarding_hash
ctclib_slist_t          *ns_port_forwarding_list
--------------------------------------------------------------------------------
[TBL]
TBL_LOG_GLOBAL           log_glb                      GLOBAL          all
[DATA]
logid_bmp_t              log_to_cdb                   READ
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_LOG                  log                          ARRAY           all
[KEY]
uint32                   sequence_id
[DATA]
TBL_LOG_KEY              key                          READ
uint16                   log_id                       READ
uint16                   severity                     READ
timestamp_t              timestamp                    READ
char                     data[LOG_DATA_LEN]           READ
[MASTER]
tbl_log_t                *array[LOG_ITEM_COUNT]
uint32                   curr_index
uint32                   curr_sequence_id
--------------------------------------------------------------------------------
[TBL]
TBL_SYS_LOAD             sys_load                     GLOBAL          all
[DATA]
uint32                   sys_load_en                  RW
uint32                   cli_back_pressure_en         RW
uint32                   cdb_queue_notice_threshold   RW
uint32                   cdb_queue_warning_threshold  RW
uint32                   cdb_queue_depth_switch       READ
uint32                   cdb_queue_depth_routed       READ
uint32                   cdb_queue_depth_cds          READ
uint32                   cdb_queue_depth_fea          READ
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_CEM                 cem                             HASH+LIST       appcfg
[KEY]
char                    name[COMM_NAME_SIZE+1]
[DATA]
TBL_CEM_KEY             key                             READ
char                    event[CEM_NAME_SIZE]            RW              /*event*/
uint32                  threshold                       RW
uint32                  snmptrap                        RW              /*action send trap*/
char                    loadpath[COMM_NAME_SIZE]        RW              /*action load config file*/
mail_t                  mail                            RW              /*action send email*/
[MASTER]
ctclib_hash_t           *cem_hash
ctclib_slist_t          *cem_list
--------------------------------------------------------------------------------
[TBL]
TBL_CLOCK               clk                                     GLOBAL          all
[KEY]
[DATA]
uint8                   timezone_positive                       RW
uint8                   timezone_hour                           RW
uint8                   timezone_minute                         RW
uint8                   timezone_second                         RW
char                    timezone_name[MAX_ZONE_NAME_LEN+1]      RW
uint8                   cp_timezone_positive                       RW
uint8                   cp_timezone_hour                           RW
uint8                   cp_timezone_minute                         RW
uint8                   cp_timezone_second                         RW
char                    cp_timezone_name[MAX_ZONE_NAME_LEN+1]      RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_TAG_SUMMER_CLOCK    tag_summer_clk                        GLOBAL          all
[KEY]
[DATA]
summer_time_t            tmstart                         RW
summer_time_t            tmend                           RW
int32                    iDstOffset                      RW
int32                    is_recurring                    RW
int32                    nStartFebDay                    RW
int32                    nEndFebDay                      RW
char                     strZoneName[33]                 RW
int32                    is_wday_tm                      RW
which_summer_time_t      wday_tm_start                   RW
which_summer_time_t      wday_tm_end                     RW 
ctc_task_t               *t_summer_time_timer 			 READ
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_PORT_STATS          port_stats                      HASH+LIST           fea,switch,openflow,appcfg
[KEY]
uint32                  ifindex
[DATA]
TBL_PORT_STATS_KEY      key                             READ
uint32                  port_id                         READ
uint64                  octets_rcv                      READ
uint64                  pkts_rcv                        READ
uint64                  uc_pkts_rcv                     READ
uint64                  brdc_pkts_rcv                   READ
uint64                  mc_pkts_rcv                     READ
uint64                  oam_pkts_rcv                    READ
uint64                  undersize_pkts                  READ
uint64                  oversize_pkts                   READ
uint64                  jabber_pkts                     READ
uint64                  mac_rcv_error                   READ
uint64                  bad_crc                         READ
uint64                  frame_error                     READ
uint64                  drop_events                     READ
uint64                  pause_rcv                       READ
uint64                  octets_send                     READ
uint64                  pkts_send                       READ
uint64                  uc_pkts_send                    READ
uint64                  brdc_pkts_send                  READ
uint64                  mc_pkts_send                    READ
uint64                  oam_pkts_send                   READ
uint64                  underruns                       READ
uint64                  mac_transmit_err                READ
uint64                  pause_send                      READ
uint64                  fcs_pkts_rcv                    READ
uint64                  fcs_octets_rcv                  READ
uint64                  fcs_pkts_send                   READ
uint64                  fcs_octets_send                 READ
uint64                  fragments_pkts                  READ
uint64                  bad_pkts_rcv                    READ
uint64                  bad_octets_rcv                  READ
uint64                  pkts_64_rcv                     READ
uint64                  pkts_65_to_127_rcv              READ
uint64                  pkts_128_to_255_rcv             READ
uint64                  pkts_256_to_511_rcv             READ
uint64                  pkts_512_to_1023_rcv            READ
uint64                  pkts_1024_to_1518_rcv           READ
uint32                  last_clear_ts                   READ    /* store last clear timestamp */
[MASTER]
ctclib_hash_t           *port_stats_hash
ctclib_slist_t          *port_stats_list
--------------------------------------------------------------------------------
[TBL]
TBL_VLAN_STATS       vlan_stats                   ARRAY                 fea,ncs 
[KEY]
vid_t                       vid
[DATA]
TBL_VLAN_STATS_KEY              key                   READ
uint64                   pktcntl2in                        READ
uint64                   pktcntl2out                        READ
uint64                   pktcntl3in                        READ
uint64                   pktcntl3out                        READ
uint64                   pktcntacl                         READ
uint64                   bytecntl2in                        READ
uint64                   bytecntl2out                        READ
uint64                   bytecntl3in                        READ
uint64                   bytecntl3out                       READ
uint64                   bytecntacl                          READ
[MASTER]
tbl_vlan_stats_t              *vlan_stats_array[GLB_MAX_VLAN_ID]
--------------------------------------------------------------------------------
[TBL]
TBL_PORT_STATS_RATE     port_stats_rate                 HASH+LIST           switch,fea,appcfg
[KEY]
uint32                  ifindex
[DATA]
TBL_PORT_STATS_RATE_KEY      key                        RW
uint32                  port_id                         RW
uint64                  octets_rcv_rate                 RW
uint64                  pkts_rcv_rate                   RW
uint64                  octets_send_rate                RW
uint64                  pkts_send_rate                  RW
uint16                  load_interval                   RW          /* load interval */
uint8                   input_rate                      RW          /* bandwidth usage rate */
uint8                   input_rate_state                RW          /* bandwidth state for syslog */
uint8                   input_rate_threshold            RW          /* bandwidth threshold for syslog */
uint8                   input_rate_resume               RW          /* bandwidth resume rate for syslog */
uint8                   output_rate                     RW          /* bandwidth usage rate */
uint8                   output_rate_state               RW          /* bandwidth state for syslog */
uint8                   output_rate_threshold           RW          /* bandwidth threshold for syslog */
uint8                   output_rate_resume              RW          /* bandwidth resume rate for syslog */
uint64                  output_discard_threshold        RW          /* discard threshold for syslog */
uint32                  output_discard_interval         RW          /* discard stats interval for syslog */
uint64                  output_discard_packets          RW          /* discard packets in a interval */
uint64                  output_discard_total_packets    RW          /* discard packets get from qos queue */
uint8                   output_discard_state            RW          /* discard state for syslog */
uint32                  output_discard_running_interval RW          /* discard running interval for syslog */
ctc_task_t             *t_output_discard_timer          READ        /* discard timer */
[MASTER]
ctclib_hash_t           *port_stats_rate_hash
ctclib_slist_t          *port_stats_rate_list
--------------------------------------------------------------------------------
[TBL]
TBL_ACLQOS_IF            aclqos_if                      HASH+LIST       all
[KEY]
char                    name[IFNAME_SIZE]
[DATA]
TBL_ACLQOS_IF_KEY       key                                     READ
uint32                  ifindex                                 READ
uint32                  port_type                               READ    /* glb_if_type_t */
FLAGS32                 flags                                   FLAGS   /* GLB_DROP_PROFILE_FLAGS_GREEN_MAX_THRD */
uint32                  domain                                  RW      /* qos domain, default: 0 */
uint32                  cos_domain                              RW       /* cos_domain, default: 0 */
uint32                  dscp_domain                             RW       /* dscp_domain, default: 0 */
char                    port_shape_profile[QOS_NAME_SIZE+1]       RW
char                    input_policy_map[PMAP_NAME_SIZE+1]        RW      /* attached police-map nmae */
char                    output_policy_map[PMAP_NAME_SIZE+1]       RW      /* attached police-map nmae */
char                    input_policer[POLICER_NAME_SIZE+1]        RW      /* policer name */
char                    output_policer[POLICER_NAME_SIZE+1]       RW      /* policer name */
qos_name_t              queue_shape_profile[GLB_QOS_PORT_QUEUE_NUM]     RW      /* queue shape name */
qos_name_t              queue_drop_profile[GLB_QOS_PORT_QUEUE_NUM]      RW      /* queue drop name */
uint32                  queue_drop_mode[GLB_QOS_PORT_QUEUE_NUM]         RW      /* queue drop mode: glb_qos_queue_drop_mode_t */
uint32                  replace_dscp                                    RW      /* repalce dscp*/
uint32                  replace_cos                             RW              /* repalce dscp*/
uint32                  trust 						 RW			/*port trust state, refer to glb_qos_trust_state_t */
uint32                  port_tc						 RW			/*port default tc*/


[FLAGS]
flags                   flags_domain                            GLB_ACLQOS_IF_FLAGS_DOMAIN               READ
flags                   flags_port_shape_profile                GLB_ACLQOS_IF_FLAGS_PORT_SHAPE_PROFILE   READ
flags                   flags_input_policer                     GLB_ACLQOS_IF_FLAGS_INPUT_POLICER        READ
flags                   flags_output_policer                    GLB_ACLQOS_IF_FLAGS_OUTPUT_POLICER       READ
flags                   flags_queue_shape_profile               GLB_ACLQOS_IF_FLAGS_QUEUE_SHAPE_PROFILE  READ
flags                   flags_queue_drop_profile                GLB_ACLQOS_IF_FLAGS_QUEUE_DROP_PROFILE   READ
flags                   flags_queue_drop_mode                   GLB_ACLQOS_IF_FLAGS_QUEUE_DROP_MODE      READ
flags                   flags_replace_dscp                      GLB_ACLQOS_IF_FLAGS_REPLACE_DSCP         READ
flags                   flags_replace_cos                       GLB_ACLQOS_IF_FLAGS_REPLACE_COS          READ
flags                   flags_trust                       	        GLB_ACLQOS_IF_FLAGS_TRUST         READ
flags                   flags_port_tc                       	 GLB_ACLQOS_IF_FLAGS_PORT_TC         READ
[MASTER]
ctclib_hash_t           *if_hash
ctclib_slist_t          *if_list
--------------------------------------------------------------------------------
[TBL]
TBL_L2_ACTION           l2_act                        GLOBAL       switch,opm,fea
[KEY]
[DATA]
ds_flush_fdb_t         *flush_fdb                     SUB
[MASTER]
--------------------------------------------------------------------------------

[TBL]
TBL_FEA_QOS_DROP_PROFILE        fea_qos_drop_profile    ARRAY            fea
[KEY]
uint32                          id
[DATA]
TBL_FEA_QOS_DROP_PROFILE_KEY    key                     RW
uint64                          sai_drop_id             RW
[MASTER]
tbl_fea_qos_drop_profile_t      *fea_qos_drop_profile_array[GLB_QOS_DROP_PROFILE_NUM]
--------------------------------------------------------------------------------

[TBL]
TBL_FEA_QOS_DOMAIN              fea_qos_domain                  ARRAY           fea
[KEY]
uint32                          id
[DATA]
TBL_FEA_QOS_DOMAIN_KEY          key                             RW
uint64                          dot1p_to_tc_color_map_id        RW
uint64                          dscp_to_tc_color_map_id         RW
uint64				  exp_to_tc_color_map_id		RW
uint64                          tc_and_color_to_dot1p_map_id    RW
uint64                          tc_and_color_to_dscp_map_id     RW
uint64                          tc_and_color_to_exp_map_id    RW
[MASTER]
tbl_fea_qos_domain_t        *fea_domain_array[GLB_QOS_DOMAIN_NUM]
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_G8032_RING              fea_g8032_ring                  LIST           fea
[KEY]
fea_g8032_ring_key_t
[DATA]
TBL_FEA_G8032_RING_KEY          key                             RW
uint32                          mc_group_id                     RW
uint32                          aps_group_id                    RW
uint32			nh_id		                    RW
uint32                          nhoffset                        RW
[MASTER]
ctclib_slist_t          *fea_g8032_list
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_G8032_RING_MC_GROUP             fea_g8032_ring_mc_group                  LIST           fea
[KEY]
uint32                 ring_id
[DATA]
TBL_FEA_G8032_RING_MC_GROUP_KEY          key                             RW
uint32                          mc_group_id                     RW
[MASTER]
ctclib_slist_t          *fea_g8032_list
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_QOS_QUEUE_SHAPE_PROFILE         fea_qos_queue_shape_profile             ARRAY           switch
[KEY]
uint32                                  id
[DATA]
TBL_FEA_QOS_QUEUE_SHAPE_PROFILE_KEY     key                                     RW
uint64                                  sai_scheduler_id                        RW
[MASTER]
tbl_fea_qos_queue_shape_profile_t       *fea_qos_queue_shape_profile_array[GLB_QOS_SHAPE_PROFILE_NUM]
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_QOS_PORT_SHAPE_PROFILE          fea_qos_port_shape_profile              ARRAY           switch
[KEY]
uint32                                  id
[DATA]
TBL_FEA_QOS_PORT_SHAPE_PROFILE_KEY      key                                     RW
uint64                                  sai_scheduler_id                        RW
[MASTER]
tbl_fea_qos_port_shape_profile_t        *fea_qos_port_shape_profile_array[GLB_QOS_PORT_SHAPE_PROFILE_NUM]
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_PORT_POLICER_APPLY              fea_port_policer_apply          HASH+LIST       all
[KEY]
char                                    name[IFNAME_SIZE]
[DATA]
TBL_FEA_PORT_POLICER_APPLY_KEY          key                             READ
uint64                                  in_policer_id                   RW
uint64                                  out_policer_id                  RW
[MASTER]
ctclib_hash_t                           *if_hash
ctclib_slist_t                          *if_list
--------------------------------------------------------------------------------
[TBL]
TBL_ACLQOS_IF_STATS     aclqos_if_stats         HASH+LIST       all
[KEY]
char                    name[IFNAME_SIZE]
[DATA]
TBL_ACLQOS_IF_STATS_KEY key                     READ
FLAGS32                 flags                                           FLAGS   /* GLB_DROP_PROFILE_FLAGS_GREEN_MAX_THRD */
uint64                  queue_transimt_pkt[GLB_QOS_MAX_PORT_QUEUE_NUM]  RW      /* for dump queue stats */
uint64                  queue_transimt_byte[GLB_QOS_MAX_PORT_QUEUE_NUM] RW      /* for dump queue stats */
uint64                  queue_drop_pkt[GLB_QOS_MAX_PORT_QUEUE_NUM]      RW      /* for dump queue stats */
uint64                  queue_drop_byte[GLB_QOS_MAX_PORT_QUEUE_NUM]     RW      /* for dump queue stats */
uint64                  green_packet                                    RW      /*for policer stats*/
uint64                  green_byte                                      RW
uint64                  yellow_packet                                   RW
uint64                  yellow_byte                                     RW
uint64                  red_packet                                      RW
uint64                  red_byte                                        RW
uint64                  green_packet_out                                RW
uint64                  green_byte_out                                  RW
uint64                  yellow_packet_out                               RW
uint64                  yellow_byte_out                                 RW
uint64                  red_packet_out                                  RW
uint64                  red_byte_out                                    RW
[FLAGS]
flags                   flags_port_get_input_policer_stats              GLB_ACLQOS_IF_STATS_FLAGS_PORT_GET_INPUT_POLICER        READ
flags                   flags_port_get_output_policer_stats             GLB_ACLQOS_IF_STATS_FLAGS_PORT_GET_OUTPUT_POLICER       READ
flags                   flags_port_clear_input_policer_stats            GLB_ACLQOS_IF_STATS_FLAGS_PORT_CLEAR_INPUT_POLICER      READ
flags                   flags_port_clear_output_policer_stats           GLB_ACLQOS_IF_STATS_FLAGS_PORT_CLEAR_OUTPUT_POLICER     READ
flags                   flags_get_queue_stats                           GLB_ACLQOS_IF_STATS_FLAGS_PORT_GET_QUEUE                READ
flags                   flags_clear_queue_stats                         GLB_ACLQOS_IF_STATS_FLAGS_PORT_CLEAR_QUEUE              READ
[MASTER]
ctclib_hash_t           *if_hash
ctclib_slist_t          *if_list
--------------------------------------------------------------------------------
[TBL]
TBL_VERSION             ver                             GLOBAL          all
[KEY]
[DATA]
char                    version[SYS_INFO_SIZE]          READ
char                    company[SYS_INFO_SIZE]          READ
char                    package[SYS_INFO_SIZE]          READ
char                    product[SYS_INFO_SIZE]          READ
char                    hw_type[SYS_INFO_SIZE]          READ
uint8                   is_cst                                           READ
char                    cst_company[SYS_INFO_SIZE]      READ
char                    cst_hw_type[SYS_INFO_SIZE]       READ
char                    cst_hw_info[SYS_INFO_SIZE]        READ
char                    cst_hw_ver[SYS_INFO_SIZE]         READ
char                    cst_sw_ver[SYS_INFO_SIZE]         READ
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_MANAGE_IF           mng_if                          GLOBAL        chsm,switch,dhclient,dhclient6
[KEY]
[DATA]
prefix_ipv4_t           addr                            RW
addr_ipv4_t             gateway                         RW
uint8                   dhclient_enable                 RW              /* dhcp client enable */
prefix_ipv4_t           dhclient_addr                   RW
addr_ipv4_t             dhclient_gateway                RW
prefix_t                addr_v6                         RW
prefix_t                  gateway_v6                      RW
char                    link_local_addr_str[64]          RW
uint8                     dhclientv6_enable                 RW              /* dhcpv6 client enable */
prefix_t                 dhclientv6_addr                   RW
prefix_t                 dhclientv6_gateway                RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_BOOTIMAGE           boot                                    GLOBAL          chsm,fea,bhm
[KEY]
[DATA]
boot_mode_t             mode                                    RW      /* boot_mode_t */
uint32                  fast                                    RW      /* 1: boot fast, will decompression ramfs to memory ; 0: boot system */
char                    image[SYS_INFO_SIZE]                    RW
char                    serverip[SYS_INFO_SIZE]                 RW
char                    ipaddr[SYS_INFO_SIZE]                   RW
char                    bootcmd[M_FULLPATH_MAX_LEN]             RW
char                    current_image[M_FULLPATH_MAX_LEN]       RW      /*Note, this field must be the last one, because it include '/'*/
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_CHASSIS             chassis                                 GLOBAL          all
[KEY]
[DATA]
int32                   type                                    READ
int32                   slot_num                                READ
int32                   cur_stm_mode                            RW
int32                   next_stm_mode                           RW
int32                   mac_num                                 RW
mac_addr_t              sys_mac                                 RW
uint32                  location_led                            RW    /* use to locate switch in lab, 0 means off, 1 menas on*/
uint32                  reset_reboot_info                       RW    /* reset event*/
uint32                  support_reboot_info                     RW    /* if this card support save reboot info, 1 means yes*/
uint32                  one_minute_reboot_alarm                 READ  /* if updated, means system will reboot after 1 minute */
ctc_task_t              *schedule_reboot_timer                  RW    /* schedule reboot timer */
ctc_task_t              *schedule_reboot_alarm_timer            READ  /* schedule reboot alarm timer */
uint32                  schedule_reboot                         READ  /* if set, means system in schedule reboot */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_IFNAME_INFO        ifname_info                              GLOBAL          chsm,fea
[KEY]
[DATA]
char                   connection                               RW
char                   sub_connection                           RW
char                   prefix_num                               RW
ifname_info_t          prefix[GLB_PHT_PORT_TYPE_MAX]            RW
ifname_info_t          full_prefix[GLB_PHT_PORT_TYPE_MAX]       RW
[MASTER]
tbl_ifname_info_t     *ifname_info_array[GLB_PHT_PORT_TYPE_MAX]
--------------------------------------------------------------------------------
[TBL]
TBL_CARD                card                                    ARRAY           chsm,fea,switch,openflow,appcfg
[KEY]
uint32                  id
[DATA]
TBL_CARD_KEY            key                                     READ
uint32                  slot                                    READ
char                    product_name[GLB_NAME_INFO_STR_MAX]     READ
char                    hardware_name[GLB_NAME_INFO_STR_MAX]    READ
char                    company_name[GLB_NAME_INFO_STR_MAX]     READ
char                    package_name[GLB_NAME_INFO_STR_MAX]     READ
char                    enterprise_oid[GLB_NAME_INFO_STR_MAX]   READ
char                    hardware_type[GLB_NAME_INFO_STR_MAX]    READ
char                    serial_no[GLB_NAME_INFO_STR_MAX]        READ
char                    bootrom_ver[GLB_NAME_INFO_STR_MAX]      READ
char                    epld_ver[GLB_NAME_INFO_STR_MAX]         RW
char                    sw_ver[GLB_NAME_INFO_STR_MAX]           READ
char                    hardware_ver[GLB_NAME_INFO_STR_MAX]     READ
uint8                   board_type                              READ
uint8                   board_series                              READ
int32                   flash_size                              READ
int32                   dram_size                               READ
int32                   port_num                                READ
int32                   uptime_day                              READ
int32                   uptime_hour                             READ
int32                   uptime_min                              READ
sal_time_t              attach_time                             RW
uint32                  attach_count                            RW
int32                   tmpr_low                                RW
int32                   tmpr_high                               RW
int32                   tmpr_critical                           RW
uint32                  status                                  RW     /*Card status, 1 means ready, 0 means not ready*/
uint8                   epld_status                           RW
uint32                  reboot                                  READ
int32                   update_phy_firmware_port_idx     RW
int32                   platform_type                           RW
int32                   bootup_diag_level                      RW
int32                   next_bootup_diag_level              RW
int32                   fan_speed_bottom                     RW
int32                   fan_speed_low                          RW
int32                   fan_speed_high                         RW
int32                   fan_speed_full                          RW
char                    bootcmd[GLB_NAME_INFO_STR_MAX]          RW         /* move filename may contain '/' to tail */
char                    update_epld_name[GLB_NAME_INFO_STR_MAX] RW         /* move filename may contain '/' to tail */
char                    update_bootrom_name[GLB_NAME_INFO_STR_MAX] RW      /* move filename may contain '/' to tail */
char                    update_phy_firmware_name[GLB_NAME_INFO_STR_MAX] RW /* move filename may contain '/' to tail */
char                    glb_poe_enable   RW
uint32                  glb_poe_power_max  RW
[MASTER]
tbl_card_t              *card_array[GLB_SLOT_NUM_MAX]
--------------------------------------------------------------------------------
[TBL]
TBL_PORT                port                                    ARRAY        chsm,fea
[KEY]
int32                   port_id                                 READ
[DATA]
TBL_PORT_KEY            key                                     READ
int32                   slot_no                                 READ    /* slot number show on panel */
int32                   panel_port_no                           READ    /* port number show on panel */
int32                   panel_sub_port_no                       READ     /* sub port number show on panel*/
int32                   phy_type                                READ    /* physical type */
int32                   phyinfo_flag                            READ    /* port flags */
int32                   speed_capbility                         READ    /* bits of port speed */
int32                   logic_port_id                           READ    /* logic port of ASIC chip, global port id */
int32                   media                                   RW      /* media type, comber fiber or copper*/
int32                   port_media_type                         RW      /* comber port choise, 4 sfp or 1 qsfp*/
int32                   support_media_switch                    RW
int32                   split_type                              RW      /* port split type */
int32                   bypass                                  RW   /* bypass function */
int32                   bypass_slot                                  RW   /* bypass function */
int32                   training_enable                         RW      /* enable/disable 802.3AP training */
int32                   training_status                         READ    /* if support 802.3AP, store DAC training state */
int32                   present_status                          READ    /* 1 means present, 0 means absent*/
char                    name[IFNAME_SIZE]                       READ
mac_addr_t              mac                                     READ
[MASTER]
tbl_port_t              *port_array[GLB_CHSM_PORT_NUM_MAX]
--------------------------------------------------------------------------------
[TBL]
TBL_FIBER               fiber                                  ARRAY          chsm,fea
[KEY]
int32                   port_id                                 READ
[DATA]
TBL_FIBER_KEY           key                                     READ
char                    interface_name[IFNAME_SIZE]             READ
char                    fiber_type_name[FIBER_TRANS_TYPE_LEN]   READ
char                    name[FIBER_VENDOR_NAME_LEN+1]           READ    /*SFP vendor name (ASCII)*/
uint8                   oui[FIBER_VENDOR_OUI_LEN+1]             READ    /*SFP vendor IEEE company ID*/
char                    pn[FIBER_VENDOR_PN_LEN+1]               READ    /*Part number provided by SFP vendor (ASCII)*/
char                    rev[FIBER_VENDOR_REV_LEN+1]             READ    /*Revision level for part number provided by vendor (ASCII)*/
char                    sn[FIBER_VENDOR_SN_LEN+1]               READ    /*Serial number provided by vendor (ASCII)*/
uint8                   compliance_code[FIBER_COMPLIANCE_CODE_LEN] READ /*complianceCode */
int32                   slot                                    READ
double                  tmpr[4]                                 RW      /*high/low alarm , high/low warn*/
double                  voltage[4]                              RW
double                  bias[4]                                 RW
double                  tx_pwr[4]                               RW
double                  rx_pwr[4]                               RW
double                  tmpr2[4]                                RW      /*real value, max 4*/
double                  voltage2[4]                             RW
double                  bias2[4]                                RW
double                  tx_pwr2[4]                              RW
double                  rx_pwr2[4]                              RW
uint32                  alarm_flag[4]                           RW      /*store alarm info*/
uint32                  warn_flag[4]                            RW      /*store warn info*/
uint32                  update_cnt                              RW
uint32                  channel_num                             RW
uint32                  channel_idx                             RW
uint32                  is_detail                               RW
uint32                  fiber_type                              READ    /*glb_phy_type_t*/
uint32                  fiber_flag                               READ
uint32                  is_copper                               READ
uint32                  speed                                   READ    /*SFP speed = speed * 100Mbit/sec */
uint32                  ddm_support                             READ    /*is support DDM?*/
uint32                  externally_calibrated                   READ    /*if support DDM, use internally calibrated or externally calibrated*/
uint8                   wavelength[2]                           RW      /*output wavelength*/
uint8                   length[5]                               RW      /*length */
[MASTER]
tbl_fiber_t            *fiber[GLB_CHSM_PORT_NUM_MAX]
--------------------------------------------------------------------------------
[TBL]
TBL_SYS_SPEC            sys_spec                                ARRAY           all
[KEY]
uint32                  type
[DATA]
TBL_SYS_SPEC_KEY        key                                     READ
uint32                  ucast_fdb                               READ
uint32                  static_fdb                              READ
uint32                  mstp_instance                           READ
uint32                  vlan_instance                           READ
uint32                  mac_filter                              READ
uint32                  mac_based_vlan_class                    READ
uint32                  ipv4_based_vlan_class                   READ
uint32                  ipv4_source_guard                       READ
uint32                  vlan_mapping_entry_applied_port         READ
uint32                  dot1x_mac                               READ
uint32                  indirect_routes                         READ
uint32                  static_routes                           READ
uint32                  host_routes                             READ
uint32                  ecmp_routes                             READ
uint32                  ecmp_member_maximum                     READ
uint32                  indirect_v6_routes                      READ
uint32                  static_v6_routes                        READ
uint32                  host_v6_routes                          READ
uint32                  ecmp_v6_routes                          READ
uint32                  ecmp_v6_member_maximum                  READ
uint32                  pbr_entries                             READ
uint32                  l2mc_entries                            READ
uint32                  l3mc_entries                            READ
uint32                  l2mc_member_ports                       READ
uint32                  l3mc_member_ports                       READ
uint32                  vlan_member_ports                       READ
uint32                  voice_vlan                              READ
uint32                  flow_entries_ingress                    READ
uint32                  flow_entries_egress                     READ
uint32                  flow6_entries_ingress                   READ
uint32                  flow6_entries_egress                    READ
uint32                  cfm_local_and_remote_meps               READ
uint32                  g8031_groups                            READ
uint32                  g8032_rings                             READ
uint32                  g8032_member_ports_per_ring             READ
uint32                  ftn_entries                             READ
uint32                  ilm_entries                             READ
uint32                  mpls_lables                             READ
uint32                  vpws                                    READ
uint32                  lsp_pe                                  READ
uint32                  lsp_p                                   READ
uint32                  vpls_peer                               READ
uint32                  vpls_ac                                 READ
uint32                  vsi                                     READ
uint32                  lsp_oam                                 READ
uint32                  pw_oam                                  READ
uint32                  mpls_aps_tunnel                         READ
uint32                  cfm_lck                                 READ
uint32                  ip_tunnel                               READ
uint32                  ivi_peers                               READ
uint32                  pbr_v6_entries                          READ
uint32                  l3mc_v6_entries                         READ
uint32                  l2mc_v6_entries                         READ
uint32                  flow_v6_entries                         READ
uint32                  ipv6_based_vlan_class                   READ
uint32                  ipv6_source_guard                       READ
uint32                  l3mc_v6_member_ports                    READ
uint32                  l2mc_v6_member_ports                    READ
uint32                  vlan_mapping_default_entry              READ
uint32                  bfd_sessions                            READ
uint32                  nvgre_tunnel_id_mappings                READ
uint32                  nvgre_peers                             READ
uint32                  nvgre_tunnels                           READ
uint32                  openflow_flow_entries                   READ
uint32                  policer_profile_num                     READ
uint32                  port_shape_profile_num                  READ
uint32                  queue_shape_profile_num                 READ
uint32                  drop_profile_num                        READ
uint32                  lag_group_num                           READ
uint32                  ospf_area_range_num                           READ
uint32                  tap_group_profile_num                   READ
uint32                  tap_flow_num                            READ
uint32                  tap_flow_entry_num                      READ
uint32                  l2protocol_num                      	READ
uint32                  openflow_dynamic_tunnel_num             READ
uint32                  nat_pool_num                            READ
uint32                  nat_rule_num                            READ
uint32                  nat_inside_rtif_num                     READ
uint32                  nat_outside_rtif_num                    READ
uint32                  nat_session_upstream_num                READ
uint32                  nat_session_dnstream_num                READ
uint32                  nat_session_fast_path_entry_num         READ
uint32                  nat_session_limit_node_num              READ
[MASTER]
tbl_sys_spec_t          *sys_spec_array[GLB_STM_MODE_MAX]
--------------------------------------------------------------------------------
[TBL]
TBL_FAN                 fan                                     HASH+LIST      chsm,fea
[KEY]
int32                   id
[DATA]
TBL_FAN_KEY             key                                     READ
int32                   slot                                    READ
int32                   tray                                    READ
int32                   percent                                 RW
int32                   absent                                  RW
char                    name[GLB_NAME_INFO_STR_MAX]             RW
char                    direction[GLB_NAME_INFO_STR_MAX]        RW
char                    status[GLB_NAME_INFO_STR_MAX]           RW
char                    mode[GLB_NAME_INFO_STR_MAX]             RW
[MASTER]
ctclib_hash_t           *fan_hash
ctclib_slist_t          *fan_list
--------------------------------------------------------------------------------
[TBL]
TBL_PSU                 psu                                     HASH+LIST       chsm,fea
[KEY]
int32                   id
[DATA]
TBL_PSU_KEY             key                                     READ
int32                   slot                                    READ
char                    name[GLB_NAME_INFO_STR_MAX]             READ
int32                   absent                                  RW
char                    run_status[GLB_NAME_INFO_STR_MAX]       RW
char                    alert_status[GLB_NAME_INFO_STR_MAX]     RW
char                    mode[GLB_NAME_INFO_STR_MAX]             RW
uint8                   fixed_status                                 RW
uint8                   psu_health_status_change                RW
uint8                   support_pmbus                           RW
uint8                   pmbus_status_byte                       RW
uint16                  pmbus_status_word                       RW
uint8                   pmbus_status_vout                       RW
uint8                   pmbus_status_iout                       RW
uint8                   pmbus_status_input                      RW
uint8                   pmbus_status_temperature                RW
uint8                   pmbus_status_cml                        RW
uint8                   pmbus_status_other                      RW
uint8                   pmbus_status_mfr_specific               RW
uint8                   pmbus_status_fans_1_2                   RW
uint8                   pmbus_status_fans_3_4                   RW
[MASTER]
ctclib_hash_t           *psu_hash
ctclib_slist_t          *psu_list
--------------------------------------------------------------------------------
[TBL]
TBL_LED                 led                                     HASH+LIST       chsm,fea
[KEY]
int32                   id
[DATA]
TBL_LED_KEY             key                                     READ
int32                   slot                                    READ
char                    name[GLB_NAME_INFO_STR_MAX]             READ
char                    status[GLB_NAME_INFO_STR_MAX]           RW
char                    mode[GLB_NAME_INFO_STR_MAX]             RW
[MASTER]
ctclib_hash_t           *led_hash
ctclib_slist_t          *led_list
--------------------------------------------------------------------------------
[TBL]
TBL_SENSOR              sensor                                  HASH+LIST       chsm,fea
[KEY]
int32                   id
[DATA]
TBL_SENSOR_KEY          key                                     READ
int32                   slot                                    READ
int32                   temperature                             READ
char                    name[GLB_NAME_INFO_STR_MAX]             READ
char                    position[GLB_NAME_INFO_STR_MAX]         READ
char                    status[GLB_NAME_INFO_STR_MAX]           READ
int32                   tmpr_low                                READ
int32                   tmpr_high                               READ
int32                   tmpr_critical                           READ
uint32                  is_chip                                 READ
[MASTER]
ctclib_hash_t           *sensor_hash
ctclib_slist_t          *sensor_list
--------------------------------------------------------------------------------
[TBL]
TBL_VCM              vcm                                  HASH+LIST       chsm,fea
[KEY]
int32                   id
[DATA]
TBL_VCM_KEY		key												READ
int32			slot												READ
uint8			vcm_type										READ
uint8			vcm_channel_nums								READ
char     			channel_name0[GLB_NAME_INFO_STR_MAX]			READ
char     			channel_name1[GLB_NAME_INFO_STR_MAX]			READ
char     			channel_name2[GLB_NAME_INFO_STR_MAX]			READ
char     			channel_name3[GLB_NAME_INFO_STR_MAX]			READ
char     			channel_name4[GLB_NAME_INFO_STR_MAX]			READ
char     			channel_name5[GLB_NAME_INFO_STR_MAX]			READ
char     			channel_name6[GLB_NAME_INFO_STR_MAX]			READ
char     			channel_name7[GLB_NAME_INFO_STR_MAX]			READ
char     			channel_name8[GLB_NAME_INFO_STR_MAX]			READ
uint32			flag[MAX_VCM_CHANNEL_NUM]						READ
uint8			curr_depend_pin[MAX_VCM_CHANNEL_NUM]			READ
double			volt_split_factor[MAX_VCM_CHANNEL_NUM]			READ
double			low[MAX_VCM_CHANNEL_NUM]						READ
double			high[MAX_VCM_CHANNEL_NUM]						READ
double			volt[MAX_VCM_CHANNEL_NUM]						READ
double			curr[MAX_VCM_CHANNEL_NUM]						READ
double			tmpr[MAX_VCM_CHANNEL_NUM]						READ
[MASTER]
ctclib_hash_t           *vcm_hash
ctclib_slist_t          *vcm_list
--------------------------------------------------------------------------------
[TBL]
TBL_POE                 poe                                     HASH+LIST      chsm,fea
[KEY]
int32                   id
[DATA]
TBL_POE_KEY             key                                     READ
int32                   slot                                    READ
uint8                   glb_enable                           RW
uint32                 glb_power_limit                     RW
uint32                 glb_status                           RW
uint32                 glb_cur_consump                           RW
uint32                 glb_aver_consump                           RW
uint32                 glb_peak_consump                           RW
uint32                 pse_channel_num                           RW
uint32                 const_power_limit                           RW
uint32                 pse_channel_id[MAX_POE_PORT_NUM] RW
uint32                 panel_slot_no[MAX_POE_PORT_NUM] RW
uint32                 panel_port_no[MAX_POE_PORT_NUM] RW
uint32                 panel_sub_port_no[MAX_POE_PORT_NUM] RW
uint32                 enable[MAX_POE_PORT_NUM] RW
uint32                 force_power[MAX_POE_PORT_NUM] RW
uint32                 mode[MAX_POE_PORT_NUM] RW
uint32                 priority[MAX_POE_PORT_NUM] RW
uint32                 power_limit[MAX_POE_PORT_NUM] RW
uint32                 class_level[MAX_POE_PORT_NUM] RW
uint32                 status[MAX_POE_PORT_NUM] RW
uint32                 cur_consump[MAX_POE_PORT_NUM] RW
uint32                 aver_consump[MAX_POE_PORT_NUM] RW
uint32                 peak_consump[MAX_POE_PORT_NUM] RW
uint32                 current[MAX_POE_PORT_NUM] RW
uint32                 voltage[MAX_POE_PORT_NUM] RW
uint32                 temper[MAX_POE_PORT_NUM] RW
[MASTER]
ctclib_hash_t           *poe_hash
ctclib_slist_t          *poe_list
--------------------------------------------------------------------------------
[TBL]
TBL_REBOOT_INFO          reboot_info                    HASH+LIST       chsm,switch,fea
[KEY]
uint32                   index
[DATA]
TBL_REBOOT_INFO_KEY     key                             READ
char                    reboot_type[REBOOT_STR_SIZE]    READ
char                    reboot_time[REBOOT_STR_SIZE]    READ
[MASTER]
ctclib_hash_t           *reboot_hash
ctclib_slist_t          *reboot_list
--------------------------------------------------------------------------------
[TBL]
TBL_ERRDISABLE_FLAP     errdisable_flap                 ARRAY       all
[KEY]
uint32                  flap_rsn
[DATA]
TBL_ERRDISABLE_FLAP_KEY key                             READ
uint32                  errdisable_rsn                  RW
uint32                  flap_cnt_threshold              RW
uint32                  flap_time_threshold             RW
uint32                  flap_time_cnt                   RW
[MASTER]
tbl_errdisable_flap_t   *errdisable_flap_array[ERRDIS_FLAP_REASON_MAX]
--------------------------------------------------------------------------------
[TBL]
TBL_OPM_GLOBAL          opmglb                  GLOBAL          all
[KEY]
[DATA]
FLAGS32                 erps                    FLAGS           /* bitmap of OPMGLB_FLAG_ERPS_ */
[FLAGS]
erps                    erps_mode               OPMGLB_FLAG_ERPS_MODE_HUAWEI                RW
erps                    erps_unreload           OPMGLB_FLAG_ERPS_MODE_UNRELOAD              RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_ERPS_RING           erps_ring                     HASH+LIST       all
[KEY]
erps_ring_key_t
[DATA]
TBL_ERPS_RING_KEY       key                           READ
erps_state_t            erps_ring_state               RW
erps_ring_level_t       erps_ring_level               RW
uint32                  instance_id_num               RW
uint32                  instance_id[ERPS_MAX_INSTANCE] RW
erps_node_role_t        node_role                     RW
erps_edge_node_role_t   edge_node_role                RW
uint32                  erps_srpt_enable              RW
uint32                  primary_port_ifindex          RW
uint32                  secondary_port_ifindex        RW
uint32                  edge_port_ifindex             RW
uint32                  common_port_ifindex           RW
uint32                  blocked_port_ifindex          RW
uint32                  blocked                       RW
void                    *primary_port_if              INTERNAL        /* primary port interface, refer to tbl_interface_t */
void                    *secondary_port_if            INTERNAL        /* secondary port interface, refer to tbl_interface_t */
void                    *edge_port_if                 INTERNAL        /* edge port interface, refer to tbl_interface_t */
void                    *common_port_if               INTERNAL        /* common port interface, refer to tbl_interface_t */
void                    *blocked_port_if              INTERNAL        /* blocked port interface, refer to tbl_interface_t */
ctc_task_t              *hello_timer                  READ            /* hello timer */
ctc_task_t              *failure_timer                READ            /* failure timer */
ctc_task_t              *pre_forwarding_timer         READ            /* pre-forwarding timer */
ctc_task_t              *flush_timer                  READ
ctc_task_t              *edge_hello_timer             READ
ctc_task_t              *edge_failure_timer           READ
ctc_task_t              *edge_block_timer             READ
uint32                  hello_seq                     RW
uint32                  expect_hello_seq              RW
uint32                  rcv_hello_cnt                 READ
uint32                  rcv_ring_up_flush_fdb_cnt     READ
uint32                  rcv_ring_down_flush_fdb_cnt   READ
uint32                  rcv_link_down_cnt             READ
uint32                  rcv_edge_hello_cnt            READ
uint32                  rcv_major_fault_cnt           READ
uint32                  send_hello_cnt                READ
uint32                  send_ring_up_flush_fdb_cnt    READ
uint32                  send_ring_down_flush_fdb_cnt  READ
uint32                  send_link_down_cnt            READ
uint32                  send_edge_hello_cnt           READ
uint32                  send_major_fault_cnt          READ
void                    *p_erps_domain                INTERNAL        /* refer to tbl_erps_domain_t */
[MASTER]
ctclib_hash_t           *erps_ring_hash
ctclib_slist_t          *erps_ring_list
--------------------------------------------------------------------------------
[TBL]
TBL_ERPS_DOMAIN          erps_domain                   ARRAY          all
[KEY]
uint32                   domain_id
[DATA]
TBL_ERPS_DOMAIN_KEY      key                           READ
char                     name[ERPS_MAX_NAME_LEN]       RW
uint32                   instance_id_num               RW
uint32                   instance_id[ERPS_MAX_INSTANCE] RW
uint32                   primary_control_vlan_id       RW
uint32                   sub_control_vlan_id           RW
uint32                   hello_timer_interval          RW
uint32                   failure_timer_interval        RW
uint32                   pre_forwarding_timer_interval RW
uint32                   flush_timer_interval          RW
uint32                   edge_hello_timer_interval     RW
uint32                   edge_failure_timer_interval   RW
uint32                   erps_enable                   RW
void                     *erps_primary_ring            INTERNAL        /* refer to tbl_erps_ring_t */
REFERLIST_TBL_ERPS_RING  erps_ring_list                RW              /* list of erps rings for this domain */
[MASTER]
tbl_erps_domain_t        *domain_array[GLB_MAX_ERPS_DOMAIN]
--------------------------------------------------------------------------------
[TBL]
TBL_OPM_DEBUG           opmdbg                 GLOBAL          all
[KEY]
[DATA]
FLAGS32                 erps                    FLAGS           /* bitmap of OPMDBG_FLAG_ERPS_ */
FLAGS32                 g8131                   FLAGS           /* bitmap of OPMDBG_FLAG_G8131_ */
FLAGS32                 tpoam                   FLAGS           /* bitmap of OPMDBG_FLAG_TPOAM_ */
FLAGS32                 g8032                   FLAGS           /* bitmap of OPMDBG_FLAG_G802_ */
FLAGS32                 cfm                       FLAGS           /* bitmap of OPMDBG_FLAG_CFM_ */
[FLAGS]
erps                    erps_all                OPMDBG_FLAG_ERPS_ALL                    RW
erps                    erps_packet             OPMDBG_FLAG_ERPS_PACKET                 RW
erps                    erps_timer              OPMDBG_FLAG_ERPS_TIMER                  RW
erps                    erps_protocol           OPMDBG_FLAG_ERPS_PROTO                  RW
erps                    erps_event              OPMDBG_FLAG_ERPS_EVENTS                 RW
g8131                   g8131_tx                OPMDBG_FLAG_G8131_TX                    RW
g8131                   g8131_rx                OPMDBG_FLAG_G8131_RX                    RW
g8131                   g8131_event             OPMDBG_FLAG_G8131_EVENT                 RW
tpoam                    tpoam_lb_lbm_debug      OPMDBG_FLAG_TPOAM_LB_LBM_DBG       RW
tpoam                    tpoam_lb_lbr_debug      OPMDBG_FLAG_TPOAM_LB_LBR_DBG       RW
tpoam                    tpoam_lm_comm_debug      OPMDBG_FLAG_TPOAM_LM_COMM_DBG       RW
tpoam                    tpoam_lm_lmm_debug      OPMDBG_FLAG_TPOAM_LM_LMM_DBG       RW
tpoam                    tpoam_lm_lmr_debug      OPMDBG_FLAG_TPOAM_LM_LMR_DBG       RW
tpoam                    tpoam_dm_comm_debug      OPMDBG_FLAG_TPOAM_DM_COMM_DBG       RW
tpoam                    tpoam_dm_dmm_debug      OPMDBG_FLAG_TPOAM_DM_DMM_DBG       RW
tpoam                    tpoam_dm_dmr_debug      OPMDBG_FLAG_TPOAM_DM_DMR_DBG       RW
tpoam                    tpoam_dm_1dmtx_debug      OPMDBG_FLAG_TPOAM_DM_1DMTX_DBG       RW
tpoam                    tpoam_dm_1dmrx_debug      OPMDBG_FLAG_TPOAM_DM_1DMRX_DBG       RW
tpoam                    tpoam_packet_rx_debug      OPMDBG_FLAG_TPOAM_PACKET_RX_DBG       RW
tpoam                    tpoam_packet_tx_debug      OPMDBG_FLAG_TPOAM_PACKET_TX_DBG       RW
tpoam                    tpoam_event_debug      OPMDBG_FLAG_TPOAM_EVENT_DBG       RW
g8032                   g8032_all                OPMDBG_FLAG_G8032_ALL                    RW
g8032                   g8032_packet_tx                OPMDBG_FLAG_G8032_TX                    RW
g8032                   g8032_packet_rx                OPMDBG_FLAG_G8032_RX                    RW
g8032                   g8032_event             OPMDBG_FLAG_G8032_EVENT                 RW
g8032                   g8032_timer             OPMDBG_FLAG_G8032_TIMER                 RW
cfm                        cfm_all                               OPMDBG_FLAG_CFM_ALL                    RW
cfm                        cfm_packet                         OPMDBG_FLAG_CFM_PACKET              RW
cfm                        cfm_timer                           OPMDBG_FLAG_CFM_TIMER                RW
cfm                        cfm_event                           OPMDBG_FLAG_CFM_EVENT              RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_POLICY_MAP_CONFIG           policy_map_config               HASH+LIST      switch
[KEY]
char                            name[PMAP_NAME_SIZE+1]
[DATA]
TBL_POLICY_MAP_CONFIG_KEY       key                             READ
uint32                          intf_ref                        RW
uint32                          class_ref                       RW
uint64                          max_class_priority              RW
[MASTER]
ctclib_hash_t                   *policy_map_config_hash
ctclib_slist_t                  *policy_map_config_list
--------------------------------------------------------------------------------
[TBL]
TBL_CLASS_MAP_CONFIG            class_map_config                HASH+LIST      switch
[KEY]
char                            name[CMAP_NAME_SIZE+1]
[DATA]
TBL_CLASS_MAP_CONFIG_KEY        key                             READ
uint32                          policy_map_ref                  RW
uint32                          acl_ref                         RW
uint64                          max_acl_priority                RW
[MASTER]
ctclib_hash_t           *class_map_config_hash
ctclib_slist_t          *class_map_config_list
--------------------------------------------------------------------------------
[TBL]
TBL_CLASS_IN_POLICY_CONFIG          class_in_policy_config      HASH+LIST      switch
[KEY]
class_in_policy_config_key_t
[DATA]
TBL_CLASS_IN_POLICY_CONFIG_KEY      key                         READ
uint64                  class_priority                          RW
[MASTER]
ctclib_hash_t           *class_in_policy_config_hash
ctclib_slist_t          *class_in_policy_config_list
--------------------------------------------------------------------------------
[TBL]
TBL_ACL_IN_CLASS_CONFIG          acl_in_class_config            HASH+LIST      switch
[KEY]
acl_in_class_config_key_t
[DATA]
TBL_ACL_IN_CLASS_CONFIG_KEY      key                            READ
uint64                  acl_priority                            RW
[MASTER]
ctclib_hash_t           *acl_in_class_config_hash
ctclib_slist_t          *acl_in_class_config_list
--------------------------------------------------------------------------------
[TBL]
TBL_CLASS_MAP_ACTION_CONFIG     class_map_action_config         HASH+LIST      switch
[KEY]
class_map_action_config_key_t
[DATA]
TBL_CLASS_MAP_ACTION_CONFIG_KEY key                             READ
uint32                          action_flag                     RW
uint32                          new_tc                          RW
int32                           new_color                       RW
uint8                           new_dscp                        RW
uint32                          session_id                      RW
char                            policer[POLICER_NAME_SIZE]      RW      /* policer name */
uint32                          new_svlan_id                    RW
uint32                          new_cvlan_id                    RW
uint8                           new_scos                        RW
uint8                           new_ccos                        RW
uint32                          redirect_port_ifindex           RW
char                            red_unexist_agg[IFNAME_SIZE]    RW
[MASTER]
ctclib_hash_t           *class_map_action_config_hash
ctclib_slist_t          *class_map_action_config_list
-------------------------------------------------------------------------------
[TBL]
TBL_FEA_ACL_POLICY_ACTION       fea_acl_policy_action            HASH           fea,switch
[KEY]
uint64                          acl_policy_action_id
[DATA]
TBL_FEA_ACL_POLICY_ACTION_KEY   key                             READ
FLAGS32                         flags                           FLAGS
uint64                          policer_id                      RW
char                            policer_name[POLICER_NAME_SIZE] RW
uint64                          policer_id_ref                  RW
uint64                          green_packet                    RW
uint64                          green_byte                      RW
uint64                          yellow_packet                   RW
uint64                          yellow_byte                     RW
uint64                          red_packet                      RW
uint64                          red_byte                        RW
[FLAGS]
flags                   flags_class_get_policer_stats           GLB_ACL_POLICY_POLICY_STATS_FLAGS_GET_STATS     READ
flags                   flags_calss_clear_policer_stats         GLB_ACL_POLICY_POLICY_STATS_FLAGS_CLEAR_STATS   READ
[MASTER]
ctclib_hash_t           *fea_acl_policy_action_hash
--------------------------------------------------------------------------------
[TBL]
TBL_IGSP_GLOBAL         glb                             GLOBAL          switch,opm
[KEY]
[DATA]
uint8                   enable                          RW
uint8                   fast_leave                      RW
uint8                   discard_unknown                 RW
uint8                   report_suppress                 RW
uint32                  version                         RW
uint32                  querier_max_response_time       RW              /* querier - max-response-time */
uint32                  query_interval                  RW              /* querier - query internal */
uint32                  lmqi                            RW              /* querier - last member query interval */
uint32                  lmqc                            RW              /* querier - last member query count */
uint32                  robustness_var                  RW
uint32                  max_member_number               RW
uint32                  curr_group_member               RW              /* current group member count */
uint32                  tcn_enable                      RW
uint32                  tcn_query_count                 RW
uint32                  tcn_query_interval              RW
uint32                  tcn_query_current_count         READ
uint32                  tcn_query_max_response_time     RW
uint32                  host_join_enable                RW              /* allow host join/leave */
uint32                  host_joined_num                 RW              /* allow host join/leave */
addr_ipv4_t             global_src                      RW
addr_ipv4_t             all_hosts                       READ
addr_ipv4_t             all_routers                     READ
addr_ipv4_t             v3_routers                      READ
ctc_task_t             *t_group_expire                  READ            /* 1 seconds timer for group expire */
ctc_task_t             *t_tcn_query                     READ            /* TCN query timer */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_IGSP_INTF           if                              ARRAY           switch,opm
[KEY]
vid_t                   vid
[DATA]
TBL_IGSP_INTF_KEY       key                             READ
char                    acl_name[ACL_NAME_FULL_NAME_SIZE+1]       RW
uint8                   enable                          RW
uint8                   fast_leave                      RW
uint8                   discard_unknown                 RW
uint8                   discard_unknown_act             RW
uint8                   report_suppress                 RW
uint8                   version                         RW
uint8                   querier_enable                  RW              /* querier - enable */
uint8                   querier_operate                 RW              /* querier - operate enable */
uint32                  query_interval                  RW              /* querier - query internal */
uint32                  admin_other_query_interval      RW              /* querier - admin other query internal */
uint32                  other_query_interval            RW              /* querier - other query internal */
uint32                  querier_max_response_time       RW              /* querier - max-response-time */
addr_ipv4_t             querier_config_address          RW              /* querier - config address */
addr_ipv4_t             querier_oper_address            READ            /* querier - operate address */
addr_ipv4_t             other_querier_address           READ            /* querier - other address */
addr_ipv4_t             vlan_if_address                 READ            /* vlan interface's address */
uint32                  lmqi                            RW              /* querier - last member query interval */
uint32                  lmqc                            RW              /* querier - last member query count */
uint32                  max_member_number               RW              /* max group member count */
uint32                  curr_group_member               RW              /* current group member count */
uint32                  group_member_interval           RW
uint32                  robustness_var                  RW
uint32                  mrouter_aging_interval          RW
uint32                  startup_query_count             READ            /* current group member count */
ctc_task_t             *t_querier                       READ
ctc_task_t             *t_other_querier                 READ
REFERLIST_DS_MROUTER_PORT mrouter_list                  SUB             /* list of mrouter port */
REFERLIST_DS_QUERY      query_list                      SUB             /* list of query group */
REFERLIST_DS_JOIN_GROUP join_list                       SUB             /* list of host join group */
[MASTER]
tbl_igsp_intf_t        *igsp_array[GLB_MAX_VLAN_ID]
--------------------------------------------------------------------------------
[TBL]
TBL_IGSP_GROUP          group                           HASH            switch
[KEY]
igsp_group_key_t
[DATA]
TBL_IGSP_GROUP_KEY      key                             READ
uint32                  retx_group_lmqc                 READ
uint32                  retx_group_source_lmqc          READ
uint32                  liveness                        READ
uint32                  has_rx_leave                    READ            /* has received leave */
addr_ipv4_t             last_reporter_address           READ            /* last reporter address */
sal_time_t              uptime                          READ            /* first create time */
sal_time_t              update_time                     READ            /* last update time */
sal_time_t              v1_update_time                  READ            /* v1 host last update time */
uint8                   is_v1_host_exist                READ            /* host running igmpv1 exist */
uint8                   type                            READ            /* igmp_type_t */
uint8                   inactive                        READ            /* when global disable or vlan disable, static group should be inactive */
uint8                   is_v3_leave                     READ            /* leave from v3 */
ctc_task_t             *t_retx_query                    READ
[MASTER]
ctclib_hash_t           *group_hash
--------------------------------------------------------------------------------
[TBL]
TBL_AUTH_CFG           auth_cfg     GLOBAL       authd
[DATA]
char                    secret[GLB_AUTH_SECRET_SIZE+1]      RW      /* shared secret string */
char                    enc_secret[PASSWD_SIZE]             RW      /* encrypted secret string */
uint16                  timeout                             RW      /* timeout seconds, default 5 */
uint16                  retries                             RW      /* retransmit counts, default 3 */
uint16                  deadtime                            RW      /* dead time (seconds, [60-1200], default 300) */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_AUTH_SERVER         auth_server     LIST       authd
[KEY]
auth_server_key_t
[DATA]
TBL_AUTH_SERVER_KEY     key                                 READ
char                    secret[GLB_AUTH_SECRET_SIZE+1]      RW      /* shared secret string */
char                    enc_secret[PASSWD_SIZE]             RW      /* encrypted secret string */
uint16                  port                                RW      /* port number */
uint16                  timeout                             RW      /* timeout seconds, default 5 */
uint8                   retries                             RW      /* retransmit counts, default 3 */
uint8                   dead                                RW      /* dead flag */
uint32                  is_inband                           RW      
uint32                  reawake_time                        READ    /* rewake time after dead */
uint32                  id                                  INTERNAL /* id of this server, may change after reboot */
int                     fd                                  INTERNAL
void                    *pRead                              INTERNAL /* read handler */
char                    buf[GLB_AUTH_MSG_BUF_SZ]            INTERNAL /* reply buffer */
uint16                  connected                           INTERNAL
uint16                  blen                                INTERNAL /* data's in buffer */
[MASTER]
ctclib_slist_t          *auth_servers
uint8                   radius_cnt          /* radius server count */
uint8                   tacplus_cnt         /* tacplus server count */
uint32                  cur_id              /* auth server item currrent id */
--------------------------------------------------------------------------------
[TBL]
TBL_AUTH_SESSION        auth_session     HASH+LIST                  authd
[KEY]
auth_session_key_t
[DATA]
TBL_AUTH_SESSION_KEY    key                                         READ
user_t                  user                                        RW      /* encrypted username */
char                    passwd[PASSWD_SIZE*2]                       RW      /* encrypted password */
auth_session_status_t   status                                      READ    /* session's auth status */
void                    *pHandle                                    INTERNAL    /* Auth handler */
uint32                  uCurSessId                                  INTERNAL    /* current session id */
uint16                  is_dot1x_session                            INTERNAL
uint16                  eap_length                                  INTERNAL
uint8                   eap_buf[AUTH_EAPOL_MAX_LEN]                 INTERNAL
uint16                  radius_state_len                            INTERNAL
uint8                   radius_state_buf[RADIUS_MAX_STATE_LEN]      INTERNAL
uint8                   authenticator[RADIUS_AUTHENTICATOR_LEN]     RW
uint8                   oauthenticator[RADIUS_AUTHENTICATOR_LEN]    RW
uint32                  dot1x_mac_ifindex                           RW
mac_addr_t              dot1x_mac_addr                              RW
uint16                  is_auth_bypass                              RW
uint8                   author_start                                RW
uint8                   acct_start                                  RW
uint8                   acct_stop                                   RW
uint8                   acctcmd_start                               RW
uint8                   next_acct_stop                              RW
[MASTER]
ctclib_hash_t           *auth_sessions_hash
ctclib_slist_t          *auth_sessions
uint32                  session_cnt             /* session count */
--------------------------------------------------------------------------------
[TBL]
TBL_AUTHD_DEBUG  authd_debug  GLOBAL       authd
[KEY]
[DATA]
FLAGS32         flags   FLAGS           /* bitmap of AUTHD_DBG_FLAG_ */
[FLAGS]
flags   auth_event          AUTHD_DBG_FLAG_EVENT         RW
flags   auth_packet         AUTHD_DBG_FLAG_PACKET        RW
flags   auth_protocol       AUTHD_DBG_FLAG_PROTO         RW
flags   auth_timer          AUTHD_DBG_FLAG_TIMER         RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_DOT1X_GLOBAL        dot1x_global                       GLOBAL          all
[KEY]
[DATA]
uint32                  global_auth_enable                                       RW
mac_addr_t              eapol_group_address                                      READ
uint16                  radius_default_retry                                     RW
uint32                  radius_default_timeout                                   RW
uint32                  radius_default_deadtime                                  RW
uint32                  mac_user_count_max                                       RW
uint32                  mac_user_count_current                                   RW
uint32                  mac_user_count_db                                        RW
uint32                  mac_port_count_current                                   RW
uint8                   radius_default_shared_secret_valid                       RW
uint8                   radius_default_shared_secret[RADIUS_SHARED_SECRET_LEN+1] RW
char                    radius_default_shared_enc_secret[PASSWD_SIZE]            RW      /* encrypted secret string */
uint8                   last_session_id                                          RW
uint8                   session_id_allocated[RADIUS_SESSION_BUFFER]              RW
FLAGS32                 dot1x                   FLAGS                                   /* bitmap of DOT1X_FLAG_ */
[FLAGS]
dot1x                   dot1x_all               DOT1X_FLAG_ALL                   RW
dot1x                   dot1x_packet            DOT1X_FLAG_PACKET                RW
dot1x                   dot1x_timer             DOT1X_FLAG_TIMER                 RW
dot1x                   dot1x_protocol          DOT1X_FLAG_PROTO                 RW
dot1x                   dot1x_event             DOT1X_FLAG_EVENTS                RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_DOT1X_PORT           dot1x_port                     HASH+LIST          all
[KEY]
uint32                   ifindex
[DATA]
TBL_DOT1X_PORT_KEY       key                                              READ
void                     *current_radius                                  RW
uint32                   radius_msg_id                                    RW
uint32                   retry                                            RW
ctc_task_t               *t_wait                                          READ
uint32                   sessiontype                                      RW
char                     name[IFNAME_SIZE]                                READ
void                     *p_if                                            INTERNAL     /* interface pointer */
void                     *p_buf                                           INTERNAL
uint8                    buf[AUTH_EAPOL_MAX_LEN]                          RW
mac_addr_t               dest_mac                                         RW
mac_addr_t               src_mac                                          RW
uint8                    user_name[USERNAME_SIZE+1]                      RW
uint8                    authControlledPortControl                        RW
ctc_task_t               *t_timer                                         READ
uint8                    protocol_version                                 RW
uint8                    guest_vlan_valid                                 RW
uint16                   guest_vlan                                       RW
uint32                   current_user                                     RW
uint32                   current_user_count_db                            RW         /*software table*/
uint32                   max_user                                         RW
uint8                    auth_mode                                        RW
uint8                    mac_auth_bypass                                  RW
uint16                   share_reauth                                     RW
uint32                   authWhile                                        RW
uint32                   aWhile                                           RW
uint32                   quietWhile                                       RW
uint32                   reAuthWhen                                       RW
uint32                   txWhen                                           RW
uint8                    authAbort                                        RW
uint8                    authFail                                         RW
uint8                    authStart                                        RW
uint8                    authTimeout                                      RW
uint8                    authSuccess                                      RW
uint8                    initialize                                       RW
uint8                    portEnabled                                      RW
uint8                    reAuthenticate                                   RW
uint8                    eapNoReq                                         RW
uint8                    eaprestart                                       RW
uint8                    eapResp                                          RW
uint8                    eapReq                                           RW
uint8                    eapSuccess                                       RW
uint8                    eapFail                                          RW
uint16                   retransmit                                       RW
uint8                    currentId                                        RW
uint8                    portControl                                      RW
uint16                   portStatus                                       RW
uint8                    auth_pae_eapLogoff                               RW    /* Authenticator PAE variables.  */
uint8                    auth_pae_eapStart                                RW
uint8                    auth_pae_portMode                                RW
uint8                    auth_pae_reAuthCount                             RW
uint8                    auth_pae_rxRespId                                RW
uint32                   auth_pae_state                                   RW    /* The authenticator PAE state.  */
uint32                   auth_pae_quietPeriod                             RW    /* Default 60s.  */
uint32                   auth_pae_reAuthMax                               RW    /* Default 2 attempts.  */
uint32                   auth_pae_txPeriod                                RW    /* Default 30s.  */
uint32                   auth_pae_enter_connecting                        RW    /* Authenticator PAE Counters */
uint32                   auth_pae_eaplogoff_while_connecting              RW
uint32                   auth_pae_enter_authenticating                    RW
uint32                   auth_pae_success_while_authenticating            RW
uint32                   auth_pae_timeout_while_authenticating            RW
uint32                   auth_pae_fail_while_authenticating               RW
uint32                   auth_pae_eapstart_while_authenticating           RW
uint32                   auth_pae_eaplogoff_while_authenticating          RW
uint32                   auth_pae_reauths_while_authenticated             RW
uint32                   auth_pae_eapstart_while_authenticated            RW
uint32                   auth_pae_eaplogoff_while_authenticated           RW
uint32                   auth_pae_reauths_while_authenticating            RW
uint32                   auth_key_xmit_keyAvailable                       RW    /* 8.5.5 auth_key_xmit */
uint32                   auth_key_xmit_keyTxEnabled                       RW
uint8                    auth_key_xmit_KeyRun                             RW
uint8                    auth_key_xmit_KeyDone                            RW
uint16                   auth_key_xmit_state                              RW
uint32                   reAuthPeriod                                     RW    /* 8.5.7 reauth_timer */
uint32                   reAuthEnabled                                    RW
uint32                   auth_be_state                                    RW    /* 8.5.8 auth_be */
uint8                    auth_be_reqCount                                 RW
uint8                    auth_be_idFromServer                             RW
uint32                   auth_be_suppTimeout                              RW    /* Default 30s.  */
uint32                   auth_be_serverTimeout                            RW    /* Default 30s.  */
uint16                   auth_be_maxReq                                   RW    /* Default 2 times.  */
uint32                   auth_be_backend_responses                        RW    /* Backend state machine Counters */
uint32                   auth_be_backend_access_challenges                RW
uint32                   auth_be_backend_otherrequest_to_supplicant       RW
uint32                   auth_be_backend_auth_success                     RW
uint32                   auth_be_backend_auth_fails                       RW
uint32                   auth_be_backend_nonnak_responses_from_supplicant RW
uint8                    auth_ctrl_dir_state                              RW    /* 8.5.9 auth_ctrl_dir */
uint8                    auth_ctrl_dir_adminControlledDirections          RW
uint8                    auth_ctrl_dir_operControlledDirections           RW
uint8                    auth_ctrl_dir_bridgeDetected                     RW
uint8                    auth_key_recv_rxKey                              RW    /* 8.5.11 auth_key_recv */
uint32                   eapol_frames_rx                                  RW    /* auth_port_stats 9.4.2.1.3 */
uint32                   eapol_frames_tx                                  RW
uint32                   eapol_start_frames_rx                            RW
uint32                   eapol_logoff_frames_rx                           RW
uint32                   eap_respid_frames_rx                             RW
uint32                   eap_resp_frames_rx                               RW
uint32                   eap_reqid_frames_tx                              RW
uint32                   eap_req_frames_tx                                RW
uint32                   eapol_invalid_frames_rx                          RW
uint32                   eap_len_error_frames_rx                          RW
uint32                   eapol_last_frame_version                         RW
uint8                    eapol_last_frame_source[GLB_ETH_ADDR_LEN]        RW
uint32                   session_time                                     RW    /* session statistics variables */
uint8                    session_authentication_method                    RW
uint8                    session_terminate_cause                          RW
uint8                    session_user_name[AUTH_USER_NAMLEN+1]            RW
uint32                   class_id                                         RW
[MASTER]
ctclib_hash_t            *dot1x_port_hash
ctclib_slist_t           *dot1x_port_list
--------------------------------------------------------------------------------
[TBL]
TBL_DOT1X_RADIUS        dot1x_radius            LIST           all
[KEY]
dot1x_radius_key_t
[DATA]
TBL_DOT1X_RADIUS_KEY    key                                         READ
uint32                  identifier                                  RW
uint8                   server_string[RADIUS_MAX_HOSTNAME_LEN]      RW
addr_ipv4_t             server_addr                                 RW
uint8                   radius_state_len                            RW
uint8                   radius_state[RADIUS_MAX_STATE_LEN]          RW
uint32                  max_retry                                   RW
FLAGS32                 radius_config                               FLAGS  /* bitmap of AUTH_RADIUS_CONFIG_DEFAULT_ */
uint32                  timeout                                     RW
uint8                   shared_secret_valid                         RW
uint8                   shared_secret[RADIUS_SHARED_SECRET_LEN+1]   RW
char                    shared_enc_secret[PASSWD_SIZE]              RW      /* encrypted secret string */
uint8                   authenticator[RADIUS_AUTHENTICATOR_LEN]     RW
uint8                   oauthenticator[RADIUS_AUTHENTICATOR_LEN]    RW
uint8                   session_number                              RW
uint32                  session_ifindex[RADIUS_SESSION_BUFFER]      RW
uint32                  reactivate                                  RW
uint32                  is_inband                                   RW
[FLAGS]
radius_config           radius_defalt_timeout     AUTH_RADIUS_CONFIG_DEFAULT_TIMEOUT    RW
radius_config           radius_defalt_retransmit  AUTH_RADIUS_CONFIG_DEFAULT_RETRANSMIT RW
radius_config           radius_defalt_key         AUTH_RADIUS_CONFIG_DEFAULT_KEY        RW
[MASTER]
ctclib_slist_t          *radius_list
--------------------------------------------------------------------------------
[TBL]
TBL_DOT1X_MAC            dot1x_mac               HASH+LIST           all
[KEY]
dot1x_mac_key_t
[DATA]
TBL_DOT1X_MAC_KEY        key                                         READ
uint8                    user_name[AUTH_USER_NAMLEN+1]               RW
uint32                   session_id                                  RW
void                     *current_radius                             RW
ctc_task_t               *t_wait                                     READ
ctc_task_t               *t_reauth                                   READ       /*timer for user reauth*/
ctc_task_t               *t_reject                                   READ       /*timer for user reject*/
ctc_task_t               *t_delete                                   READ       /*timer for delete unprocessed */
uint32                   entry_id                                    RW
uint32                   is_auth_bypass                              RW
void                     *dot1x_port                                 INTERNAL
FLAGS32                  auth_mac_flag              FLAGS           /* bitmap of AUTHD_FLAG_DOT1X */
[FLAGS]
auth_mac_flag            auth_mac_reject            AUTH_MAC_REJECT                RW
auth_mac_flag            auth_mac_accept            AUTH_MAC_ACCEPT                RW
auth_mac_flag            auth_mac_bypass            AUTH_MAC_BYPASS                RW
auth_mac_flag            auth_mac_reauth_accept     AUTH_MAC_REAUTH_ACCEPT         RW
auth_mac_flag            auth_mac_eapol_reauth      AUTH_MAC_EAPOL_REAUTH          RW
[MASTER]
ctclib_hash_t            *dot1x_mac_hash
ctclib_slist_t           *dot1x_mac_list
--------------------------------------------------------------------------------
[TBL]
TBL_ENABLE              enable                              ARRAY          appcfg
[KEY]
uint8                   id
[DATA]
TBL_ENABLE_KEY          key                                 READ
char                    enc_passwd[PASSWD_SIZE]             RW  /* encrypted password */
char                    passwd[PASSWD_SIZE]                 RW  /* enable password */
[MASTER]
tbl_enable_t            *enable_array[GLB_MAX_PRIVILEAGE_NUM]
--------------------------------------------------------------------------------
[TBL]
TBL_CHIP                chip                                GLOBAL          all
[KEY]
[DATA]
glb_chip_type_t         type                                READ /* refer to glb_chip_type_t */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_CLEAR_ACL_POLICY    clear_acl_policy                        GLOBAL          switch
[KEY]
[DATA]
uint64                   counter_id                             RW
uint64                   acl_id                                 RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_AUTHOR              author                                  LIST            appcfg,authd
[KEY]
char                    name[LINE_AUTH_METHOD_NAME_SIZE+1]
[DATA]
TBL_AUTHOR_KEY          key                                     READ
char                    methods[LINE_AUTH_METHOD_LINE_SIZE]     RW      /* auth method list */
[MASTER]
ctclib_slist_t          *author_list
--------------------------------------------------------------------------------
[TBL]
TBL_ACCOUNT             account                                 LIST          appcfg,authd
[KEY]
char                    name[LINE_AUTH_METHOD_NAME_SIZE+1]
[DATA]
TBL_ACCOUNT_KEY         key                                     READ
uint32                  start_stop                              RW
uint32                  stop_only                               RW
char                    methods[LINE_AUTH_METHOD_LINE_SIZE]     RW      /* auth method list */
[MASTER]
ctclib_slist_t          *account_list
--------------------------------------------------------------------------------
[TBL]
TBL_ACCOUNTCMD          accountcmd                              LIST          appcfg,authd
[KEY]
char                    name[LINE_AUTH_METHOD_NAME_SIZE+1]
[DATA]
TBL_ACCOUNTCMD_KEY      key                                     READ
char                    methods[LINE_AUTH_METHOD_LINE_SIZE]     RW      /* auth method list */
[MASTER]
ctclib_slist_t          *accountcmd_list
--------------------------------------------------------------------------------
[TBL]
TBL_VLANCLASS_RULE      vlanclass_rule                          ARRAY       switch
[KEY]
uint32 					rule_id
[DATA]
TBL_VLANCLASS_RULE_KEY  key                                     READ
uint32					rule_type								RW   /*mac, protocol, subnet*/
vid_t	                vlan_id                                 RW   /*VLAN ID*/
mac_addr_t				mac							            RW   /*mac address*/
addr_t				    ip_address						 	    RW   /*ip address*/
uint32					protocol_type							RW   /*vlanclss_rule_protocol_type_t*/
uint32					protocol_action						    RW	 /*vlanclss_rule_protocol_action_t*/
uint64 					rule_oid								RW   /*rule object id*/
[MASTER]
tbl_vlanclass_rule_t   *vlanclass_rule_array[GLB_VLANCLASS_RULE_ID_MAX]
--------------------------------------------------------------------------------
[TBL]
TBL_VLANCLASS_GROUP     vlanclass_group                         ARRAY       switch
[KEY]
uint32 					group_id
[DATA]
TBL_VLANCLASS_GROUP_KEY key                                     READ
vclass_bmp_t			rule_id								    RW   /*the bitmap of vlanclass rule id*/
uint64					action_rule_id							RW   /*the action of add or delete rule id*/
uint64					group_oid								RW   /*group object id*/
[MASTER]
tbl_vlanclass_group_t   *vlanclass_group_array[GLB_VLANCLASS_GROUP_ID_MAX+1]
--------------------------------------------------------------------------------
[TBL]
TBL_ACL_L4_PORT_RANGE   acl_l4_port_range               ARRAY           switch
[KEY]
uint32                      id
[DATA]
TBL_ACL_L4_PORT_RANGE_KEY   key                         READ
uint16                      port_min                    RW
uint16                      port_max                    RW
uint32                      cnt                         RW
uint8                       is_src                      RW              /* src_port: 1, dest_port: 0 */
[MASTER]
tbl_acl_l4_port_range_t *acl_l4_port_range_array[GLB_ACL_L4PORT_ACE_NUM_MAX]
--------------------------------------------------------------------------------
[TBL]
TBL_ACL_UDF_GROUP            acl_udf_group               ARRAY           switch,fea
[KEY]
uint32                       id
[DATA]
TBL_ACL_UDF_GROUP_KEY        key                         READ
uint32                       group_type                  RW              /* l3-udf: 1, l4_udf: 2 */
uint32                       ip_version                  RW              /* ipv4: 1, ipv6: 2 */
uint32                       l3_protocol                 RW              /* 0-255 */
uint8                        offset                      RW
uint64                       udf_match_oid               RW
uint64                       udf_oid                     RW
uint64                       udf_group_oid               RW
uint32                       cnt                         RW
[MASTER]
tbl_acl_udf_group_t *acl_udf_group_array[GLB_ACL_UDF_GROUP_NUM_MAX]
--------------------------------------------------------------------------------
[TBL]
TBL_ACL_UDF_ENTRY            acl_udf_entry               ARRAY           switch,fea,openflow
[KEY]
uint32                       id
[DATA]
TBL_ACL_UDF_ENTRY_KEY        key                         READ
uint32                       acl_ref_cnt                 RW
uint16                       priority                    RW
uint8                        offset_type                 RW             /* l2-udf: 0, l3-udf: 1, l4_udf: 2 */
uint8                        offset_num                  RW
uint8                        valid[GLB_ACL_UDF_FIELD_NUM_MAX]   RW
uint8                        offset[GLB_ACL_UDF_FIELD_NUM_MAX]  RW
uint32                       key_flags                   RW
uint32                       ethtype                     RW
uint32                       ethtype_mask                RW
uint32                       vlannum                     RW             /* maximum 3 */
uint32                       vlannum_mask                RW
uint32                       ipproto                     RW             /* tcp:6 udp:17 gre:47 pim:103.. */
uint32                       ipproto_mask                RW
uint32                       l4_type                     RW             /* ctc_parser_l4_type_t max 0xf */
uint32                       l4_type_mask                RW
uint32                       srcport                     RW
uint32                       srcport_mask                RW
uint32                       dstport                     RW
uint32                       dstport_mask                RW
uint32                       mplsnum                     RW
uint32                       mplsnum_mask                RW
[MASTER]
tbl_acl_udf_entry_t         *acl_udf_entry_array[GLB_ACL_UDF_ENTRY_NUM_MAX+1]
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_PCAP            pcap                            GLOBAL          fea
[KEY]
[DATA]
uint32                  tx_en                           RW
uint32                  rx_en                           RW
uint32                  ifindex                         RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_CONTROLLER          controller                      LIST            fea
[KEY]
char                    name[16]
[DATA]
TBL_CONTROLLER_KEY      key                             READ
addr_ipv4_t             ip                              RW
uint16                  port                            RW
[MASTER]
ctclib_slist_t          *controller_list
--------------------------------------------------------------------------------
[TBL]
TBL_CPU_PACKETS         cpu_packets                     GLOBAL          fea
[KEY]
[DATA]
uint64                  total                           RW
uint64                  rx                              RW
uint64                  tx                              RW
uint64                  rx_bpdu                         RW
uint64                  rx_slow_proto                   RW
uint64                  rx_eapol                        RW
uint64                  rx_lldp                         RW
uint64                  rx_erps                         RW
uint64                  rx_macda                        RW
uint64                  rx_rip                          RW
uint64                  rx_ospf                         RW
uint64                  rx_bgp                          RW
uint64                  rx_arp                          RW
uint64                  rx_dhcp                         RW
uint64                  rx_ipda                         RW
uint64                  rx_igmp                         RW
uint64                  rx_mac_limit                    RW
uint64                  rx_mac_mismatch                 RW
uint64                  rx_l3copy_cpu                   RW
uint64                  rx_ttl_error                    RW
uint64                  rx_ptp                          RW
uint64                  rx_tpoam                      	RW
uint64					rx_l2pro_protocol_mac			RW
uint64					rx_l2pro_group_mac				RW
uint64					rx_cpu_mirror					RW
uint64					rx_nd 							RW
uint64					rx_packetin						RW
uint64					rx_mtu_fail						RW
uint64                  rx_g8032                        RW
uint64                  rx_other                        RW
uint64                  tx_igmp                         RW
uint64                  tx_bpdu                         RW
uint64                  tx_slow_proto                   RW
uint64                  tx_arp                          RW
uint64                  tx_dhcp                         RW
uint64                  tx_lldp                         RW
uint64                  tx_erps                         RW
uint64                  tx_eapol                        RW
uint64                  tx_ptp                          RW
uint64                  tx_tpoam                      	RW
uint64					tx_l2pro_protocol_mac			RW
uint64					tx_l2pro_group_mac				RW
uint64					tx_cpu_mirror				    RW
uint64		     		tx_nd 				    		RW
uint64                  tx_g8032                        RW
uint64                  tx_other                        RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_NS_ROUTE            ns_route                HASH+LIST       all
[KEY]
ns_route_key_t
[DATA]
TBL_NS_ROUTE_KEY        key                                     READ
uint32                  flag                                    RW    /* reference to ns_route_flag_t */
uint32                  is_inband                               RW
char                    ifname[IFNAME_SIZE]                       RW    /* "default" or interface */
int32                   cnt                                     RW    /* used cnt */
[MASTER]
ctclib_hash_t           *ns_route_hash
ctclib_slist_t          *ns_route_list
--------------------------------------------------------------------------------
[TBL]
TBL_NS_ROUTE_IP         ns_route_ip             HASH+LIST       all
[KEY]
addr_t                 ip
[DATA]
TBL_NS_ROUTE_IP_KEY     key                                     READ
uint32                  is_inband                               RW
int32                   cnt                                     RW    /* used cnt */
[MASTER]
ctclib_hash_t           *ns_route_ip_hash
ctclib_slist_t          *ns_route_ip_list
--------------------------------------------------------------------------------
[TBL]
TBL_OPENFLOW_INTERFACE           if                      HASH+LIST       all
[KEY]
char                    name[IFNAME_SIZE]
[DATA]
TBL_OPENFLOW_INTERFACE_KEY       key                     READ
uint8                   openflow_enable                          RW      /* openflow enable, default:0 */
uint8                   obey_vlan_filter                           RW      /* obey vlan filter, default: 0 */
uint8                   openflow_instance_enable             RW     /*ovs-db create and openflow enable*/
uint8                   is_add_to_br0                                  RW     /*add to bridge 0*/
uint32                  protected_vlan[OPENFLOW_PROTECTED_VLAN]    RW    /*protected vlan*/
uint32                  protected_vlan_change                            RW    /*protected vlan change*/
uint32                  protected_vlan_change_is_set                  RW    /*protected vlan change is set or unset*/
uint32                  action[OPENFLOW_PACKET_ACTION]    RW    /* openflow packet action*/
uint32                  ingress_add_native_vlan_enable                            RW    /*openflow enable native vlan*/
uint32                  egress_remove_native_vlan_enable                            RW    /*openflow enable native vlan*/
uint32                  ifindex                                                                    RW    /*openflow agg ifindex*/
uint32                   bind_tunnel_type                                                     RW 
uint32                   bind_tunnel_cnt                                                       RW
uint32                   tunnel_mpls_disable                                     RW  /* openflow tunnel-mpls disable, default:0 */
uint32                   is_bind_tunnel                                              RW   /* bind by tunnel, default is 0 */   
[MASTER]
ctclib_hash_t           *if_hash
ctclib_slist_t          *if_list
--------------------------------------------------------------------------------
[TBL]
TBL_OPENFLOW_MANAGER    openflow_manager        HASH+LIST       all
[KEY]
openflow_manager_key_t
[DATA]
TBL_OPENFLOW_MANAGER_KEY key                                    READ
uint32                   mode                                   RW    /* passive or active, refrence to openflow_manager_mode_t */
uint32                   is_inband                              RW    /* only used by active */
[MASTER]
ctclib_hash_t           *openflow_manager_hash
ctclib_slist_t          *openflow_manager_list
--------------------------------------------------------------------------------
[TBL]
TBL_PTP_GLOBAL          global                          GLOBAL         ptp
[DATA]
ptp_default_t		default_ds			RW
ptp_current_t		current_ds			RW
ptp_parent_t		parent_ds			RW
ptp_time_properties_t	time_prop_ds		RW
ptp_time_properties_t	time_prop_intern	RW				/*non-standard, for cmd cfg*/
ptp_device_type_t		device_type			RW				/*ptp device-type (bc|oc|e2etc|p2ptc)*/
uint32                  		global_enable               RW				/*ptp global-enable*/
int8					master_min_delay_req_interval	RW		/*from msg log_message_interval, for delay_req_interval calc*/
ptp_global_c_t			c					RW				/*servo*/
ctc_task_t			*p_internal_timer		READ			/*BMC cal*/
char					current_slave_port[IFNAME_SIZE]	RW	/*only one slave port*/
uint32				set_system_time		RW				/*ptp set-systime*/
uint32				masterChangeTrap		RW				/*snmp-server trap enable ptp master-change*/
uint32				stateChangeTrap		RW				/*snmp-server trap enable ptp state-change*/
uint32				accuracyChange		RW				/*snmp-server trap enable ptp accuracy-change*/
uint64				glb_enable_hw_msec_time	RW			/*global enable hw msec time*/
uint64				glb_enable_pf_msec_time	RW			/*global enable platform msec time*/
int64				total_offset			RW				/*total offset*/
int64				hsrv_adjust_offset		RW				/*for hsrv adjust offset*/
int64				hsrv_adjust_ffo		RW				/*for hsrv adjust ffo*/
int16				hsrv_update_system_time		RW			/*ptp update systime*/
ptp_device_type_t		hsrv_device_type		RW				/*ptp device-type (bc|oc|e2etc|p2ptc)*/
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_PTP_PORT            port                            HASH+LIST      ptp,routed
[KEY]
char                    			name[IFNAME_SIZE]
[DATA]
TBL_PTP_PORT_KEY        	key                             	READ
uint32                  			ifindex                         	READ
int64					hsrv_path_delay		RW		/*for hsrv set path delay*/
ptp_port_t				port_ds				RW
glb_ptp_port_address_t		port_addr			RW		/*ptp protocol (mac|udp)*/
glb_ptp_timeinterval_t		asymmetry_correction	RW		/*ptp asymmetry-correction CORRECTION<-2000000, 2000000>*/
int32					ingress_latency		RW		/*ptp ingress-latency <0-65535>*/
int32					egress_latency		RW		/*ptp egress-latency <0-65535>*/
ptp_dump_flag_t			dump_flag			RW		/*debug*/
uint32                  			enable                         	RW   	/*interface enable*/
uint32                  			lag_id                         	RW   	/*belong to agg lag_id*/
uint32					link_up				RW		/*interface up status*/
uint32					drop_announce		RW		/*ptp drop-announce*//*not support*/
ptp_port_stats_t			packet_stats			RW		/*packet statistics*/
ptp_vlan_info_t			vlan_info				RW		/*ptp tagging vlan <1-4094> (cos <0-7>|)*/
ptp_state_t				recommended_state	RW		/*recommended state by BMC*/
ptp_bmc_code_t			bmc_code			RW		/*update DS by this code */
ptp_bmc_expires_t			bmc_expires			RW		/*expire type*/
uint32					slave_change_master	RW		/*slave change master flag*/
uint32					synchronization_fault	RW		/*exsit fault in synchronization*/
uint32					master_clock_selected	RW		
uint16					ptp_seq_id			RW		/*packet seq id, for get time stamp*/
uint8					uncalibrated_update_offset_times	RW
uint8					uncalibrated_update_limit_times	RW
ptp_port_p_t				p					RW		/*about packet sequence_id /send_time / rcv time /delay m_s*/
ptp_port_c_t				c					RW		/*about delay calc*/
void      		*rbest				INTERNAL		/*port r best*/
ctc_task_t				*ptm_announce_timer	READ
ctc_task_t				*ptm_sync_timer		READ
ctc_task_t				*ptm_delay_timer		READ
ctc_task_t				*ptm_pdelay_timer		READ
ctc_task_t				*ptm_announce_receipt_timer	READ
ctc_task_t				*ptm_qualification_timer		READ
ctc_task_t				*p_timer_faulty_recover_timer	READ
ptp_msg_proc_ops_t		msg_proc_ops			READ	/*according to different clock type and state to register different packet process function*/
[MASTER]
ctclib_hash_t           *ptp_port_hash
ctclib_slist_t          *ptp_port_list
--------------------------------------------------------------------------------
[TBL]
TBL_PTP_FOREIGN         foreign                         HASH+LIST      ptp
[KEY]
ptp_foreign_master_t
[DATA]
TBL_PTP_FOREIGN_KEY     key                             READ
uint16							foreign_master_announce_messages	RW	/*recv announce msg count*/
ptp_common_message_header_t		header							RW	/*pkt header*/
ptp_msg_announce_t				announce							RW	/*pkt*/
ctc_task_t						*ptm_fm_qualification_timer			RW	/*is foreign master stablelldp_msap_id_t*/
ctc_task_t						*ptm_fm_announce_receipt_timer	RW	/*announce msg counter, equal to rev timeout*/
uint32							qualified							RW
tbl_ptp_port_t						*p_port_belong_to					INTERNAL
uint32							port_foreign_num					RW	/*volume at least 5, maybe use it to limit the size*/
[MASTER]
ctclib_hash_t           *ptp_foreign_hash
ctclib_slist_t          *ptp_foreign_list
--------------------------------------------------------------------------------
[TBL]
TBL_PTP_RESIDENCE_TIME_CACHE         residence_time_cache                         HASH+LIST      ptp
[KEY]
ptp_residence_time_cache_t
[DATA]
TBL_PTP_RESIDENCE_TIME_CACHE_KEY     key                             READ
uint16                                               sequence_id                         RW	/*sequence id*/
uint32                                               ifindex_port_ingress              RW	/*ingress port ifindex*/
uint32                                               domain                                RW	/*domain id*/
ctc_task_t						*ptm_age_task_timer		RW	/*cache agging*/
glb_ptp_timeinterval_t 				residence_time			RW	/*packet residence time*/
uint32 							outdated					RW
[MASTER]
ctclib_hash_t           *ptp_residence_time_cache_hash
ctclib_slist_t          *ptp_residence_time_cache_list
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_PTP_GLOBAL         fea_ptp_global                  GLOBAL     ptp,switch
[DATA]
uint32                  global_enable			RW
uint16                  device_type			RW
uint8                    retry_cnt				RW
uint32                  ready				RW
uint32                  blocked				RW
uint32                  type					RW
uint32                  tx_ifindex				RW
uint16                  tx_seq_id				RW
uint16                  intr_count				RW
uint32			acl_update_time_range		RW			/*update time range*/
ctc_task_t            *hsrv_ptp_timer		RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_PTP_TS         fea_ptp_ts                  HASH+LIST     ptp
[KEY]
uint16                  intr_seq_id
[DATA]
TBL_FEA_PTP_TS_KEY     key			READ
uint32                  intr_ifindex			RW
uint32                  ns      				RW
uint32                  s_lsb      				RW
uint32                  s_msb				RW
[MASTER]
ctclib_hash_t         *fea_ptp_ts_hash
ctclib_slist_t          *fea_ptp_ts_list
--------------------------------------------------------------------------------
[TBL]
TBL_FEA_TIME            fea_time               GLOBAL          fea
[KEY]
[DATA]
glb_time_sync_type_t    sync_type              RW              /* Timestamp sync source, glb_time_sync_type_t */
uint32                  sync_count             READ            /* Timestamp sync count */
sal_time_t              last_sync_time         READ            /* Last sync time */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_BHM_GLOBAL          bhm_glb                GLOBAL          bhm,fea
[KEY]
[DATA]
int32                   hw_watchdog_fd         READ
uint32                  hw_watchdog_feed_en    RW 
uint32                  hw_watchdog_enable     RW 
uint32                  sw_watchdog_enable     RW 
glb_bhm_action_t        reactive               RW              /* glb_bhm_action_t for sw_watchdog */
uint32                  is_reload              RW
uint32                  is_shutdown            RW
uint32                  is_warning             RW
glb_warmboot_type_t     reboot                 RW              /* glb_warmboot_type_t */
ctc_task_t              *sw_watchdog_timer     READ
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_BHM_MODULE          bhm_module             ARRAY           bhm
[KEY]
uint32                  pm_id                                  /* pm_id_t */
[DATA]
TBL_BHM_MODULE_KEY      key                    READ
uint32                  running                READ            /* is running */
uint32                  pid                    READ            /* process ID */
uint32                  death_count            READ            /* losed keepalive count */
[MASTER]
tbl_bhm_module_t        *pm_array[PM_ID_EXT_MAX]
--------------------------------------------------------------------------------
[TBL]
TBL_OPENFLOW_TUNNEL_INTERFACE           tunnel_if                      HASH+LIST       all
[KEY]
char                    name[IFNAME_SIZE]
[DATA]
TBL_OPENFLOW_TUNNEL_INTERFACE_KEY       key                     READ
uint8                   openflow_enable                          RW      /* openflow enable, default:0 */
char                     source_ip[IPADDR_BUF_SIZE]                                    RW      /* tunnel src ip */
char                     remote_ip[IPADDR_BUF_SIZE]                                   RW      /* tunnel dst ip */
char                       bind_port_name[IFNAME_SIZE]     RW      /* bind port name */
char         	         bind_mac[MACADDR_BUF_SIZE]							            RW   /*mac address*/
uint32                    bind_vlan                                           RW   /*vlan id*/
uint32                    flag                                               RW /*configure flag*/
uint32                    tunnel_status                                 RW
[MASTER]
ctclib_hash_t           *tunnel_if_hash
ctclib_slist_t          *tunnel_if_list
--------------------------------------------------------------------------------
[TBL]
TBL_OPENFLOW_TUNNEL_LOCAL_IP_CNT          openflow_tunnel_local_ip               HASH           switch,openflow
[KEY]
char                    local_ip[IPADDR_BUF_SIZE]
[DATA]
TBL_OPENFLOW_TUNNEL_LOCAL_IP_CNT_KEY      key                                     READ
uint32                  local_ip_ref                                 RW
[MASTER]
ctclib_hash_t           *openflow_tunnel_local_ip_hash
-------------------------------------------------------------------------------
[TBL]
TBL_INBAND_SNAT         inband_snat            HASH+LIST       all
[KEY]
inband_snat_key_t
[DATA]
TBL_INBAND_SNAT_KEY     key                                     READ
char                    ifname[IFNAME_SIZE]                     RW
addr_ipv4_t             ip                                      RW  /* remote ip address */
uint32                  type                                    RW  /* refer to inband_snat_type_t */
uint32                  nft_handle                              RW
ctc_task_t             *snat_timer                            READ
[MASTER]
ctclib_hash_t           *inband_snat_hash
ctclib_slist_t          *inband_snat_list
--------------------------------------------------------------------------------
[TBL]
TBL_ARPINSP          	arpinsp               ARRAY           routed,switch,dhcsnooping,dhcrelay,dhcpd6,dhclient6
[KEY]
vid_t                   vlan_id
[DATA]
TBL_ARPINSP_KEY         key                     READ
uint32                  acllog_filter           RW	 	/*filter acl-match*/
uint32                  dhcplog_filter          RW	 	/*filter dhcp binding*/
uint32                  filter_state            RW		/*filter state: static or dynamic*/
uint32                  enable_state            RW		/*DAI enable or not*/
uint64					forwarded				READ	/* forwarded pkts */
uint64					dropped					READ	/* drop pkts */
uint64					dhcp_dropped			READ	/* drop pkts by DHCP */
uint64					acl_dropped				READ	/* drop pkts by ACL*/
uint64					dhcp_permit				READ	/* permit pkts by DHCP*/
uint64					acl_permit				READ	/* permit pkts by ACL*/
uint64					srcmac_failure			READ	/* drop pkts Source MAC check fail*/
uint64					dstmac_failure			READ	/* drop pkts Dest MAC check fail*/
uint64					ip_failure				READ	/* drop pkts IP check fail*/
uint64					invalid_protocol		READ	/* drop pkts Invalid protocol data*/
char                 	filter[ARPINSP_FILTER_MAX_NUM+1] RW /*filter name*/
[MASTER]
tbl_arpinsp_t           *arpinsp_array[GLB_MAX_VLAN_ID]
-------------------------------------------------------------------------------
[TBL]
TBL_ARPACL_CONFIG       arpacl_config           HASH+LIST          routed,switch
[KEY]
char                    name[ACL_NAME_FULL_NAME_SIZE+1]
[DATA]
TBL_ARPACL_CONFIG_KEY   key            			READ
uint32               	seq_ref					RW	/*the sequence_num of arpace config*/
[MASTER] 
ctclib_hash_t           *arpacl_config_hash
ctclib_slist_t          *arpacl_config_list
-------------------------------------------------------------------------------
[TBL] 
TBL_ARPACE_CONFIG       arpace_config               HASH+LIST      routed
[KEY]
arpace_config_key_t
[DATA]
TBL_ARPACE_CONFIG_KEY   key         		 READ
uint32                  arp_type             RW		/*arp request or response or all*/
mac_addr_t              src_mac              RW		/*source mac*/
mac_addr_t              src_mac_mask         RW		/*source mac mask*/
addr_ipv4_t             src_ip               RW		/*source ip*/
addr_ipv4_t             src_ip_mask          RW		/*source ip mask*/
uint32				  	arp_deny		     RW		/*deny or permit*/
uint32				    arp_log		       	 RW		/* log or not*/

[MASTER] 
ctclib_hash_t           *arpace_config_hash 
ctclib_slist_t          *arpace_config_list
-------------------------------------------------------------------------------
[TBL]
TBL_COPP_CFG          copp_cfg                GLOBAL          switch,fea
[KEY]
[DATA]
char                    copp_pname[POLICER_NAME_SIZE]           RW   /* only support 1 copp-pmap-name global */
uint32                  copp_ifidx                              RW   /* copp cpu interface index */
uint32                  copp_total_rate                         RW   /* copp total rate value */

[MASTER]
-------------------------------------------------------------------------------
[TBL]
TBL_FEA_COPP_TRAP_GROUP       fea_copp_trap_group            HASH+LIST           fea,switch
[KEY]
uint32                          copp_trap_reason_id
[DATA]
TBL_FEA_COPP_TRAP_GROUP_KEY     key                             READ
uint64                          policer_oid                     RW
uint64                          trap_oid                        RW
uint32                          queue_id                        RW
uint64                          green_packet                    RW
uint64                          green_byte                      RW
uint64                          yellow_packet                   RW
uint64                          yellow_byte                     RW
uint64                          red_packet                      RW
uint64                          red_byte                        RW

[MASTER]
ctclib_hash_t               *fea_copp_trap_group_hash
ctclib_slist_t              *fea_copp_trap_group_list
--------------------------------------------------------------------------------
[TBL]
TBL_SFLOW_GLOBAL        sflow_glb               GLOBAL          all
[KEY]
[DATA]
uint32                  enable                  RW    /* global sflow enable */
uint32                  version                 RW    /* sflow version,v4 or v5*/
addr_t                  agent                   RW    /* agent ip address */
addr_t                  agent_ipv6                RW    /* agent ipv6 address */
uint32                  counter_interval        RW    /* sflow counter polling interval*/
uint32                  counter_port_num        RW    /* sflow counter sampling enabled port num*/
ctc_task_t              *counter_timer          READ  /* sflow counter timer */
uint32                  counter_next_port       RW    /* get next port stats when sflow_counter_timer*/
FLAGS32                 sflow                   FLAGS /* bitmap of SFLOW_FLAG_ */
[FLAGS]
sflow                   sflow_all               SFLOW_FLAG_ALL       RW 
sflow                   sflow_counter           SFLOW_FLAG_COUNTER   RW                    
sflow                   sflow_sample            SFLOW_FLAG_SAMPLE    RW                    
sflow                   sflow_packet            SFLOW_FLAG_PACKET    RW                    
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_SFLOW_COLLECTOR     sflow_collector          LIST           switch
[KEY]
sflow_collector_key_t
[DATA]
TBL_SFLOW_COLLECTOR_KEY key                      READ
uint8                   buf[GLB_SFLOW_PKT_BUF+4] RW    /* sflow packet buffer */
uint32                  pkt_len                  RW    /* sflow packet length */
uint32                  sendfd                   RW    /* collector socket */
ctc_task_t              *transdelay_timer        READ  /* sflow trasnmit dealy timer */
uint32                  sequence                 RW    /* sflow packet header sequence */    
ctc_task_t              *t_log_timer 			 READ
[MASTER]
ctclib_slist_t          *sflow_collector_list
--------------------------------------------------------------------------------
[TBL] 
TBL_SFLOW_COUNTER_PORT      sflow_counter_port   LIST           fea,switch
[KEY] 
uint32                      ifindex 
[DATA] 
TBL_SFLOW_COUNTER_PORT_KEY  key                  READ 
uint32                      left_interval        RW   /* left interval for next report, msec */
uint32                      sequence             RW   /* sflow packet sequence */
[MASTER]
ctclib_slist_t              *counter_port_list
--------------------------------------------------------------------------------
[TBL]
TBL_VRRP_GLOBAL         vrrp_glb             GLOBAL          all
[KEY]
[DATA]
ctc_task_t              *t_vrrp_timer             READ       /* VRRP timer */
ctc_task_t              *t_vrrp_msec_timer        READ       /* VRRP timer for 100 msec*/
uint32                  vrrp_version              RW         /* VRRP version */
uint32                  vrrp_session_count        RW         /* VRRP total session number*/
uint32                  vrrp_msec_session_count   RW         /* VRRP msec session number*/
uint8                   buf[GLB_VRRP_PKT_BUF]     RW         /* VRRP tx packet buffer */
uint32                  pkt_len                   RW         /* VRRP tx packet length */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_VRRP_VMAC           vrrp_vmac            HASH+LIST           all
[KEY]
mac_addr_t              mac
[DATA]
TBL_VRRP_VMAC_KEY       key                 READ
uint32                  ifindex             RW 
[MASTER]
ctclib_hash_t           *vrrp_vmac_hash
ctclib_slist_t          *vrrp_vmac_list
--------------------------------------------------------------------------------
[TBL]
TBL_VRRP_VIP            vrrp_vip            HASH+LIST           all
[KEY]
addr_t                       
[DATA]
TBL_VRRP_VIP_KEY        key                 READ
mac_addr_t              vmac                RW              /* vrrp vmac for vip */
mac_addr_t              interface_mac       RW              /* route_mac for vrrp interface */
[MASTER]
ctclib_hash_t           *vrrp_vip_hash
ctclib_slist_t          *vrrp_vip_list
--------------------------------------------------------------------------------
[TBL]
TBL_VRRP_SESSION        vrrp_sess            ARRAY           all
[KEY]
uint32                  vrid
[DATA]
TBL_VRRP_SESSION_KEY    key                            READ
uint8                   enable                         RW      /* enable */
uint8                   state                          RW      /* Current State. */
addr_t                  vip                            RW      /* Virtual IP address. */
uint8                   owner                          RW      /* IP owner */
char                    ifname[IFNAME_SIZE]            RW      /* vrrp interface name */
uint32                  ifindex                        RW      /* vrrp interface ifindex */
uint8                   priority                       RW      /* running priority */
uint8                   config_priority                RW      /* configured priority */
uint16                  advt_interval                  RW      /* Advertisement interval */
uint8                   time_mode                      RW      /* time unit is second or mili-second */
uint16                  preempt_delay                  RW      /* preempt delay */
uint8                   preempt_mode                   RW      /* preempt mode */
mac_addr_t              vmac                           RW      /* virual mac */
uint8                   ip_protocol                    RW      /* ip or ipv6 */
uint32                  timer                          RW      /* master down timer or advt timer */
mac_addr_t              old_mac                        RW      /* original interface mac. */
uint8                   vip_status                     RW      /* vip is set */
uint8                   ifp_status                     RW      /* vrrp interface is set */
uint8                   shutdown_flag                  RW      /* vrrp interface is shutdown */
uint8                   skew_time                      RW      /* Skew time. */
uint32                  master_down_interval           RW      /* master down interval. */
uint8                   num_ip_addrs                   RW      /* number of vip address */
uint16                  trackobj_id                    RW      /* track object id */
uint8                   trackobj_status                RW      /* track object status */
uint8                   priority_delta                 RW      /* track priority decrement */
sal_time_t              vrrp_uptime                    RW      /* vrrp update time for snmp */
uint8                   admin_state                    RW      /* vrrp admin state */  
uint8                   rowstatus                      RW      /* row status */
uint32                  stats_become_master            RW      /* Times state transitioned to master */
uint32                  stats_advt_rcvd                RW      /* Advt rcvd */
uint32                  stats_advt_interval_errors     RW      /* Advt rcvd with wrong interval */
uint32                  stats_auth_failures            RW      /* pkts rcvd failed auth check */
uint32                  stats_ip_ttl_errors            RW      /* pkts rcvd with ttl != 255 */
uint32                  stats_priority_zero_pkts_rcvd  RW      /* pkts rcvd with priority=0 */
uint32                  stats_priority_zero_pkts_sent  RW      /* pkts sent with priority=0 */
uint32                  stats_invalid_type_pkts_rcvd   RW      /* pkts rcvd with invalid type */
uint32                  stats_addr_list_errors         RW      /* pkts rcvd with addr mismatch */
uint32                  stats_invalid_auth_type        RW      /* pkts rcvd with unknown auth type */
uint32                  stats_auth_type_mismatch       RW      /* pkts rcvd with auth type mismatch */         
uint32                  stats_pkt_len_errors           RW      /* pkts rcvd with pkt length < length of VRRP header */
uint8                   master_ip_status               RW      /* master ip status */
addr_t                  master_ip                      RW      /* master ip address */
uint8                   master_priority                RW      /* master priority */
uint16                  master_advt_interval           RW      /* master advertisement interval */             
addr_t                  primary_ip                     RW      /* vrrp interface primary ip */     
uint8                   learn_master                   RW      /* learn master advt for backup */
uint8                   secondaryip_same_vip           RW      /* vrrp interface secondary ip is same as vip */
[MASTER]
tbl_vrrp_session_t      *session_array[GLB_VRRP_MAX_VRID+1]
--------------------------------------------------------------------------------
[TBL]
TBL_SSM_GLOBAL   		ssm_glb                   GLOBAL          all
[KEY]
[DATA]
ssm_clock_id_t			device_clock_id			  RW			/* Device clock ID*/
uint32					synce_enable			  RW			/* Global synce enable*/
uint32					local_priority		      RW			/* Synce local priority*/
uint32					option_mode				  RW			/* Synce local quality option mode*/
uint32					system_quality			  RW			/* device quality, ssm_quality_t*/
uint32					current_quality			  RW			/* current quality, ssm_quality_t*/
uint32					device_role				  RW			/* Device role, ssm_device_role_t*/
uint32					ssm_enable			      RW			/* Global ssm enable*/
uint32					ssm_extend_enable		  RW			/* Global Ssm extend enable*/
uint32					holdover_en			  	  RW			/* Current status is holdover or not*/
uint32					freerun_en				  RW			/* Current status is freerun or not*/
uint32					select_ifindex			  RW			/* Select port*/
uint32					dpll_selected_ifindex     RW			/* Dpll selected port's index */
uint32					dpll_current_status		  RW			/* Dpll current status */
uint32					force_quality_option1_cnt RW			/* Force configured quality option1 count*/
uint32					force_quality_option2_cnt RW			/* Force configured quality option2 count*/
uint32					clock_recovery_select  	  RW			/* clock recovery selected enbale*/
uint32					next_selected_ifindex  	  RW			/* The next selected port*/
uint32					select_if_linkup_restore_en  RW			/* Select port up restore enable*/
uint32					select_if_priority_change_en RW			/* Select port priority change enable*/
uint32					select_if_quality_change_en  RW			/* Select port quality change enable*/
uint32					holdoff_time			  RW			/* Hold off time*/
uint32					wtr_time		  		  RW			/* Wait to retore time*/
ctc_task_t              *holdoff_send_timer       READ          /* Hold off send timer */
ctc_task_t              *wtr_send_timer           READ          /* Wait to retore send timer */
[MASTER]
-------------------------------------------------------------------------------------
[TBL] 
TBL_SSM_PORT      			ssm_port   			  HASH+LIST    ssm,switch,routed
[KEY] 
char                        name[IFNAME_SIZE]
[DATA] 
TBL_SSM_PORT_KEY  			key                   READ 
uint32 						ifindex				  READ	  /* interface ifindex*/
uint32						synce_enable		  RW	  /* Port synce enable */
uint32						ssm_pdu_direct		  RW	  /* Ssm pdu direction */
uint32						priority			  RW	  /* Port synce priority */
uint32						replace_clockid_en    RW	  /* replace clockid status on port */
uint32						receive_pdu_enable    RW	  /* Port receive pdu or not */
uint32						send_quality   		  RW	  /* Send pdu quality */
uint32						receive_quality   	  RW	  /* Receive pdu quality */
uint32						force_tx_quality   	  RW	  /* forcible tx quality value */
uint32						force_rx_quality   	  RW	  /* forcible rx quality value */
uint32						dnu_group_id   	 	  RW	  /* DNU group ID */
uint32						hop   	 	 		  RW	  /* SSM extend tlv hop*/
ssm_clock_id_t				receive_clock_id	  RW	  /* Received clock ID*/
ctc_task_t              	*ssm_timeout_timer    READ    /* Ssm timeout timer */
ctc_task_t              	*ssm_send_timer       READ    /* Ssm send timer */
[MASTER]
ctclib_hash_t        		*ssm_port_hash
ctclib_slist_t              *ssm_port_list
--------------------------------------------------------------------------------
[TBL]
TBL_IPSLA_GLOBAL         ipsla_glb             GLOBAL          routed
[KEY]
[DATA]
uint16                  ipsla_entry_num           READ       /* configured ipsla entry number */
ctc_task_t             *t_ipsla_timer             READ       /* IPSLA update timer */
uint8                   trap_test_failure         RW         /* trap_test_failure enable */
uint8                   trap_test_success         RW         /* trap_test_success enable */
uint8                   trap_pkt_timeout          RW         /* trap_pkt_timeout enable */
uint8                   trap_overthreshold        RW         /* trap_overthreshold enable */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_IPSLA_ENTRY         ipsla_entry            ARRAY           routed
[KEY]
uint16                  entry_id
[DATA]
TBL_IPSLA_ENTRY_KEY     key                       READ
uint8                   type                      RW             /* IPSLA_TYPE_ECHO */
uint8                   admin_state               RW             /* Current Admin State */
char                    desc[IPSLA_DES_MAX_SIZE+1]  RW           /* Description */
uint16                  frequency                 RW
uint16                  timeout                   RW
uint32                  threshold                 RW
uint16                  interval                  RW
uint16                  packets_per_test          RW
uint8                   fail_percent              RW
uint8                   ttl                       RW
uint8                   tos                       RW
uint16                  data_size                 RW
uint32                  data_pattern              RW            /* Data Pattern Default 0xABCDABCD */
addr_ipv4_t             inaddr                    RW            /* Dest IP */
addr_ipv4_t             src_inaddr                RW            /* Source IP */
char                    src_ifname[IFNAME_SIZE]   RW            /* Source interface name */
int32                   sock                      READ
int32                   send_sock                 READ
int32                   sock_flag                 RW
uint8                   buf[GLB_IPSLA_PKT_BUF]    RW            /* Packet Buf */
uint32                  packet_length             RW
ctc_task_t             *t_ipsla_read              READ
uint32                  testid                    RW            /* Running Time */
uint16                  running_frequency         RW
uint16                  running_timeout           RW
uint16                  running_interval          RW
uint16                  running_probe_cnt         RW
uint16                  sequence                  RW
uint32                  rtt                       RW
uint64                  send_time                 RW
uint64                  last_send_time            RW
uint8                   send_cnt                  RW
uint8                   receive_cnt               RW
uint8                   overthreshold_cnt         RW
uint8                   sendfail_cnt              RW
uint32                  running_rtt_min           RW
uint32                  running_rtt_max           RW
uint32                  running_rtt_sum           RW
uint8                   running_success           RW
uint8                   running_fail_percent      RW
uint8                   returncode                RW          /* result and statisitcs */
uint8                   echo_reply                RW
uint32                  total_receive             RW
uint32                  total_send                RW
uint64                  rtt_sum                   RW
uint32                  rtt_max                   RW
uint32                  rtt_min                   RW
uint16                  probe_result_config_cnt   RW          /* statistics config */
uint16                  probe_result_index        RW
uint16                  test_result_config_cnt    RW
uint16                  test_result_index         RW
[MASTER]
tbl_ipsla_entry_t      *ipslaentry_array[GLB_IPSLA_ENTRY_MAX+1]
--------------------------------------------------------------------------------
[TBL]
TBL_IPSLA_PACKET_STATS  ipsla_packet_stats        HASH+LIST   routed
[KEY]
ipsla_packet_stats_key_t
[DATA]
TBL_IPSLA_PACKET_STATS_KEY        key                  READ
uint64                  send_time                      RW
uint32                  rtt                            RW
uint32                  testid                         RW
uint8                   index                          RW
uint8                   status                         RW
uint16                  timeout                        RW
uint32                  threshold                      RW
[MASTER]
ctclib_hash_t            *ipsla_packet_stats_hash
ctclib_slist_t           *ipsla_packet_stats_list
--------------------------------------------------------------------------------
[TBL]
TBL_IPSLA_TEST_STATS    ipsla_test_stats          HASH+LIST   routed
[KEY]
ipsla_test_stats_key_t
[DATA]
TBL_IPSLA_TEST_STATS_KEY          key                  READ
uint64                  last_send_time                 RW
uint32                  testid                         RW
uint8                   send_cnt                       RW
uint8                   receive_cnt                    RW
uint8                   overthreshold_cnt              RW
uint8                   sendfail_cnt                   RW
uint32                  rtt_min                        RW
uint32                  rtt_max                        RW
uint32                  rtt_sum                        RW
uint8                   success                        RW
uint8                   fail_percent                   RW
uint16                  timeout                        RW
[MASTER]
ctclib_hash_t            *ipsla_test_stats_hash
ctclib_slist_t           *ipsla_test_stats_list
--------------------------------------------------------------------------------
[TBL]
TBL_TRACK_GLOBAL        track_glb             GLOBAL          routed
[KEY]
[DATA]
uint16                  track_object_num          READ       /* configured track object number */
uint16                  track_timer_interval      RW         /* track timer update interval */
ctc_task_t             *t_track_timer             READ       /* TRACK update timer */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_TRACK_OBJECT        track_object            ARRAY           routed
[KEY]
uint16                  trackobj_id
[DATA]
TBL_TRACK_OBJECT_KEY    key                         READ          /* object id */
uint8                   type                        RW            /* object type */
uint8                   state                       RW            /* object state */
char                    track_if[IFNAME_SIZE]       RW            /* Interface name */
uint16                  rtr_entryid                 RW            /* ipsla entry id */
uint8                   delay_up                    RW            /* delay up*/
uint8                   running_delay_up            RW
uint8                   delay_down                  RW            /* delay down*/
uint8                   running_delay_down          RW
vrid_bmp_t              tracked_vrid_bmp            RW            /* tracked by vrrp session id */
uint32                  static_rt_refcnt            RW
[MASTER]
tbl_track_object_t      *trackobj_array[GLB_TRACK_OBJECT_MAX+1]
--------------------------------------------------------------------------------
[TBL]
TBL_CONTROLLER_ATTR     controller_attr             HASH            openflow,ncs
[KEY]
ns_route_key_t
[DATA]
TBL_CONTROLLER_ATTR_KEY      key                    READ
char                    controller_name[CONTROLLER_NAME_SIZE]        RW            
uint32                  max_backoff                 RW              
uint32                  inactivity_probe            RW
[MASTER]
ctclib_hash_t           *controller_attr_hash
--------------------------------------------------------------------------------
[TBL]
TBL_OAM_SESSION  oam_session        HASH+LIST   openflow,opm
[KEY]
uint32                    session_id
[DATA]
TBL_OAM_SESSION_KEY     key                       READ
uint32                   creat_by_flow                  RW       /*flag for judge delete oam session is allowed*/
uint32                   oam_type                  RW	/*lsp / pw/ section ....add by chenc*//*GLB_OAM_TYPE_MPLS_SECTION*/
tpoam_pw_type_t         pw_type                   RW	/*vpws/vpls/spe/tpe. add by chenc*//*TPOAM_PW_TYPE_TPE*/
tpoam_mp_type_t         mp_type                   RW	/*mep or mip. add by chenc*//*TPOAM_MP_TYPE_MEP*/
uint32                  service_ifindex           RW		/*for section oam*/
char                    service_name[LSPNAME_SIZE] RW  /*for lsp oam and pw oam*/
char                    megid_str[GLB_TPOAM_MEGID_STR_LEN]                      RW
uint32                  mepid                            RW
uint32                  rmepid                         RW
uint32                   cc_enable                          RW
uint32                   cc_interval                         RW
uint32                   cc_interval_cfg                   RW
uint32                  lm_enable                        RW
uint32                  dm_enable                      RW
uint8                   exp		   	              RW	/*for lmep, add by chenc*/
uint8                   level					  RW
uint8                   ttl		   	              RW
uint32                  bind_oam_flow_id                      RW
uint32                  bind_oam_ifindex                      RW
uint32                  icclen		  		      RW
char                    description[TPOAM_DESCRIPTION_SIZE]   RW
tpoam_dm_t              oam_dm	                              RW
tpoam_lm_t              oam_lm                                RW
tpoam_lb_t              oam_lb                                RW
tpoam_event_t           oam_event                             RW
ctc_task_t                 *p_t_send_dm_timer                READ
uint32                       dm_active		  		      RW
uint32                        oam_status                                RW	/* glb_tpoam_evt_t bitmap */
tpoam_status_t          signal_status                         RW	/*for CRC trigger AIS*/
tpoam_stats_t           oam_stats                             RW
tpoam_list_t              oam_list                                RW
uint32					aps_group_id						  RW /*lsp aps group id or pw aps group id*/
uint32                      flag_add_flow		  		      RW            /*flag for opm to init para*/
[MASTER]
ctclib_hash_t            *oam_session_hash
ctclib_slist_t           *oam_session_list
--------------------------------------------------------------------------------
[TBL]
TBL_OAM_SESSION_UPLOAD  oam_session_upload        HASH+LIST   openflow,opm
[KEY]
uint32                    session_id
[DATA]
TBL_OAM_SESSION_UPLOAD_KEY     key                       READ /*also for event*/
uint32                         bind_oam_flow_id        RW /*is dm/lm/event/ccm ?*//*also for event*/
upload_tpoam_dm_t              upload_dm                       RW
upload_tpoam_dm_t              upload_dm_event                       RW
upload_tpoam_lm_t              upload_lm                       RW
upload_tpoam_lm_t               upload_lm_event                       RW
upload_tpoam_ccm_t             upload_ccm                      RW
[MASTER]
ctclib_hash_t            *oam_session_hash
ctclib_slist_t           *oam_session_list
--------------------------------------------------------------------------------
[TBL]
TBL_LSP_APS_GROUP  lsp_aps_group        HASH+LIST   openflow,opm,ncs
[KEY]
uint32                    group_id
[DATA]
TBL_LSP_APS_GROUP_KEY   key                       READ
char                    working_lsp_name[LSPNAME_SIZE]       RW
char                    protection_lsp_name[LSPNAME_SIZE]       RW
uint32                  ref_cnt                 	RW
uint32                  flow_flag                   RW	/* If set means aps group id is added by openflow*/
uint32                  wait_to_restore_time        RW	/* Wait-to-restore time value  */
uint32                  hold_off_time               RW  /* hold-off time value */
uint32                  is_revertive                RW  /* Revertive (1) or non-revertive (0) */
uint32                  active_path                 RW  /* None, Working, Protection*/
uint32					bridge_permanent			RW  /* 0 means 1:1 and 1 means 1+1 */
uint32					current_state				RW  /* Current state to be communicated to far end */
[MASTER]
ctclib_hash_t            *lsp_aps_group_hash
ctclib_slist_t           *lsp_aps_group_list
--------------------------------------------------------------------------------
[TBL]
TBL_PW_APS_GROUP  pw_aps_group        HASH+LIST   openflow,opm,ncs
[KEY]
uint32                    group_id
[DATA]
TBL_PW_APS_GROUP_KEY    key                       READ
char                    working_pw_name[LSPNAME_SIZE]       RW
char                    protection_pw_name[LSPNAME_SIZE]       RW
uint32                  ref_cnt                 	RW
uint32                  flow_flag                   RW	/* If set means aps group id is added by openflow*/
uint32                  wait_to_restore_time        RW	/* Wait-to-restore time value  */
uint32                  hold_off_time               RW  /* hold-off time value */
uint32                  is_revertive                RW  /* Revertive (1) or non-revertive (0) */
uint32                  active_path                 RW  /* None, Working, Protection*/
uint32					bridge_permanent			RW  /* 0 means 1:1 and 1 means 1+1 */
uint32					current_state				RW  /* Current state to be communicated to far end */
[MASTER]
ctclib_hash_t            *pw_aps_group_hash
ctclib_slist_t           *pw_aps_group_list
--------------------------------------------------------------------------------
[TBL]
TBL_LSP_PE                 lsp_pe                HASH+LIST   openflow,opm
[KEY]
char                   name[LSPNAME_SIZE]
[DATA]
TBL_LSP_PE_KEY         key                             READ
uint32                  ref_cnt                 RW
uint32                  inlabel                               RW
uint32                  outlabel                               RW
uint32                  ifindex                                 RW
uint32                  vid                                      RW
uint32                  outlabel_exp                        RW
uint32                  outlabel_exp_is_set              RW
uint32                  outlabel_ttl                          RW
uint32                  oam_session_id                    RW
uint32					lsp_aps_group_id					RW
mac_addr_t           nexthop_mac                           RW   
[MASTER]
ctclib_hash_t            *lsp_pe_hash
ctclib_slist_t           *lsp_pe_list
--------------------------------------------------------------------------------
[TBL]
TBL_LSP_P                 lsp_p                HASH+LIST   openflow,opm
[KEY]
char                   name[LSPNAME_SIZE]
[DATA]
TBL_LSP_P_KEY         key                             READ
uint32                  ref_cnt                 RW
uint32                  west_inlabel                              RW
uint32                  west_outlabel                               RW
uint32                  west_ifindex                                 RW
uint32                  west_vid                                      RW
mac_addr_t           west_nexthop_mac                           RW
uint32                  west_outlabel_exp                        RW
uint32                  west_outlabel_exp_is_set              RW
uint32                  west_outlabel_ttl                          RW
uint32                  east_inlabel                              RW
uint32                  east_outlabel                               RW
uint32                  east_ifindex                                 RW
uint32                  east_vid                                      RW
uint32                  east_outlabel_exp                        RW
uint32                  east_outlabel_exp_is_set              RW
uint32                  east_outlabel_ttl                          RW
mac_addr_t           east_nexthop_mac                           RW
uint32                  oam_session_id                    RW
[MASTER]
ctclib_hash_t            *lsp_p_hash
ctclib_slist_t           *lsp_p_list
--------------------------------------------------------------------------------
[TBL]
TBL_PW_TPE                 pw_tpe                HASH+LIST   openflow,opm
[KEY]
char                   name[LSPNAME_SIZE]
[DATA]
TBL_PW_TPE_KEY         key                             READ
uint32                  ref_cnt                 RW
uint32                  inlabel                               RW
uint32                  outlabel                               RW
uint32                  outlabel_exp                        RW
uint32                  outlabel_exp_is_set              RW
uint32                  outlabel_ttl                          RW
uint32                  tunnel_type                         RW
char                    lsp_name[LSPNAME_SIZE]      RW
uint32                  lsp_aps_group_id                       RW
uint32                  pw_aps_group_id                       RW
uint32                  oam_session_id                    RW
[MASTER]
ctclib_hash_t            *pw_tpe_hash
ctclib_slist_t           *pw_tpe_list
--------------------------------------------------------------------------------
[TBL]
TBL_SECTION_OAM                 section_oam                HASH+LIST   openflow,opm
[KEY]
uint32                   ifindex
[DATA]
TBL_SECTION_OAM_KEY         key                             READ
uint32                  oam_session_id                    RW
mac_addr_t           nexthop_mac                           RW
[MASTER]
ctclib_hash_t            *section_oam_hash
ctclib_slist_t           *section_oam_list
--------------------------------------------------------------------------------
[TBL]
TBL_OAM_FLOW_INFO            oam_flow_info                HASH+LIST   openflow,opm
[KEY]
uint32                   flow_id
[DATA]
TBL_OAM_FLOW_INFO_KEY         key                             READ
uint32                  type                                                RW
char                     name[LSPNAME_SIZE]                        RW
uint32                  session_id                                        RW
uint32                  outlabel_flow_id                                RW
uint32                  inlabel_flow_id                                  RW
uint32                  outlabel_group_id                                RW
uint32                  inlabel_group_id                                  RW
uint32                  ifindex                                             RW
[MASTER]
ctclib_hash_t            *oam_flow_info_hash
ctclib_slist_t           *oam_flow_info_list
--------------------------------------------------------------------------------
[TBL]
TBL_TPOAM_GLOBAL         tpoam_global                  GLOBAL     opm,openflow
[DATA]
uint32                  node_id                 RW	/*MPLS-TP NODE-ID, used by MIP. cli mpls-tp node-id A.B.C.D*/
uint32                  channel_type            RW	/*MPLS-TP OAM Y.1731 channel type, default is 0x8902. cli mpls-tp oam-y1731 channel-type CHANNELTYPE*/
uint32                   fast_aps_en             RW	/*do APS in HSRV. cli mpls-tp oam-y1731 fast-aps enable*/
uint32                   rdi_reason              RW	/*GLB_TPOAM_RDI_RSN_LOC. cli mpls-tp oam-y1731 rdi-reason*/
uint32                  rdi_reason_mask         RW	/*GLB_TPOAM_EVT_XXX. cli mpls-tp oam-y1731 rdi-reason*/
uint32                  sf_reason_mask          RW	/*GLB_TPOAM_EVT_XXX. cli mpls-tp oam-y1731 sf-reason*/
uint32                  sd_reason_mask          RW	/*GLB_TPOAM_EVT_XXX. cli mpls-tp oam-y1731 sd-reason*/
tpoam_rc_count_t        resouce_count_max       RW	/* MAX resouce count */
tpoam_rc_count_t        resouce_count_curr      RW	/* current resouce count *//*section ...*/
uint32                  event_rule_map[TPOAM_EVT_DEST_MAX]			RW	/*cli mpls-tp oam-y1731 event-rule*/
tpoam_stats_t           oam_glb_stats           RW
tpoam_exec_t            exec                    RW	/*current exec oam test*/
tpoam_trap_cache_t      trap_cache              RW
tpoam_ratelimit_t       trap                    RW
tpoam_ratelimit_t       log                     RW
uint32                  dm_enable_global    RW
uint32                  dm_delay_threshold    RW
uint32                  dm_calc_interval                 RW
uint32                  lm_enable_global    RW
uint32                  lm_local_threshold                 RW
uint32                  lm_remote_threshold                 RW
uint32                  lm_calc_interval                 RW
ctc_task_t              *lm_calc_interval_timer      READ
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_TPOAM_EXEC_GLOBAL         tpoam_exec_global                  GLOBAL     opm
[DATA]
uint32                  test_type               RW	/*lm/lb rmep/ mip/discovery/DM*/
uint32                  oam_session_id      RW
uint32                  pid                         RW
uint32                  sock                       RW
tpoam_lmm_exec_t        exec_lm                 RW	/*lm*/
tpoam_lb_exec_t         exec_lb_rmep            RW	/*LB TPOAM_LB_MEP*/
tpoam_lb_exec_t         exec_lb_mip             RW	/*LB TPOAM_LB_MIP*/
tpoam_lb_exec_t         exec_lb_discovery       RW	/*LB TPOAM_LB_DISCOVERY*/
tpoam_1dm_dmm_exec_t    exec_dmm                 RW	/*DM, TPOAM_DM_TYPE_DMM*/
tpoam_1dm_dmm_exec_t    exec_1dm                RW	/*1DM, TPOAM_DM_TYPE_1DM*/
ctc_task_t              *p_t_send_lb_msg_timer                READ
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_APS_GROUP_INFO      aps_group_info                HASH+LIST   opm,openflow
[KEY]
uint32                   aps_group_id
[DATA]
TBL_APS_GROUP_INFO_KEY  key                         READ
char                    working_name[LSPNAME_SIZE]       RW
char                    protection_name[LSPNAME_SIZE]    RW
char                    select_name[LSPNAME_SIZE]    RW
char                    aps_group_type     			RW	/* PW or LSP*/
uint32                  wait_to_restore_time        RW	/* Wait-to-restore time value  */
uint32                  hold_off_time               RW  /* hold-off time value */
uint32                  is_revertive                RW  /* Revertive (1) or non-revertive (0) */
uint32                  active_path                 RW  /* None, Working, Protection*/
uint32					bridge_permanent			RW  /* 0 means 1:1 and 1 means 1+1 */
uint32					current_event				RW  /* current event  -- incoming event. can be APS request, CFM trigger  */
uint32					dfop_reason					RW  /* reason for dfop */
uint32					sc_aps_intervel				RW  /* interval for out going APS PDU when state change happens */
uint32					fast_aps_en					RW  /* fast aps en */
uint32					aps_channel					RW  /* Whether APS is enabled or not ( With APS or Without APS */
uint32					requested_signal			RW  /* Requested signal NULL (0) /NORMAL (1)*/
uint32					direction					RW  /* Unidirectioanal (0) or bidirectional  (1) */
uint32					bridge_type					RW  /* T bit value */
uint32					last_state					RW  /* last state as per the FSM */
uint32					current_state				RW  /* Current state to be communicated to far end */
uint32					far_end_last_event			RW  /* Remote end last state */
ctc_task_t              *wtr_timer    				READ /* wait-to-restore timer */
ctc_task_t              *sf_hold_off_timer    		READ /* Signal fail hold-off timer */
ctc_task_t              *sfp_hold_off_timer    		READ /* Signal fail to protection timer */
ctc_task_t              *sd_hold_off_timer    		READ /* Signal Degress hold-off timer */
ctc_task_t              *sdp_hold_off_timer    		READ /* Signal Degress to protection timer*/
ctc_task_t              *sc_out_aps_timer    		READ /* Three consecutive time each with configured APS PDU interval for state change and exists*/
ctc_task_t              *aps_tx_timer    			READ /* Retransmission timer */
uint32					sc_aps_out_pdu_count		RW  /* APS PDU's sent after state change, need to send 3 consecutive APS PDU's*/
uint32					hold_off_expired			RW  /* indicates whether hold-off expires of not */
[MASTER]
ctclib_hash_t            *aps_group_info_hash
ctclib_slist_t           *aps_group_info_list
--------------------------------------------------------------------------------
[TBL]
TBL_OAM_INLABEL_INFO      oam_inlabel_info                HASH+LIST   openflow
[KEY]
uint32                   inlabel
[DATA]
TBL_OAM_INLABEL_INFO_KEY  key                         READ
uint32					ref_cnt			RW  /* indicates whether hold-off expires of not */
[MASTER]
ctclib_hash_t            *oam_inlabel_info_hash
ctclib_slist_t           *oam_inlabel_info_list
--------------------------------------------------------------------------------
[TBL]
TBL_OAM_MPLS_APS_CHECK      oam_mpls_aps_check                HASH+LIST   openflow
[KEY]
char                   name[LSPNAME_SIZE]
[DATA]
TBL_OAM_MPLS_APS_CHECK_KEY  key                         READ
uint32                                lsp_label             RW
uint32                                is_aps_action       RW
uint32                                ref_cnt                RW
uint32					ifindex			RW 
mac_addr_t                        nexthop_mac        RW
uint32                                vid                       RW
uint32                               outlabel_exp         RW
uint32                               outlabel_exp_is_set        RW
uint32                               outlabel_ttl                  RW
[MASTER]
ctclib_hash_t            *oam_mpls_aps_check_hash
ctclib_slist_t           *oam_mpls_aps_check_list
--------------------------------------------------------------------------------
[TBL]
TBL_VLAN_MAPPING_TABLE  vlan_mapping_table      HASH+LIST     switch
[KEY]
char                    name[GLB_VLAN_MAPPING_TAB_NAME_MAX+1]
[DATA]
TBL_VLAN_MAPPING_TABLE_KEY    key               READ
port_bmp_t              applied_ports           RW         /* ports which applied the mapping table */
uint32                  entry_num               RW         /* mapping entry numble */
uint32                  egress_entry_num        RW         /* egress mapping entry numble */
uint32                  group_id                RW         /* raw vlan group id ,0 is not set */
uint16                  group_mapped_svid       RW         /* group mapped svid */
char                    group_evc_entry_name[GLB_VLAN_EVC_NAME_LEN+1]   RW
[MASTER]
ctclib_hash_t           *vlan_mapping_table_hash
ctclib_slist_t          *vlan_mapping_table_list
--------------------------------------------------------------------------------
[TBL]
TBL_VLAN_MAPPING_ENTRY  vlan_mapping_entry      HASH+LIST     switch
[KEY]
vlan_mapping_entry_key_t
[DATA]
TBL_VLAN_MAPPING_ENTRY_KEY    key               READ
uint16                  mapped_svid             RW         /* mapped svid */
uint16                  mapped_cvid             RW         /* mapped cvid */
char                    evc_entry[GLB_VLAN_EVC_NAME_LEN+1]   RW
[MASTER]
ctclib_hash_t           *vlan_mapping_entry_hash
ctclib_slist_t          *vlan_mapping_entry_list
--------------------------------------------------------------------------------
[TBL]
TBL_EGRESS_MAPPING_ENTRY  egress_mapping_entry  HASH+LIST     switch
[KEY]
egress_mapping_entry_key_t
[DATA]
TBL_EGRESS_MAPPING_ENTRY_KEY    key             READ
uint16                   mapped_vid             RW         /* mapped vlan id */
[MASTER]
ctclib_hash_t           *egress_mapping_entry_hash
ctclib_slist_t          *egress_mapping_entry_list
--------------------------------------------------------------------------------
[TBL]
TBL_VLAN_GROUP          vlan_group              ARRAY        switch
[KEY]
uint32                  group_id
[DATA]
TBL_VLAN_GROUP_KEY      key                     READ
uint32                  valid[GLB_VLAN_RANGE_ENTRY_NUM+1]             RW
uint32                  min_vid[GLB_VLAN_RANGE_ENTRY_NUM+1]           RW
uint32                  max_vid[GLB_VLAN_RANGE_ENTRY_NUM+1]           RW
[MASTER]
tbl_vlan_group_t       *vlan_group_array[GLB_VLAN_RANGE_GROUP_NUM+1]
--------------------------------------------------------------------------------
[TBL]
TBL_EVC_ENTRY           evc_entry               HASH+LIST     switch
[KEY]
char                    name[GLB_VLAN_EVC_NAME_LEN+1]
[DATA]
TBL_EVC_ENTRY_KEY       key                     READ
uint16                  mapped_svid             RW         /* mapped svid */
uint16                  mapped_cvid             RW         /* mapped svid */
uint32                  evc_type                RW         /* evc type */
uint32                  ref_count               RW         /* ref count */
[MASTER]
ctclib_hash_t           *evc_entry_hash
ctclib_slist_t          *evc_entry_list
--------------------------------------------------------------------------------
[TBL]
TBL_MAPPED_VLAN_INFO    mapped_vlan_info        HASH+LIST     switch
[KEY]
mapped_vlan_info_key_t
[DATA]
TBL_MAPPED_VLAN_INFO_KEY    key                 READ
uint16                  mapped_svid             RW         /* mapped svid */
uint16                  mapped_cvid             RW         /* mapped svid */
vlan_bmp_t              raw_vid_bmp             RW         /* raw vlan bmp */
[MASTER]
ctclib_hash_t           *mapped_vlan_info_hash
ctclib_slist_t          *mapped_vlan_info_list
--------------------------------------------------------------------------------
[TBL]
TBL_L2_PROTOCOL    l2_protocol        HASH+LIST     switch
[KEY]
char                    name[GLB_L2_PROTOCOL_NAME_SIZE+1]
[DATA]
TBL_L2_PROTOCOL_KEY  key                 READ
mac_addr_t              	protocol_mac        RW         /* Protocol mac address */
mac_addr_t              	group_mac			RW         /* Group mac adresss */
uint32						is_standard_pro		RW		   /* when is_standard_pro is 1, then is l2 protocol is standard protocol*/
uint32						protocol_index		RW		   /* l2 protocol index*/
[MASTER]
ctclib_hash_t           *l2_protocol_hash
ctclib_slist_t          *l2_protocol_list
--------------------------------------------------------------------------------
[TBL]
TBL_ND_FIB                    nd_fib                            HASH+LIST          routed 
[KEY]
nd_prefix_key_t
[DATA]
TBL_ND_FIB_KEY              key                               READ
uint32                             ifindex                           RW         /* interface index */
char                                ifname[IFNAME_SIZE]      RW         /* interface name */
mac_addr_t                      mac_addr                       READ      /* nd entry mac address */
uint32                             state                             RW         /* nd entry state */
FLAGS32                          flags                             FLAGS      /* nd entry flags */
sal_time_t                       uptime                          READ       /* time stamp as to when the entry was last created */
uint32                            probes                            RW          /* numbers have probed */
ctc_task_t                      *t_timer                          READ       /* nd entry timer */
uint32                            ipackets                          RW          /* the number of incoming ND packets */
uint32                            opackets                         RW           /* the number of outgoing ND packets */
uint32                            route_ref                         RW          /* number of active route relation to this neigh */
uint32                            is_static_route_dup      READ
addr_ipv6_t                    staic_route_dup_ipv6_nh    READ
[FLAGS]
flags                              permanent                      GLB_ND_FLAG_PERMANENT          RW
flags                              dynamic                          GLB_ND_FLAG_DYNAMIC              RW
flags                              active                             GLB_ND_FLAG_ACTIVE                RW
flags                              router                             GLB_ND_FLAG_ROUTER               RW
flags                              fdb_age                          GLB_ND_FLAG_FDB_AGE              RW
[MASTER]
ctclib_hash_t                  *neighbor_hash
ctclib_slist_t                   *neighbor_list
--------------------------------------------------------------------------------
[TBL]
TBL_ND_STATS                nd_stats                      GLOBAL       routed
[DATA]
uint64                             rcv                        RW      /* number of received packets */
uint64                             rcv_error                RW      /* number of received error packets */
uint64                             rcv_tooshort           RW      /* number of received too short packets */
uint64                             rcv_invalid             RW      /* number of received invalid packets */
uint64                             rcv_inconsistent      RW     /* number of received inconsistent packets */
uint64                             rcv_rs                    RW     /* number of received rs packets */
uint64                             rcv_ra                    RW     /* number of received ra packets */
uint64                             rcv_ns                    RW     /* number of received ns packets */
uint64                             rcv_na                    RW     /* number of received na packets */
uint64                             rcv_redirect             RW     /* number of received redirect packets */
uint64                             overflow_failed        RW     /* number of received packets discard when overflow */
uint64                             rcv_miss                 RW     /* number of kernel trigger nd learning */
uint64                             rcv_miss_conflict      RW     /* number of no matched ifc when kernel trigger nd learning */
uint64                             rcv_static_conflict     RW     /* number of static nd entry exist when kernel trigger nd learning */
uint64                             allocs                      RW     /* number of allocated neighs */
uint64                             destroys                  RW     /* number of destroyed neighs */
uint64                             error                       RW    /* number of nd entry state error */
uint64                             intf_invalid              RW     /* number of invalid interface from kernel */ 
uint64                             res_failed                RW     /* number of failed resolutions */
uint64                             rcv_probes_mcast     RW     /* number of received mcast ipv6 */
uint64                             rcv_probes_ucast      RW     /* number of received ucast ipv6 */
uint64                             snd_solicited_na       RW     /* number of solicited NA */
uint64                             snd_unsolicited_na    RW     /* number of unsolicited NA */
uint64                             snd_dad_ns              RW     /* number of DAD NS */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_CPU_MIRROR_GLOBAL              cpu_mirror             GLOBAL       fea
[DATA]
uint32                             strategy               RW      /* strategy: replace or drop */
uint32                             buf_size               RW
ctclib_slist_t                    *buf_list               READ
uint32                             write_file             RW
uint64                             flash_size_threshold   RW
sal_mutex_t                       *buf_mutex              READ
void                              *capture_fp             READ
ctc_task_t                        *capture_timer          READ
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_TAP_SERVER                     tap_srv                GLOBAL       fea
[DATA]
int32                              server_sock            READ
int32                              client_sock            READ
addr_ipv4_t                        peer_addr              READ
sal_time_t                         lastread               READ
uint32                             debug                  RW
addr_ipv4_t                        client_peer_addr       RW
uint32                             client_test            RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_DHCPV6_DEBUG          dhcpv6_debug      GLOBAL       dhcrelay,dhclient,dhcsnooping,dhcpd6,dhclient6
[KEY]
[DATA]
FLAGS32                 flags           FLAGS           /* bitmap of DHCDV6BG_FLAG_ */
[FLAGS]
flags                   clientv6_error          DHCPV6DBG_FLAG_CLIENTV6_ERROR        RW
flags                   clientv6_events        DHCPV6DBG_FLAG_CLIENTV6_EVENTS       RW
flags                   clientv6_packet        DHCPV6DBG_FLAG_CLIENTV6_PACKET       RW
flags                   clientv6_dump          DHCPV6DBG_FLAG_CLIENTV6_DUMP         RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_L2EDIT                 l2edit                     HASH            openflow,switch
[KEY]
l2edit_key_t                                  /* src mac address and dest mac address and vlan id */
[DATA]
TBL_L2EDIT_KEY             key                     READ
uint32                             count                  RW
[FLAGS]
[MASTER]
ctclib_hash_t           *l2edit_hash
--------------------------------------------------------------------------------
[TBL]
TBL_HASH_FIELD_PROFILE    		hash_field_profile    				HASH+LIST     switch
[KEY]
char                            name[HASH_FIELD_PROFILE_NAME_SIZE+1]
[DATA]
TBL_HASH_FIELD_PROFILE_KEY      key                             READ
char							description[DESC_SIZE]			RW
uint32							bitmap_data						RW
uint32							flag							RW
uint32							index							RW
uint32							l2_set							RW
uint32							ip_set							RW
uint32							ipv6_set						RW
uint32							gre_set							RW
uint32							nvgre_set						RW
uint32							mpls_set						RW
uint32							vpws_set						RW
uint32							l3vpn_set						RW
uint32							vxlan_set						RW
uint32							vpls_set						RW
uint32							hash_arithmetic					RW
uint32							hash_seed_value					RW
uint32							mode_symmetry					RW
uint32							bitmap_disable					RW

[MASTER]
ctclib_hash_t                   *hash_field_profile_hash
ctclib_slist_t                  *hash_field_profile_list
--------------------------------------------------------------------------------
[TBL]
TBL_HASH_VALUE_PROFILE    		hash_value_profile    			HASH+LIST     switch
[KEY]
char                            name[HASH_VALUE_PROFILE_NAME_SIZE+1]
[DATA]
TBL_HASH_VALUE_PROFILE_KEY      key                             READ
char							description[DESC_SIZE]			RW
uint32							bitmap_data						RW
uint32							bitmap_command					RW
uint32							index							RW
uint32							agg_all					    	RW
uint32							agg_input						RW
uint32							agg_static						RW
uint32							agg_dynamic						RW
uint32							agg_resilient					RW
uint32							ecmp_all						RW
uint32							ecmp_static						RW
uint32							ecmp_static_l3					RW
uint32							ecmp_static_mpls			    RW
uint32							ecmp_static_nvgre				RW
uint32							ecmp_static_vxlan				RW
uint32							ecmp_dynamic					RW
uint32							ecmp_dynamic_flow_id			RW
uint32							ref_cnt							RW

[MASTER]
ctclib_hash_t                   *hash_value_profile_hash
ctclib_slist_t                  *hash_value_profile_list
--------------------------------------------------------------------------------
[TBL]
TBL_HASH_VALUE_GLOBAL           hash_value_global      		GLOBAL       switch
[DATA]
uint32							bitmap_data						RW
uint32							bitmap_command					RW
uint32							agg_hash					    RW
uint32							ecmp_all						RW
uint32							ecmp_static						RW
uint32							ecmp_static_l3					RW
uint32							ecmp_static_mpls			    RW
uint32							ecmp_static_nvgre				RW
uint32							ecmp_static_vxlan				RW
uint32							ecmp_dynamic					RW
uint32							ecmp_dynamic_flow_id			RW
uint32							lbid							RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_NAT_GLOBAL          nat_glb                 GLOBAL          routed,switch
[KEY]
[DATA]
uint32          timeout                                 RW
uint32          timeout_icmp                            RW
uint32          timeout_tcp                             RW
uint32          timeout_udp                             RW
uint32          session_limit                           RW
uint32          nft_hdl                                 RW
uint32          nft_hdl_upstream_if                     RW
uint32          nft_hdl_connlimit_post                  RW
uint32          nft_hdl_connlimit_pre                   RW
uint32          nft_hdl_upstream_filter_nat_rule        RW
ctclib_opb_t    rule_id_opb                             READ
ctclib_opb_t    session_id_opb                          READ
ctclib_opb_t    category_id_opb                         READ
ctc_task_t     *aging_timer                             READ
uint32          timer_mark                              RW
void           *nfct_handle                             RW
uint64          rule_cfg_order                          RW
uint32          session_cnt_upstream                    RW
uint32          session_cnt_dnstream                    RW
uint32          session_fast_fwd_cnt_upstream           RW
uint32          session_fast_fwd_cnt_dnstream           RW
uint32          nfct_kernel_notify_add_cnt              RW
uint32          nfct_kernel_notify_del_cnt              RW
uint32          nfct_notify_kernel_add_cnt              RW
uint32          nfct_notify_kernel_del_cnt              RW
uint32          session_aging_del_cnt                   RW
uint32          session_aging_upd_ttl_cnt               RW
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_NAT_POOL         nat_pool            HASH+LIST          routed 
[KEY]
char                 name[GLB_NAT_POOL_NAME_LEN+1]
[DATA]
TBL_NAT_POOL_KEY     key                READ
addr_t               ip_lo              RW    /* IP low, configured*/
addr_t               ip_hi              RW    /* IP high, configured*/
addr_t               ip_mask            RW    /* IP mask, configured*/
char                 refer_oif[IFNAME_SIZE+1] RW    /* nat outside interface name, find it by ip*/
[FLAGS]
[MASTER]
ctclib_hash_t       *nat_pool_hash
ctclib_slist_t      *nat_pool_list
--------------------------------------------------------------------------------
[TBL]
TBL_NAT_RULE         nat_rule                            HASH+LIST          routed 
[KEY]
nat_rule_key_t
[DATA]
TBL_NAT_RULE_KEY     key                                    READ
uint32               handle_postrouting                     RW
uint32               handle_prerouting                      RW
uint32               category_id                            RW              /* oif category id, save it for latter use*/
char                 refer_iif[IFNAME_SIZE+1]               RW              /* if configured local ip in NAT rule, find the correspoding iif and save it here for later use*/
char                 refer_oif[IFNAME_SIZE+1]               RW              /* if configured pool in NAT rule, or global IP, find the correspoding oif and save it here for later use*/
uint32               nft_chain_id_acl                       RW
uint32               nft_chain_id_rule_pre                  RW
uint32               nft_chain_id_rule_post                 RW
uint64               cfg_order                              RW
[FLAGS]
[MASTER]
ctclib_hash_t          *nat_rule_hash
ctclib_slist_t         *nat_rule_list
--------------------------------------------------------------------------------
[TBL]
TBL_NAT_SESSION         nat_session            HASH+LIST          routed 
[KEY]
nat_session_key_t
[DATA]
TBL_NAT_SESSION_KEY     key                    READ
uint32                  id                     RW
sal_time_t              timestamp              RW /* time when the session created*/
sal_time_t              hit                    RW /* time when the session hit*/
sal_time_t              upd_kernel_ttl_time    RW /* time when update kernel ttl*/
uint32                  ttl                    RW
uint32                  iif_index              RW
uint32                  oif_index              RW
char                    helper[NAT_HELPER_NAME_SIZE] RW
uint8                   slow_path_fwd          RW  /* TRUE/FLASE, ICMP and ALG NAT flows should be forwarded by kernel*/
uint8                   creator                RW  /* refer to GLB_NAT_SESSION_CREATOR_E*/
uint8                   set_sai_status         RW  /* if set sai failed, must be exceed chip limit.*/
[FLAGS]
[MASTER]
ctclib_hash_t          *nat_session_hash
ctclib_slist_t         *nat_session_list
--------------------------------------------------------------------------------
[TBL]
TBL_NAT_SESSION_LIMIT   nat_session_limit      HASH+LIST          routed 
[KEY]
addr_t
[DATA]
TBL_NAT_SESSION_LIMIT_KEY     key                    READ
uint32                        limit                  RW
uint32                        count_upstream         RW
uint32                        count_dnstream         RW
uint32                        nft_hdl_post           RW
uint32                        nft_hdl_pre            RW
[FLAGS]
[MASTER]
ctclib_hash_t          *nat_session_limit_hash
ctclib_slist_t         *nat_session_limit_list
--------------------------------------------------------------------------------
[TBL]
TBL_NAT_PROXY_ARP   nat_proxy_arp      HASH+LIST          routed 
[KEY]
nat_proxy_arp_key_t
[DATA]
TBL_NAT_PROXY_ARP_KEY         key                    READ
uint32                        enable                 RW
[FLAGS]
[MASTER]
ctclib_hash_t          *nat_proxy_arp_hash
ctclib_slist_t         *nat_proxy_arp_list
--------------------------------------------------------------------------------
[TBL]
TBL_NAT_RTIF_INSIDE  nat_rtif_inside            HASH+LIST          routed 
[KEY]
char                 name[IFNAME_SIZE]
[DATA]
TBL_NAT_RTIF_INSIDE_KEY    key                     READ
[FLAGS]
[MASTER]
ctclib_hash_t       *nat_rtif_inside_hash
ctclib_slist_t      *nat_rtif_inside_list
--------------------------------------------------------------------------------
[TBL]
TBL_NAT_RTIF_OUTSIDE nat_rtif_outside           HASH+LIST          routed 
[KEY]
char                 name[IFNAME_SIZE]
[DATA]
TBL_NAT_RTIF_OUTSIDE_KEY    key                     READ
[FLAGS]
[MASTER]
ctclib_hash_t       *nat_rtif_outside_hash
ctclib_slist_t      *nat_rtif_outside_list
--------------------------------------------------------------------------------
[TBL]
TBL_G8032_RING                   g8032_ring                     HASH+LIST       all
[KEY]
uint32                   ring_id           /* Ring Id */
[DATA]
TBL_G8032_RING_KEY      key                             READ
uint8                   rpl_owner                                           RW            /* RPL owner */
uint8                   rpl_neighbor                                            RW            /* RPL neighbor */
uint8                   rpl_next_neighbor                                           RW        /* RPL next neighbor */
uint32                  ring_level_id                                           RW            /* RPL owner */
uint32                  protection_en                                      RW            /* Ring level id */
uint32                 config_sync                                      RW            /* Ring level id */
uint32                  aps_protection_en                                      RW            /* Ring level id */
uint32                  protection_time                                   RW            /*Protection switch time */
uint8                   mode_revertive                                RW			/*Revertive mode*/
uint8                   virtual_channel                                RW			/*Virtual channel*/
uint32                  g8032_major_ring_id                           RW           /*If is a sub ring, the sub ring's  major ring */
uint8                   is_sub_ring                                    RW			/* Is sub-ring */
uint32                  instance_count                                RW			/* Instance count */
uint32                  instance[G8032_MAX_INSTANCE]                                    RW			/* Instance id arry */
uint32                  sub_ring_id[GLB_G8032_MAX_SUB_RINGS]          RW           /*If not a sub ring, List of sub rings which the ring has*/
uint8                    is_local_fs                                                 RW
uint8                    is_local_ms                                                 RW
uint32                  east_port_ifindex                                 RW            /* East interface */
uint8                    east_port_is_rpl                                   RW            /* East interface is RPL */
uint8                    east_port_is_rpl_neighbor                     RW            /* East interface is RPL neighbor */
uint8                    east_port_is_rpl_next_neighbor             RW            /* East interface is RPL next neighbor */
uint8                    east_port_is_force_switch                     RW            /* East interface is force switch */
uint8                    east_port_is_manual_switch                 RW            /* East interface is manual switch */
uint8                    east_port_is_blocked                            RW            /* Blocking east interface*/
uint8                    east_port_flush_fdb                            RW 
uint8                    east_port_is_fail                            RW 
uint8                   east_port_rec_node_id[6]						RW
uint8                   east_port_rec_bpr                             RW
uint32                  west_port_ifindex                                 RW           /* West interface */
uint8                    west_port_is_rpl                                   RW          /* West interface is RPL */
uint8                    west_port_is_rpl_neighbor                     RW          /* West interface is RPL neighbor */
uint8                    west_port_is_rpl_next_neighbor             RW          /* West interface is RPL next neighbor */
uint8                    west_port_is_force_switch                     RW           /* West interface is force switch */
uint8                    west_port_is_manual_switch                 RW           /* West interface is manual switch */
uint8                    west_port_is_blocked                            RW          /* Blocking west interface*/
uint8                    west_port_flush_fdb                            RW
uint8                    west_port_is_fail                            RW
uint8                    west_port_rec_node_id[6]						RW
uint8                    west_port_rec_bpr                             RW
uint32                  control_vlan                                         RW           /* R-APS channel VLAN */
uint8                    is_sub_control_vlan                              RW           /* Is a subring R-APS channel VLAN */
uint8                    is_fwdtocpu                                          RW           /* Is R-APS message foward to cpu */
uint8                    raps_mel                                              RW            /* R-APS MEL value */
uint8                    raps_dnf                                              RW            /* R-APS Do not flush fdb */
uint8                    protection_trigger                                 RW            /* Protection switch trigger */
vlan_bmp_t          vlan                                                     RW            /* List of vlans which the ring has */
vid_t                    primary_vlan                                        RW            /* Primary Vlan of the ring, it's used by CFM */
uint16                  current_node_state                               RW            /* Ring state node */
uint32                  priority_request                                    RW            /* Ring request message */
uint8                    hold_off_expired                                   RW            /* Indicates whether hold-off expires of not */
uint32                  wtr_timeout_val                                   RW             /* Wait-to-restore timeout value  */
uint32                  wtb_timeout_val                                   RW             
uint32                  guard_timeout_val                                RW            /* Gard timer timeout value  */
uint32                  hold_off_timeout_val                             RW            /* Hold off timer timeout value */
uint32                  flush_fdb_timeout_val                           RW             /* Flush fdb timer timeout value */
char                     cfm_md_name[CFM_MD_NAME_MAX_LENGTH_8021AG+1]       RW     /* CFM MD name */ 
char                     cfm_ma_name[CFM_MA_NAME_MAX_LENGTH_8021AG+1]       RW     /* CFM MA name */
uint16                  level                                                     RW           /* CFM MD level */
uint16                  vlan_id                                                 RW           /* CFM MA vlan id */ 
uint16                  east_interface_cfm_state                       RW           /* CFM cc state for east interface */
uint16                  west_interface_cfm_state                       RW           /* CFM cc state for west interface */
ctc_task_t            *p_raps_tx_while                                   READ          /* Retransmission timer */
ctc_task_t            *p_wtr_while                                         READ          /* Wait-to-restore timer */
ctc_task_t            *p_wtb_while                                         READ          /* Wait-to-block timer */
ctc_task_t            *p_hold_off_while                                  READ          /* Hold-off timer */
ctc_task_t            *p_guard_while                                      READ          /* Guard-off timer */
ctc_task_t            *p_flush_fdb_while                                 READ          /* Configuration complete */
ctc_task_t            *p_tx_raps_nr_while                                READ        /*Timer to transmit raps_nr packets */
ctc_task_t            *p_tx_raps_sf_while                                READ        /*Timer to transmit raps_sf packets */ 
ctc_task_t            *p_tx_raps_fs_while                                READ        /*Timer to transmit raps_fs packets */  
ctc_task_t            *p_tx_raps_ms_while                                READ        /*Timer to transmit raps_ms packets */  
ctc_task_t            *p_tx_raps_nr_nb_while                             READ        /*Timer to transmit raps_nr_nb packets */ 
[MASTER]
ctclib_hash_t         *g8032_ring_hash
ctclib_slist_t          *g8032_ring_list
--------------------------------------------------------------------------------
[TBL]
TBL_CFM_GLOBAL          cfm_glb                 GLOBAL          all
[KEY]
[DATA]
uint8                    cfm_enable                  RW              /* cfm enable */
uint8                    cfm_mode                    RW              /* 802.1ag or Y.1731 */
[MASTER]
--------------------------------------------------------------------------------
[TBL]
TBL_CFM_MD      md                    HASH+LIST       all
[KEY]
char                    name[CFM_MD_NAME_MAX_LENGTH_8021AG+1]
[DATA]
TBL_CFM_MD_KEY       key                     READ
uint32                 level                    RW                /* MD Level */
uint8                   name_type          RW                 /* MD name type */
char                    pkt_name[CFM_MD_NAME_MAX_LENGTH_8021AG+1]      RW    /* valid when md name type is dns/string/mac address */  
uint8                   pkt_name_length  RW               /* Packet md name length */
char                    pkt_name_input[CFM_MD_NAME_MAX_LENGTH_8021AG+1]      RW    /* valid when md name type is dns/string/mac address */  
uint32                 service_number    RW                /* Service number */
REFERLIST_DS_CFM_ERROR     cfm_error                SUB
[MASTER]
ctclib_hash_t         *cfm_md_hash
ctclib_slist_t          *cfm_md_list
--------------------------------------------------------------------------------
[TBL]
TBL_CFM_MA      ma                    HASH+LIST       all
[KEY]
cfm_ma_key_t
[DATA]
TBL_CFM_MA_KEY       key                     READ
char                    name[CFM_MA_NAME_MAX_LENGTH_8021AG+1]       RW     /* MA name */
uint8                   name_type                  RW                 /* MA name type */
uint8                   cci_enabled                 RW                 /* CCM enabled */
uint8                   ccm_vlan_cos              RW                 /* Vlan priority of CCM packets */
char                    pkt_name[CFM_MA_NAME_MAX_LENGTH_8021AG+1]      RW    /* valid when ma name type is string/icc-based */  
char                    maid[CFM_MAID_MAX_LENGTH+1]       RW          /* maid */
uint8                   error_write_disable      RW                /* Reserve error write disable */
uint8                   error_number              RW
[MASTER]
ctclib_hash_t         *cfm_ma_hash
ctclib_slist_t          *cfm_ma_list
--------------------------------------------------------------------------------
[TBL]
TBL_CFM_MAID      maid                    HASH+LIST       all
[KEY]
char                    name[CFM_MAID_MAX_LENGTH+1]
[DATA]
TBL_CFM_MAID_KEY       key                     READ
[MASTER]
ctclib_hash_t         *cfm_maid_hash
ctclib_slist_t          *cfm_maid_list
--------------------------------------------------------------------------------
[TBL]
TBL_CFM_LMEP      lmep                    HASH+LIST       all
[KEY]
cfm_lmep_key_t
[DATA]
TBL_CFM_LMEP_KEY       key                     READ
uint32                   mep_id               RW                    /* MEP ID */
char                      maid[CFM_MAID_MAX_LENGTH+1]       RW          /* maid */
char                      md_name[CFM_MD_NAME_MAX_LENGTH_8021AG+1]         RW      /* Domain name */
uint8                     direction             RW                    /* Up or down */
uint8                     d_unexp_mep     RW                    /* Incorrect MEP ID */
uint8                     d_mismerge        RW                   /* Incorrect MAID */
uint8                     d_meg_lvl           RW                   /* Low level */ 
uint8                     cci_enabled         RW                   /* CCM enabled */
uint8                     cci_interval         RW                   /* CC interval */
uint8                     rdi                       RW                 /* Remote Defect Indication */
char                      ifname[IFNAME_SIZE]   RW         /* Interface name */
mac_addr_t           if_mac_addr                  RW         /* Interface mac address */
uint8                     ccm_vlan_cos               RW         /* Vlan priority of CCM packets */
uint32                   ring_id                         RW          /* G8032 Ring Id */
uint32                   mep_index                   RW          /* Mep index */
uint32                   rmep_num                   RW          /* Remote mep number for this local mep */
[MASTER]
ctclib_hash_t         *cfm_lmep_hash
ctclib_slist_t          *cfm_lmep_list
--------------------------------------------------------------------------------
[TBL]
TBL_CFM_RMEP      rmep                    HASH+LIST       all
[KEY]
cfm_rmep_key_t
[DATA]
TBL_CFM_RMEP_KEY       key                     READ 
uint32                   ifindex                         RW          /* The interface which RMEP locates */
char                      md_name[CFM_MD_NAME_MAX_LENGTH_8021AG+1]         RW      /* Domain name */
char                      maid[CFM_MAID_MAX_LENGTH+1]       RW          /* maid */
mac_addr_t           mac_addr                     READ       /* Remote mep mac address */
uint8                     first_pkt_rx                  RW          /* Receive first correct packet */
uint8                     d_loc                            RW         /* Don't receive ccm packets in 3.5 */
uint8                     d_unexp_period            RW         /* Incorrect ccm period */
uint8                     ma_sa_mismatch          RW         /* Incorrect source mac address for RMEP */
uint8                     rmep_last_rdi               RW         /* Remote last rdi */
char                      ifname[IFNAME_SIZE]   RW         /* Interface name */
uint32                   local_mep_id               RW          /* Local MEP ID */
[MASTER]
ctclib_hash_t         *cfm_rmep_hash
ctclib_slist_t          *cfm_rmep_list
--------------------------------------------------------------------------------
[TBL]
TBL_PIM_SM              pim_sm                      HASH+LIST           routed
[KEY]
uint32                  id
[DATA]
TBL_PIM_SM_KEY          key                         READ
pim_static_rp_addr_t        rp_addr                     RW
uint32              hello_time                  RW
uint8               spt_infinity                    RW
uint32              jp_timer                    RW
[MASTER]
ctclib_hash_t           *pim_sm_hash
ctclib_slist_t          *pim_sm_list
--------------------------------------------------------------------------------
[TBL] 
TBL_PIM_SM_BSR          pim_sm_bsr              HASH+LIST          routed 
[KEY] 
char                    name[IFNAME_SIZE] 
[DATA] 
TBL_PIM_SM_BSR_KEY      key                         READ 
uint32                  priority                    RW
uint32                  interval                    RW
uint32                  dr_pri                      RW
[MASTER] 
ctclib_hash_t           *pim_sm_bsr_hash 
ctclib_slist_t          *pim_sm_bsr_list
--------------------------------------------------------------------------------
[TBL] 
TBL_PIM_SM_RP           pim_sm_rp               HASH+LIST          routed 
[KEY] 
char                    name[IFNAME_SIZE] 
[DATA] 
TBL_PIM_SM_RP_KEY       key                         READ 
uint32                  priority                    RW
uint32                  interval                    RW        
[MASTER] 
ctclib_hash_t           *pim_sm_rp_hash 
ctclib_slist_t          *pim_sm_rp_list
--------------------------------------------------------------------------------
[TBL]
TBL_PIM_SM_RP_GP                pim_sm_rp_gp            HASH+LIST           routed
[KEY]
uint32                  id
[DATA]
TBL_PIM_SM_RP_GP_KEY            key                         READ
pim_sm_gprefix_t        group_prefix                RW
[MASTER]
ctclib_hash_t           *pim_sm_rp_gp_hash
ctclib_slist_t          *pim_sm_rp_gp_list
--------------------------------------------------------------------------------
[TBL]
TBL_PIM_DM              pim_dm                      HASH+LIST           routed
[KEY]
uint32                  id
[DATA]
TBL_PIM_DM_KEY          key                         READ
[MASTER]
ctclib_hash_t           *pim_dm_hash
ctclib_slist_t          *pim_dm_list
--------------------------------------------------------------------------------
[TBL]                                               /*add by zhw for igmp intf*/            
TBL_IGMP_INTF           igmp_intf                      HASH+LIST       routed
[KEY]                                                          
char                    name[IFNAME_SIZE]                      
[DATA]                                                         
TBL_IGMP_INTF_KEY       key                             READ   
uint32                  querier_timeout                  RW              /* querier - enable */
uint32                  query_interval                  RW              /* querier - query internal */
uint32                  robustness_variable             RW     
uint32                  layer3_protocol_index           RW              /*igmp on parameter*/
uint32                  layer3_protocol                 RW              /*igmp on parameter*/
uint32                  entry_valid                     RW              /*igmp on parameter*/
uint32                  action_index                    RW              /*igmp on parameter*/
uint32                  last_member_query_count         RW     
uint32                  last_member_query_interval      RW     
uint32                  global_limit_number             RW              /*global groups limit number,1-8192*/
[MASTER]                                                      
ctclib_hash_t           *igmp_intf_hash                       
ctclib_slist_t          *igmp_intf_list                       
--------------------------------------------------------------------------------
[TBL] 
TBL_RIP        			rip                  		HASH+LIST          routed 
[KEY] 
uint32					id 
[DATA] 
TBL_RIP_KEY				key							READ 
uint8					version		 				READ 
uint8					allow_ecmp		 			READ 
rip_timers_t			timers 						READ 
uint32					default_information			READ 
uint32					redistribute				READ 
uint32					red_metric[RT_ROUTE_MAX]	READ 
uint32					default_metric				READ 
uint8					passive_if_default			READ 
[MASTER] 
ctclib_hash_t           *rip_hash 
ctclib_slist_t    		*rip_list
--------------------------------------------------------------------------------
[TBL] 
TBL_RIPNG        		ripng                  		HASH+LIST          routed 
[KEY] 
uint32					id 
[DATA] 
TBL_RIPNG_KEY			key							READ 
uint8					allow_ecmp		 			READ 
rip_timers_t			timers 						READ 
uint32					default_information			READ 
uint32					redistribute				READ 
uint32					red_metric[RT_ROUTE_MAX]	READ 
uint32					default_metric				READ 
[MASTER] 
ctclib_hash_t           *ripng_hash 
ctclib_slist_t    		*ripng_list
-------------------------------------------------------------------------------- 
[TBL] 
TBL_RIP_NETWORK        	rip_network            		HASH+LIST          routed 
[KEY] 
prefix_t 
[DATA] 
TBL_RIP_NETWORK_KEY		key							READ 
[MASTER] 
ctclib_hash_t           *rip_network_hash 
ctclib_slist_t          *rip_network_list
-------------------------------------------------------------------------------- 
[TBL] 
TBL_RIPNG_NETWORK        ripng_network            		HASH+LIST          routed 
[KEY] 
prefix_t 
[DATA] 
TBL_RIPNG_NETWORK_KEY	key							READ 
[MASTER] 
ctclib_hash_t           *ripng_network_hash 
ctclib_slist_t          *ripng_network_list
-------------------------------------------------------------------------------- 
[TBL] 
TBL_RIP_NEIGHBOR       	rip_neighbor          		HASH+LIST          routed 
[KEY] 
addr_t 
[DATA] 
TBL_RIP_NEIGHBOR_KEY	key							READ 
[MASTER] 
ctclib_hash_t           *rip_neighbor_hash 
ctclib_slist_t          *rip_neighbor_list
-------------------------------------------------------------------------------- 
[TBL] 
TBL_RIP_PASSIVE_IF      rip_passive_if        		HASH+LIST          routed 
[KEY] 
char                    name[IFNAME_SIZE] 
[DATA] 
TBL_RIP_PASSIVE_IF_KEY	key							READ 
[MASTER] 
ctclib_hash_t           *rip_passive_if_hash 
ctclib_slist_t          *rip_passive_if_list
--------------------------------------------------------------------------------
[TBL] 
TBL_RIPNG_PASSIVE_IF    ripng_passive_if        		HASH+LIST          routed 
[KEY] 
char                    name[IFNAME_SIZE] 
[DATA] 
TBL_RIPNG_PASSIVE_IF_KEY	key							READ 
[MASTER] 
ctclib_hash_t           *ripng_passive_if_hash 
ctclib_slist_t          *ripng_passive_if_list
--------------------------------------------------------------------------------
[TBL] 
TBL_OSPF_AREA_STUB      ospf_area_stub          HASH+LIST          routed 
[KEY] 
uint32					areaid
[DATA] 
TBL_OSPF_AREA_STUB_KEY	key						READ 
char                    no_summary 				RW        /* no summary flag */
[MASTER] 
ctclib_hash_t           *ospf_area_stub_hash 
ctclib_slist_t          *ospf_area_stub_list
--------------------------------------------------------------------------------
[TBL] 
TBL_OSPF6_AREA_STUB      ospf6_area_stub          HASH+LIST          routed 
[KEY] 
uint32					areaid
[DATA] 
TBL_OSPF6_AREA_STUB_KEY	key						READ 
char                    no_summary 				RW        /* no summary flag */
[MASTER] 
ctclib_hash_t           *ospf6_area_stub_hash 
ctclib_slist_t          *ospf6_area_stub_list
--------------------------------------------------------------------------------
[TBL] 
TBL_OSPF_AREA_NSSA      ospf_area_nssa          HASH+LIST          routed 
[KEY] 
uint32					areaid
[DATA] 
TBL_OSPF_AREA_NSSA_KEY	key						READ
ospf_nssa_translate_role_t  nssa_role           RW        /* NSSA-ABR translate role */ 
char                    no_summary 				RW        /* no summary flag */
[MASTER] 
ctclib_hash_t           *ospf_area_nssa_hash 
ctclib_slist_t          *ospf_area_nssa_list
--------------------------------------------------------------------------------
[TBL] 
TBL_OSPF_AREA_VLINK     ospf_area_vlink         HASH+LIST          routed 
[KEY] 
ospf_area_vlink_key_t 
[DATA] 
TBL_OSPF_AREA_VLINK_KEY	key						READ
char                    auth_flag 				RW        /* authentication flag */
ospf_vlink_auth_type_t  auth_type               RW        /* Authehntication type */
char                    auth_key[10]            RW        /* simple password */
uint32                  md5_id                  RW        /* Cryptographic key ID */
char                    md5_key[20]		        RW        /* MD5 authentication key */
uint32                  hello_interval		    RW
uint32                  dead_interval		    RW
uint32                  retransmit_interval	    RW
uint32                  transmit_delay		    RW
[MASTER] 
ctclib_hash_t           *ospf_area_vlink_hash 
ctclib_slist_t          *ospf_area_vlink_list
--------------------------------------------------------------------------------
