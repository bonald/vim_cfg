/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ds.proto */

#ifndef PROTOBUF_C_ds_2eproto__INCLUDED
#define PROTOBUF_C_ds_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "common.pb-c.h"
#include "tbl.pb-c.h"

typedef struct _Cdb__DsBrgif Cdb__DsBrgif;
typedef struct _Cdb__DsAclqosIf Cdb__DsAclqosIf;
typedef struct _Cdb__DsLag Cdb__DsLag;
typedef struct _Cdb__DsLacp Cdb__DsLacp;
typedef struct _Cdb__DsConnectedKey Cdb__DsConnectedKey;
typedef struct _Cdb__DsConnected Cdb__DsConnected;
typedef struct _Cdb__DsConnectedV6Key Cdb__DsConnectedV6Key;
typedef struct _Cdb__DsConnectedV6 Cdb__DsConnectedV6;
typedef struct _Cdb__DsStaticRouteDupIpv4NhKey Cdb__DsStaticRouteDupIpv4NhKey;
typedef struct _Cdb__DsStaticRouteDupIpv4Nh Cdb__DsStaticRouteDupIpv4Nh;
typedef struct _Cdb__DsOspfAuthKey Cdb__DsOspfAuthKey;
typedef struct _Cdb__DsOspfAuth Cdb__DsOspfAuth;
typedef struct _Cdb__DsStormControl Cdb__DsStormControl;
typedef struct _Cdb__DsOpenflowIf Cdb__DsOpenflowIf;
typedef struct _Cdb__DsDhclientIf Cdb__DsDhclientIf;
typedef struct _Cdb__DsPvlanCommunityKey Cdb__DsPvlanCommunityKey;
typedef struct _Cdb__DsPvlanCommunity Cdb__DsPvlanCommunity;
typedef struct _Cdb__DsCircuitIdKey Cdb__DsCircuitIdKey;
typedef struct _Cdb__DsCircuitId Cdb__DsCircuitId;
typedef struct _Cdb__DsFlushFdb Cdb__DsFlushFdb;
typedef struct _Cdb__DsLldpNeighbour Cdb__DsLldpNeighbour;
typedef struct _Cdb__DsMrouterPortKey Cdb__DsMrouterPortKey;
typedef struct _Cdb__DsMrouterPort Cdb__DsMrouterPort;
typedef struct _Cdb__DsQueryKey Cdb__DsQueryKey;
typedef struct _Cdb__DsQuery Cdb__DsQuery;
typedef struct _Cdb__DsL2protocolKey Cdb__DsL2protocolKey;
typedef struct _Cdb__DsL2protocol Cdb__DsL2protocol;
typedef struct _Cdb__DsNdPrefix Cdb__DsNdPrefix;
typedef struct _Cdb__DsJoinGroupKey Cdb__DsJoinGroupKey;
typedef struct _Cdb__DsJoinGroup Cdb__DsJoinGroup;
typedef struct _Cdb__DsCfmError Cdb__DsCfmError;


/* --- enums --- */


/* --- messages --- */

/*
 * TBL_INTERFACE DS_BRGIF
 */
struct  _Cdb__DsBrgif
{
  ProtobufCMessage base;
  Cdb__TblInterfaceKey *parent_if;
  uint32_t pvid;
  uint32_t inner_native_vid;
  uint32_t qinq_type;
  uint32_t qinq_default_fwd;
  uint32_t vlan_translation_en;
  uint32_t vlan_trans_default_fwd;
  char *vlan_mapping_table;
  uint32_t dot1q_tag_native_en;
  Cdb__ComposeBrgAllowedVlanT *allowed_vlan;
  uint32_t ingress_filter;
  uint32_t egress_filter;
  uint32_t tpid_type;
  uint32_t mac_learning_en;
  uint32_t oper_mac_learning_en;
  uint32_t port_security_en;
  uint32_t violate_mode;
  uint32_t mlag_is_peer_link;
  uint32_t mlag_is_port_block;
  uint32_t mlag_is_group;
  uint32_t max_mac;
  Cdb__ComposeBrgAllowedVlanT *untagged_vlan;
};
#define CDB__DS_BRGIF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_brgif__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, NULL, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL }


/*
 * TBL_INTERFACE DS_ACLQOS_IF
 */
struct  _Cdb__DsAclqosIf
{
  ProtobufCMessage base;
  Cdb__TblInterfaceKey *parent_if;
  uint32_t default_cos;
  uint32_t domain;
  uint32_t trust;
  uint32_t replace;
  uint32_t shape_pir;
  uint32_t queue_stats_enable;
  char *input_policy_map;
  char *output_policy_map;
  char *input_policer;
  char *output_policer;
  size_t n_queue_shape_profile;
  char **queue_shape_profile;
  size_t n_queue_drop_profile;
  char **queue_drop_profile;
  size_t n_queue_class;
  uint32_t *queue_class;
  size_t n_queue_weight;
  uint32_t *queue_weight;
  size_t n_queue_drop_mode;
  uint32_t *queue_drop_mode;
  size_t n_queue_ecn_enable;
  uint32_t *queue_ecn_enable;
  size_t n_queue_transimt_pkt;
  uint32_t *queue_transimt_pkt;
  size_t n_queue_transimt_byte;
  uint32_t *queue_transimt_byte;
  size_t n_queue_drop_pkt;
  uint32_t *queue_drop_pkt;
  size_t n_queue_drop_byte;
  uint32_t *queue_drop_byte;
  uint64_t queue0_transimt_pkt;
  uint64_t queue0_transimt_byte;
  uint64_t queue0_drop_pkt;
  uint64_t queue0_drop_byte;
  uint64_t queue1_transimt_pkt;
  uint64_t queue1_transimt_byte;
  uint64_t queue1_drop_pkt;
  uint64_t queue1_drop_byte;
  uint64_t queue2_transimt_pkt;
  uint64_t queue2_transimt_byte;
  uint64_t queue2_drop_pkt;
  uint64_t queue2_drop_byte;
  uint64_t queue3_transimt_pkt;
  uint64_t queue3_transimt_byte;
  uint64_t queue3_drop_pkt;
  uint64_t queue3_drop_byte;
  uint64_t queue4_transimt_pkt;
  uint64_t queue4_transimt_byte;
  uint64_t queue4_drop_pkt;
  uint64_t queue4_drop_byte;
  uint64_t queue5_transimt_pkt;
  uint64_t queue5_transimt_byte;
  uint64_t queue5_drop_pkt;
  uint64_t queue5_drop_byte;
  uint64_t queue6_transimt_pkt;
  uint64_t queue6_transimt_byte;
  uint64_t queue6_drop_pkt;
  uint64_t queue6_drop_byte;
  uint64_t queue7_transimt_pkt;
  uint64_t queue7_transimt_byte;
  uint64_t queue7_drop_pkt;
  uint64_t queue7_drop_byte;
  uint32_t phb_enable;
};
#define CDB__DS_ACLQOS_IF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_aclqos_if__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, NULL, NULL, NULL, NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * TBL_INTERFACE DS_LAG
 */
struct  _Cdb__DsLag
{
  ProtobufCMessage base;
  Cdb__TblInterfaceKey *parent_if;
  uint32_t mode;
  uint32_t lag_id;
  uint32_t oper_state;
  uint32_t mismatch;
  int32_t bundle_ports_count;
  uint32_t load_balance_mode;
  uint32_t is_active_backup_mode;
  uint32_t max_active_number;
  uint32_t cur_active_number;
  uint32_t cur_active_max_priority;
};
#define CDB__DS_LAG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_lag__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * TBL_INTERFACE DS_LACP
 */
struct  _Cdb__DsLacp
{
  ProtobufCMessage base;
  Cdb__TblInterfaceKey *parent_if;
  uint32_t actor_port_priority;
  uint32_t actor_oper_port_key;
  uint32_t actor_port_number;
  uint32_t short_timeout;
  uint32_t actor_oper_port_state;
  uint32_t partner_admin_system_priority;
  Cdb__ComposeMacAddrT *partner_admin_system;
  uint32_t partner_admin_key;
  uint32_t partner_admin_port_priority;
  uint32_t partner_admin_port_number;
  uint32_t partner_admin_port_state;
  uint32_t partner_oper_system_priority;
  Cdb__ComposeMacAddrT *partner_oper_system;
  uint32_t partner_oper_key;
  uint32_t partner_oper_port_priority;
  uint32_t partner_oper_port_number;
  uint32_t partner_oper_port_state;
  uint32_t tx_lacp_count;
  uint32_t tx_error_count;
  uint32_t rx_lacp_count;
  uint32_t rx_error_count;
  uint32_t mlag_id;
  uint32_t ntt;
  uint32_t lacp_enabled;
  uint32_t ready_n;
  uint32_t port_moved;
  uint32_t periodic_tx_state;
  uint32_t receive_state;
  uint32_t mux_state;
  uint32_t selected;
};
#define CDB__DS_LACP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_lacp__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * TBL_ROUTE_IF DS_CONNECTED
 */
struct  _Cdb__DsConnectedKey
{
  ProtobufCMessage base;
  Cdb__ComposePrefixT *address;
};
#define CDB__DS_CONNECTED_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_connected_key__descriptor) \
    , NULL }


struct  _Cdb__DsConnected
{
  ProtobufCMessage base;
  Cdb__TblRouteIfKey *parent_rtif;
  Cdb__DsConnectedKey *key;
  Cdb__ComposePrefixT *destination;
  uint32_t flags_secondary;
  uint32_t flags_anycast;
  uint32_t flags_virtual;
  uint32_t flags_duplicate;
  uint32_t installed;
};
#define CDB__DS_CONNECTED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_connected__descriptor) \
    , NULL, NULL, NULL, 0, 0, 0, 0, 0 }


/*
 * TBL_ROUTE_IF DS_CONNECTED_V6
 */
struct  _Cdb__DsConnectedV6Key
{
  ProtobufCMessage base;
  Cdb__ComposePrefixT *address;
};
#define CDB__DS_CONNECTED_V6_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_connected_v6_key__descriptor) \
    , NULL }


struct  _Cdb__DsConnectedV6
{
  ProtobufCMessage base;
  Cdb__TblRouteIfKey *parent_rtif;
  Cdb__DsConnectedV6Key *key;
  Cdb__ComposePrefixT *destination;
  uint32_t flags_secondary;
  uint32_t flags_anycast;
  uint32_t flags_virtual;
  uint32_t flags_duplicate;
  uint32_t flags_v6_global;
  uint32_t flags_v6_linklocal;
  uint32_t flags_v6_auto_linklocal;
  uint32_t flags_v6_global_eui64;
  uint32_t flags_v6_dad_in_progress;
  uint32_t flags_v6_na_in_progress;
  uint32_t flags_v6_configured;
  uint32_t flags_v6_real;
  uint32_t installed;
  char *ifname;
  uint32_t ifindex;
  uint32_t dad_ns_send;
  uint32_t unsolicited_na;
};
#define CDB__DS_CONNECTED_V6__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_connected_v6__descriptor) \
    , NULL, NULL, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0, 0 }


/*
 * TBL_ARP DS_STATIC_ROUTE_DUP_IPV4_NH
 */
struct  _Cdb__DsStaticRouteDupIpv4NhKey
{
  ProtobufCMessage base;
  Cdb__ComposeAddrIpv4T *address;
};
#define CDB__DS_STATIC_ROUTE_DUP_IPV4_NH_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_static_route_dup_ipv4_nh_key__descriptor) \
    , NULL }


struct  _Cdb__DsStaticRouteDupIpv4Nh
{
  ProtobufCMessage base;
  Cdb__TblArpKey *parent_arp;
  Cdb__DsStaticRouteDupIpv4NhKey *key;
};
#define CDB__DS_STATIC_ROUTE_DUP_IPV4_NH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_static_route_dup_ipv4_nh__descriptor) \
    , NULL, NULL }


/*
 * TBL_ROUTE_IF DS_OSPF_AUTH
 */
struct  _Cdb__DsOspfAuthKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__DS_OSPF_AUTH_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_ospf_auth_key__descriptor) \
    , 0 }


struct  _Cdb__DsOspfAuth
{
  ProtobufCMessage base;
  Cdb__TblRouteIfKey *parent_rtif;
  Cdb__DsOspfAuthKey *key;
  char *ospf_auth_md5_key;
};
#define CDB__DS_OSPF_AUTH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_ospf_auth__descriptor) \
    , NULL, NULL, NULL }


/*
 * TBL_INTERFACE DS_STORM_CONTROL
 */
struct  _Cdb__DsStormControl
{
  ProtobufCMessage base;
  Cdb__TblInterfaceKey *parent_if;
  uint32_t bcast_mode;
  uint32_t mcast_mode;
  uint32_t ucast_mode;
  uint32_t bcast_rate;
  uint32_t mcast_rate;
  uint32_t ucast_rate;
};
#define CDB__DS_STORM_CONTROL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_storm_control__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0 }


/*
 * TBL_INTERFACE DS_OPENFLOW_IF
 */
struct  _Cdb__DsOpenflowIf
{
  ProtobufCMessage base;
  Cdb__TblInterfaceKey *parent_if;
  uint32_t enable;
  uint32_t obey_vlan_filter;
};
#define CDB__DS_OPENFLOW_IF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_openflow_if__descriptor) \
    , NULL, 0, 0 }


/*
 * TBL_INTERFACE DS_DHCLIENT_IF
 */
struct  _Cdb__DsDhclientIf
{
  ProtobufCMessage base;
  Cdb__TblInterfaceKey *parent_if;
  uint32_t requested_flags;
  uint32_t lease;
  uint32_t status;
  uint32_t option;
  uint32_t client_flags;
  char *client_id;
  uint32_t class_flags;
  char *class_id;
  char *hostname;
  uint32_t iana_t1;
  uint32_t iana_t2;
};
#define CDB__DS_DHCLIENT_IF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_dhclient_if__descriptor) \
    , NULL, 0, 0, 0, 0, 0, NULL, 0, NULL, NULL, 0, 0 }


/*
 * TBL_PVLAN DS_PVLAN_COMMUNITY
 */
struct  _Cdb__DsPvlanCommunityKey
{
  ProtobufCMessage base;
  uint32_t community_vid;
};
#define CDB__DS_PVLAN_COMMUNITY_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_pvlan_community_key__descriptor) \
    , 0 }


struct  _Cdb__DsPvlanCommunity
{
  ProtobufCMessage base;
  Cdb__TblPvlanKey *parent_pvlan;
  Cdb__DsPvlanCommunityKey *key;
  uint32_t group_id;
};
#define CDB__DS_PVLAN_COMMUNITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_pvlan_community__descriptor) \
    , NULL, NULL, 0 }


/*
 * TBL_INTERFACE DS_CIRCUIT_ID
 */
struct  _Cdb__DsCircuitIdKey
{
  ProtobufCMessage base;
  uint32_t vid;
};
#define CDB__DS_CIRCUIT_ID_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_circuit_id_key__descriptor) \
    , 0 }


struct  _Cdb__DsCircuitId
{
  ProtobufCMessage base;
  Cdb__TblInterfaceKey *parent_if;
  Cdb__DsCircuitIdKey *key;
  char *circuit;
};
#define CDB__DS_CIRCUIT_ID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_circuit_id__descriptor) \
    , NULL, NULL, NULL }


/*
 * TBL_L2_ACTION DS_FLUSH_FDB
 */
struct  _Cdb__DsFlushFdb
{
  ProtobufCMessage base;
  uint32_t type;
  uint32_t subtype;
  uint32_t mode;
  uint32_t ifindex;
  uint32_t vid;
  Cdb__ComposeMacAddrT *mac;
};
#define CDB__DS_FLUSH_FDB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_flush_fdb__descriptor) \
    , 0, 0, 0, 0, 0, NULL }


/*
 * TBL_LLDP_IF DS_LLDP_NEIGHBOUR
 */
struct  _Cdb__DsLldpNeighbour
{
  ProtobufCMessage base;
  Cdb__TblLldpIfKey *parent_lldp_if;
  Cdb__ComposeLldpMsapIdT *key;
  uint32_t rx_ifindex;
  Cdb__ComposeMacAddrT *mac_addr;
  uint32_t rx_ttl;
  uint32_t chassis_id_sub_type;
  uint32_t port_id_sub_type;
  char *system_name;
  char *system_desc;
  char *port_desc;
  char *ifname;
  char *vlan_name;
  uint32_t vlan_id;
  uint32_t sys_cap;
  uint32_t sys_cap_en;
  char *mant_addr;
  char *oid;
  uint32_t oid_len;
  uint32_t mgmt_addr_sub_type;
  uint32_t if_numbering;
  uint32_t if_number;
  uint32_t pvid;
  uint32_t ppvid_flag;
  uint32_t ppvid;
  uint32_t protocol_id;
  uint32_t autonego_support;
  uint32_t autonego_cap;
  uint32_t oper_mau_type;
  uint32_t link_aggr_status;
  uint32_t link_aggr_id;
  uint32_t max_frame_size;
  uint32_t power_flag;
  uint32_t power_pair;
  uint32_t power_class;
  uint32_t med_capbility;
  uint32_t med_dev_type;
  uint32_t med_policy_flag;
  uint32_t med_power_flag;
  uint32_t med_power_value;
  uint32_t med_lci_format;
  char *med_hard_ver;
  char *med_firm_ver;
  char *med_soft_ver;
  char *med_serial_ver;
  char *med_manufac_ver;
  char *med_moname_ver;
  char *med_asset_ver;
  char *med_lci_coordinate;
  char *med_lci_elin;
  Cdb__ComposeLldpCivicAddressT *med_lci_civic;
};
#define CDB__DS_LLDP_NEIGHBOUR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_lldp_neighbour__descriptor) \
    , NULL, NULL, 0, NULL, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, 0, 0, 0, NULL, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * TBL_IGSP_INTF DS_MROUTER_PORT
 */
struct  _Cdb__DsMrouterPortKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__DS_MROUTER_PORT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_mrouter_port_key__descriptor) \
    , NULL }


struct  _Cdb__DsMrouterPort
{
  ProtobufCMessage base;
  Cdb__TblIgspIntfKey *parent_if;
  Cdb__DsMrouterPortKey *key;
  uint32_t type;
  Cdb__ComposeSalTimeT *uptime;
};
#define CDB__DS_MROUTER_PORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_mrouter_port__descriptor) \
    , NULL, NULL, 0, NULL }


/*
 * TBL_IGSP_INTF DS_QUERY
 */
struct  _Cdb__DsQueryKey
{
  ProtobufCMessage base;
  Cdb__ComposeAddrIpv4T *group;
};
#define CDB__DS_QUERY_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_query_key__descriptor) \
    , NULL }


struct  _Cdb__DsQuery
{
  ProtobufCMessage base;
  Cdb__TblIgspIntfKey *parent_if;
  Cdb__DsQueryKey *key;
  uint32_t max_resp_time;
  uint32_t vid;
};
#define CDB__DS_QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_query__descriptor) \
    , NULL, NULL, 0, 0 }


/*
 * TBL_INTERFACE DS_L2PROTOCOL
 */
struct  _Cdb__DsL2protocolKey
{
  ProtobufCMessage base;
  char *l2pro_name;
};
#define CDB__DS_L2PROTOCOL_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_l2protocol_key__descriptor) \
    , NULL }


struct  _Cdb__DsL2protocol
{
  ProtobufCMessage base;
  Cdb__TblInterfaceKey *parent_if;
  Cdb__DsL2protocolKey *key;
  uint32_t is_standard_pro;
  uint32_t l2pro_action;
  uint32_t l2pro_vlan;
  char *l2pro_evc_name;
};
#define CDB__DS_L2PROTOCOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_l2protocol__descriptor) \
    , NULL, NULL, 0, 0, 0, NULL }


/*
 * TBL_ROUTE_IF DS_ND_PREFIX
 */
struct  _Cdb__DsNdPrefix
{
  ProtobufCMessage base;
  Cdb__TblRouteIfKey *parent_rtif;
  Cdb__ComposeNdPrefixKeyT *key;
  uint32_t config;
  uint32_t vlifetime;
  uint32_t plifetime;
  uint32_t onlink;
  uint32_t autoconfig;
};
#define CDB__DS_ND_PREFIX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_nd_prefix__descriptor) \
    , NULL, NULL, 0, 0, 0, 0, 0 }


/*
 * TBL_IGSP_INTF DS_JOIN_GROUP
 */
struct  _Cdb__DsJoinGroupKey
{
  ProtobufCMessage base;
  Cdb__ComposeAddrIpv4T *group;
};
#define CDB__DS_JOIN_GROUP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_join_group_key__descriptor) \
    , NULL }


struct  _Cdb__DsJoinGroup
{
  ProtobufCMessage base;
  Cdb__TblIgspIntfKey *parent_if;
  Cdb__DsJoinGroupKey *key;
  uint32_t vid;
  uint32_t type;
};
#define CDB__DS_JOIN_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_join_group__descriptor) \
    , NULL, NULL, 0, 0 }


/*
 * TBL_CFM_MD DS_CFM_ERROR
 */
struct  _Cdb__DsCfmError
{
  ProtobufCMessage base;
  Cdb__TblCfmMdKey *parent_md;
  Cdb__ComposeCfmTimeKeyT *key;
  uint32_t level;
  uint32_t vlan_id;
  char *md_name;
  uint32_t mep_id;
  uint32_t err_reason;
  Cdb__ComposeMacAddrT *rmep_mac;
};
#define CDB__DS_CFM_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__ds_cfm_error__descriptor) \
    , NULL, NULL, 0, 0, NULL, 0, 0, NULL }


/* Cdb__DsBrgif methods */
void   cdb__ds_brgif__init
                     (Cdb__DsBrgif         *message);
size_t cdb__ds_brgif__get_packed_size
                     (const Cdb__DsBrgif   *message);
size_t cdb__ds_brgif__pack
                     (const Cdb__DsBrgif   *message,
                      uint8_t             *out);
size_t cdb__ds_brgif__pack_to_buffer
                     (const Cdb__DsBrgif   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsBrgif *
       cdb__ds_brgif__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_brgif__free_unpacked
                     (Cdb__DsBrgif *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsAclqosIf methods */
void   cdb__ds_aclqos_if__init
                     (Cdb__DsAclqosIf         *message);
size_t cdb__ds_aclqos_if__get_packed_size
                     (const Cdb__DsAclqosIf   *message);
size_t cdb__ds_aclqos_if__pack
                     (const Cdb__DsAclqosIf   *message,
                      uint8_t             *out);
size_t cdb__ds_aclqos_if__pack_to_buffer
                     (const Cdb__DsAclqosIf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsAclqosIf *
       cdb__ds_aclqos_if__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_aclqos_if__free_unpacked
                     (Cdb__DsAclqosIf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsLag methods */
void   cdb__ds_lag__init
                     (Cdb__DsLag         *message);
size_t cdb__ds_lag__get_packed_size
                     (const Cdb__DsLag   *message);
size_t cdb__ds_lag__pack
                     (const Cdb__DsLag   *message,
                      uint8_t             *out);
size_t cdb__ds_lag__pack_to_buffer
                     (const Cdb__DsLag   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsLag *
       cdb__ds_lag__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_lag__free_unpacked
                     (Cdb__DsLag *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsLacp methods */
void   cdb__ds_lacp__init
                     (Cdb__DsLacp         *message);
size_t cdb__ds_lacp__get_packed_size
                     (const Cdb__DsLacp   *message);
size_t cdb__ds_lacp__pack
                     (const Cdb__DsLacp   *message,
                      uint8_t             *out);
size_t cdb__ds_lacp__pack_to_buffer
                     (const Cdb__DsLacp   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsLacp *
       cdb__ds_lacp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_lacp__free_unpacked
                     (Cdb__DsLacp *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsConnectedKey methods */
void   cdb__ds_connected_key__init
                     (Cdb__DsConnectedKey         *message);
size_t cdb__ds_connected_key__get_packed_size
                     (const Cdb__DsConnectedKey   *message);
size_t cdb__ds_connected_key__pack
                     (const Cdb__DsConnectedKey   *message,
                      uint8_t             *out);
size_t cdb__ds_connected_key__pack_to_buffer
                     (const Cdb__DsConnectedKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsConnectedKey *
       cdb__ds_connected_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_connected_key__free_unpacked
                     (Cdb__DsConnectedKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsConnected methods */
void   cdb__ds_connected__init
                     (Cdb__DsConnected         *message);
size_t cdb__ds_connected__get_packed_size
                     (const Cdb__DsConnected   *message);
size_t cdb__ds_connected__pack
                     (const Cdb__DsConnected   *message,
                      uint8_t             *out);
size_t cdb__ds_connected__pack_to_buffer
                     (const Cdb__DsConnected   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsConnected *
       cdb__ds_connected__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_connected__free_unpacked
                     (Cdb__DsConnected *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsConnectedV6Key methods */
void   cdb__ds_connected_v6_key__init
                     (Cdb__DsConnectedV6Key         *message);
size_t cdb__ds_connected_v6_key__get_packed_size
                     (const Cdb__DsConnectedV6Key   *message);
size_t cdb__ds_connected_v6_key__pack
                     (const Cdb__DsConnectedV6Key   *message,
                      uint8_t             *out);
size_t cdb__ds_connected_v6_key__pack_to_buffer
                     (const Cdb__DsConnectedV6Key   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsConnectedV6Key *
       cdb__ds_connected_v6_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_connected_v6_key__free_unpacked
                     (Cdb__DsConnectedV6Key *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsConnectedV6 methods */
void   cdb__ds_connected_v6__init
                     (Cdb__DsConnectedV6         *message);
size_t cdb__ds_connected_v6__get_packed_size
                     (const Cdb__DsConnectedV6   *message);
size_t cdb__ds_connected_v6__pack
                     (const Cdb__DsConnectedV6   *message,
                      uint8_t             *out);
size_t cdb__ds_connected_v6__pack_to_buffer
                     (const Cdb__DsConnectedV6   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsConnectedV6 *
       cdb__ds_connected_v6__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_connected_v6__free_unpacked
                     (Cdb__DsConnectedV6 *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsStaticRouteDupIpv4NhKey methods */
void   cdb__ds_static_route_dup_ipv4_nh_key__init
                     (Cdb__DsStaticRouteDupIpv4NhKey         *message);
size_t cdb__ds_static_route_dup_ipv4_nh_key__get_packed_size
                     (const Cdb__DsStaticRouteDupIpv4NhKey   *message);
size_t cdb__ds_static_route_dup_ipv4_nh_key__pack
                     (const Cdb__DsStaticRouteDupIpv4NhKey   *message,
                      uint8_t             *out);
size_t cdb__ds_static_route_dup_ipv4_nh_key__pack_to_buffer
                     (const Cdb__DsStaticRouteDupIpv4NhKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsStaticRouteDupIpv4NhKey *
       cdb__ds_static_route_dup_ipv4_nh_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_static_route_dup_ipv4_nh_key__free_unpacked
                     (Cdb__DsStaticRouteDupIpv4NhKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsStaticRouteDupIpv4Nh methods */
void   cdb__ds_static_route_dup_ipv4_nh__init
                     (Cdb__DsStaticRouteDupIpv4Nh         *message);
size_t cdb__ds_static_route_dup_ipv4_nh__get_packed_size
                     (const Cdb__DsStaticRouteDupIpv4Nh   *message);
size_t cdb__ds_static_route_dup_ipv4_nh__pack
                     (const Cdb__DsStaticRouteDupIpv4Nh   *message,
                      uint8_t             *out);
size_t cdb__ds_static_route_dup_ipv4_nh__pack_to_buffer
                     (const Cdb__DsStaticRouteDupIpv4Nh   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsStaticRouteDupIpv4Nh *
       cdb__ds_static_route_dup_ipv4_nh__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_static_route_dup_ipv4_nh__free_unpacked
                     (Cdb__DsStaticRouteDupIpv4Nh *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsOspfAuthKey methods */
void   cdb__ds_ospf_auth_key__init
                     (Cdb__DsOspfAuthKey         *message);
size_t cdb__ds_ospf_auth_key__get_packed_size
                     (const Cdb__DsOspfAuthKey   *message);
size_t cdb__ds_ospf_auth_key__pack
                     (const Cdb__DsOspfAuthKey   *message,
                      uint8_t             *out);
size_t cdb__ds_ospf_auth_key__pack_to_buffer
                     (const Cdb__DsOspfAuthKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsOspfAuthKey *
       cdb__ds_ospf_auth_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_ospf_auth_key__free_unpacked
                     (Cdb__DsOspfAuthKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsOspfAuth methods */
void   cdb__ds_ospf_auth__init
                     (Cdb__DsOspfAuth         *message);
size_t cdb__ds_ospf_auth__get_packed_size
                     (const Cdb__DsOspfAuth   *message);
size_t cdb__ds_ospf_auth__pack
                     (const Cdb__DsOspfAuth   *message,
                      uint8_t             *out);
size_t cdb__ds_ospf_auth__pack_to_buffer
                     (const Cdb__DsOspfAuth   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsOspfAuth *
       cdb__ds_ospf_auth__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_ospf_auth__free_unpacked
                     (Cdb__DsOspfAuth *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsStormControl methods */
void   cdb__ds_storm_control__init
                     (Cdb__DsStormControl         *message);
size_t cdb__ds_storm_control__get_packed_size
                     (const Cdb__DsStormControl   *message);
size_t cdb__ds_storm_control__pack
                     (const Cdb__DsStormControl   *message,
                      uint8_t             *out);
size_t cdb__ds_storm_control__pack_to_buffer
                     (const Cdb__DsStormControl   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsStormControl *
       cdb__ds_storm_control__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_storm_control__free_unpacked
                     (Cdb__DsStormControl *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsOpenflowIf methods */
void   cdb__ds_openflow_if__init
                     (Cdb__DsOpenflowIf         *message);
size_t cdb__ds_openflow_if__get_packed_size
                     (const Cdb__DsOpenflowIf   *message);
size_t cdb__ds_openflow_if__pack
                     (const Cdb__DsOpenflowIf   *message,
                      uint8_t             *out);
size_t cdb__ds_openflow_if__pack_to_buffer
                     (const Cdb__DsOpenflowIf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsOpenflowIf *
       cdb__ds_openflow_if__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_openflow_if__free_unpacked
                     (Cdb__DsOpenflowIf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsDhclientIf methods */
void   cdb__ds_dhclient_if__init
                     (Cdb__DsDhclientIf         *message);
size_t cdb__ds_dhclient_if__get_packed_size
                     (const Cdb__DsDhclientIf   *message);
size_t cdb__ds_dhclient_if__pack
                     (const Cdb__DsDhclientIf   *message,
                      uint8_t             *out);
size_t cdb__ds_dhclient_if__pack_to_buffer
                     (const Cdb__DsDhclientIf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsDhclientIf *
       cdb__ds_dhclient_if__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_dhclient_if__free_unpacked
                     (Cdb__DsDhclientIf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsPvlanCommunityKey methods */
void   cdb__ds_pvlan_community_key__init
                     (Cdb__DsPvlanCommunityKey         *message);
size_t cdb__ds_pvlan_community_key__get_packed_size
                     (const Cdb__DsPvlanCommunityKey   *message);
size_t cdb__ds_pvlan_community_key__pack
                     (const Cdb__DsPvlanCommunityKey   *message,
                      uint8_t             *out);
size_t cdb__ds_pvlan_community_key__pack_to_buffer
                     (const Cdb__DsPvlanCommunityKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsPvlanCommunityKey *
       cdb__ds_pvlan_community_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_pvlan_community_key__free_unpacked
                     (Cdb__DsPvlanCommunityKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsPvlanCommunity methods */
void   cdb__ds_pvlan_community__init
                     (Cdb__DsPvlanCommunity         *message);
size_t cdb__ds_pvlan_community__get_packed_size
                     (const Cdb__DsPvlanCommunity   *message);
size_t cdb__ds_pvlan_community__pack
                     (const Cdb__DsPvlanCommunity   *message,
                      uint8_t             *out);
size_t cdb__ds_pvlan_community__pack_to_buffer
                     (const Cdb__DsPvlanCommunity   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsPvlanCommunity *
       cdb__ds_pvlan_community__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_pvlan_community__free_unpacked
                     (Cdb__DsPvlanCommunity *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsCircuitIdKey methods */
void   cdb__ds_circuit_id_key__init
                     (Cdb__DsCircuitIdKey         *message);
size_t cdb__ds_circuit_id_key__get_packed_size
                     (const Cdb__DsCircuitIdKey   *message);
size_t cdb__ds_circuit_id_key__pack
                     (const Cdb__DsCircuitIdKey   *message,
                      uint8_t             *out);
size_t cdb__ds_circuit_id_key__pack_to_buffer
                     (const Cdb__DsCircuitIdKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsCircuitIdKey *
       cdb__ds_circuit_id_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_circuit_id_key__free_unpacked
                     (Cdb__DsCircuitIdKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsCircuitId methods */
void   cdb__ds_circuit_id__init
                     (Cdb__DsCircuitId         *message);
size_t cdb__ds_circuit_id__get_packed_size
                     (const Cdb__DsCircuitId   *message);
size_t cdb__ds_circuit_id__pack
                     (const Cdb__DsCircuitId   *message,
                      uint8_t             *out);
size_t cdb__ds_circuit_id__pack_to_buffer
                     (const Cdb__DsCircuitId   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsCircuitId *
       cdb__ds_circuit_id__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_circuit_id__free_unpacked
                     (Cdb__DsCircuitId *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsFlushFdb methods */
void   cdb__ds_flush_fdb__init
                     (Cdb__DsFlushFdb         *message);
size_t cdb__ds_flush_fdb__get_packed_size
                     (const Cdb__DsFlushFdb   *message);
size_t cdb__ds_flush_fdb__pack
                     (const Cdb__DsFlushFdb   *message,
                      uint8_t             *out);
size_t cdb__ds_flush_fdb__pack_to_buffer
                     (const Cdb__DsFlushFdb   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsFlushFdb *
       cdb__ds_flush_fdb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_flush_fdb__free_unpacked
                     (Cdb__DsFlushFdb *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsLldpNeighbour methods */
void   cdb__ds_lldp_neighbour__init
                     (Cdb__DsLldpNeighbour         *message);
size_t cdb__ds_lldp_neighbour__get_packed_size
                     (const Cdb__DsLldpNeighbour   *message);
size_t cdb__ds_lldp_neighbour__pack
                     (const Cdb__DsLldpNeighbour   *message,
                      uint8_t             *out);
size_t cdb__ds_lldp_neighbour__pack_to_buffer
                     (const Cdb__DsLldpNeighbour   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsLldpNeighbour *
       cdb__ds_lldp_neighbour__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_lldp_neighbour__free_unpacked
                     (Cdb__DsLldpNeighbour *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsMrouterPortKey methods */
void   cdb__ds_mrouter_port_key__init
                     (Cdb__DsMrouterPortKey         *message);
size_t cdb__ds_mrouter_port_key__get_packed_size
                     (const Cdb__DsMrouterPortKey   *message);
size_t cdb__ds_mrouter_port_key__pack
                     (const Cdb__DsMrouterPortKey   *message,
                      uint8_t             *out);
size_t cdb__ds_mrouter_port_key__pack_to_buffer
                     (const Cdb__DsMrouterPortKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsMrouterPortKey *
       cdb__ds_mrouter_port_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_mrouter_port_key__free_unpacked
                     (Cdb__DsMrouterPortKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsMrouterPort methods */
void   cdb__ds_mrouter_port__init
                     (Cdb__DsMrouterPort         *message);
size_t cdb__ds_mrouter_port__get_packed_size
                     (const Cdb__DsMrouterPort   *message);
size_t cdb__ds_mrouter_port__pack
                     (const Cdb__DsMrouterPort   *message,
                      uint8_t             *out);
size_t cdb__ds_mrouter_port__pack_to_buffer
                     (const Cdb__DsMrouterPort   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsMrouterPort *
       cdb__ds_mrouter_port__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_mrouter_port__free_unpacked
                     (Cdb__DsMrouterPort *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsQueryKey methods */
void   cdb__ds_query_key__init
                     (Cdb__DsQueryKey         *message);
size_t cdb__ds_query_key__get_packed_size
                     (const Cdb__DsQueryKey   *message);
size_t cdb__ds_query_key__pack
                     (const Cdb__DsQueryKey   *message,
                      uint8_t             *out);
size_t cdb__ds_query_key__pack_to_buffer
                     (const Cdb__DsQueryKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsQueryKey *
       cdb__ds_query_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_query_key__free_unpacked
                     (Cdb__DsQueryKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsQuery methods */
void   cdb__ds_query__init
                     (Cdb__DsQuery         *message);
size_t cdb__ds_query__get_packed_size
                     (const Cdb__DsQuery   *message);
size_t cdb__ds_query__pack
                     (const Cdb__DsQuery   *message,
                      uint8_t             *out);
size_t cdb__ds_query__pack_to_buffer
                     (const Cdb__DsQuery   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsQuery *
       cdb__ds_query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_query__free_unpacked
                     (Cdb__DsQuery *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsL2protocolKey methods */
void   cdb__ds_l2protocol_key__init
                     (Cdb__DsL2protocolKey         *message);
size_t cdb__ds_l2protocol_key__get_packed_size
                     (const Cdb__DsL2protocolKey   *message);
size_t cdb__ds_l2protocol_key__pack
                     (const Cdb__DsL2protocolKey   *message,
                      uint8_t             *out);
size_t cdb__ds_l2protocol_key__pack_to_buffer
                     (const Cdb__DsL2protocolKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsL2protocolKey *
       cdb__ds_l2protocol_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_l2protocol_key__free_unpacked
                     (Cdb__DsL2protocolKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsL2protocol methods */
void   cdb__ds_l2protocol__init
                     (Cdb__DsL2protocol         *message);
size_t cdb__ds_l2protocol__get_packed_size
                     (const Cdb__DsL2protocol   *message);
size_t cdb__ds_l2protocol__pack
                     (const Cdb__DsL2protocol   *message,
                      uint8_t             *out);
size_t cdb__ds_l2protocol__pack_to_buffer
                     (const Cdb__DsL2protocol   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsL2protocol *
       cdb__ds_l2protocol__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_l2protocol__free_unpacked
                     (Cdb__DsL2protocol *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsNdPrefix methods */
void   cdb__ds_nd_prefix__init
                     (Cdb__DsNdPrefix         *message);
size_t cdb__ds_nd_prefix__get_packed_size
                     (const Cdb__DsNdPrefix   *message);
size_t cdb__ds_nd_prefix__pack
                     (const Cdb__DsNdPrefix   *message,
                      uint8_t             *out);
size_t cdb__ds_nd_prefix__pack_to_buffer
                     (const Cdb__DsNdPrefix   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsNdPrefix *
       cdb__ds_nd_prefix__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_nd_prefix__free_unpacked
                     (Cdb__DsNdPrefix *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsJoinGroupKey methods */
void   cdb__ds_join_group_key__init
                     (Cdb__DsJoinGroupKey         *message);
size_t cdb__ds_join_group_key__get_packed_size
                     (const Cdb__DsJoinGroupKey   *message);
size_t cdb__ds_join_group_key__pack
                     (const Cdb__DsJoinGroupKey   *message,
                      uint8_t             *out);
size_t cdb__ds_join_group_key__pack_to_buffer
                     (const Cdb__DsJoinGroupKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsJoinGroupKey *
       cdb__ds_join_group_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_join_group_key__free_unpacked
                     (Cdb__DsJoinGroupKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsJoinGroup methods */
void   cdb__ds_join_group__init
                     (Cdb__DsJoinGroup         *message);
size_t cdb__ds_join_group__get_packed_size
                     (const Cdb__DsJoinGroup   *message);
size_t cdb__ds_join_group__pack
                     (const Cdb__DsJoinGroup   *message,
                      uint8_t             *out);
size_t cdb__ds_join_group__pack_to_buffer
                     (const Cdb__DsJoinGroup   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsJoinGroup *
       cdb__ds_join_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_join_group__free_unpacked
                     (Cdb__DsJoinGroup *message,
                      ProtobufCAllocator *allocator);
/* Cdb__DsCfmError methods */
void   cdb__ds_cfm_error__init
                     (Cdb__DsCfmError         *message);
size_t cdb__ds_cfm_error__get_packed_size
                     (const Cdb__DsCfmError   *message);
size_t cdb__ds_cfm_error__pack
                     (const Cdb__DsCfmError   *message,
                      uint8_t             *out);
size_t cdb__ds_cfm_error__pack_to_buffer
                     (const Cdb__DsCfmError   *message,
                      ProtobufCBuffer     *buffer);
Cdb__DsCfmError *
       cdb__ds_cfm_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__ds_cfm_error__free_unpacked
                     (Cdb__DsCfmError *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cdb__DsBrgif_Closure)
                 (const Cdb__DsBrgif *message,
                  void *closure_data);
typedef void (*Cdb__DsAclqosIf_Closure)
                 (const Cdb__DsAclqosIf *message,
                  void *closure_data);
typedef void (*Cdb__DsLag_Closure)
                 (const Cdb__DsLag *message,
                  void *closure_data);
typedef void (*Cdb__DsLacp_Closure)
                 (const Cdb__DsLacp *message,
                  void *closure_data);
typedef void (*Cdb__DsConnectedKey_Closure)
                 (const Cdb__DsConnectedKey *message,
                  void *closure_data);
typedef void (*Cdb__DsConnected_Closure)
                 (const Cdb__DsConnected *message,
                  void *closure_data);
typedef void (*Cdb__DsConnectedV6Key_Closure)
                 (const Cdb__DsConnectedV6Key *message,
                  void *closure_data);
typedef void (*Cdb__DsConnectedV6_Closure)
                 (const Cdb__DsConnectedV6 *message,
                  void *closure_data);
typedef void (*Cdb__DsStaticRouteDupIpv4NhKey_Closure)
                 (const Cdb__DsStaticRouteDupIpv4NhKey *message,
                  void *closure_data);
typedef void (*Cdb__DsStaticRouteDupIpv4Nh_Closure)
                 (const Cdb__DsStaticRouteDupIpv4Nh *message,
                  void *closure_data);
typedef void (*Cdb__DsOspfAuthKey_Closure)
                 (const Cdb__DsOspfAuthKey *message,
                  void *closure_data);
typedef void (*Cdb__DsOspfAuth_Closure)
                 (const Cdb__DsOspfAuth *message,
                  void *closure_data);
typedef void (*Cdb__DsStormControl_Closure)
                 (const Cdb__DsStormControl *message,
                  void *closure_data);
typedef void (*Cdb__DsOpenflowIf_Closure)
                 (const Cdb__DsOpenflowIf *message,
                  void *closure_data);
typedef void (*Cdb__DsDhclientIf_Closure)
                 (const Cdb__DsDhclientIf *message,
                  void *closure_data);
typedef void (*Cdb__DsPvlanCommunityKey_Closure)
                 (const Cdb__DsPvlanCommunityKey *message,
                  void *closure_data);
typedef void (*Cdb__DsPvlanCommunity_Closure)
                 (const Cdb__DsPvlanCommunity *message,
                  void *closure_data);
typedef void (*Cdb__DsCircuitIdKey_Closure)
                 (const Cdb__DsCircuitIdKey *message,
                  void *closure_data);
typedef void (*Cdb__DsCircuitId_Closure)
                 (const Cdb__DsCircuitId *message,
                  void *closure_data);
typedef void (*Cdb__DsFlushFdb_Closure)
                 (const Cdb__DsFlushFdb *message,
                  void *closure_data);
typedef void (*Cdb__DsLldpNeighbour_Closure)
                 (const Cdb__DsLldpNeighbour *message,
                  void *closure_data);
typedef void (*Cdb__DsMrouterPortKey_Closure)
                 (const Cdb__DsMrouterPortKey *message,
                  void *closure_data);
typedef void (*Cdb__DsMrouterPort_Closure)
                 (const Cdb__DsMrouterPort *message,
                  void *closure_data);
typedef void (*Cdb__DsQueryKey_Closure)
                 (const Cdb__DsQueryKey *message,
                  void *closure_data);
typedef void (*Cdb__DsQuery_Closure)
                 (const Cdb__DsQuery *message,
                  void *closure_data);
typedef void (*Cdb__DsL2protocolKey_Closure)
                 (const Cdb__DsL2protocolKey *message,
                  void *closure_data);
typedef void (*Cdb__DsL2protocol_Closure)
                 (const Cdb__DsL2protocol *message,
                  void *closure_data);
typedef void (*Cdb__DsNdPrefix_Closure)
                 (const Cdb__DsNdPrefix *message,
                  void *closure_data);
typedef void (*Cdb__DsJoinGroupKey_Closure)
                 (const Cdb__DsJoinGroupKey *message,
                  void *closure_data);
typedef void (*Cdb__DsJoinGroup_Closure)
                 (const Cdb__DsJoinGroup *message,
                  void *closure_data);
typedef void (*Cdb__DsCfmError_Closure)
                 (const Cdb__DsCfmError *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cdb__ds_brgif__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_aclqos_if__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_lag__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_lacp__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_connected_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_connected__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_connected_v6_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_connected_v6__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_static_route_dup_ipv4_nh_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_static_route_dup_ipv4_nh__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_ospf_auth_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_ospf_auth__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_storm_control__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_openflow_if__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_dhclient_if__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_pvlan_community_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_pvlan_community__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_circuit_id_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_circuit_id__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_flush_fdb__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_lldp_neighbour__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_mrouter_port_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_mrouter_port__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_query_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_query__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_l2protocol_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_l2protocol__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_nd_prefix__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_join_group_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_join_group__descriptor;
extern const ProtobufCMessageDescriptor cdb__ds_cfm_error__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ds_2eproto__INCLUDED */
