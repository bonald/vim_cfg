/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: tbl.proto */

#ifndef PROTOBUF_C_tbl_2eproto__INCLUDED
#define PROTOBUF_C_tbl_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1002001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "common.pb-c.h"

typedef struct _Cdb__TblInterfaceKey Cdb__TblInterfaceKey;
typedef struct _Cdb__TblInterface Cdb__TblInterface;
typedef struct _Cdb__TblRouteIfKey Cdb__TblRouteIfKey;
typedef struct _Cdb__TblRouteIf Cdb__TblRouteIf;
typedef struct _Cdb__TblKernelIfKey Cdb__TblKernelIfKey;
typedef struct _Cdb__TblKernelIf Cdb__TblKernelIf;
typedef struct _Cdb__TblFeaPortIfKey Cdb__TblFeaPortIfKey;
typedef struct _Cdb__TblFeaPortIf Cdb__TblFeaPortIf;
typedef struct _Cdb__TblVlanKey Cdb__TblVlanKey;
typedef struct _Cdb__TblVlan Cdb__TblVlan;
typedef struct _Cdb__TblPvlanKey Cdb__TblPvlanKey;
typedef struct _Cdb__TblPvlan Cdb__TblPvlan;
typedef struct _Cdb__TblFdb Cdb__TblFdb;
typedef struct _Cdb__TblMcfdb Cdb__TblMcfdb;
typedef struct _Cdb__TblMacfilterKey Cdb__TblMacfilterKey;
typedef struct _Cdb__TblMacfilter Cdb__TblMacfilter;
typedef struct _Cdb__TblPsfdb Cdb__TblPsfdb;
typedef struct _Cdb__TblIpsgSIpKey Cdb__TblIpsgSIpKey;
typedef struct _Cdb__TblIpsgSIp Cdb__TblIpsgSIp;
typedef struct _Cdb__TblIpsgSMacKey Cdb__TblIpsgSMacKey;
typedef struct _Cdb__TblIpsgSMac Cdb__TblIpsgSMac;
typedef struct _Cdb__TblIpsgFib Cdb__TblIpsgFib;
typedef struct _Cdb__TblBrgGlobal Cdb__TblBrgGlobal;
typedef struct _Cdb__TblMstpPortKey Cdb__TblMstpPortKey;
typedef struct _Cdb__TblMstpPort Cdb__TblMstpPort;
typedef struct _Cdb__TblMstiPort Cdb__TblMstiPort;
typedef struct _Cdb__TblMstpInstanceKey Cdb__TblMstpInstanceKey;
typedef struct _Cdb__TblMstpInstance Cdb__TblMstpInstance;
typedef struct _Cdb__TblMstpGlobal Cdb__TblMstpGlobal;
typedef struct _Cdb__TblLldpGlobal Cdb__TblLldpGlobal;
typedef struct _Cdb__TblLldpIfKey Cdb__TblLldpIfKey;
typedef struct _Cdb__TblLldpIf Cdb__TblLldpIf;
typedef struct _Cdb__TblMlag Cdb__TblMlag;
typedef struct _Cdb__TblMlagPeer Cdb__TblMlagPeer;
typedef struct _Cdb__TblMlagPortKey Cdb__TblMlagPortKey;
typedef struct _Cdb__TblMlagPort Cdb__TblMlagPort;
typedef struct _Cdb__TblIsolationKey Cdb__TblIsolationKey;
typedef struct _Cdb__TblIsolation Cdb__TblIsolation;
typedef struct _Cdb__TblRouteGlobal Cdb__TblRouteGlobal;
typedef struct _Cdb__TblBgpKey Cdb__TblBgpKey;
typedef struct _Cdb__TblBgp Cdb__TblBgp;
typedef struct _Cdb__TblBgpNetwork Cdb__TblBgpNetwork;
typedef struct _Cdb__TblBgpNeighbor Cdb__TblBgpNeighbor;
typedef struct _Cdb__TblOspfKey Cdb__TblOspfKey;
typedef struct _Cdb__TblOspf Cdb__TblOspf;
typedef struct _Cdb__TblOspf6Key Cdb__TblOspf6Key;
typedef struct _Cdb__TblOspf6 Cdb__TblOspf6;
typedef struct _Cdb__TblOspf6InterfaceKey Cdb__TblOspf6InterfaceKey;
typedef struct _Cdb__TblOspf6Interface Cdb__TblOspf6Interface;
typedef struct _Cdb__TblOspfNetwork Cdb__TblOspfNetwork;
typedef struct _Cdb__TblOspfAreaAuthKey Cdb__TblOspfAreaAuthKey;
typedef struct _Cdb__TblOspfAreaAuth Cdb__TblOspfAreaAuth;
typedef struct _Cdb__TblOspfAreaRange Cdb__TblOspfAreaRange;
typedef struct _Cdb__TblOspf6AreaRange Cdb__TblOspf6AreaRange;
typedef struct _Cdb__TblIprouteNode Cdb__TblIprouteNode;
typedef struct _Cdb__TblIprouteNodeAddFail Cdb__TblIprouteNodeAddFail;
typedef struct _Cdb__TblIprouteNodeAddFailCount Cdb__TblIprouteNodeAddFailCount;
typedef struct _Cdb__TblStaticRouteCfg Cdb__TblStaticRouteCfg;
typedef struct _Cdb__TblStaticRtCnt Cdb__TblStaticRtCnt;
typedef struct _Cdb__TblArpFibKey Cdb__TblArpFibKey;
typedef struct _Cdb__TblArpFib Cdb__TblArpFib;
typedef struct _Cdb__TblArpKey Cdb__TblArpKey;
typedef struct _Cdb__TblArp Cdb__TblArp;
typedef struct _Cdb__TblNexthop Cdb__TblNexthop;
typedef struct _Cdb__TblNexthopGroup Cdb__TblNexthopGroup;
typedef struct _Cdb__TblNexthopGroupRouted Cdb__TblNexthopGroupRouted;
typedef struct _Cdb__TblFeaNexthop Cdb__TblFeaNexthop;
typedef struct _Cdb__TblMrt Cdb__TblMrt;
typedef struct _Cdb__TblIpmcGlobal Cdb__TblIpmcGlobal;
typedef struct _Cdb__TblIpmcIntfKey Cdb__TblIpmcIntfKey;
typedef struct _Cdb__TblIpmcIntf Cdb__TblIpmcIntf;
typedef struct _Cdb__TblPimStaticRpKey Cdb__TblPimStaticRpKey;
typedef struct _Cdb__TblPimStaticRp Cdb__TblPimStaticRp;
typedef struct _Cdb__TblSysGlobal Cdb__TblSysGlobal;
typedef struct _Cdb__TblLagGlobal Cdb__TblLagGlobal;
typedef struct _Cdb__TblEcmpGlobal Cdb__TblEcmpGlobal;
typedef struct _Cdb__TblRrPrefixKey Cdb__TblRrPrefixKey;
typedef struct _Cdb__TblRrPrefix Cdb__TblRrPrefix;
typedef struct _Cdb__TblMemSummary Cdb__TblMemSummary;
typedef struct _Cdb__TblCpuMemHistory Cdb__TblCpuMemHistory;
typedef struct _Cdb__TblChsmDebug Cdb__TblChsmDebug;
typedef struct _Cdb__TblSwitchDebug Cdb__TblSwitchDebug;
typedef struct _Cdb__TblRouteDebug Cdb__TblRouteDebug;
typedef struct _Cdb__TblSsmDebug Cdb__TblSsmDebug;
typedef struct _Cdb__TblPtpDebug Cdb__TblPtpDebug;
typedef struct _Cdb__TblQuaggaDebug Cdb__TblQuaggaDebug;
typedef struct _Cdb__TblLsrvDebug Cdb__TblLsrvDebug;
typedef struct _Cdb__TblHsrvDebug Cdb__TblHsrvDebug;
typedef struct _Cdb__TblAppDebug Cdb__TblAppDebug;
typedef struct _Cdb__TblOpenflowDebug Cdb__TblOpenflowDebug;
typedef struct _Cdb__TblRifKey Cdb__TblRifKey;
typedef struct _Cdb__TblRif Cdb__TblRif;
typedef struct _Cdb__TblFeaLagKey Cdb__TblFeaLagKey;
typedef struct _Cdb__TblFeaLag Cdb__TblFeaLag;
typedef struct _Cdb__TblFeaGlobal Cdb__TblFeaGlobal;
typedef struct _Cdb__TblFeaAclTableKey Cdb__TblFeaAclTableKey;
typedef struct _Cdb__TblFeaAclTable Cdb__TblFeaAclTable;
typedef struct _Cdb__TblFeaAclKey Cdb__TblFeaAclKey;
typedef struct _Cdb__TblFeaAcl Cdb__TblFeaAcl;
typedef struct _Cdb__TblFeaFdb Cdb__TblFeaFdb;
typedef struct _Cdb__TblFeaBrgIfKey Cdb__TblFeaBrgIfKey;
typedef struct _Cdb__TblFeaBrgIf Cdb__TblFeaBrgIf;
typedef struct _Cdb__TblAclWormFilterKey Cdb__TblAclWormFilterKey;
typedef struct _Cdb__TblAclWormFilter Cdb__TblAclWormFilter;
typedef struct _Cdb__TblAclConfigKey Cdb__TblAclConfigKey;
typedef struct _Cdb__TblAclConfig Cdb__TblAclConfig;
typedef struct _Cdb__TblAceConfig Cdb__TblAceConfig;
typedef struct _Cdb__TblAclEntryKey Cdb__TblAclEntryKey;
typedef struct _Cdb__TblAclEntry Cdb__TblAclEntry;
typedef struct _Cdb__TblAclEntryActionKey Cdb__TblAclEntryActionKey;
typedef struct _Cdb__TblAclEntryAction Cdb__TblAclEntryAction;
typedef struct _Cdb__TblAclNexthopGroupKey Cdb__TblAclNexthopGroupKey;
typedef struct _Cdb__TblAclNexthopGroup Cdb__TblAclNexthopGroup;
typedef struct _Cdb__TblAclNexthopKey Cdb__TblAclNexthopKey;
typedef struct _Cdb__TblAclNexthop Cdb__TblAclNexthop;
typedef struct _Cdb__TblTimeRangeKey Cdb__TblTimeRangeKey;
typedef struct _Cdb__TblTimeRange Cdb__TblTimeRange;
typedef struct _Cdb__TblSshCfg Cdb__TblSshCfg;
typedef struct _Cdb__TblSnmpCfg Cdb__TblSnmpCfg;
typedef struct _Cdb__TblSnmpViewKey Cdb__TblSnmpViewKey;
typedef struct _Cdb__TblSnmpView Cdb__TblSnmpView;
typedef struct _Cdb__TblSnmpCommunityKey Cdb__TblSnmpCommunityKey;
typedef struct _Cdb__TblSnmpCommunity Cdb__TblSnmpCommunity;
typedef struct _Cdb__TblSnmpContextKey Cdb__TblSnmpContextKey;
typedef struct _Cdb__TblSnmpContext Cdb__TblSnmpContext;
typedef struct _Cdb__TblSnmpUsmUserKey Cdb__TblSnmpUsmUserKey;
typedef struct _Cdb__TblSnmpUsmUser Cdb__TblSnmpUsmUser;
typedef struct _Cdb__TblSnmpGroupUsmKey Cdb__TblSnmpGroupUsmKey;
typedef struct _Cdb__TblSnmpGroupUsm Cdb__TblSnmpGroupUsm;
typedef struct _Cdb__TblSnmpAccessUsmKey Cdb__TblSnmpAccessUsmKey;
typedef struct _Cdb__TblSnmpAccessUsm Cdb__TblSnmpAccessUsm;
typedef struct _Cdb__TblSnmpNotifyKey Cdb__TblSnmpNotifyKey;
typedef struct _Cdb__TblSnmpNotify Cdb__TblSnmpNotify;
typedef struct _Cdb__TblSnmpTargetAddrKey Cdb__TblSnmpTargetAddrKey;
typedef struct _Cdb__TblSnmpTargetAddr Cdb__TblSnmpTargetAddr;
typedef struct _Cdb__TblSnmpTargetParamsKey Cdb__TblSnmpTargetParamsKey;
typedef struct _Cdb__TblSnmpTargetParams Cdb__TblSnmpTargetParams;
typedef struct _Cdb__TblSnmpTrapKey Cdb__TblSnmpTrapKey;
typedef struct _Cdb__TblSnmpTrap Cdb__TblSnmpTrap;
typedef struct _Cdb__TblSnmpInformKey Cdb__TblSnmpInformKey;
typedef struct _Cdb__TblSnmpInform Cdb__TblSnmpInform;
typedef struct _Cdb__TblSnmpTrapMsg Cdb__TblSnmpTrapMsg;
typedef struct _Cdb__TblRmonEventKey Cdb__TblRmonEventKey;
typedef struct _Cdb__TblRmonEvent Cdb__TblRmonEvent;
typedef struct _Cdb__TblRmonAlarmKey Cdb__TblRmonAlarmKey;
typedef struct _Cdb__TblRmonAlarm Cdb__TblRmonAlarm;
typedef struct _Cdb__TblRmonEtherStatsKey Cdb__TblRmonEtherStatsKey;
typedef struct _Cdb__TblRmonEtherStats Cdb__TblRmonEtherStats;
typedef struct _Cdb__TblRmonHistoryKey Cdb__TblRmonHistoryKey;
typedef struct _Cdb__TblRmonHistory Cdb__TblRmonHistory;
typedef struct _Cdb__TblRmonStatsHistory Cdb__TblRmonStatsHistory;
typedef struct _Cdb__TblSyslogCfg Cdb__TblSyslogCfg;
typedef struct _Cdb__TblNtpServerKey Cdb__TblNtpServerKey;
typedef struct _Cdb__TblNtpServer Cdb__TblNtpServer;
typedef struct _Cdb__TblNtpAceKey Cdb__TblNtpAceKey;
typedef struct _Cdb__TblNtpAce Cdb__TblNtpAce;
typedef struct _Cdb__TblNtpKeyKey Cdb__TblNtpKeyKey;
typedef struct _Cdb__TblNtpKey Cdb__TblNtpKey;
typedef struct _Cdb__TblNtpCfg Cdb__TblNtpCfg;
typedef struct _Cdb__TblNtpIf Cdb__TblNtpIf;
typedef struct _Cdb__TblNtpSyncstatus Cdb__TblNtpSyncstatus;
typedef struct _Cdb__TblStaticDnsKey Cdb__TblStaticDnsKey;
typedef struct _Cdb__TblStaticDns Cdb__TblStaticDns;
typedef struct _Cdb__TblDynamicDnsDomainKey Cdb__TblDynamicDnsDomainKey;
typedef struct _Cdb__TblDynamicDnsDomain Cdb__TblDynamicDnsDomain;
typedef struct _Cdb__TblDynamicDnsServerKey Cdb__TblDynamicDnsServerKey;
typedef struct _Cdb__TblDynamicDnsServer Cdb__TblDynamicDnsServer;
typedef struct _Cdb__TblQosDomainKey Cdb__TblQosDomainKey;
typedef struct _Cdb__TblQosDomain Cdb__TblQosDomain;
typedef struct _Cdb__TblQosMplsDomainKey Cdb__TblQosMplsDomainKey;
typedef struct _Cdb__TblQosMplsDomain Cdb__TblQosMplsDomain;
typedef struct _Cdb__TblQosPolicerRes Cdb__TblQosPolicerRes;
typedef struct _Cdb__TblQosPolicerActionProfileKey Cdb__TblQosPolicerActionProfileKey;
typedef struct _Cdb__TblQosPolicerActionProfile Cdb__TblQosPolicerActionProfile;
typedef struct _Cdb__TblQosPolicerProfileKey Cdb__TblQosPolicerProfileKey;
typedef struct _Cdb__TblQosPolicerProfile Cdb__TblQosPolicerProfile;
typedef struct _Cdb__TblQosDropProfileKey Cdb__TblQosDropProfileKey;
typedef struct _Cdb__TblQosDropProfile Cdb__TblQosDropProfile;
typedef struct _Cdb__TblQosQueueShapeProfileKey Cdb__TblQosQueueShapeProfileKey;
typedef struct _Cdb__TblQosQueueShapeProfile Cdb__TblQosQueueShapeProfile;
typedef struct _Cdb__TblQosPortShapeProfileKey Cdb__TblQosPortShapeProfileKey;
typedef struct _Cdb__TblQosPortShapeProfile Cdb__TblQosPortShapeProfile;
typedef struct _Cdb__TblQosQueueSmartBufferKey Cdb__TblQosQueueSmartBufferKey;
typedef struct _Cdb__TblQosQueueSmartBuffer Cdb__TblQosQueueSmartBuffer;
typedef struct _Cdb__TblQosGlobal Cdb__TblQosGlobal;
typedef struct _Cdb__TblMirrorKey Cdb__TblMirrorKey;
typedef struct _Cdb__TblMirror Cdb__TblMirror;
typedef struct _Cdb__TblMirrorMacEscape Cdb__TblMirrorMacEscape;
typedef struct _Cdb__TblTapGroupIngress Cdb__TblTapGroupIngress;
typedef struct _Cdb__TblTapGroupIngressFlow Cdb__TblTapGroupIngressFlow;
typedef struct _Cdb__TblTapGroupEgress Cdb__TblTapGroupEgress;
typedef struct _Cdb__TblTapGroupKey Cdb__TblTapGroupKey;
typedef struct _Cdb__TblTapGroup Cdb__TblTapGroup;
typedef struct _Cdb__TblTapFiveTuple Cdb__TblTapFiveTuple;
typedef struct _Cdb__TblTapDpiGlobal Cdb__TblTapDpiGlobal;
typedef struct _Cdb__TblUserKey Cdb__TblUserKey;
typedef struct _Cdb__TblUser Cdb__TblUser;
typedef struct _Cdb__TblLoginRecordKey Cdb__TblLoginRecordKey;
typedef struct _Cdb__TblLoginRecord Cdb__TblLoginRecord;
typedef struct _Cdb__TblLoginSecurityGlb Cdb__TblLoginSecurityGlb;
typedef struct _Cdb__TblVtyKey Cdb__TblVtyKey;
typedef struct _Cdb__TblVty Cdb__TblVty;
typedef struct _Cdb__TblConsole Cdb__TblConsole;
typedef struct _Cdb__TblAuthenKey Cdb__TblAuthenKey;
typedef struct _Cdb__TblAuthen Cdb__TblAuthen;
typedef struct _Cdb__TblLoginKey Cdb__TblLoginKey;
typedef struct _Cdb__TblLogin Cdb__TblLogin;
typedef struct _Cdb__TblRsaKey Cdb__TblRsaKey;
typedef struct _Cdb__TblRsa Cdb__TblRsa;
typedef struct _Cdb__TblOpenflow Cdb__TblOpenflow;
typedef struct _Cdb__TblCpuTrafficKey Cdb__TblCpuTrafficKey;
typedef struct _Cdb__TblCpuTraffic Cdb__TblCpuTraffic;
typedef struct _Cdb__TblCpuTrafficGroupKey Cdb__TblCpuTrafficGroupKey;
typedef struct _Cdb__TblCpuTrafficGroup Cdb__TblCpuTrafficGroup;
typedef struct _Cdb__TblCpuUtilizationKey Cdb__TblCpuUtilizationKey;
typedef struct _Cdb__TblCpuUtilization Cdb__TblCpuUtilization;
typedef struct _Cdb__TblCpuLimitKey Cdb__TblCpuLimitKey;
typedef struct _Cdb__TblCpuLimit Cdb__TblCpuLimit;
typedef struct _Cdb__TblDhcrelay Cdb__TblDhcrelay;
typedef struct _Cdb__TblDhcsrvgrpKey Cdb__TblDhcsrvgrpKey;
typedef struct _Cdb__TblDhcsrvgrp Cdb__TblDhcsrvgrp;
typedef struct _Cdb__TblDhcpDebug Cdb__TblDhcpDebug;
typedef struct _Cdb__TblDhclient Cdb__TblDhclient;
typedef struct _Cdb__TblDhcsnooping Cdb__TblDhcsnooping;
typedef struct _Cdb__TblDhcbinding Cdb__TblDhcbinding;
typedef struct _Cdb__TblIptablesPrevent Cdb__TblIptablesPrevent;
typedef struct _Cdb__TblErrdisableKey Cdb__TblErrdisableKey;
typedef struct _Cdb__TblErrdisable Cdb__TblErrdisable;
typedef struct _Cdb__TblNsPortForwarding Cdb__TblNsPortForwarding;
typedef struct _Cdb__TblLogGlobal Cdb__TblLogGlobal;
typedef struct _Cdb__TblLogKey Cdb__TblLogKey;
typedef struct _Cdb__TblLog Cdb__TblLog;
typedef struct _Cdb__TblSysLoad Cdb__TblSysLoad;
typedef struct _Cdb__TblCemKey Cdb__TblCemKey;
typedef struct _Cdb__TblCem Cdb__TblCem;
typedef struct _Cdb__TblClock Cdb__TblClock;
typedef struct _Cdb__TblTagSummerClock Cdb__TblTagSummerClock;
typedef struct _Cdb__TblPortStatsKey Cdb__TblPortStatsKey;
typedef struct _Cdb__TblPortStats Cdb__TblPortStats;
typedef struct _Cdb__TblVlanStatsKey Cdb__TblVlanStatsKey;
typedef struct _Cdb__TblVlanStats Cdb__TblVlanStats;
typedef struct _Cdb__TblPortStatsRateKey Cdb__TblPortStatsRateKey;
typedef struct _Cdb__TblPortStatsRate Cdb__TblPortStatsRate;
typedef struct _Cdb__TblAclqosIfKey Cdb__TblAclqosIfKey;
typedef struct _Cdb__TblAclqosIf Cdb__TblAclqosIf;
typedef struct _Cdb__TblL2Action Cdb__TblL2Action;
typedef struct _Cdb__TblFeaQosDropProfileKey Cdb__TblFeaQosDropProfileKey;
typedef struct _Cdb__TblFeaQosDropProfile Cdb__TblFeaQosDropProfile;
typedef struct _Cdb__TblFeaQosDomainKey Cdb__TblFeaQosDomainKey;
typedef struct _Cdb__TblFeaQosDomain Cdb__TblFeaQosDomain;
typedef struct _Cdb__TblFeaG8032Ring Cdb__TblFeaG8032Ring;
typedef struct _Cdb__TblFeaG8032RingMcGroupKey Cdb__TblFeaG8032RingMcGroupKey;
typedef struct _Cdb__TblFeaG8032RingMcGroup Cdb__TblFeaG8032RingMcGroup;
typedef struct _Cdb__TblFeaQosQueueShapeProfileKey Cdb__TblFeaQosQueueShapeProfileKey;
typedef struct _Cdb__TblFeaQosQueueShapeProfile Cdb__TblFeaQosQueueShapeProfile;
typedef struct _Cdb__TblFeaQosPortShapeProfileKey Cdb__TblFeaQosPortShapeProfileKey;
typedef struct _Cdb__TblFeaQosPortShapeProfile Cdb__TblFeaQosPortShapeProfile;
typedef struct _Cdb__TblFeaPortPolicerApplyKey Cdb__TblFeaPortPolicerApplyKey;
typedef struct _Cdb__TblFeaPortPolicerApply Cdb__TblFeaPortPolicerApply;
typedef struct _Cdb__TblAclqosIfStatsKey Cdb__TblAclqosIfStatsKey;
typedef struct _Cdb__TblAclqosIfStats Cdb__TblAclqosIfStats;
typedef struct _Cdb__TblVersion Cdb__TblVersion;
typedef struct _Cdb__TblManageIf Cdb__TblManageIf;
typedef struct _Cdb__TblBootimage Cdb__TblBootimage;
typedef struct _Cdb__TblChassis Cdb__TblChassis;
typedef struct _Cdb__TblIfnameInfo Cdb__TblIfnameInfo;
typedef struct _Cdb__TblCardKey Cdb__TblCardKey;
typedef struct _Cdb__TblCard Cdb__TblCard;
typedef struct _Cdb__TblPortKey Cdb__TblPortKey;
typedef struct _Cdb__TblPort Cdb__TblPort;
typedef struct _Cdb__TblFiberKey Cdb__TblFiberKey;
typedef struct _Cdb__TblFiber Cdb__TblFiber;
typedef struct _Cdb__TblSysSpecKey Cdb__TblSysSpecKey;
typedef struct _Cdb__TblSysSpec Cdb__TblSysSpec;
typedef struct _Cdb__TblFanKey Cdb__TblFanKey;
typedef struct _Cdb__TblFan Cdb__TblFan;
typedef struct _Cdb__TblPsuKey Cdb__TblPsuKey;
typedef struct _Cdb__TblPsu Cdb__TblPsu;
typedef struct _Cdb__TblLedKey Cdb__TblLedKey;
typedef struct _Cdb__TblLed Cdb__TblLed;
typedef struct _Cdb__TblSensorKey Cdb__TblSensorKey;
typedef struct _Cdb__TblSensor Cdb__TblSensor;
typedef struct _Cdb__TblVcmKey Cdb__TblVcmKey;
typedef struct _Cdb__TblVcm Cdb__TblVcm;
typedef struct _Cdb__TblPoeKey Cdb__TblPoeKey;
typedef struct _Cdb__TblPoe Cdb__TblPoe;
typedef struct _Cdb__TblRebootInfoKey Cdb__TblRebootInfoKey;
typedef struct _Cdb__TblRebootInfo Cdb__TblRebootInfo;
typedef struct _Cdb__TblErrdisableFlapKey Cdb__TblErrdisableFlapKey;
typedef struct _Cdb__TblErrdisableFlap Cdb__TblErrdisableFlap;
typedef struct _Cdb__TblOpmGlobal Cdb__TblOpmGlobal;
typedef struct _Cdb__TblErpsRing Cdb__TblErpsRing;
typedef struct _Cdb__TblErpsDomainKey Cdb__TblErpsDomainKey;
typedef struct _Cdb__TblErpsDomain Cdb__TblErpsDomain;
typedef struct _Cdb__TblOpmDebug Cdb__TblOpmDebug;
typedef struct _Cdb__TblPolicyMapConfigKey Cdb__TblPolicyMapConfigKey;
typedef struct _Cdb__TblPolicyMapConfig Cdb__TblPolicyMapConfig;
typedef struct _Cdb__TblClassMapConfigKey Cdb__TblClassMapConfigKey;
typedef struct _Cdb__TblClassMapConfig Cdb__TblClassMapConfig;
typedef struct _Cdb__TblClassInPolicyConfig Cdb__TblClassInPolicyConfig;
typedef struct _Cdb__TblAclInClassConfig Cdb__TblAclInClassConfig;
typedef struct _Cdb__TblClassMapActionConfig Cdb__TblClassMapActionConfig;
typedef struct _Cdb__TblFeaAclPolicyActionKey Cdb__TblFeaAclPolicyActionKey;
typedef struct _Cdb__TblFeaAclPolicyAction Cdb__TblFeaAclPolicyAction;
typedef struct _Cdb__TblIgspGlobal Cdb__TblIgspGlobal;
typedef struct _Cdb__TblIgspIntfKey Cdb__TblIgspIntfKey;
typedef struct _Cdb__TblIgspIntf Cdb__TblIgspIntf;
typedef struct _Cdb__TblIgspGroup Cdb__TblIgspGroup;
typedef struct _Cdb__TblAuthCfg Cdb__TblAuthCfg;
typedef struct _Cdb__TblAuthServer Cdb__TblAuthServer;
typedef struct _Cdb__TblAuthSession Cdb__TblAuthSession;
typedef struct _Cdb__TblAuthdDebug Cdb__TblAuthdDebug;
typedef struct _Cdb__TblDot1xGlobal Cdb__TblDot1xGlobal;
typedef struct _Cdb__TblDot1xPortKey Cdb__TblDot1xPortKey;
typedef struct _Cdb__TblDot1xPort Cdb__TblDot1xPort;
typedef struct _Cdb__TblDot1xRadius Cdb__TblDot1xRadius;
typedef struct _Cdb__TblDot1xMac Cdb__TblDot1xMac;
typedef struct _Cdb__TblEnableKey Cdb__TblEnableKey;
typedef struct _Cdb__TblEnable Cdb__TblEnable;
typedef struct _Cdb__TblChip Cdb__TblChip;
typedef struct _Cdb__TblClearAclPolicy Cdb__TblClearAclPolicy;
typedef struct _Cdb__TblAuthorKey Cdb__TblAuthorKey;
typedef struct _Cdb__TblAuthor Cdb__TblAuthor;
typedef struct _Cdb__TblAccountKey Cdb__TblAccountKey;
typedef struct _Cdb__TblAccount Cdb__TblAccount;
typedef struct _Cdb__TblAccountcmdKey Cdb__TblAccountcmdKey;
typedef struct _Cdb__TblAccountcmd Cdb__TblAccountcmd;
typedef struct _Cdb__TblVlanclassRuleKey Cdb__TblVlanclassRuleKey;
typedef struct _Cdb__TblVlanclassRule Cdb__TblVlanclassRule;
typedef struct _Cdb__TblVlanclassGroupKey Cdb__TblVlanclassGroupKey;
typedef struct _Cdb__TblVlanclassGroup Cdb__TblVlanclassGroup;
typedef struct _Cdb__TblAclL4PortRangeKey Cdb__TblAclL4PortRangeKey;
typedef struct _Cdb__TblAclL4PortRange Cdb__TblAclL4PortRange;
typedef struct _Cdb__TblAclUdfGroupKey Cdb__TblAclUdfGroupKey;
typedef struct _Cdb__TblAclUdfGroup Cdb__TblAclUdfGroup;
typedef struct _Cdb__TblAclUdfEntryKey Cdb__TblAclUdfEntryKey;
typedef struct _Cdb__TblAclUdfEntry Cdb__TblAclUdfEntry;
typedef struct _Cdb__TblFeaPcap Cdb__TblFeaPcap;
typedef struct _Cdb__TblControllerKey Cdb__TblControllerKey;
typedef struct _Cdb__TblController Cdb__TblController;
typedef struct _Cdb__TblCpuPackets Cdb__TblCpuPackets;
typedef struct _Cdb__TblNsRoute Cdb__TblNsRoute;
typedef struct _Cdb__TblNsRouteIpKey Cdb__TblNsRouteIpKey;
typedef struct _Cdb__TblNsRouteIp Cdb__TblNsRouteIp;
typedef struct _Cdb__TblOpenflowInterfaceKey Cdb__TblOpenflowInterfaceKey;
typedef struct _Cdb__TblOpenflowInterface Cdb__TblOpenflowInterface;
typedef struct _Cdb__TblOpenflowManager Cdb__TblOpenflowManager;
typedef struct _Cdb__TblPtpGlobal Cdb__TblPtpGlobal;
typedef struct _Cdb__TblPtpPortKey Cdb__TblPtpPortKey;
typedef struct _Cdb__TblPtpPort Cdb__TblPtpPort;
typedef struct _Cdb__TblPtpForeign Cdb__TblPtpForeign;
typedef struct _Cdb__TblPtpResidenceTimeCache Cdb__TblPtpResidenceTimeCache;
typedef struct _Cdb__TblFeaPtpGlobal Cdb__TblFeaPtpGlobal;
typedef struct _Cdb__TblFeaPtpTsKey Cdb__TblFeaPtpTsKey;
typedef struct _Cdb__TblFeaPtpTs Cdb__TblFeaPtpTs;
typedef struct _Cdb__TblFeaTime Cdb__TblFeaTime;
typedef struct _Cdb__TblBhmGlobal Cdb__TblBhmGlobal;
typedef struct _Cdb__TblBhmModuleKey Cdb__TblBhmModuleKey;
typedef struct _Cdb__TblBhmModule Cdb__TblBhmModule;
typedef struct _Cdb__TblOpenflowTunnelInterfaceKey Cdb__TblOpenflowTunnelInterfaceKey;
typedef struct _Cdb__TblOpenflowTunnelInterface Cdb__TblOpenflowTunnelInterface;
typedef struct _Cdb__TblOpenflowTunnelLocalIpCntKey Cdb__TblOpenflowTunnelLocalIpCntKey;
typedef struct _Cdb__TblOpenflowTunnelLocalIpCnt Cdb__TblOpenflowTunnelLocalIpCnt;
typedef struct _Cdb__TblInbandSnat Cdb__TblInbandSnat;
typedef struct _Cdb__TblArpinspKey Cdb__TblArpinspKey;
typedef struct _Cdb__TblArpinsp Cdb__TblArpinsp;
typedef struct _Cdb__TblArpaclConfigKey Cdb__TblArpaclConfigKey;
typedef struct _Cdb__TblArpaclConfig Cdb__TblArpaclConfig;
typedef struct _Cdb__TblArpaceConfig Cdb__TblArpaceConfig;
typedef struct _Cdb__TblCoppCfg Cdb__TblCoppCfg;
typedef struct _Cdb__TblFeaCoppTrapGroupKey Cdb__TblFeaCoppTrapGroupKey;
typedef struct _Cdb__TblFeaCoppTrapGroup Cdb__TblFeaCoppTrapGroup;
typedef struct _Cdb__TblSflowGlobal Cdb__TblSflowGlobal;
typedef struct _Cdb__TblSflowCollector Cdb__TblSflowCollector;
typedef struct _Cdb__TblSflowCounterPortKey Cdb__TblSflowCounterPortKey;
typedef struct _Cdb__TblSflowCounterPort Cdb__TblSflowCounterPort;
typedef struct _Cdb__TblVrrpGlobal Cdb__TblVrrpGlobal;
typedef struct _Cdb__TblVrrpVmacKey Cdb__TblVrrpVmacKey;
typedef struct _Cdb__TblVrrpVmac Cdb__TblVrrpVmac;
typedef struct _Cdb__TblVrrpVip Cdb__TblVrrpVip;
typedef struct _Cdb__TblVrrpSessionKey Cdb__TblVrrpSessionKey;
typedef struct _Cdb__TblVrrpSession Cdb__TblVrrpSession;
typedef struct _Cdb__TblSsmGlobal Cdb__TblSsmGlobal;
typedef struct _Cdb__TblSsmPortKey Cdb__TblSsmPortKey;
typedef struct _Cdb__TblSsmPort Cdb__TblSsmPort;
typedef struct _Cdb__TblIpslaGlobal Cdb__TblIpslaGlobal;
typedef struct _Cdb__TblIpslaEntryKey Cdb__TblIpslaEntryKey;
typedef struct _Cdb__TblIpslaEntry Cdb__TblIpslaEntry;
typedef struct _Cdb__TblIpslaPacketStats Cdb__TblIpslaPacketStats;
typedef struct _Cdb__TblIpslaTestStats Cdb__TblIpslaTestStats;
typedef struct _Cdb__TblTrackGlobal Cdb__TblTrackGlobal;
typedef struct _Cdb__TblTrackObjectKey Cdb__TblTrackObjectKey;
typedef struct _Cdb__TblTrackObject Cdb__TblTrackObject;
typedef struct _Cdb__TblControllerAttr Cdb__TblControllerAttr;
typedef struct _Cdb__TblOamSessionKey Cdb__TblOamSessionKey;
typedef struct _Cdb__TblOamSession Cdb__TblOamSession;
typedef struct _Cdb__TblOamSessionUploadKey Cdb__TblOamSessionUploadKey;
typedef struct _Cdb__TblOamSessionUpload Cdb__TblOamSessionUpload;
typedef struct _Cdb__TblLspApsGroupKey Cdb__TblLspApsGroupKey;
typedef struct _Cdb__TblLspApsGroup Cdb__TblLspApsGroup;
typedef struct _Cdb__TblPwApsGroupKey Cdb__TblPwApsGroupKey;
typedef struct _Cdb__TblPwApsGroup Cdb__TblPwApsGroup;
typedef struct _Cdb__TblLspPeKey Cdb__TblLspPeKey;
typedef struct _Cdb__TblLspPe Cdb__TblLspPe;
typedef struct _Cdb__TblLspPKey Cdb__TblLspPKey;
typedef struct _Cdb__TblLspP Cdb__TblLspP;
typedef struct _Cdb__TblPwTpeKey Cdb__TblPwTpeKey;
typedef struct _Cdb__TblPwTpe Cdb__TblPwTpe;
typedef struct _Cdb__TblSectionOamKey Cdb__TblSectionOamKey;
typedef struct _Cdb__TblSectionOam Cdb__TblSectionOam;
typedef struct _Cdb__TblOamFlowInfoKey Cdb__TblOamFlowInfoKey;
typedef struct _Cdb__TblOamFlowInfo Cdb__TblOamFlowInfo;
typedef struct _Cdb__TblTpoamGlobal Cdb__TblTpoamGlobal;
typedef struct _Cdb__TblTpoamExecGlobal Cdb__TblTpoamExecGlobal;
typedef struct _Cdb__TblApsGroupInfoKey Cdb__TblApsGroupInfoKey;
typedef struct _Cdb__TblApsGroupInfo Cdb__TblApsGroupInfo;
typedef struct _Cdb__TblOamInlabelInfoKey Cdb__TblOamInlabelInfoKey;
typedef struct _Cdb__TblOamInlabelInfo Cdb__TblOamInlabelInfo;
typedef struct _Cdb__TblOamMplsApsCheckKey Cdb__TblOamMplsApsCheckKey;
typedef struct _Cdb__TblOamMplsApsCheck Cdb__TblOamMplsApsCheck;
typedef struct _Cdb__TblVlanMappingTableKey Cdb__TblVlanMappingTableKey;
typedef struct _Cdb__TblVlanMappingTable Cdb__TblVlanMappingTable;
typedef struct _Cdb__TblVlanMappingEntry Cdb__TblVlanMappingEntry;
typedef struct _Cdb__TblEgressMappingEntry Cdb__TblEgressMappingEntry;
typedef struct _Cdb__TblVlanGroupKey Cdb__TblVlanGroupKey;
typedef struct _Cdb__TblVlanGroup Cdb__TblVlanGroup;
typedef struct _Cdb__TblEvcEntryKey Cdb__TblEvcEntryKey;
typedef struct _Cdb__TblEvcEntry Cdb__TblEvcEntry;
typedef struct _Cdb__TblMappedVlanInfo Cdb__TblMappedVlanInfo;
typedef struct _Cdb__TblL2ProtocolKey Cdb__TblL2ProtocolKey;
typedef struct _Cdb__TblL2Protocol Cdb__TblL2Protocol;
typedef struct _Cdb__TblNdFib Cdb__TblNdFib;
typedef struct _Cdb__TblNdStats Cdb__TblNdStats;
typedef struct _Cdb__TblCpuMirrorGlobal Cdb__TblCpuMirrorGlobal;
typedef struct _Cdb__TblTapServer Cdb__TblTapServer;
typedef struct _Cdb__TblDhcpv6Debug Cdb__TblDhcpv6Debug;
typedef struct _Cdb__TblL2edit Cdb__TblL2edit;
typedef struct _Cdb__TblHashFieldProfileKey Cdb__TblHashFieldProfileKey;
typedef struct _Cdb__TblHashFieldProfile Cdb__TblHashFieldProfile;
typedef struct _Cdb__TblHashValueProfileKey Cdb__TblHashValueProfileKey;
typedef struct _Cdb__TblHashValueProfile Cdb__TblHashValueProfile;
typedef struct _Cdb__TblHashValueGlobal Cdb__TblHashValueGlobal;
typedef struct _Cdb__TblNatGlobal Cdb__TblNatGlobal;
typedef struct _Cdb__TblNatPoolKey Cdb__TblNatPoolKey;
typedef struct _Cdb__TblNatPool Cdb__TblNatPool;
typedef struct _Cdb__TblNatRule Cdb__TblNatRule;
typedef struct _Cdb__TblNatSession Cdb__TblNatSession;
typedef struct _Cdb__TblNatSessionLimit Cdb__TblNatSessionLimit;
typedef struct _Cdb__TblNatProxyArp Cdb__TblNatProxyArp;
typedef struct _Cdb__TblNatRtifInsideKey Cdb__TblNatRtifInsideKey;
typedef struct _Cdb__TblNatRtifInside Cdb__TblNatRtifInside;
typedef struct _Cdb__TblNatRtifOutsideKey Cdb__TblNatRtifOutsideKey;
typedef struct _Cdb__TblNatRtifOutside Cdb__TblNatRtifOutside;
typedef struct _Cdb__TblG8032RingKey Cdb__TblG8032RingKey;
typedef struct _Cdb__TblG8032Ring Cdb__TblG8032Ring;
typedef struct _Cdb__TblCfmGlobal Cdb__TblCfmGlobal;
typedef struct _Cdb__TblCfmMdKey Cdb__TblCfmMdKey;
typedef struct _Cdb__TblCfmMd Cdb__TblCfmMd;
typedef struct _Cdb__TblCfmMa Cdb__TblCfmMa;
typedef struct _Cdb__TblCfmMaidKey Cdb__TblCfmMaidKey;
typedef struct _Cdb__TblCfmMaid Cdb__TblCfmMaid;
typedef struct _Cdb__TblCfmLmep Cdb__TblCfmLmep;
typedef struct _Cdb__TblCfmRmep Cdb__TblCfmRmep;
typedef struct _Cdb__TblPimSmKey Cdb__TblPimSmKey;
typedef struct _Cdb__TblPimSm Cdb__TblPimSm;
typedef struct _Cdb__TblPimSmBsrKey Cdb__TblPimSmBsrKey;
typedef struct _Cdb__TblPimSmBsr Cdb__TblPimSmBsr;
typedef struct _Cdb__TblPimSmRpKey Cdb__TblPimSmRpKey;
typedef struct _Cdb__TblPimSmRp Cdb__TblPimSmRp;
typedef struct _Cdb__TblPimSmRpGpKey Cdb__TblPimSmRpGpKey;
typedef struct _Cdb__TblPimSmRpGp Cdb__TblPimSmRpGp;
typedef struct _Cdb__TblPimDmKey Cdb__TblPimDmKey;
typedef struct _Cdb__TblPimDm Cdb__TblPimDm;
typedef struct _Cdb__TblIgmpIntfKey Cdb__TblIgmpIntfKey;
typedef struct _Cdb__TblIgmpIntf Cdb__TblIgmpIntf;
typedef struct _Cdb__TblRipKey Cdb__TblRipKey;
typedef struct _Cdb__TblRip Cdb__TblRip;
typedef struct _Cdb__TblRipngKey Cdb__TblRipngKey;
typedef struct _Cdb__TblRipng Cdb__TblRipng;
typedef struct _Cdb__TblRipNetwork Cdb__TblRipNetwork;
typedef struct _Cdb__TblRipngNetwork Cdb__TblRipngNetwork;
typedef struct _Cdb__TblRipNeighbor Cdb__TblRipNeighbor;
typedef struct _Cdb__TblRipPassiveIfKey Cdb__TblRipPassiveIfKey;
typedef struct _Cdb__TblRipPassiveIf Cdb__TblRipPassiveIf;
typedef struct _Cdb__TblRipngPassiveIfKey Cdb__TblRipngPassiveIfKey;
typedef struct _Cdb__TblRipngPassiveIf Cdb__TblRipngPassiveIf;
typedef struct _Cdb__TblOspfAreaStubKey Cdb__TblOspfAreaStubKey;
typedef struct _Cdb__TblOspfAreaStub Cdb__TblOspfAreaStub;
typedef struct _Cdb__TblOspf6AreaStubKey Cdb__TblOspf6AreaStubKey;
typedef struct _Cdb__TblOspf6AreaStub Cdb__TblOspf6AreaStub;
typedef struct _Cdb__TblOspfAreaNssaKey Cdb__TblOspfAreaNssaKey;
typedef struct _Cdb__TblOspfAreaNssa Cdb__TblOspfAreaNssa;
typedef struct _Cdb__TblOspfAreaVlink Cdb__TblOspfAreaVlink;


/* --- enums --- */


/* --- messages --- */

/*
 * TBL_INTERFACE
 */
struct  _Cdb__TblInterfaceKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_INTERFACE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_interface_key__descriptor) \
    , NULL }


struct  _Cdb__TblInterface
{
  ProtobufCMessage base;
  Cdb__TblInterfaceKey *key;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_portid;
  uint64_t portid;
  protobuf_c_boolean has_hostifid;
  uint64_t hostifid;
  char *desc;
  protobuf_c_boolean has_speed;
  uint32_t speed;
  protobuf_c_boolean has_duplex;
  uint32_t duplex;
  protobuf_c_boolean has_unidir;
  uint32_t unidir;
  protobuf_c_boolean has_flowcontrol_send;
  uint32_t flowcontrol_send;
  protobuf_c_boolean has_flowcontrol_receive;
  uint32_t flowcontrol_receive;
  protobuf_c_boolean has_flowcontrol_oper_send;
  uint32_t flowcontrol_oper_send;
  protobuf_c_boolean has_flowcontrol_oper_receive;
  uint32_t flowcontrol_oper_receive;
  protobuf_c_boolean has_fec;
  uint32_t fec;
  protobuf_c_boolean has_pfc_admin;
  uint32_t pfc_admin;
  protobuf_c_boolean has_pfc_oper;
  uint32_t pfc_oper;
  protobuf_c_boolean has_pfc_priority;
  uint32_t pfc_priority;
  protobuf_c_boolean has_jumboframe_en;
  uint32_t jumboframe_en;
  protobuf_c_boolean has_isolate_group_id;
  uint32_t isolate_group_id;
  protobuf_c_boolean has_dhcp_snooping_trust;
  uint32_t dhcp_snooping_trust;
  protobuf_c_boolean has_phy_status;
  uint32_t phy_status;
  protobuf_c_boolean has_phy_loopback_mode;
  uint32_t phy_loopback_mode;
  protobuf_c_boolean has_internal_lp_ifindex;
  uint32_t internal_lp_ifindex;
  protobuf_c_boolean has_pvlan_type;
  uint32_t pvlan_type;
  protobuf_c_boolean has_private_vlan;
  uint32_t private_vlan;
  protobuf_c_boolean has_community_vlan;
  uint32_t community_vlan;
  protobuf_c_boolean has_ntp_disable;
  uint32_t ntp_disable;
  protobuf_c_boolean has_ntp_broadcast_client;
  uint32_t ntp_broadcast_client;
  protobuf_c_boolean has_pvlan_group_id;
  uint32_t pvlan_group_id;
  protobuf_c_boolean has_support_speed;
  uint32_t support_speed;
  protobuf_c_boolean has_mode;
  uint32_t mode;
  protobuf_c_boolean has_vlan_type;
  uint32_t vlan_type;
  protobuf_c_boolean has_up;
  uint32_t up;
  protobuf_c_boolean has_running;
  uint32_t running;
  protobuf_c_boolean has_mtu;
  uint32_t mtu;
  protobuf_c_boolean has_oper_speed;
  uint32_t oper_speed;
  protobuf_c_boolean has_prev_oper_speed;
  uint32_t prev_oper_speed;
  protobuf_c_boolean has_oper_duplex;
  uint32_t oper_duplex;
  protobuf_c_boolean has_oper_unidir;
  uint32_t oper_unidir;
  protobuf_c_boolean has_oper_fec;
  uint32_t oper_fec;
  protobuf_c_boolean has_oper_loopback;
  uint32_t oper_loopback;
  protobuf_c_boolean has_bandwidth;
  uint32_t bandwidth;
  protobuf_c_boolean has_tap_used;
  uint32_t tap_used;
  protobuf_c_boolean has_tap_ingress_enable;
  uint32_t tap_ingress_enable;
  char *tap;
  protobuf_c_boolean has_tap_mark_vlan;
  uint32_t tap_mark_vlan;
  protobuf_c_boolean has_mirror_enable;
  uint32_t mirror_enable;
  protobuf_c_boolean has_mirror_igs_id;
  uint32_t mirror_igs_id;
  protobuf_c_boolean has_mirror_egs_id;
  uint32_t mirror_egs_id;
  protobuf_c_boolean has_mirror_dest_id;
  uint32_t mirror_dest_id;
  protobuf_c_boolean has_admin_up;
  uint32_t admin_up;
  protobuf_c_boolean has_ip_source_en;
  uint32_t ip_source_en;
  protobuf_c_boolean has_ip_source_type;
  uint32_t ip_source_type;
  protobuf_c_boolean has_ip_source_item_number;
  uint32_t ip_source_item_number;
  protobuf_c_boolean has_unicast_rpf_en;
  uint32_t unicast_rpf_en;
  protobuf_c_boolean has_oper_bandwidth;
  uint32_t oper_bandwidth;
  protobuf_c_boolean has_bandwidth_may_change;
  uint32_t bandwidth_may_change;
  protobuf_c_boolean has_errdisable_reason;
  uint32_t errdisable_reason;
  protobuf_c_boolean has_fdb_loop_occur;
  uint32_t fdb_loop_occur;
  protobuf_c_boolean has_link_flap_cnt;
  uint32_t link_flap_cnt;
  protobuf_c_boolean has_static_security_num;
  uint32_t static_security_num;
  protobuf_c_boolean has_sflow_flow_en;
  uint32_t sflow_flow_en;
  protobuf_c_boolean has_sflow_flow_ingress;
  uint32_t sflow_flow_ingress;
  protobuf_c_boolean has_sflow_flow_egress;
  uint32_t sflow_flow_egress;
  protobuf_c_boolean has_sflow_counter_en;
  uint32_t sflow_counter_en;
  protobuf_c_boolean has_sflow_rate;
  uint32_t sflow_rate;
  protobuf_c_boolean has_sflow_sequence;
  uint32_t sflow_sequence;
  protobuf_c_boolean has_sflow_sample_pool;
  uint32_t sflow_sample_pool;
  Cdb__ComposeMacAddrT *mac_addr;
  Cdb__ComposeMacAddrT *hw_mac_addr;
  protobuf_c_boolean has_hw_type;
  uint32_t hw_type;
  protobuf_c_boolean has_phy_type;
  uint32_t phy_type;
  protobuf_c_boolean has_media;
  uint32_t media;
  protobuf_c_boolean has_phyport_combo;
  uint32_t phyport_combo;
  protobuf_c_boolean has_phyport_loopback;
  uint32_t phyport_loopback;
  protobuf_c_boolean has_phyport_eee;
  uint32_t phyport_eee;
  protobuf_c_boolean has_phyport_poe;
  uint32_t phyport_poe;
  protobuf_c_boolean has_phyport_master;
  uint32_t phyport_master;
  protobuf_c_boolean has_phyport_slave;
  uint32_t phyport_slave;
  protobuf_c_boolean has_phyport_unidir;
  uint32_t phyport_unidir;
  protobuf_c_boolean has_support_100m;
  uint32_t support_100m;
  protobuf_c_boolean has_support_1g;
  uint32_t support_1g;
  protobuf_c_boolean has_support_10g;
  uint32_t support_10g;
  protobuf_c_boolean has_support_40g;
  uint32_t support_40g;
  protobuf_c_boolean has_support_100g;
  uint32_t support_100g;
  protobuf_c_boolean has_support_2_5g;
  uint32_t support_2_5g;
  protobuf_c_boolean has_support_5g;
  uint32_t support_5g;
  protobuf_c_boolean has_support_25g;
  uint32_t support_25g;
  protobuf_c_boolean has_support_50g;
  uint32_t support_50g;
  char *igs_acl;
  char *egs_acl;
  char *igs_ipv6_acl;
  char *egs_ipv6_acl;
  char *igs_mac_acl;
  char *egs_mac_acl;
  char *igs_policy_map;
  char *egs_policy_map;
  protobuf_c_boolean has_crc_error_check_en;
  uint32_t crc_error_check_en;
  protobuf_c_boolean has_crc_recalculation_en;
  uint32_t crc_recalculation_en;
  protobuf_c_boolean has_mlag_id;
  uint32_t mlag_id;
  protobuf_c_boolean has_erps_enable;
  uint32_t erps_enable;
  protobuf_c_boolean has_erps_pdu_action;
  uint32_t erps_pdu_action;
  protobuf_c_boolean has_dot1x_enable;
  uint32_t dot1x_enable;
  protobuf_c_boolean has_dot1x_unauthorized;
  uint32_t dot1x_unauthorized;
  protobuf_c_boolean has_dot1x_dir_in;
  uint32_t dot1x_dir_in;
  protobuf_c_boolean has_dot1x_dir_out;
  uint32_t dot1x_dir_out;
  protobuf_c_boolean has_dot1x_mode_mac;
  uint32_t dot1x_mode_mac;
  protobuf_c_boolean has_dot1x_guest_vlan;
  uint32_t dot1x_guest_vlan;
  protobuf_c_boolean has_vlanclass_group_id;
  uint32_t vlanclass_group_id;
  protobuf_c_boolean has_vlanclass_active_type;
  uint32_t vlanclass_active_type;
  protobuf_c_boolean has_vlanclass_default_action;
  uint32_t vlanclass_default_action;
  protobuf_c_boolean has_dot1x_cfg_guest_vlan;
  uint32_t dot1x_cfg_guest_vlan;
  protobuf_c_boolean has_egs_acl_en;
  uint32_t egs_acl_en;
  protobuf_c_boolean has_tap_group_igs_ref_cnt;
  uint32_t tap_group_igs_ref_cnt;
  protobuf_c_boolean has_tap_group_egs_ref_cnt;
  uint32_t tap_group_egs_ref_cnt;
  protobuf_c_boolean has_tap_flow_decap_cnt;
  uint32_t tap_flow_decap_cnt;
  protobuf_c_boolean has_tap_flow_udf_cnt;
  uint32_t tap_flow_udf_cnt;
  protobuf_c_boolean has_metadata_enable;
  uint32_t metadata_enable;
  protobuf_c_boolean has_arpinsp_trust_enable;
  uint32_t arpinsp_trust_enable;
  protobuf_c_boolean has_arp_numberlimit_enable;
  uint32_t arp_numberlimit_enable;
  protobuf_c_boolean has_arp_numberlimit_number;
  uint32_t arp_numberlimit_number;
  protobuf_c_boolean has_arp_numberlimit_violate;
  uint32_t arp_numberlimit_violate;
  protobuf_c_boolean has_arp_numberlimit_occur;
  uint32_t arp_numberlimit_occur;
  protobuf_c_boolean has_arp_rate_limit_errdisable_occur;
  uint32_t arp_rate_limit_errdisable_occur;
  protobuf_c_boolean has_inband_snat_type;
  uint32_t inband_snat_type;
  protobuf_c_boolean has_latency_event_high;
  uint32_t latency_event_high;
  protobuf_c_boolean has_latency_event_low;
  uint32_t latency_event_low;
  protobuf_c_boolean has_latency_event_enable;
  uint32_t latency_event_enable;
  protobuf_c_boolean has_reflective_bridge_en;
  uint32_t reflective_bridge_en;
  protobuf_c_boolean has_support_ssm_en;
  uint32_t support_ssm_en;
  protobuf_c_boolean has_svlan_tpid;
  uint32_t svlan_tpid;
  Cdb__ComposeL2proIfActionVlanT *l2pro_if_action_vlan;
  protobuf_c_boolean has_l2pro_uplink;
  uint32_t l2pro_uplink;
  protobuf_c_boolean has_static_agg_priority;
  uint32_t static_agg_priority;
  protobuf_c_boolean has_static_agg_is_active;
  uint32_t static_agg_is_active;
  protobuf_c_boolean has_fec_status;
  uint32_t fec_status;
  protobuf_c_boolean has_cl73_ability;
  uint32_t cl73_ability;
  protobuf_c_boolean has_ifg_stats_en;
  uint32_t ifg_stats_en;
  protobuf_c_boolean has_openflow_en;
  uint32_t openflow_en;
  protobuf_c_boolean has_openflow_operation_agg;
  uint32_t openflow_operation_agg;
  protobuf_c_boolean has_openflow_operation_agg_mem_ifindex;
  uint32_t openflow_operation_agg_mem_ifindex;
  protobuf_c_boolean has_carrier_down_holdtime_interval;
  uint32_t carrier_down_holdtime_interval;
  protobuf_c_boolean has_hash_value_profile_id;
  uint32_t hash_value_profile_id;
  protobuf_c_boolean has_hash_value_profile_dir;
  uint32_t hash_value_profile_dir;
  protobuf_c_boolean has_hash_value_profile_id_agg;
  uint32_t hash_value_profile_id_agg;
  protobuf_c_boolean has_hash_value_agg_hash;
  uint32_t hash_value_agg_hash;
  Cdb__ComposeGlbPoeCfgT *poe;
  protobuf_c_boolean has_current_g8032_ring_count;
  uint32_t current_g8032_ring_count;
  size_t n_g8032_ring_first;
  uint32_t *g8032_ring_first;
  protobuf_c_boolean has_cfm_lmep_num;
  uint32_t cfm_lmep_num;
  protobuf_c_boolean has_cfm_rmep_num;
  uint32_t cfm_rmep_num;
};
#define CDB__TBL_INTERFACE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_interface__descriptor) \
    , NULL, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,NULL, 0,0, 0,0 }


/*
 * TBL_ROUTE_IF
 */
struct  _Cdb__TblRouteIfKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_ROUTE_IF_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_route_if_key__descriptor) \
    , NULL }


struct  _Cdb__TblRouteIf
{
  ProtobufCMessage base;
  Cdb__TblRouteIfKey *key;
  protobuf_c_boolean has_mtu;
  uint32_t mtu;
  Cdb__ComposeMacAddrT *mac;
  protobuf_c_boolean has_mode_set_before;
  uint32_t mode_set_before;
  protobuf_c_boolean has_ipv4_enable;
  uint32_t ipv4_enable;
  protobuf_c_boolean has_ipv6_enable;
  uint32_t ipv6_enable;
  protobuf_c_boolean has_arp_retrans_time;
  uint32_t arp_retrans_time;
  protobuf_c_boolean has_arp_timeout;
  uint32_t arp_timeout;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_kernel_ifindex;
  uint32_t kernel_ifindex;
  protobuf_c_boolean has_arp_retry_timeout;
  uint32_t arp_retry_timeout;
  protobuf_c_boolean has_rip_recv_version;
  uint32_t rip_recv_version;
  protobuf_c_boolean has_rip_send_version;
  uint32_t rip_send_version;
  protobuf_c_boolean has_rip_v2_broadcast;
  uint32_t rip_v2_broadcast;
  protobuf_c_boolean has_rip_split_horizon;
  uint32_t rip_split_horizon;
  protobuf_c_boolean has_rip_poisoned_reverse;
  uint32_t rip_poisoned_reverse;
  protobuf_c_boolean has_rip_auth_mode;
  uint32_t rip_auth_mode;
  char *rip_auth_string;
  protobuf_c_boolean has_ripng_split_horizon;
  uint32_t ripng_split_horizon;
  protobuf_c_boolean has_ripng_poisoned_reverse;
  uint32_t ripng_poisoned_reverse;
  protobuf_c_boolean has_ospf_priority;
  uint32_t ospf_priority;
  protobuf_c_boolean has_ospf_cost;
  uint32_t ospf_cost;
  protobuf_c_boolean has_ospf_mtu_ignore;
  uint32_t ospf_mtu_ignore;
  protobuf_c_boolean has_ospf_timer_hello;
  uint32_t ospf_timer_hello;
  protobuf_c_boolean has_ospf_timer_dead;
  uint32_t ospf_timer_dead;
  protobuf_c_boolean has_ospf_auth_type;
  uint32_t ospf_auth_type;
  char *ospf_auth_key;
  protobuf_c_boolean has_ospf_network_type;
  uint32_t ospf_network_type;
  protobuf_c_boolean has_ospf6_timer_hello;
  uint32_t ospf6_timer_hello;
  protobuf_c_boolean has_ospf6_timer_dead;
  uint32_t ospf6_timer_dead;
  protobuf_c_boolean has_ospf6_mtu_ignore;
  uint32_t ospf6_mtu_ignore;
  protobuf_c_boolean has_ospf6_cost;
  uint32_t ospf6_cost;
  protobuf_c_boolean has_ospf6_priority;
  uint32_t ospf6_priority;
  protobuf_c_boolean has_ospf6_network_type;
  uint32_t ospf6_network_type;
  protobuf_c_boolean has_arp_proxy_en;
  uint32_t arp_proxy_en;
  protobuf_c_boolean has_local_arp_proxy_en;
  uint32_t local_arp_proxy_en;
  protobuf_c_boolean has_unicast_rpf_en;
  uint32_t unicast_rpf_en;
  protobuf_c_boolean has_unicast_rpf_en_v6;
  uint32_t unicast_rpf_en_v6;
  protobuf_c_boolean has_unicast_en_v6;
  uint32_t unicast_en_v6;
  protobuf_c_boolean has_is_up_running;
  uint32_t is_up_running;
  protobuf_c_boolean has_ipv6_link_local_had_delete;
  uint32_t ipv6_link_local_had_delete;
  protobuf_c_boolean has_ip_unreachable_en;
  uint32_t ip_unreachable_en;
  protobuf_c_boolean has_ip_redirects_en;
  uint32_t ip_redirects_en;
  protobuf_c_boolean has_dhcp_relay_option_trust;
  uint32_t dhcp_relay_option_trust;
  protobuf_c_boolean has_dhcp_server_group;
  uint32_t dhcp_server_group;
  protobuf_c_boolean has_dhcp_pdu_enabled;
  uint32_t dhcp_pdu_enabled;
  protobuf_c_boolean has_dhcp_client_flags;
  uint32_t dhcp_client_flags;
  protobuf_c_boolean has_dhcp_client_enable;
  uint32_t dhcp_client_enable;
  char *dhcp_client_ipv4;
  char *dhcp_client_ipv4_mask;
  protobuf_c_boolean has_arp_curr_dynamic;
  uint32_t arp_curr_dynamic;
  protobuf_c_boolean has_arp_attack_number;
  uint64_t arp_attack_number;
  protobuf_c_boolean has_arp_rate_limit_en;
  uint32_t arp_rate_limit_en;
  protobuf_c_boolean has_arp_rate_limit_pkt_max;
  uint32_t arp_rate_limit_pkt_max;
  protobuf_c_boolean has_arp_rate_limit_violation;
  uint32_t arp_rate_limit_violation;
  protobuf_c_boolean has_arp_rate_limit_pkt_curr;
  uint32_t arp_rate_limit_pkt_curr;
  protobuf_c_boolean has_arp_rate_limit_port_abnormal_flag;
  uint32_t arp_rate_limit_port_abnormal_flag;
  Cdb__ComposeMacAddrT *vmac1;
  Cdb__ComposeMacAddrT *vmac2;
  Cdb__ComposeMacAddrT *vmac3;
  protobuf_c_boolean has_vrrp_session_num;
  uint32_t vrrp_session_num;
  protobuf_c_boolean has_nd_flags;
  uint32_t nd_flags;
  protobuf_c_boolean has_nd_ra_currrent_hop_limit;
  uint32_t nd_ra_currrent_hop_limit;
  protobuf_c_boolean has_nd_ra_advertise;
  uint32_t nd_ra_advertise;
  protobuf_c_boolean has_nd_ra_advertise_mtu;
  uint32_t nd_ra_advertise_mtu;
  protobuf_c_boolean has_nd_managed_config;
  uint32_t nd_managed_config;
  protobuf_c_boolean has_nd_other_config;
  uint32_t nd_other_config;
  protobuf_c_boolean has_nd_ra_interval_min;
  uint32_t nd_ra_interval_min;
  protobuf_c_boolean has_nd_ra_interval_max;
  uint32_t nd_ra_interval_max;
  protobuf_c_boolean has_nd_ra_interval;
  uint32_t nd_ra_interval;
  protobuf_c_boolean has_nd_ra_min_delay;
  uint32_t nd_ra_min_delay;
  protobuf_c_boolean has_nd_retransmit_timer;
  uint32_t nd_retransmit_timer;
  protobuf_c_boolean has_nd_router_lifetime;
  uint32_t nd_router_lifetime;
  protobuf_c_boolean has_nd_base_reachable_time;
  uint32_t nd_base_reachable_time;
  protobuf_c_boolean has_nd_reachable_time;
  uint32_t nd_reachable_time;
  protobuf_c_boolean has_nd_delay_probe_time;
  uint32_t nd_delay_probe_time;
  protobuf_c_boolean has_nd_dad_attempts;
  uint32_t nd_dad_attempts;
  Cdb__ComposeAddrT *nd_dst;
  protobuf_c_boolean has_nd_last_ra_solicited;
  uint64_t nd_last_ra_solicited;
  protobuf_c_boolean has_nd_last_ra_unsolicited;
  uint64_t nd_last_ra_unsolicited;
  protobuf_c_boolean has_nd_ra_ocount;
  uint32_t nd_ra_ocount;
  protobuf_c_boolean has_nd_ra_solicited_ocount;
  uint32_t nd_ra_solicited_ocount;
  protobuf_c_boolean has_nd_ra_init_unsolicited_ocount;
  uint32_t nd_ra_init_unsolicited_ocount;
  protobuf_c_boolean has_nd_ra_solicited_time;
  uint32_t nd_ra_solicited_time;
  protobuf_c_boolean has_nd_ra_prefix_default_vlifetime;
  uint32_t nd_ra_prefix_default_vlifetime;
  protobuf_c_boolean has_nd_ra_prefix_default_plifetime;
  uint32_t nd_ra_prefix_default_plifetime;
  protobuf_c_boolean has_nd_ra_prefix_default_onlink;
  uint32_t nd_ra_prefix_default_onlink;
  protobuf_c_boolean has_nd_ra_prefix_default_auto;
  uint32_t nd_ra_prefix_default_auto;
  Cdb__ComposeAddrT *nd_rs_dest_addr;
  protobuf_c_boolean has_dhcpv6_client_flags;
  uint32_t dhcpv6_client_flags;
  protobuf_c_boolean has_dhcpv6_client_enable;
  uint32_t dhcpv6_client_enable;
  protobuf_c_boolean has_nat_enable;
  uint32_t nat_enable;
  protobuf_c_boolean has_nat_category_id;
  uint32_t nat_category_id;
  protobuf_c_boolean has_set_mirror_enable;
  uint32_t set_mirror_enable;
  protobuf_c_boolean has_pim_mode;
  uint32_t pim_mode;
  protobuf_c_boolean has_multicast;
  uint32_t multicast;
  protobuf_c_boolean has_igmp;
  uint32_t igmp;
  char *igmp_version;
  protobuf_c_boolean has_igmp_intf_limit_number;
  uint32_t igmp_intf_limit_number;
};
#define CDB__TBL_ROUTE_IF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_route_if__descriptor) \
    , NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0 }


/*
 * TBL_KERNEL_IF
 */
struct  _Cdb__TblKernelIfKey
{
  ProtobufCMessage base;
  uint32_t ifindex;
};
#define CDB__TBL_KERNEL_IF_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_kernel_if_key__descriptor) \
    , 0 }


struct  _Cdb__TblKernelIf
{
  ProtobufCMessage base;
  Cdb__TblKernelIfKey *key;
  char *name;
  Cdb__ComposeAddrIpv4T *ip_addr;
  protobuf_c_boolean has_masklen;
  uint32_t masklen;
  Cdb__ComposeKernelIfIpv6AddrT *ip_addr_prefix_length_v6;
  protobuf_c_boolean has_vrf_id;
  uint32_t vrf_id;
};
#define CDB__TBL_KERNEL_IF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_kernel_if__descriptor) \
    , NULL, NULL, NULL, 0,0, NULL, 0,0 }


/*
 * TBL_FEA_PORT_IF
 */
struct  _Cdb__TblFeaPortIfKey
{
  ProtobufCMessage base;
  uint64_t portid;
};
#define CDB__TBL_FEA_PORT_IF_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_port_if_key__descriptor) \
    , 0 }


struct  _Cdb__TblFeaPortIf
{
  ProtobufCMessage base;
  Cdb__TblFeaPortIfKey *key;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  char *name;
  protobuf_c_boolean has_lag_member;
  uint64_t lag_member;
};
#define CDB__TBL_FEA_PORT_IF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_port_if__descriptor) \
    , NULL, 0,0, NULL, 0,0 }


/*
 * TBL_VLAN
 */
struct  _Cdb__TblVlanKey
{
  ProtobufCMessage base;
  uint32_t vid;
};
#define CDB__TBL_VLAN_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vlan_key__descriptor) \
    , 0 }


struct  _Cdb__TblVlan
{
  ProtobufCMessage base;
  Cdb__TblVlanKey *key;
  protobuf_c_boolean has_max_mac_count;
  uint32_t max_mac_count;
  protobuf_c_boolean has_cur_mac_count;
  uint32_t cur_mac_count;
  protobuf_c_boolean has_instance;
  uint32_t instance;
  protobuf_c_boolean has_dhcsnooping;
  uint32_t dhcsnooping;
  protobuf_c_boolean has_arpsnooping;
  uint32_t arpsnooping;
  protobuf_c_boolean has_security_action;
  uint32_t security_action;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  protobuf_c_boolean has_mac_learning_en;
  uint32_t mac_learning_en;
  protobuf_c_boolean has_op_ifindex;
  uint64_t op_ifindex;
  protobuf_c_boolean has_member_port;
  ProtobufCBinaryData member_port;
  char *name;
  protobuf_c_boolean has_erps_domain_id;
  uint32_t erps_domain_id;
  protobuf_c_boolean has_dot1x_guest_vlan_num;
  uint32_t dot1x_guest_vlan_num;
  protobuf_c_boolean has_stats_en;
  uint32_t stats_en;
  protobuf_c_boolean has_g8032_ring_id;
  uint32_t g8032_ring_id;
};
#define CDB__TBL_VLAN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vlan__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_PVLAN
 */
struct  _Cdb__TblPvlanKey
{
  ProtobufCMessage base;
  uint32_t primary_vid;
};
#define CDB__TBL_PVLAN_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pvlan_key__descriptor) \
    , 0 }


struct  _Cdb__TblPvlan
{
  ProtobufCMessage base;
  Cdb__TblPvlanKey *key;
  protobuf_c_boolean has_community_group_id;
  ProtobufCBinaryData community_group_id;
};
#define CDB__TBL_PVLAN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pvlan__descriptor) \
    , NULL, 0,{0,NULL} }


/*
 * TBL_FDB
 */
struct  _Cdb__TblFdb
{
  ProtobufCMessage base;
  Cdb__ComposeFdbKeyT *key;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_static_;
  uint32_t static_;
  protobuf_c_boolean has_security;
  uint32_t security;
  protobuf_c_boolean has_hybrid_flow;
  uint32_t hybrid_flow;
};
#define CDB__TBL_FDB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fdb__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_MCFDB
 */
struct  _Cdb__TblMcfdb
{
  ProtobufCMessage base;
  Cdb__ComposeFdbKeyT *key;
  protobuf_c_boolean has_l2mc_port;
  ProtobufCBinaryData l2mc_port;
  protobuf_c_boolean has_action_ifindex;
  uint32_t action_ifindex;
  protobuf_c_boolean has_manual;
  uint32_t manual;
};
#define CDB__TBL_MCFDB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mcfdb__descriptor) \
    , NULL, 0,{0,NULL}, 0,0, 0,0 }


/*
 * TBL_MACFILTER
 */
struct  _Cdb__TblMacfilterKey
{
  ProtobufCMessage base;
  Cdb__ComposeMacAddrT *mac;
};
#define CDB__TBL_MACFILTER_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_macfilter_key__descriptor) \
    , NULL }


struct  _Cdb__TblMacfilter
{
  ProtobufCMessage base;
  Cdb__TblMacfilterKey *key;
};
#define CDB__TBL_MACFILTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_macfilter__descriptor) \
    , NULL }


/*
 * TBL_PSFDB
 */
struct  _Cdb__TblPsfdb
{
  ProtobufCMessage base;
  Cdb__ComposeFdbKeyT *key;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_port_security;
  uint32_t port_security;
};
#define CDB__TBL_PSFDB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_psfdb__descriptor) \
    , NULL, 0,0, 0,0 }


/*
 * TBL_IPSG_S_IP
 */
struct  _Cdb__TblIpsgSIpKey
{
  ProtobufCMessage base;
  Cdb__ComposePrefixT *ip;
};
#define CDB__TBL_IPSG_S_IP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ipsg_s_ip_key__descriptor) \
    , NULL }


struct  _Cdb__TblIpsgSIp
{
  ProtobufCMessage base;
  Cdb__TblIpsgSIpKey *key;
  protobuf_c_boolean has_vid;
  uint32_t vid;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  char *ifname;
  Cdb__ComposeMacAddrT *mac_addr;
  Cdb__ComposePrefixT *ip_addr;
};
#define CDB__TBL_IPSG_S_IP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ipsg_s_ip__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, NULL }


/*
 * TBL_IPSG_S_MAC
 */
struct  _Cdb__TblIpsgSMacKey
{
  ProtobufCMessage base;
  Cdb__ComposeMacAddrT *mac;
};
#define CDB__TBL_IPSG_S_MAC_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ipsg_s_mac_key__descriptor) \
    , NULL }


struct  _Cdb__TblIpsgSMac
{
  ProtobufCMessage base;
  Cdb__TblIpsgSMacKey *key;
  protobuf_c_boolean has_vid;
  uint32_t vid;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  char *ifname;
  Cdb__ComposeMacAddrT *mac_addr;
  Cdb__ComposePrefixT *ip_addr;
};
#define CDB__TBL_IPSG_S_MAC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ipsg_s_mac__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, NULL }


/*
 * TBL_IPSG_FIB
 */
struct  _Cdb__TblIpsgFib
{
  ProtobufCMessage base;
  Cdb__ComposeFdbKeyT *key;
  protobuf_c_boolean has_vid;
  uint32_t vid;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  char *ifname;
  Cdb__ComposeMacAddrT *mac_addr;
  Cdb__ComposePrefixT *ip_addr;
  protobuf_c_boolean has_ipsg_type;
  uint32_t ipsg_type;
  protobuf_c_boolean has_set_dhcbinding_ipsg_tbl_exsit;
  uint32_t set_dhcbinding_ipsg_tbl_exsit;
};
#define CDB__TBL_IPSG_FIB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ipsg_fib__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0 }


/*
 * TBL_BRG_GLOBAL
 */
struct  _Cdb__TblBrgGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_max_static_fdb;
  uint32_t max_static_fdb;
  protobuf_c_boolean has_max_l2mcast_fdb;
  uint32_t max_l2mcast_fdb;
  protobuf_c_boolean has_fdb_aging_time;
  uint32_t fdb_aging_time;
  protobuf_c_boolean has_oper_fdb_aging_time;
  uint32_t oper_fdb_aging_time;
  protobuf_c_boolean has_hw_learning_enable;
  uint32_t hw_learning_enable;
  protobuf_c_boolean has_ipsg_max_port_binding;
  uint32_t ipsg_max_port_binding;
  protobuf_c_boolean has_cur_ipv4_source_guard;
  uint32_t cur_ipv4_source_guard;
  protobuf_c_boolean has_port_isolate_mode;
  uint32_t port_isolate_mode;
  protobuf_c_boolean has_instance;
  ProtobufCBinaryData instance;
  protobuf_c_boolean has_pvlan_isolate_id;
  ProtobufCBinaryData pvlan_isolate_id;
  protobuf_c_boolean has_max_instance;
  uint32_t max_instance;
  protobuf_c_boolean has_max_pvlan_isolate_id;
  uint32_t max_pvlan_isolate_id;
  protobuf_c_boolean has_fdb_loop_errdis_en;
  uint32_t fdb_loop_errdis_en;
  protobuf_c_boolean has_fdb_loop_max_size;
  uint32_t fdb_loop_max_size;
  protobuf_c_boolean has_fdb_loop_add_rate;
  uint32_t fdb_loop_add_rate;
  protobuf_c_boolean has_fdb_loop_disc_cnt;
  uint32_t fdb_loop_disc_cnt;
  protobuf_c_boolean has_fdb_loop_curr_size;
  uint32_t fdb_loop_curr_size;
  protobuf_c_boolean has_trap_delay_up;
  uint32_t trap_delay_up;
  protobuf_c_boolean has_trap_delay_down;
  uint32_t trap_delay_down;
  protobuf_c_boolean has_fdb_all_flushing;
  uint32_t fdb_all_flushing;
  protobuf_c_boolean has_mac_based_vlan_class;
  uint32_t mac_based_vlan_class;
  protobuf_c_boolean has_ipv4_based_vlan_class;
  uint32_t ipv4_based_vlan_class;
  protobuf_c_boolean has_ipv6_based_vlan_class;
  uint32_t ipv6_based_vlan_class;
  protobuf_c_boolean has_max_mirror_mac_escape;
  uint32_t max_mirror_mac_escape;
  protobuf_c_boolean has_l2protocol_cos;
  uint32_t l2protocol_cos;
  protobuf_c_boolean has_vlan_mapping_entry_cnt;
  uint32_t vlan_mapping_entry_cnt;
  protobuf_c_boolean has_vlan_tpid_type1;
  uint32_t vlan_tpid_type1;
  protobuf_c_boolean has_tpid_type1_ref_cnt;
  uint32_t tpid_type1_ref_cnt;
  protobuf_c_boolean has_vlan_tpid_type2;
  uint32_t vlan_tpid_type2;
  protobuf_c_boolean has_tpid_type2_ref_cnt;
  uint32_t tpid_type2_ref_cnt;
};
#define CDB__TBL_BRG_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_brg_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_MSTP_PORT
 */
struct  _Cdb__TblMstpPortKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_MSTP_PORT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mstp_port_key__descriptor) \
    , NULL }


struct  _Cdb__TblMstpPort
{
  ProtobufCMessage base;
  Cdb__TblMstpPortKey *key;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_adminportpathcost;
  uint32_t adminportpathcost;
  protobuf_c_boolean has_portpathcost;
  uint32_t portpathcost;
  protobuf_c_boolean has_forward_transitions;
  uint32_t forward_transitions;
  protobuf_c_boolean has_tx_bpdu_count;
  uint32_t tx_bpdu_count;
  protobuf_c_boolean has_tx_error_count;
  uint32_t tx_error_count;
  protobuf_c_boolean has_rx_bpdu_count;
  uint32_t rx_bpdu_count;
  protobuf_c_boolean has_rx_error_count;
  uint32_t rx_error_count;
  protobuf_c_boolean has_port_enable;
  uint32_t port_enable;
  protobuf_c_boolean has_bpdu_loop_count;
  uint32_t bpdu_loop_count;
  protobuf_c_boolean has_restricted_role;
  uint32_t restricted_role;
  protobuf_c_boolean has_restricted_tcn;
  uint32_t restricted_tcn;
  protobuf_c_boolean has_admin_bpduguard;
  uint32_t admin_bpduguard;
  protobuf_c_boolean has_oper_bpduguard;
  uint32_t oper_bpduguard;
  protobuf_c_boolean has_admin_bpdufilter;
  uint32_t admin_bpdufilter;
  protobuf_c_boolean has_oper_bpdufilter;
  uint32_t oper_bpdufilter;
  protobuf_c_boolean has_admin_rootguard;
  uint32_t admin_rootguard;
  protobuf_c_boolean has_oper_rootguard;
  uint32_t oper_rootguard;
  protobuf_c_boolean has_admin_loopguard;
  uint32_t admin_loopguard;
  protobuf_c_boolean has_oper_loopguard;
  uint32_t oper_loopguard;
  protobuf_c_boolean has_cisco_cfg_format_id;
  uint32_t cisco_cfg_format_id;
  protobuf_c_boolean has_adminp2pmac;
  uint32_t adminp2pmac;
  protobuf_c_boolean has_operp2pmac;
  uint32_t operp2pmac;
  protobuf_c_boolean has_agree;
  uint32_t agree;
  protobuf_c_boolean has_agreed;
  uint32_t agreed;
  protobuf_c_boolean has_adminforceversion;
  uint32_t adminforceversion;
  protobuf_c_boolean has_forceversion;
  uint32_t forceversion;
  Cdb__ComposeMstpBrgIdT *designated_rootid;
  protobuf_c_boolean has_designated_rootpathcost;
  uint32_t designated_rootpathcost;
  Cdb__ComposeMstpBrgIdT *designated_regionrootid;
  protobuf_c_boolean has_designated_introotpathcost;
  uint32_t designated_introotpathcost;
  Cdb__ComposeMstpBrgIdT *designated_designatedbridgeid;
  protobuf_c_boolean has_designated_designatedportid;
  uint32_t designated_designatedportid;
  protobuf_c_boolean has_designated_bridgeportid;
  uint32_t designated_bridgeportid;
  protobuf_c_boolean has_designated_messageage;
  uint32_t designated_messageage;
  protobuf_c_boolean has_designated_fwddelay;
  uint32_t designated_fwddelay;
  protobuf_c_boolean has_designated_hellotime;
  uint32_t designated_hellotime;
  protobuf_c_boolean has_designated_maxage;
  uint32_t designated_maxage;
  protobuf_c_boolean has_disputed;
  uint32_t disputed;
  protobuf_c_boolean has_fdbflush;
  uint32_t fdbflush;
  protobuf_c_boolean has_forward;
  uint32_t forward;
  protobuf_c_boolean has_forwarding;
  uint32_t forwarding;
  protobuf_c_boolean has_infois;
  uint32_t infois;
  protobuf_c_boolean has_learn;
  uint32_t learn;
  protobuf_c_boolean has_learning;
  uint32_t learning;
  protobuf_c_boolean has_mcheck;
  uint32_t mcheck;
  protobuf_c_boolean has_newinfo;
  uint32_t newinfo;
  protobuf_c_boolean has_newinfomsti;
  uint32_t newinfomsti;
  protobuf_c_boolean has_adminedge;
  uint32_t adminedge;
  protobuf_c_boolean has_operedge;
  uint32_t operedge;
  protobuf_c_boolean has_portenabled;
  uint32_t portenabled;
  protobuf_c_boolean has_portid;
  uint32_t portid;
  protobuf_c_boolean has_priority;
  uint32_t priority;
  Cdb__ComposeMstpBrgIdT *port_rootid;
  protobuf_c_boolean has_port_rootpathcost;
  uint32_t port_rootpathcost;
  Cdb__ComposeMstpBrgIdT *port_regionrootid;
  protobuf_c_boolean has_port_introotpathcost;
  uint32_t port_introotpathcost;
  Cdb__ComposeMstpBrgIdT *port_designatedbridgeid;
  protobuf_c_boolean has_port_designatedportid;
  uint32_t port_designatedportid;
  protobuf_c_boolean has_port_bridgeportid;
  uint32_t port_bridgeportid;
  protobuf_c_boolean has_port_messageage;
  uint32_t port_messageage;
  protobuf_c_boolean has_port_fwddelay;
  uint32_t port_fwddelay;
  protobuf_c_boolean has_port_hellotime;
  uint32_t port_hellotime;
  protobuf_c_boolean has_port_maxage;
  uint32_t port_maxage;
  protobuf_c_boolean has_proposed;
  uint32_t proposed;
  protobuf_c_boolean has_proposing;
  uint32_t proposing;
  protobuf_c_boolean has_rcvdbpdu;
  uint32_t rcvdbpdu;
  protobuf_c_boolean has_rcvdinfo;
  uint32_t rcvdinfo;
  protobuf_c_boolean has_rcvdinfoupdatetimers;
  uint32_t rcvdinfoupdatetimers;
  protobuf_c_boolean has_rcvdmsg;
  uint32_t rcvdmsg;
  protobuf_c_boolean has_rcvdmstp;
  uint32_t rcvdmstp;
  protobuf_c_boolean has_rcvdrstp;
  uint32_t rcvdrstp;
  protobuf_c_boolean has_rcvdstp;
  uint32_t rcvdstp;
  protobuf_c_boolean has_rcvdtc;
  uint32_t rcvdtc;
  protobuf_c_boolean has_rcvdtcack;
  uint32_t rcvdtcack;
  protobuf_c_boolean has_rcvdtcn;
  uint32_t rcvdtcn;
  protobuf_c_boolean has_reroot;
  uint32_t reroot;
  protobuf_c_boolean has_reselect;
  uint32_t reselect;
  protobuf_c_boolean has_role;
  uint32_t role;
  protobuf_c_boolean has_selected;
  uint32_t selected;
  protobuf_c_boolean has_selectedrole;
  uint32_t selectedrole;
  protobuf_c_boolean has_sendrstp;
  uint32_t sendrstp;
  protobuf_c_boolean has_sync;
  uint32_t sync;
  protobuf_c_boolean has_synced;
  uint32_t synced;
  protobuf_c_boolean has_tcack;
  uint32_t tcack;
  protobuf_c_boolean has_tcprop;
  uint32_t tcprop;
  protobuf_c_boolean has_txcount;
  uint32_t txcount;
  protobuf_c_boolean has_updtinfo;
  uint32_t updtinfo;
  protobuf_c_boolean has_rerooted;
  uint32_t rerooted;
  protobuf_c_boolean has_rstpversion;
  uint32_t rstpversion;
  protobuf_c_boolean has_stpversion;
  uint32_t stpversion;
  protobuf_c_boolean has_rcvdinternal;
  uint32_t rcvdinternal;
  protobuf_c_boolean has_rcvdinternalchange;
  uint32_t rcvdinternalchange;
  protobuf_c_boolean has_hopcount;
  uint32_t hopcount;
  protobuf_c_boolean has_prx_state;
  uint32_t prx_state;
  protobuf_c_boolean has_ppm_state;
  uint32_t ppm_state;
  protobuf_c_boolean has_bdm_state;
  uint32_t bdm_state;
  protobuf_c_boolean has_ptx_state;
  uint32_t ptx_state;
  protobuf_c_boolean has_pim_state;
  uint32_t pim_state;
  protobuf_c_boolean has_prt_state;
  uint32_t prt_state;
  protobuf_c_boolean has_pst_state;
  uint32_t pst_state;
  protobuf_c_boolean has_tcm_state;
  uint32_t tcm_state;
  protobuf_c_boolean has_fea_state;
  uint32_t fea_state;
};
#define CDB__TBL_MSTP_PORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mstp_port__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_MSTI_PORT
 */
struct  _Cdb__TblMstiPort
{
  ProtobufCMessage base;
  Cdb__ComposeMstiPortKeyT *key;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_adminportpathcost;
  uint32_t adminportpathcost;
  protobuf_c_boolean has_portpathcost;
  uint32_t portpathcost;
  protobuf_c_boolean has_forward_transitions;
  uint32_t forward_transitions;
  protobuf_c_boolean has_newinfomsti;
  uint32_t newinfomsti;
  protobuf_c_boolean has_bpdu_loop_count;
  uint32_t bpdu_loop_count;
  protobuf_c_boolean has_restricted_role;
  uint32_t restricted_role;
  protobuf_c_boolean has_restricted_tcn;
  uint32_t restricted_tcn;
  protobuf_c_boolean has_oper_rootguard;
  uint32_t oper_rootguard;
  protobuf_c_boolean has_oper_loopguard;
  uint32_t oper_loopguard;
  protobuf_c_boolean has_agree;
  uint32_t agree;
  protobuf_c_boolean has_agreed;
  uint32_t agreed;
  protobuf_c_boolean has_adminforceversion;
  uint32_t adminforceversion;
  Cdb__ComposeMstpBrgIdT *designated_regionrootid;
  protobuf_c_boolean has_designated_introotpathcost;
  uint32_t designated_introotpathcost;
  Cdb__ComposeMstpBrgIdT *designated_designatedbridgeid;
  protobuf_c_boolean has_designated_designatedportid;
  uint32_t designated_designatedportid;
  protobuf_c_boolean has_designated_bridgeportid;
  uint32_t designated_bridgeportid;
  protobuf_c_boolean has_designated_messageage;
  uint32_t designated_messageage;
  protobuf_c_boolean has_designated_fwddelay;
  uint32_t designated_fwddelay;
  protobuf_c_boolean has_designated_hellotime;
  uint32_t designated_hellotime;
  protobuf_c_boolean has_designated_maxage;
  uint32_t designated_maxage;
  protobuf_c_boolean has_disputed;
  uint32_t disputed;
  protobuf_c_boolean has_fdbflush;
  uint32_t fdbflush;
  protobuf_c_boolean has_forward;
  uint32_t forward;
  protobuf_c_boolean has_forwarding;
  uint32_t forwarding;
  protobuf_c_boolean has_infois;
  uint32_t infois;
  protobuf_c_boolean has_learn;
  uint32_t learn;
  protobuf_c_boolean has_learning;
  uint32_t learning;
  protobuf_c_boolean has_newinfo;
  uint32_t newinfo;
  protobuf_c_boolean has_portid;
  uint32_t portid;
  protobuf_c_boolean has_priority;
  uint32_t priority;
  Cdb__ComposeMstpBrgIdT *port_rootid;
  protobuf_c_boolean has_port_rootpathcost;
  uint32_t port_rootpathcost;
  Cdb__ComposeMstpBrgIdT *port_designatedbridgeid;
  protobuf_c_boolean has_port_designatedportid;
  uint32_t port_designatedportid;
  protobuf_c_boolean has_port_bridgeportid;
  uint32_t port_bridgeportid;
  protobuf_c_boolean has_port_messageage;
  uint32_t port_messageage;
  protobuf_c_boolean has_port_fwddelay;
  uint32_t port_fwddelay;
  protobuf_c_boolean has_port_hellotime;
  uint32_t port_hellotime;
  protobuf_c_boolean has_port_maxage;
  uint32_t port_maxage;
  protobuf_c_boolean has_proposed;
  uint32_t proposed;
  protobuf_c_boolean has_proposing;
  uint32_t proposing;
  protobuf_c_boolean has_rcvdbpdu;
  uint32_t rcvdbpdu;
  protobuf_c_boolean has_rcvdinfo;
  uint32_t rcvdinfo;
  protobuf_c_boolean has_rcvdmsg;
  uint32_t rcvdmsg;
  protobuf_c_boolean has_rcvdrstp;
  uint32_t rcvdrstp;
  protobuf_c_boolean has_rcvdstp;
  uint32_t rcvdstp;
  protobuf_c_boolean has_rcvdtc;
  uint32_t rcvdtc;
  protobuf_c_boolean has_rcvdtcack;
  uint32_t rcvdtcack;
  protobuf_c_boolean has_rcvdtcn;
  uint32_t rcvdtcn;
  protobuf_c_boolean has_reroot;
  uint32_t reroot;
  protobuf_c_boolean has_reselect;
  uint32_t reselect;
  protobuf_c_boolean has_role;
  uint32_t role;
  protobuf_c_boolean has_selected;
  uint32_t selected;
  protobuf_c_boolean has_selectedrole;
  uint32_t selectedrole;
  protobuf_c_boolean has_sync;
  uint32_t sync;
  protobuf_c_boolean has_synced;
  uint32_t synced;
  protobuf_c_boolean has_tcack;
  uint32_t tcack;
  protobuf_c_boolean has_tcprop;
  uint32_t tcprop;
  protobuf_c_boolean has_txcount;
  uint32_t txcount;
  protobuf_c_boolean has_updtinfo;
  uint32_t updtinfo;
  protobuf_c_boolean has_rerooted;
  uint32_t rerooted;
  protobuf_c_boolean has_hopcount;
  uint32_t hopcount;
  protobuf_c_boolean has_ppm_state;
  uint32_t ppm_state;
  protobuf_c_boolean has_pim_state;
  uint32_t pim_state;
  protobuf_c_boolean has_prt_state;
  uint32_t prt_state;
  protobuf_c_boolean has_pst_state;
  uint32_t pst_state;
  protobuf_c_boolean has_tcm_state;
  uint32_t tcm_state;
  protobuf_c_boolean has_fea_state;
  uint32_t fea_state;
};
#define CDB__TBL_MSTI_PORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_msti_port__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_MSTP_INSTANCE
 */
struct  _Cdb__TblMstpInstanceKey
{
  ProtobufCMessage base;
  uint32_t instance;
};
#define CDB__TBL_MSTP_INSTANCE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mstp_instance_key__descriptor) \
    , 0 }


struct  _Cdb__TblMstpInstance
{
  ProtobufCMessage base;
  Cdb__TblMstpInstanceKey *key;
  protobuf_c_boolean has_instance_oid;
  uint64_t instance_oid;
  protobuf_c_boolean has_vlan;
  ProtobufCBinaryData vlan;
  protobuf_c_boolean has_bridge_priority;
  uint32_t bridge_priority;
  Cdb__ComposeMstpBrgIdT *bridge_id;
  protobuf_c_boolean has_root_portid;
  uint32_t root_portid;
  Cdb__ComposeMstpBrgIdT *root_rootid;
  protobuf_c_boolean has_root_rootpathcost;
  uint32_t root_rootpathcost;
  Cdb__ComposeMstpBrgIdT *root_designatedbridgeid;
  protobuf_c_boolean has_root_designatedportid;
  uint32_t root_designatedportid;
  protobuf_c_boolean has_root_bridgeportid;
  uint32_t root_bridgeportid;
  protobuf_c_boolean has_root_messageage;
  uint32_t root_messageage;
  protobuf_c_boolean has_root_fwddelay;
  uint32_t root_fwddelay;
  protobuf_c_boolean has_root_hellotime;
  uint32_t root_hellotime;
  protobuf_c_boolean has_root_maxage;
  uint32_t root_maxage;
  protobuf_c_boolean has_prs_state;
  uint32_t prs_state;
  protobuf_c_boolean has_hopcount;
  uint32_t hopcount;
  protobuf_c_boolean has_g8032_ring_id;
  uint32_t g8032_ring_id;
};
#define CDB__TBL_MSTP_INSTANCE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mstp_instance__descriptor) \
    , NULL, 0,0, 0,{0,NULL}, 0,0, NULL, 0,0, NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_MSTP_GLOBAL
 */
struct  _Cdb__TblMstpGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_no_mst_config;
  uint32_t no_mst_config;
  protobuf_c_boolean has_external_root_path_cost;
  uint32_t external_root_path_cost;
  protobuf_c_boolean has_internal_root_path_cost;
  uint32_t internal_root_path_cost;
  protobuf_c_boolean has_root_portid;
  uint32_t root_portid;
  Cdb__ComposeMstpBrgIdT *root_rootid;
  protobuf_c_boolean has_root_rootpathcost;
  uint32_t root_rootpathcost;
  Cdb__ComposeMstpBrgIdT *root_regionrootid;
  protobuf_c_boolean has_root_introotpathcost;
  uint32_t root_introotpathcost;
  Cdb__ComposeMstpBrgIdT *root_designatedbridgeid;
  protobuf_c_boolean has_root_designatedportid;
  uint32_t root_designatedportid;
  protobuf_c_boolean has_root_bridgeportid;
  uint32_t root_bridgeportid;
  protobuf_c_boolean has_root_messageage;
  uint32_t root_messageage;
  protobuf_c_boolean has_root_fwddelay;
  uint32_t root_fwddelay;
  protobuf_c_boolean has_root_hellotime;
  uint32_t root_hellotime;
  protobuf_c_boolean has_root_maxage;
  uint32_t root_maxage;
  protobuf_c_boolean has_bridge_fwddelay;
  uint32_t bridge_fwddelay;
  protobuf_c_boolean has_bridge_hellotime;
  uint32_t bridge_hellotime;
  protobuf_c_boolean has_bridge_maxage;
  uint32_t bridge_maxage;
  protobuf_c_boolean has_bridge_maxhops;
  uint32_t bridge_maxhops;
  protobuf_c_boolean has_bridge_priority;
  uint32_t bridge_priority;
  Cdb__ComposeMstpBrgIdT *bridge_id;
  Cdb__ComposeSalTimeT *last_tc_time;
  protobuf_c_boolean has_num_topo_changes;
  uint32_t num_topo_changes;
  protobuf_c_boolean has_mlag_role;
  uint32_t mlag_role;
  protobuf_c_boolean has_mlag_enable;
  uint32_t mlag_enable;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  protobuf_c_boolean has_topology_change_detected;
  uint32_t topology_change_detected;
  protobuf_c_boolean has_bpduguard;
  uint32_t bpduguard;
  protobuf_c_boolean has_bpdufilter;
  uint32_t bpdufilter;
  protobuf_c_boolean has_admin_cisco;
  uint32_t admin_cisco;
  protobuf_c_boolean has_oper_cisco;
  uint32_t oper_cisco;
  protobuf_c_boolean has_txholdcount;
  uint32_t txholdcount;
  protobuf_c_boolean has_pathcost_standard;
  uint32_t pathcost_standard;
  protobuf_c_boolean has_tc_protection;
  uint32_t tc_protection;
  protobuf_c_boolean has_hopcount;
  uint32_t hopcount;
  protobuf_c_boolean has_recv_tcn_threshold;
  uint32_t recv_tcn_threshold;
  protobuf_c_boolean has_recv_tcn_number;
  uint32_t recv_tcn_number;
  protobuf_c_boolean has_root_port_ifindex;
  uint32_t root_port_ifindex;
  protobuf_c_boolean has_alternate_port_ifndex;
  uint32_t alternate_port_ifndex;
  protobuf_c_boolean has_prs_state;
  uint32_t prs_state;
  protobuf_c_boolean has_mstp_format_id;
  uint32_t mstp_format_id;
  protobuf_c_boolean has_mstp_revision_level;
  uint32_t mstp_revision_level;
  char *mstp_region_name;
  Cdb__ComposeMstpDigestT *mstp_digest;
  protobuf_c_boolean has_of_exclude_all_vlan;
  uint32_t of_exclude_all_vlan;
  protobuf_c_boolean has_of_include_vlan_bmp;
  ProtobufCBinaryData of_include_vlan_bmp;
};
#define CDB__TBL_MSTP_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mstp_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,{0,NULL} }


/*
 * TBL_LLDP_GLOBAL
 */
struct  _Cdb__TblLldpGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  protobuf_c_boolean has_system_mac_en;
  uint32_t system_mac_en;
  protobuf_c_boolean has_config_flag;
  uint32_t config_flag;
  Cdb__ComposeMacAddrT *system_mac;
  Cdb__ComposeAddrT *management_ip;
  protobuf_c_boolean has_tx_hold;
  uint32_t tx_hold;
  protobuf_c_boolean has_tx_interval;
  uint32_t tx_interval;
  protobuf_c_boolean has_tx_delay;
  uint32_t tx_delay;
  protobuf_c_boolean has_reinit_delay;
  uint32_t reinit_delay;
  protobuf_c_boolean has_system_capability;
  uint32_t system_capability;
  char *system_name;
  char *system_desc;
  char *system_desc_default;
};
#define CDB__TBL_LLDP_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_lldp_global__descriptor) \
    , 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL }


/*
 * TBL_LLDP_IF
 */
struct  _Cdb__TblLldpIfKey
{
  ProtobufCMessage base;
  uint32_t ifindex;
};
#define CDB__TBL_LLDP_IF_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_lldp_if_key__descriptor) \
    , 0 }


struct  _Cdb__TblLldpIf
{
  ProtobufCMessage base;
  Cdb__TblLldpIfKey *key;
  protobuf_c_boolean has_mode;
  uint32_t mode;
  protobuf_c_boolean has_tx_ttl;
  uint32_t tx_ttl;
  protobuf_c_boolean has_tx_count;
  uint32_t tx_count;
  protobuf_c_boolean has_rx_count;
  uint32_t rx_count;
  protobuf_c_boolean has_rx_error_count;
  uint32_t rx_error_count;
  protobuf_c_boolean has_rx_discard_count;
  uint32_t rx_discard_count;
  protobuf_c_boolean has_tlv_discard_count;
  uint32_t tlv_discard_count;
  protobuf_c_boolean has_tlv_unrecognized_count;
  uint32_t tlv_unrecognized_count;
  protobuf_c_boolean has_aged_count;
  uint32_t aged_count;
  protobuf_c_boolean has_tlv_enable_basic;
  uint32_t tlv_enable_basic;
  protobuf_c_boolean has_tlv_enable_8021;
  uint32_t tlv_enable_8021;
  protobuf_c_boolean has_tlv_enable_8023;
  uint32_t tlv_enable_8023;
  protobuf_c_boolean has_tlv_enable_med;
  uint32_t tlv_enable_med;
  protobuf_c_boolean has_ppvid_flag;
  uint32_t ppvid_flag;
  protobuf_c_boolean has_ppvid;
  uint32_t ppvid;
  protobuf_c_boolean has_protocol_id;
  uint32_t protocol_id;
  char *vlan_name;
  protobuf_c_boolean has_vlan_name_id;
  uint32_t vlan_name_id;
  protobuf_c_boolean has_mdi_support;
  uint32_t mdi_support;
  protobuf_c_boolean has_pse_power_pair;
  uint32_t pse_power_pair;
  protobuf_c_boolean has_power_class;
  uint32_t power_class;
  protobuf_c_boolean has_med_capbility;
  uint32_t med_capbility;
  protobuf_c_boolean has_med_dev_type;
  uint32_t med_dev_type;
  protobuf_c_boolean has_med_power_flag;
  uint32_t med_power_flag;
  protobuf_c_boolean has_med_power_value;
  uint32_t med_power_value;
  protobuf_c_boolean has_med_policy_flag;
  uint32_t med_policy_flag;
  protobuf_c_boolean has_med_lci_format;
  uint32_t med_lci_format;
  char *med_lci_coordinate;
  char *med_lci_elin;
  Cdb__ComposeLldpCivicAddressT *med_lci_civic;
};
#define CDB__TBL_LLDP_IF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_lldp_if__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL }


/*
 * TBL_MLAG
 */
struct  _Cdb__TblMlag
{
  ProtobufCMessage base;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  Cdb__ComposeAddrT *local_addr;
  protobuf_c_boolean has_reload_delay_interval;
  uint32_t reload_delay_interval;
  protobuf_c_boolean has_reload_delay_auto;
  uint32_t reload_delay_auto;
  protobuf_c_boolean has_role;
  uint32_t role;
  Cdb__ComposeMacAddrT *local_sysid;
  Cdb__ComposeMacAddrT *remote_sysid;
  Cdb__ComposeMacAddrT *mlag_sysid;
  Cdb__ComposeMacAddrT *peer_routemac;
  protobuf_c_boolean has_local_syspri;
  uint32_t local_syspri;
  protobuf_c_boolean has_remote_syspri;
  uint32_t remote_syspri;
  protobuf_c_boolean has_mlag_syspri;
  uint32_t mlag_syspri;
  protobuf_c_boolean has_peer_vlanif_bmp;
  ProtobufCBinaryData peer_vlanif_bmp;
  protobuf_c_boolean has_peer_fdb_bmp;
  ProtobufCBinaryData peer_fdb_bmp;
  protobuf_c_boolean has_peer_link_ifindex;
  uint32_t peer_link_ifindex;
  protobuf_c_boolean has_flush_fdb_mi;
  uint32_t flush_fdb_mi;
};
#define CDB__TBL_MLAG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mlag__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0 }


/*
 * TBL_MLAG_PEER
 */
struct  _Cdb__TblMlagPeer
{
  ProtobufCMessage base;
  Cdb__ComposeAddrT *peer_addr;
  protobuf_c_boolean has_set_timers;
  uint32_t set_timers;
  protobuf_c_boolean has_holdtime;
  uint32_t holdtime;
  protobuf_c_boolean has_keepalive;
  uint32_t keepalive;
  protobuf_c_boolean has_server_sock;
  int32_t server_sock;
  protobuf_c_boolean has_client_sock;
  int32_t client_sock;
  protobuf_c_boolean has_v_auto_start;
  uint32_t v_auto_start;
  protobuf_c_boolean has_v_connect;
  uint32_t v_connect;
  protobuf_c_boolean has_v_holdtime;
  uint32_t v_holdtime;
  protobuf_c_boolean has_v_keepalive;
  uint32_t v_keepalive;
  protobuf_c_boolean has_open_in;
  uint32_t open_in;
  protobuf_c_boolean has_open_out;
  uint32_t open_out;
  protobuf_c_boolean has_keepalive_in;
  uint32_t keepalive_in;
  protobuf_c_boolean has_keepalive_out;
  uint32_t keepalive_out;
  protobuf_c_boolean has_disconnect_in;
  uint32_t disconnect_in;
  protobuf_c_boolean has_disconnect_out;
  uint32_t disconnect_out;
  protobuf_c_boolean has_fdbsync_in;
  uint32_t fdbsync_in;
  protobuf_c_boolean has_fdbsync_out;
  uint32_t fdbsync_out;
  protobuf_c_boolean has_failover_in;
  uint32_t failover_in;
  protobuf_c_boolean has_failover_out;
  uint32_t failover_out;
  protobuf_c_boolean has_conf_in;
  uint32_t conf_in;
  protobuf_c_boolean has_conf_out;
  uint32_t conf_out;
  protobuf_c_boolean has_syspri_in;
  uint32_t syspri_in;
  protobuf_c_boolean has_syspri_out;
  uint32_t syspri_out;
  protobuf_c_boolean has_peer_fdb_in;
  uint32_t peer_fdb_in;
  protobuf_c_boolean has_peer_fdb_out;
  uint32_t peer_fdb_out;
  protobuf_c_boolean has_stp_in;
  uint32_t stp_in;
  protobuf_c_boolean has_stp_out;
  uint32_t stp_out;
  protobuf_c_boolean has_stp_global_in;
  uint32_t stp_global_in;
  protobuf_c_boolean has_stp_global_out;
  uint32_t stp_global_out;
  protobuf_c_boolean has_stp_port_in;
  uint32_t stp_port_in;
  protobuf_c_boolean has_stp_port_out;
  uint32_t stp_port_out;
  protobuf_c_boolean has_stp_packet_in;
  uint32_t stp_packet_in;
  protobuf_c_boolean has_stp_packet_out;
  uint32_t stp_packet_out;
  protobuf_c_boolean has_stp_instance_in;
  uint32_t stp_instance_in;
  protobuf_c_boolean has_stp_instance_out;
  uint32_t stp_instance_out;
  protobuf_c_boolean has_stp_state_in;
  uint32_t stp_state_in;
  protobuf_c_boolean has_stp_state_out;
  uint32_t stp_state_out;
  protobuf_c_boolean has_established;
  uint32_t established;
  protobuf_c_boolean has_dropped;
  uint32_t dropped;
  protobuf_c_boolean has_ttl;
  uint32_t ttl;
  Cdb__ComposeSalTimeT *uptime;
  Cdb__ComposeSalTimeT *lastread;
  protobuf_c_boolean has_mpf_state;
  uint32_t mpf_state;
};
#define CDB__TBL_MLAG_PEER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mlag_peer__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0 }


/*
 * TBL_MLAG_PORT
 */
struct  _Cdb__TblMlagPortKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_MLAG_PORT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mlag_port_key__descriptor) \
    , 0 }


struct  _Cdb__TblMlagPort
{
  ProtobufCMessage base;
  Cdb__TblMlagPortKey *key;
  protobuf_c_boolean has_peer_conf;
  uint32_t peer_conf;
  protobuf_c_boolean has_peer_if_up;
  uint32_t peer_if_up;
  protobuf_c_boolean has_stp_port_enable;
  uint32_t stp_port_enable;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_protect_en;
  uint32_t protect_en;
};
#define CDB__TBL_MLAG_PORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mlag_port__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_ISOLATION
 */
struct  _Cdb__TblIsolationKey
{
  ProtobufCMessage base;
  uint32_t isolation_id;
};
#define CDB__TBL_ISOLATION_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_isolation_key__descriptor) \
    , 0 }


struct  _Cdb__TblIsolation
{
  ProtobufCMessage base;
  Cdb__TblIsolationKey *key;
  protobuf_c_boolean has_isolation_oid;
  uint64_t isolation_oid;
};
#define CDB__TBL_ISOLATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_isolation__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_ROUTE_GLOBAL
 */
struct  _Cdb__TblRouteGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_gratuitous_arp_learn_en;
  uint32_t gratuitous_arp_learn_en;
  protobuf_c_boolean has_arp_pkt_rx_count;
  uint32_t arp_pkt_rx_count;
  protobuf_c_boolean has_arp_pkt_tx_count;
  uint32_t arp_pkt_tx_count;
  protobuf_c_boolean has_arp_pkt_discard_count;
  uint32_t arp_pkt_discard_count;
  protobuf_c_boolean has_arp_count;
  uint32_t arp_count;
  protobuf_c_boolean has_multipath_num;
  uint32_t multipath_num;
  protobuf_c_boolean has_max_static;
  uint32_t max_static;
  protobuf_c_boolean has_icmp_error_ratelimit;
  uint32_t icmp_error_ratelimit;
  protobuf_c_boolean has_ip_redirects_global_en;
  uint32_t ip_redirects_global_en;
  protobuf_c_boolean has_current_static_routes;
  uint32_t current_static_routes;
  protobuf_c_boolean has_current_ecmp_routes;
  uint32_t current_ecmp_routes;
  protobuf_c_boolean has_current_ecmp_groups;
  uint32_t current_ecmp_groups;
  protobuf_c_boolean has_current_remote_routes;
  uint32_t current_remote_routes;
  protobuf_c_boolean has_current_host_routes;
  uint32_t current_host_routes;
  protobuf_c_boolean has_current_indirect_ipv4_route_num;
  uint32_t current_indirect_ipv4_route_num;
  protobuf_c_boolean has_current_static_v6_routes;
  uint32_t current_static_v6_routes;
  protobuf_c_boolean has_current_ecmp_v6_routes;
  uint32_t current_ecmp_v6_routes;
  protobuf_c_boolean has_current_ecmp_v6_groups;
  uint32_t current_ecmp_v6_groups;
  protobuf_c_boolean has_current_remote_v6_routes;
  uint32_t current_remote_v6_routes;
  protobuf_c_boolean has_current_indirect_ipv6_route_num;
  uint32_t current_indirect_ipv6_route_num;
  protobuf_c_boolean has_active_local;
  uint32_t active_local;
  protobuf_c_boolean has_active_static;
  uint32_t active_static;
  protobuf_c_boolean has_active_connected;
  uint32_t active_connected;
  protobuf_c_boolean has_active_rip;
  uint32_t active_rip;
  protobuf_c_boolean has_active_ospf;
  uint32_t active_ospf;
  protobuf_c_boolean has_active_bgp;
  uint32_t active_bgp;
  protobuf_c_boolean has_arpinsp_logbuf_entrynum;
  uint32_t arpinsp_logbuf_entrynum;
  protobuf_c_boolean has_arpinsp_logbuf_curnum;
  uint32_t arpinsp_logbuf_curnum;
  protobuf_c_boolean has_arpinsp_logbuf_lognum;
  uint32_t arpinsp_logbuf_lognum;
  protobuf_c_boolean has_arpinsp_logbuf_logsec;
  uint32_t arpinsp_logbuf_logsec;
  protobuf_c_boolean has_arpinsp_validate_flag;
  uint32_t arpinsp_validate_flag;
  protobuf_c_boolean has_fib_full;
  uint32_t fib_full;
  protobuf_c_boolean has_ipv6_enable;
  uint32_t ipv6_enable;
  protobuf_c_boolean has_nd_hop_limit;
  uint32_t nd_hop_limit;
  protobuf_c_boolean has_vty_connected;
  uint32_t vty_connected;
  protobuf_c_boolean has_vty_nonconn_count;
  uint32_t vty_nonconn_count;
  protobuf_c_boolean has_vty_mode;
  uint32_t vty_mode;
  Cdb__ComposeSalTimeT *arpratelimit_timer_start_time_sec;
  Cdb__ComposeSalTimeT *arpratelimit_timer_start_time_msec;
  protobuf_c_boolean has_buf;
  ProtobufCBinaryData buf;
  protobuf_c_boolean has_pkt_len;
  uint32_t pkt_len;
  protobuf_c_boolean has_nd_count;
  uint32_t nd_count;
};
#define CDB__TBL_ROUTE_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_route_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,{0,NULL}, 0,0, 0,0 }


/*
 * TBL_BGP
 */
struct  _Cdb__TblBgpKey
{
  ProtobufCMessage base;
  uint32_t as_id;
};
#define CDB__TBL_BGP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_bgp_key__descriptor) \
    , 0 }


struct  _Cdb__TblBgp
{
  ProtobufCMessage base;
  Cdb__TblBgpKey *key;
  Cdb__ComposeAddrIpv4T *router_id;
  protobuf_c_boolean has_redistribute;
  uint32_t redistribute;
  size_t n_red_metric;
  uint32_t *red_metric;
};
#define CDB__TBL_BGP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_bgp__descriptor) \
    , NULL, NULL, 0,0, 0,NULL }


/*
 * TBL_BGP_NETWORK
 */
struct  _Cdb__TblBgpNetwork
{
  ProtobufCMessage base;
  Cdb__ComposeAddrT *key;
  Cdb__ComposeAddrIpv4T *mask;
};
#define CDB__TBL_BGP_NETWORK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_bgp_network__descriptor) \
    , NULL, NULL }


/*
 * TBL_BGP_NEIGHBOR
 */
struct  _Cdb__TblBgpNeighbor
{
  ProtobufCMessage base;
  Cdb__ComposeAddrT *key;
  protobuf_c_boolean has_remote_as;
  uint32_t remote_as;
  protobuf_c_boolean has_ebgp_multihop;
  uint32_t ebgp_multihop;
  char *password;
  char *intf_name;
  Cdb__ComposeAddrIpv4T *intf_addr;
  protobuf_c_boolean has_shutdown;
  uint32_t shutdown;
  protobuf_c_boolean has_next_hop_self;
  uint32_t next_hop_self;
};
#define CDB__TBL_BGP_NEIGHBOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_bgp_neighbor__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0 }


/*
 * TBL_OSPF
 */
struct  _Cdb__TblOspfKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_OSPF_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf_key__descriptor) \
    , 0 }


struct  _Cdb__TblOspf
{
  ProtobufCMessage base;
  Cdb__TblOspfKey *key;
  Cdb__ComposeAddrIpv4T *router_id;
  protobuf_c_boolean has_default_originate;
  uint32_t default_originate;
  protobuf_c_boolean has_redistribute;
  uint32_t redistribute;
};
#define CDB__TBL_OSPF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf__descriptor) \
    , NULL, NULL, 0,0, 0,0 }


/*
 * TBL_OSPF6
 */
struct  _Cdb__TblOspf6Key
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_OSPF6_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf6_key__descriptor) \
    , 0 }


struct  _Cdb__TblOspf6
{
  ProtobufCMessage base;
  Cdb__TblOspf6Key *key;
  Cdb__ComposeAddrIpv4T *router_id;
  protobuf_c_boolean has_default_originate;
  uint32_t default_originate;
  protobuf_c_boolean has_redistribute;
  uint32_t redistribute;
};
#define CDB__TBL_OSPF6__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf6__descriptor) \
    , NULL, NULL, 0,0, 0,0 }


/*
 * TBL_OSPF6_INTERFACE
 */
struct  _Cdb__TblOspf6InterfaceKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_OSPF6_INTERFACE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf6_interface_key__descriptor) \
    , NULL }


struct  _Cdb__TblOspf6Interface
{
  ProtobufCMessage base;
  Cdb__TblOspf6InterfaceKey *key;
  char *interface;
  Cdb__ComposeAddrIpv4T *area_id;
};
#define CDB__TBL_OSPF6_INTERFACE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf6_interface__descriptor) \
    , NULL, NULL, NULL }


/*
 * TBL_OSPF_NETWORK
 */
struct  _Cdb__TblOspfNetwork
{
  ProtobufCMessage base;
  Cdb__ComposePrefixT *key;
  protobuf_c_boolean has_area_id;
  uint32_t area_id;
};
#define CDB__TBL_OSPF_NETWORK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf_network__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_OSPF_AREA_AUTH
 */
struct  _Cdb__TblOspfAreaAuthKey
{
  ProtobufCMessage base;
  uint32_t areaid;
};
#define CDB__TBL_OSPF_AREA_AUTH_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf_area_auth_key__descriptor) \
    , 0 }


struct  _Cdb__TblOspfAreaAuth
{
  ProtobufCMessage base;
  Cdb__TblOspfAreaAuthKey *key;
  protobuf_c_boolean has_auth_type;
  uint32_t auth_type;
};
#define CDB__TBL_OSPF_AREA_AUTH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf_area_auth__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_OSPF_AREA_RANGE
 */
struct  _Cdb__TblOspfAreaRange
{
  ProtobufCMessage base;
  Cdb__ComposeOspfAreaRangeKeyT *key;
  protobuf_c_boolean has_advertise;
  uint32_t advertise;
};
#define CDB__TBL_OSPF_AREA_RANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf_area_range__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_OSPF6_AREA_RANGE
 */
struct  _Cdb__TblOspf6AreaRange
{
  ProtobufCMessage base;
  Cdb__ComposeOspf6AreaRangeKeyT *key;
  protobuf_c_boolean has_advertise;
  uint32_t advertise;
};
#define CDB__TBL_OSPF6_AREA_RANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf6_area_range__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_IPROUTE_NODE
 */
struct  _Cdb__TblIprouteNode
{
  ProtobufCMessage base;
  Cdb__ComposeRouteNodeKeyT *key;
  protobuf_c_boolean has_route_type;
  uint32_t route_type;
  protobuf_c_boolean has_distance;
  uint32_t distance;
  protobuf_c_boolean has_multipath;
  uint32_t multipath;
  Cdb__ComposeNexthopKeyT *nh_key;
  Cdb__ComposeNexthopEcmpT *nh_group;
};
#define CDB__TBL_IPROUTE_NODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_iproute_node__descriptor) \
    , NULL, 0,0, 0,0, 0,0, NULL, NULL }


/*
 * TBL_IPROUTE_NODE_ADD_FAIL
 */
struct  _Cdb__TblIprouteNodeAddFail
{
  ProtobufCMessage base;
  Cdb__ComposeRouteNodeKeyT *key;
  protobuf_c_boolean has_distance;
  uint32_t distance;
  protobuf_c_boolean has_multipath;
  uint32_t multipath;
  Cdb__ComposeNexthopKeyT *nh_key;
  Cdb__ComposeNexthopEcmpT *nh_group;
};
#define CDB__TBL_IPROUTE_NODE_ADD_FAIL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_iproute_node_add_fail__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL }


/*
 * TBL_IPROUTE_NODE_ADD_FAIL_COUNT
 */
struct  _Cdb__TblIprouteNodeAddFailCount
{
  ProtobufCMessage base;
  Cdb__ComposeRouteNodeKeyT *key;
  protobuf_c_boolean has_distance;
  uint32_t distance;
  protobuf_c_boolean has_multipath;
  uint32_t multipath;
  Cdb__ComposeNexthopKeyT *nh_key;
  Cdb__ComposeNexthopEcmpT *nh_group;
};
#define CDB__TBL_IPROUTE_NODE_ADD_FAIL_COUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_iproute_node_add_fail_count__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL }


/*
 * TBL_STATIC_ROUTE_CFG
 */
struct  _Cdb__TblStaticRouteCfg
{
  ProtobufCMessage base;
  Cdb__ComposeRouteNodeKeyT *key;
  protobuf_c_boolean has_distance;
  uint32_t distance;
  protobuf_c_boolean has_track_id;
  uint32_t track_id;
  protobuf_c_boolean has_track_status;
  uint32_t track_status;
  protobuf_c_boolean has_nexthop_type_v6;
  uint32_t nexthop_type_v6;
  protobuf_c_boolean has_dhcp_client;
  uint32_t dhcp_client;
};
#define CDB__TBL_STATIC_ROUTE_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_static_route_cfg__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_STATIC_RT_CNT
 */
struct  _Cdb__TblStaticRtCnt
{
  ProtobufCMessage base;
  Cdb__ComposeRouteNodeKeyWithAdT *key;
  protobuf_c_boolean has_refer_cnt;
  uint32_t refer_cnt;
  protobuf_c_boolean has_has_blackhole;
  uint32_t has_blackhole;
  Cdb__ComposeNexthopEcmpRoutedT *nh_group;
};
#define CDB__TBL_STATIC_RT_CNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_static_rt_cnt__descriptor) \
    , NULL, 0,0, 0,0, NULL }


/*
 * TBL_ARP_FIB
 */
struct  _Cdb__TblArpFibKey
{
  ProtobufCMessage base;
  Cdb__ComposeAddrIpv4T *ip;
};
#define CDB__TBL_ARP_FIB_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_arp_fib_key__descriptor) \
    , NULL }


struct  _Cdb__TblArpFib
{
  ProtobufCMessage base;
  Cdb__TblArpFibKey *key;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_vrf_id;
  uint32_t vrf_id;
  char *ifname;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  Cdb__ComposeMacAddrT *mac_addr;
  protobuf_c_boolean has_is_router;
  uint32_t is_router;
  protobuf_c_boolean has_route_ref;
  uint32_t route_ref;
};
#define CDB__TBL_ARP_FIB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_arp_fib__descriptor) \
    , NULL, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0, 0,0 }


/*
 * TBL_ARP
 */
struct  _Cdb__TblArpKey
{
  ProtobufCMessage base;
  Cdb__ComposeAddrIpv4T *ip;
};
#define CDB__TBL_ARP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_arp_key__descriptor) \
    , NULL }


struct  _Cdb__TblArp
{
  ProtobufCMessage base;
  Cdb__TblArpKey *key;
  protobuf_c_boolean has_type;
  uint32_t type;
  char *ifname;
  protobuf_c_boolean has_vrf_id;
  uint32_t vrf_id;
  Cdb__ComposeMacAddrT *mac_addr;
  protobuf_c_boolean has_rif_id;
  uint64_t rif_id;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_status;
  uint32_t status;
  protobuf_c_boolean has_route_ref;
  uint32_t route_ref;
  Cdb__ComposeSalTimeT *uptime;
  protobuf_c_boolean has_aging_delay;
  uint32_t aging_delay;
  protobuf_c_boolean has_is_gratuitous;
  uint32_t is_gratuitous;
  protobuf_c_boolean has_is_proxy;
  uint32_t is_proxy;
  protobuf_c_boolean has_is_router;
  uint32_t is_router;
  protobuf_c_boolean has_retry_count;
  uint32_t retry_count;
  protobuf_c_boolean has_is_bfd_ref;
  uint32_t is_bfd_ref;
  protobuf_c_boolean has_is_static_route_dup;
  uint32_t is_static_route_dup;
};
#define CDB__TBL_ARP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_arp__descriptor) \
    , NULL, 0,0, NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_NEXTHOP
 */
struct  _Cdb__TblNexthop
{
  ProtobufCMessage base;
  Cdb__ComposeNexthopKeyT *key;
  protobuf_c_boolean has_refcnt;
  uint32_t refcnt;
};
#define CDB__TBL_NEXTHOP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nexthop__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_NEXTHOP_GROUP
 */
struct  _Cdb__TblNexthopGroup
{
  ProtobufCMessage base;
  Cdb__ComposeNexthopEcmpT *key;
  Cdb__ComposeNexthopEcmpT *nh_group;
  protobuf_c_boolean has_nhg_oid;
  uint64_t nhg_oid;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
  protobuf_c_boolean has_ecmp_hash;
  uint32_t ecmp_hash;
};
#define CDB__TBL_NEXTHOP_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nexthop_group__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_NEXTHOP_GROUP_ROUTED
 */
struct  _Cdb__TblNexthopGroupRouted
{
  ProtobufCMessage base;
  Cdb__ComposeNexthopEcmpRoutedT *key;
  protobuf_c_boolean has_nhg_oid;
  uint64_t nhg_oid;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
  protobuf_c_boolean has_ecmp_hash;
  uint32_t ecmp_hash;
};
#define CDB__TBL_NEXTHOP_GROUP_ROUTED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nexthop_group_routed__descriptor) \
    , NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_FEA_NEXTHOP
 */
struct  _Cdb__TblFeaNexthop
{
  ProtobufCMessage base;
  Cdb__ComposeNexthopKeyT *key;
  protobuf_c_boolean has_nhid;
  uint64_t nhid;
};
#define CDB__TBL_FEA_NEXTHOP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_nexthop__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_MRT
 */
struct  _Cdb__TblMrt
{
  ProtobufCMessage base;
  Cdb__ComposeMrtKeyT *key;
  protobuf_c_boolean has_rpf_ifindex;
  uint32_t rpf_ifindex;
  protobuf_c_boolean has_oif_index_bmp;
  ProtobufCBinaryData oif_index_bmp;
  protobuf_c_boolean has_nhg_oid;
  uint64_t nhg_oid;
  protobuf_c_boolean has_packet_match;
  uint64_t packet_match;
  protobuf_c_boolean has_byte_match;
  uint64_t byte_match;
  protobuf_c_boolean has_static_mroute;
  uint32_t static_mroute;
};
#define CDB__TBL_MRT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mrt__descriptor) \
    , NULL, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_IPMC_GLOBAL
 */
struct  _Cdb__TblIpmcGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mcast_route_en;
  uint32_t mcast_route_en;
  protobuf_c_boolean has_register_suppress_time;
  uint32_t register_suppress_time;
  protobuf_c_boolean has_pim_packet_process;
  uint32_t pim_packet_process;
  protobuf_c_boolean has_keep_alive_time;
  uint32_t keep_alive_time;
  protobuf_c_boolean has_rp_keep_alive_time;
  uint32_t rp_keep_alive_time;
  protobuf_c_boolean has_join_prune_interval;
  uint32_t join_prune_interval;
  protobuf_c_boolean has_switchover_mode;
  uint32_t switchover_mode;
};
#define CDB__TBL_IPMC_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ipmc_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_IPMC_INTF
 */
struct  _Cdb__TblIpmcIntfKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_IPMC_INTF_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ipmc_intf_key__descriptor) \
    , NULL }


struct  _Cdb__TblIpmcIntf
{
  ProtobufCMessage base;
  Cdb__TblIpmcIntfKey *key;
  Cdb__ComposeAddrIpv4T *primary_address;
  protobuf_c_boolean has_igmp_enable;
  uint32_t igmp_enable;
  protobuf_c_boolean has_pim_enable;
  uint32_t pim_enable;
  protobuf_c_boolean has_igmp_version;
  int32_t igmp_version;
  protobuf_c_boolean has_igmp_query_interval;
  int32_t igmp_query_interval;
  protobuf_c_boolean has_igmp_query_max_response_time;
  int32_t igmp_query_max_response_time;
  protobuf_c_boolean has_pim_hello_period;
  int32_t pim_hello_period;
  protobuf_c_boolean has_pim_hello_holdtime;
  int32_t pim_hello_holdtime;
  protobuf_c_boolean has_pim_generation_id;
  uint32_t pim_generation_id;
  protobuf_c_boolean has_pim_propagation_delay_msec;
  uint32_t pim_propagation_delay_msec;
  protobuf_c_boolean has_pim_override_interval_msec;
  uint32_t pim_override_interval_msec;
  protobuf_c_boolean has_pim_dr_priority;
  uint32_t pim_dr_priority;
};
#define CDB__TBL_IPMC_INTF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ipmc_intf__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_PIM_STATIC_RP
 */
struct  _Cdb__TblPimStaticRpKey
{
  ProtobufCMessage base;
  Cdb__ComposePrefixT *group_range;
};
#define CDB__TBL_PIM_STATIC_RP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pim_static_rp_key__descriptor) \
    , NULL }


struct  _Cdb__TblPimStaticRp
{
  ProtobufCMessage base;
  Cdb__TblPimStaticRpKey *key;
  Cdb__ComposeAddrIpv4T *rp_addr;
};
#define CDB__TBL_PIM_STATIC_RP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pim_static_rp__descriptor) \
    , NULL, NULL }


/*
 * TBL_SYS_GLOBAL
 */
struct  _Cdb__TblSysGlobal
{
  ProtobufCMessage base;
  char *hostname;
  Cdb__ComposeMacAddrT *route_mac;
  protobuf_c_boolean has_mac_num;
  uint32_t mac_num;
  protobuf_c_boolean has_curr_vlanif_count;
  int32_t curr_vlanif_count;
  protobuf_c_boolean has_init_done;
  uint32_t init_done;
  protobuf_c_boolean has_startup_done;
  uint32_t startup_done;
  protobuf_c_boolean has_max_frame_size;
  uint32_t max_frame_size;
  protobuf_c_boolean has_jumbo_frame_size;
  uint32_t jumbo_frame_size;
  protobuf_c_boolean has_reboot_type;
  uint32_t reboot_type;
  protobuf_c_boolean has_ipg_shaping_enable;
  uint32_t ipg_shaping_enable;
  protobuf_c_boolean has_ipg_policing_enable;
  uint32_t ipg_policing_enable;
  protobuf_c_boolean has_ipg_storm_control_enable;
  uint32_t ipg_storm_control_enable;
  protobuf_c_boolean has_aaa_new_model;
  uint32_t aaa_new_model;
  protobuf_c_boolean has_service_password_encryption;
  uint32_t service_password_encryption;
  protobuf_c_boolean has_max_vty;
  uint32_t max_vty;
  protobuf_c_boolean has_aaa_privilege1;
  uint32_t aaa_privilege1;
  protobuf_c_boolean has_aaa_privilege2;
  uint32_t aaa_privilege2;
  protobuf_c_boolean has_aaa_privilege3;
  uint32_t aaa_privilege3;
  protobuf_c_boolean has_dhcp_service_enable;
  uint32_t dhcp_service_enable;
  protobuf_c_boolean has_dhcp_relay_enable;
  uint32_t dhcp_relay_enable;
  protobuf_c_boolean has_dhcp_snooping_enable;
  uint32_t dhcp_snooping_enable;
  protobuf_c_boolean has_http_service_enable;
  uint32_t http_service_enable;
  char *http_image_name;
  protobuf_c_boolean has_errdisable_interval;
  uint32_t errdisable_interval;
  protobuf_c_boolean has_trunction_length;
  uint32_t trunction_length;
  Cdb__ComposeMacAddrT *tap_ts_macda;
  Cdb__ComposeMacAddrT *tap_ts_macsa;
  protobuf_c_boolean has_ether_type;
  uint32_t ether_type;
  protobuf_c_boolean has_ptf_port;
  uint32_t ptf_port;
  protobuf_c_boolean has_telnet_disable;
  uint32_t telnet_disable;
  protobuf_c_boolean has_telnet_port;
  uint32_t telnet_port;
  char *telnet_acl;
  char *ssh_acl;
  protobuf_c_boolean has_http_disable;
  uint32_t http_disable;
  protobuf_c_boolean has_http_port;
  uint32_t http_port;
  protobuf_c_boolean has_http_timeout;
  uint32_t http_timeout;
  protobuf_c_boolean has_https_disable;
  uint32_t https_disable;
  protobuf_c_boolean has_https_port;
  uint32_t https_port;
  protobuf_c_boolean has_rpcapi_disable;
  uint32_t rpcapi_disable;
  protobuf_c_boolean has_rpcapi_port;
  uint32_t rpcapi_port;
  protobuf_c_boolean has_rpcapi_ssl_en;
  uint32_t rpcapi_ssl_en;
  protobuf_c_boolean has_rpcapi_ssl_port;
  uint32_t rpcapi_ssl_port;
  protobuf_c_boolean has_rpcapi_auth_mode;
  uint32_t rpcapi_auth_mode;
  protobuf_c_boolean has_oper_rpcapi_auth_mode;
  uint32_t oper_rpcapi_auth_mode;
  protobuf_c_boolean has_cut_through_enable;
  uint32_t cut_through_enable;
  protobuf_c_boolean has_protected_vlan_cnt;
  uint32_t protected_vlan_cnt;
  protobuf_c_boolean has_vlan_stats_cnt;
  uint32_t vlan_stats_cnt;
  protobuf_c_boolean has_mib_port_stats_read_num;
  uint32_t mib_port_stats_read_num;
  protobuf_c_boolean has_mib_flow_stats_read_num;
  uint32_t mib_flow_stats_read_num;
  protobuf_c_boolean has_memory_threshold1;
  uint32_t memory_threshold1;
  protobuf_c_boolean has_memory_threshold2;
  uint32_t memory_threshold2;
  protobuf_c_boolean has_memory_threshold3;
  uint32_t memory_threshold3;
  protobuf_c_boolean has_system_memchk_state;
  uint32_t system_memchk_state;
  protobuf_c_boolean has_mgmt_if_running;
  uint32_t mgmt_if_running;
  protobuf_c_boolean has_warmboot_type;
  uint32_t warmboot_type;
  protobuf_c_boolean has_warmboot_time;
  uint32_t warmboot_time;
  protobuf_c_boolean has_warmboot_count;
  uint32_t warmboot_count;
  protobuf_c_boolean has_system_time_update;
  uint32_t system_time_update;
  protobuf_c_boolean has_sflow_counter_ifindex;
  uint32_t sflow_counter_ifindex;
  protobuf_c_boolean has_dhcp_server_enable;
  uint32_t dhcp_server_enable;
  protobuf_c_boolean has_add_gre_ace_entry_num;
  uint32_t add_gre_ace_entry_num;
  protobuf_c_boolean has_add_vxlan_entry_num;
  uint32_t add_vxlan_entry_num;
  protobuf_c_boolean has_system_product;
  uint32_t system_product;
};
#define CDB__TBL_SYS_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_sys_global__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_LAG_GLOBAL
 */
struct  _Cdb__TblLagGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_system_priority;
  uint32_t system_priority;
  Cdb__ComposeMacAddrT *system_id;
  protobuf_c_boolean has_mlag_system_priority;
  uint32_t mlag_system_priority;
  Cdb__ComposeMacAddrT *mlag_system_id;
  protobuf_c_boolean has_load_balance;
  uint32_t load_balance;
  protobuf_c_boolean has_load_balance_inner_field_en;
  uint32_t load_balance_inner_field_en;
  protobuf_c_boolean has_hash_arithmetic;
  uint32_t hash_arithmetic;
  protobuf_c_boolean has_load_balance_mode;
  ProtobufCBinaryData load_balance_mode;
};
#define CDB__TBL_LAG_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_lag_global__descriptor) \
    , 0,0, NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,{0,NULL} }


/*
 * TBL_ECMP_GLOBAL
 */
struct  _Cdb__TblEcmpGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hash_key;
  uint32_t hash_key;
  protobuf_c_boolean has_hash_algorithm;
  uint32_t hash_algorithm;
  protobuf_c_boolean has_load_balance_mode;
  uint32_t load_balance_mode;
  protobuf_c_boolean has_dlb_mode_type;
  uint32_t dlb_mode_type;
  protobuf_c_boolean has_rr_prefix_num;
  uint32_t rr_prefix_num;
};
#define CDB__TBL_ECMP_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ecmp_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_RR_PREFIX
 */
struct  _Cdb__TblRrPrefixKey
{
  ProtobufCMessage base;
  uint32_t rr_prefix_index;
};
#define CDB__TBL_RR_PREFIX_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rr_prefix_key__descriptor) \
    , 0 }


struct  _Cdb__TblRrPrefix
{
  ProtobufCMessage base;
  Cdb__TblRrPrefixKey *key;
  Cdb__ComposePrefixT *rr_prefix;
};
#define CDB__TBL_RR_PREFIX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rr_prefix__descriptor) \
    , NULL, NULL }


/*
 * TBL_MEM_SUMMARY
 */
struct  _Cdb__TblMemSummary
{
  ProtobufCMessage base;
  protobuf_c_boolean has_total;
  uint32_t total;
  protobuf_c_boolean has_used;
  uint32_t used;
  protobuf_c_boolean has_free;
  uint32_t free;
  protobuf_c_boolean has_buffer;
  uint32_t buffer;
  protobuf_c_boolean has_cached;
  uint32_t cached;
  protobuf_c_boolean has_mem_high;
  uint32_t mem_high;
  protobuf_c_boolean has_cpu_high;
  uint32_t cpu_high;
  protobuf_c_boolean has_cpu_high_threshold;
  uint32_t cpu_high_threshold;
  protobuf_c_boolean has_cpu_low_threshold;
  uint32_t cpu_low_threshold;
};
#define CDB__TBL_MEM_SUMMARY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mem_summary__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_CPU_MEM_HISTORY
 */
struct  _Cdb__TblCpuMemHistory
{
  ProtobufCMessage base;
  protobuf_c_boolean has_polling_index;
  uint64_t polling_index;
  protobuf_c_boolean has_saving_index;
  uint64_t saving_index;
  protobuf_c_boolean has_hour_start;
  uint32_t hour_start;
  protobuf_c_boolean has_day_start;
  uint32_t day_start;
  protobuf_c_boolean has_hour_last_save;
  uint64_t hour_last_save;
  protobuf_c_boolean has_day_last_save;
  uint64_t day_last_save;
  protobuf_c_boolean has_cpu_polling_save;
  ProtobufCBinaryData cpu_polling_save;
  protobuf_c_boolean has_cpu_history_hour;
  ProtobufCBinaryData cpu_history_hour;
  protobuf_c_boolean has_cpu_history_day;
  ProtobufCBinaryData cpu_history_day;
  protobuf_c_boolean has_mem_polling_save;
  ProtobufCBinaryData mem_polling_save;
  protobuf_c_boolean has_mem_history_hour;
  ProtobufCBinaryData mem_history_hour;
  protobuf_c_boolean has_mem_history_day;
  ProtobufCBinaryData mem_history_day;
};
#define CDB__TBL_CPU_MEM_HISTORY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cpu_mem_history__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL} }


/*
 * TBL_CHSM_DEBUG
 */
struct  _Cdb__TblChsmDebug
{
  ProtobufCMessage base;
  protobuf_c_boolean has_chsm_chassis;
  uint32_t chsm_chassis;
};
#define CDB__TBL_CHSM_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_chsm_debug__descriptor) \
    , 0,0 }


/*
 * TBL_SWITCH_DEBUG
 */
struct  _Cdb__TblSwitchDebug
{
  ProtobufCMessage base;
  protobuf_c_boolean has_stp_event;
  uint32_t stp_event;
  protobuf_c_boolean has_stp_packet_tx;
  uint32_t stp_packet_tx;
  protobuf_c_boolean has_stp_packet_rx;
  uint32_t stp_packet_rx;
  protobuf_c_boolean has_stp_protocol_cist;
  uint32_t stp_protocol_cist;
  protobuf_c_boolean has_stp_protocol_msti;
  uint32_t stp_protocol_msti;
  protobuf_c_boolean has_stp_timer;
  uint32_t stp_timer;
  protobuf_c_boolean has_mlag_event;
  uint32_t mlag_event;
  protobuf_c_boolean has_mlag_packet;
  uint32_t mlag_packet;
  protobuf_c_boolean has_mlag_protocol;
  uint32_t mlag_protocol;
  protobuf_c_boolean has_mlag_timer;
  uint32_t mlag_timer;
  protobuf_c_boolean has_lacp_event;
  uint32_t lacp_event;
  protobuf_c_boolean has_lacp_packet;
  uint32_t lacp_packet;
  protobuf_c_boolean has_lacp_protocol;
  uint32_t lacp_protocol;
  protobuf_c_boolean has_lacp_timer;
  uint32_t lacp_timer;
  protobuf_c_boolean has_igsp_event;
  uint32_t igsp_event;
  protobuf_c_boolean has_igsp_packet_tx;
  uint32_t igsp_packet_tx;
  protobuf_c_boolean has_igsp_packet_rx;
  uint32_t igsp_packet_rx;
  protobuf_c_boolean has_igsp_protocol;
  uint32_t igsp_protocol;
  protobuf_c_boolean has_igsp_timer;
  uint32_t igsp_timer;
  protobuf_c_boolean has_ipsg_event;
  uint32_t ipsg_event;
  protobuf_c_boolean has_ipsg_error;
  uint32_t ipsg_error;
  protobuf_c_boolean has_lldp_event;
  uint32_t lldp_event;
  protobuf_c_boolean has_lldp_packet_tx;
  uint32_t lldp_packet_tx;
  protobuf_c_boolean has_lldp_packet_rx;
  uint32_t lldp_packet_rx;
  protobuf_c_boolean has_lldp_protocol;
  uint32_t lldp_protocol;
  protobuf_c_boolean has_lldp_timer;
  uint32_t lldp_timer;
  protobuf_c_boolean has_rpcapi_request;
  uint32_t rpcapi_request;
  protobuf_c_boolean has_rpcapi_command;
  uint32_t rpcapi_command;
};
#define CDB__TBL_SWITCH_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_switch_debug__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_ROUTE_DEBUG
 */
struct  _Cdb__TblRouteDebug
{
  ProtobufCMessage base;
  protobuf_c_boolean has_route_ipv4;
  uint32_t route_ipv4;
  protobuf_c_boolean has_route_ipv6;
  uint32_t route_ipv6;
  protobuf_c_boolean has_route_netlink;
  uint32_t route_netlink;
  protobuf_c_boolean has_arp_event;
  uint32_t arp_event;
  protobuf_c_boolean has_arp_packet;
  uint32_t arp_packet;
  protobuf_c_boolean has_arp_protocol;
  uint32_t arp_protocol;
  protobuf_c_boolean has_arp_timer;
  uint32_t arp_timer;
  protobuf_c_boolean has_arpinspection_event;
  uint32_t arpinspection_event;
  protobuf_c_boolean has_arpinspection_packet;
  uint32_t arpinspection_packet;
  protobuf_c_boolean has_arpinspection_protocol;
  uint32_t arpinspection_protocol;
  protobuf_c_boolean has_arpinspection_timer;
  uint32_t arpinspection_timer;
  protobuf_c_boolean has_vrrp_all;
  uint32_t vrrp_all;
  protobuf_c_boolean has_vrrp_events;
  uint32_t vrrp_events;
  protobuf_c_boolean has_vrrp_packet_send;
  uint32_t vrrp_packet_send;
  protobuf_c_boolean has_vrrp_packet_recv;
  uint32_t vrrp_packet_recv;
  protobuf_c_boolean has_vrrp_packet_detail;
  uint32_t vrrp_packet_detail;
  protobuf_c_boolean has_ipsla_event;
  uint32_t ipsla_event;
  protobuf_c_boolean has_ipsla_packet;
  uint32_t ipsla_packet;
  protobuf_c_boolean has_track_event;
  uint32_t track_event;
  protobuf_c_boolean has_nd_event;
  uint32_t nd_event;
  protobuf_c_boolean has_nd_packet;
  uint32_t nd_packet;
  protobuf_c_boolean has_nd_protocol;
  uint32_t nd_protocol;
  protobuf_c_boolean has_nd_timer;
  uint32_t nd_timer;
  protobuf_c_boolean has_nat_event;
  uint32_t nat_event;
  protobuf_c_boolean has_nat_timer;
  uint32_t nat_timer;
  protobuf_c_boolean has_pimsm_all;
  uint32_t pimsm_all;
  protobuf_c_boolean has_pimsm_pim;
  uint32_t pimsm_pim;
  protobuf_c_boolean has_pimsm_igmp;
  uint32_t pimsm_igmp;
  protobuf_c_boolean has_pimsm_timer;
  uint32_t pimsm_timer;
};
#define CDB__TBL_ROUTE_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_route_debug__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_SSM_DEBUG
 */
struct  _Cdb__TblSsmDebug
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ssm_event;
  uint32_t ssm_event;
  protobuf_c_boolean has_ssm_packet_tx;
  uint32_t ssm_packet_tx;
  protobuf_c_boolean has_ssm_packet_rx;
  uint32_t ssm_packet_rx;
  protobuf_c_boolean has_ssm_timer;
  uint32_t ssm_timer;
};
#define CDB__TBL_SSM_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ssm_debug__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_PTP_DEBUG
 */
struct  _Cdb__TblPtpDebug
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ptp_communication_debug;
  uint32_t ptp_communication_debug;
  protobuf_c_boolean has_ptp_bmc_debug;
  uint32_t ptp_bmc_debug;
  protobuf_c_boolean has_ptp_timer_debug;
  uint32_t ptp_timer_debug;
  protobuf_c_boolean has_ptp_synchronization_debug;
  uint32_t ptp_synchronization_debug;
  protobuf_c_boolean has_ptp_packet_rx_debug;
  uint32_t ptp_packet_rx_debug;
  protobuf_c_boolean has_ptp_packet_tx_debug;
  uint32_t ptp_packet_tx_debug;
  protobuf_c_boolean has_ptp_packet_discard_debug;
  uint32_t ptp_packet_discard_debug;
};
#define CDB__TBL_PTP_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ptp_debug__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_QUAGGA_DEBUG
 */
struct  _Cdb__TblQuaggaDebug
{
  ProtobufCMessage base;
  protobuf_c_boolean has_rip_event;
  uint32_t rip_event;
  protobuf_c_boolean has_rip_packet;
  uint32_t rip_packet;
  protobuf_c_boolean has_rip_zebra;
  uint32_t rip_zebra;
  protobuf_c_boolean has_ospf_event;
  uint32_t ospf_event;
  protobuf_c_boolean has_ospf_ism_events;
  uint32_t ospf_ism_events;
  protobuf_c_boolean has_ospf_ism_status;
  uint32_t ospf_ism_status;
  protobuf_c_boolean has_ospf_ism_timers;
  uint32_t ospf_ism_timers;
  protobuf_c_boolean has_ospf_lsa_flooding;
  uint32_t ospf_lsa_flooding;
  protobuf_c_boolean has_ospf_lsa_generate;
  uint32_t ospf_lsa_generate;
  protobuf_c_boolean has_ospf_lsa_install;
  uint32_t ospf_lsa_install;
  protobuf_c_boolean has_ospf_lsa_refresh;
  uint32_t ospf_lsa_refresh;
  protobuf_c_boolean has_ospf_nsm_events;
  uint32_t ospf_nsm_events;
  protobuf_c_boolean has_ospf_nsm_status;
  uint32_t ospf_nsm_status;
  protobuf_c_boolean has_ospf_nsm_timers;
  uint32_t ospf_nsm_timers;
  protobuf_c_boolean has_ospf_nssa;
  uint32_t ospf_nssa;
  protobuf_c_boolean has_ospf_packet_dd;
  uint32_t ospf_packet_dd;
  protobuf_c_boolean has_ospf_packet_hello;
  uint32_t ospf_packet_hello;
  protobuf_c_boolean has_ospf_packet_ls_ack;
  uint32_t ospf_packet_ls_ack;
  protobuf_c_boolean has_ospf_packet_ls_request;
  uint32_t ospf_packet_ls_request;
  protobuf_c_boolean has_ospf_packet_ls_update;
  uint32_t ospf_packet_ls_update;
  protobuf_c_boolean has_ospf_zebra_interface;
  uint32_t ospf_zebra_interface;
  protobuf_c_boolean has_ospf_zebra_redistribute;
  uint32_t ospf_zebra_redistribute;
  protobuf_c_boolean has_ospf_event_abr;
  uint32_t ospf_event_abr;
  protobuf_c_boolean has_ospf_event_ia;
  uint32_t ospf_event_ia;
  protobuf_c_boolean has_ospf_event_route;
  uint32_t ospf_event_route;
  protobuf_c_boolean has_ospf_event_spf;
  uint32_t ospf_event_spf;
  protobuf_c_boolean has_bgp_as4_segment;
  uint32_t bgp_as4_segment;
  protobuf_c_boolean has_bgp_event;
  uint32_t bgp_event;
  protobuf_c_boolean has_bgp_filters;
  uint32_t bgp_filters;
  protobuf_c_boolean has_bgp_fsm;
  uint32_t bgp_fsm;
  protobuf_c_boolean has_bgp_keepalives;
  uint32_t bgp_keepalives;
  protobuf_c_boolean has_bgp_updates_in;
  uint32_t bgp_updates_in;
  protobuf_c_boolean has_bgp_updates_out;
  uint32_t bgp_updates_out;
  protobuf_c_boolean has_bgp_zebra;
  uint32_t bgp_zebra;
  protobuf_c_boolean has_igmp_event;
  uint32_t igmp_event;
  protobuf_c_boolean has_igmp_packet;
  uint32_t igmp_packet;
  protobuf_c_boolean has_igmp_trace;
  uint32_t igmp_trace;
  protobuf_c_boolean has_mroute_on;
  uint32_t mroute_on;
  protobuf_c_boolean has_mroute_detail;
  uint32_t mroute_detail;
  protobuf_c_boolean has_pim_event;
  uint32_t pim_event;
  protobuf_c_boolean has_pim_packet;
  uint32_t pim_packet;
  protobuf_c_boolean has_pim_packetdump_send;
  uint32_t pim_packetdump_send;
  protobuf_c_boolean has_pim_packetdump_receive;
  uint32_t pim_packetdump_receive;
  protobuf_c_boolean has_pim_trace;
  uint32_t pim_trace;
  protobuf_c_boolean has_pim_zebra;
  uint32_t pim_zebra;
};
#define CDB__TBL_QUAGGA_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_quagga_debug__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_LSRV_DEBUG
 */
struct  _Cdb__TblLsrvDebug
{
  ProtobufCMessage base;
  protobuf_c_boolean has_card;
  uint32_t card;
  protobuf_c_boolean has_port;
  uint32_t port;
  protobuf_c_boolean has_fiber;
  uint32_t fiber;
  protobuf_c_boolean has_fan;
  uint32_t fan;
  protobuf_c_boolean has_psu;
  uint32_t psu;
  protobuf_c_boolean has_led;
  uint32_t led;
  protobuf_c_boolean has_thermal;
  uint32_t thermal;
  protobuf_c_boolean has_vcm;
  uint32_t vcm;
  protobuf_c_boolean has_poe;
  uint32_t poe;
  protobuf_c_boolean has_synce;
  uint32_t synce;
};
#define CDB__TBL_LSRV_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_lsrv_debug__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_HSRV_DEBUG
 */
struct  _Cdb__TblHsrvDebug
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vswitch;
  uint32_t vswitch;
  protobuf_c_boolean has_interface_l2if;
  uint32_t interface_l2if;
  protobuf_c_boolean has_interface_l3if;
  uint32_t interface_l3if;
  protobuf_c_boolean has_interface_ifdb;
  uint32_t interface_ifdb;
  protobuf_c_boolean has_message_pm2hsrv;
  uint32_t message_pm2hsrv;
  protobuf_c_boolean has_message_hsrv2pm;
  uint32_t message_hsrv2pm;
  protobuf_c_boolean has_cpu_rx;
  uint32_t cpu_rx;
  protobuf_c_boolean has_cpu_tx;
  uint32_t cpu_tx;
  protobuf_c_boolean has_cpu_bpdu;
  uint32_t cpu_bpdu;
  protobuf_c_boolean has_cpu_slowproto;
  uint32_t cpu_slowproto;
  protobuf_c_boolean has_cpu_eapol;
  uint32_t cpu_eapol;
  protobuf_c_boolean has_cpu_lldp;
  uint32_t cpu_lldp;
  protobuf_c_boolean has_cpu_erps;
  uint32_t cpu_erps;
  protobuf_c_boolean has_cpu_macda;
  uint32_t cpu_macda;
  protobuf_c_boolean has_cpu_rip;
  uint32_t cpu_rip;
  protobuf_c_boolean has_cpu_ospf;
  uint32_t cpu_ospf;
  protobuf_c_boolean has_cpu_bgp;
  uint32_t cpu_bgp;
  protobuf_c_boolean has_cpu_arp;
  uint32_t cpu_arp;
  protobuf_c_boolean has_cpu_dhcp;
  uint32_t cpu_dhcp;
  protobuf_c_boolean has_cpu_ipda;
  uint32_t cpu_ipda;
  protobuf_c_boolean has_cpu_igmp;
  uint32_t cpu_igmp;
  protobuf_c_boolean has_cpu_maclimit;
  uint32_t cpu_maclimit;
  protobuf_c_boolean has_cpu_macmismatch;
  uint32_t cpu_macmismatch;
  protobuf_c_boolean has_cpu_l3copycpu;
  uint32_t cpu_l3copycpu;
  protobuf_c_boolean has_cpu_other;
  uint32_t cpu_other;
  protobuf_c_boolean has_cpu_raw;
  uint32_t cpu_raw;
  protobuf_c_boolean has_cpu_ptp;
  uint32_t cpu_ptp;
  protobuf_c_boolean has_ip_icmp;
  uint32_t ip_icmp;
  protobuf_c_boolean has_nexthop;
  uint32_t nexthop;
  protobuf_c_boolean has_vlan;
  uint32_t vlan;
  protobuf_c_boolean has_mirror;
  uint32_t mirror;
  protobuf_c_boolean has_fdb;
  uint32_t fdb;
  protobuf_c_boolean has_l2mc;
  uint32_t l2mc;
  protobuf_c_boolean has_agg;
  uint32_t agg;
  protobuf_c_boolean has_ipuc;
  uint32_t ipuc;
  protobuf_c_boolean has_neighbor;
  uint32_t neighbor;
  protobuf_c_boolean has_ecmp;
  uint32_t ecmp;
  protobuf_c_boolean has_acl;
  uint32_t acl;
  protobuf_c_boolean has_stats;
  uint32_t stats;
  protobuf_c_boolean has_qos_class;
  uint32_t qos_class;
  protobuf_c_boolean has_qos_policer;
  uint32_t qos_policer;
  protobuf_c_boolean has_qos_process;
  uint32_t qos_process;
  protobuf_c_boolean has_qos_queue;
  uint32_t qos_queue;
  protobuf_c_boolean has_ipsour;
  uint32_t ipsour;
  protobuf_c_boolean has_dot1x;
  uint32_t dot1x;
  protobuf_c_boolean has_stp;
  uint32_t stp;
  protobuf_c_boolean has_ptp_pkt_rx;
  uint32_t ptp_pkt_rx;
  protobuf_c_boolean has_ptp_pkt_tx;
  uint32_t ptp_pkt_tx;
  protobuf_c_boolean has_ptp_cfg;
  uint32_t ptp_cfg;
  protobuf_c_boolean has_ptp_interrupt;
  uint32_t ptp_interrupt;
  protobuf_c_boolean has_ipmc;
  uint32_t ipmc;
  protobuf_c_boolean has_tpoam_common;
  uint32_t tpoam_common;
  protobuf_c_boolean has_tpoam_event;
  uint32_t tpoam_event;
  protobuf_c_boolean has_tpoam_update;
  uint32_t tpoam_update;
  protobuf_c_boolean has_tpoam_pkt_rx;
  uint32_t tpoam_pkt_rx;
  protobuf_c_boolean has_tpoam_pkt_tx;
  uint32_t tpoam_pkt_tx;
  protobuf_c_boolean has_l2protocol_pkt_rx;
  uint32_t l2protocol_pkt_rx;
  protobuf_c_boolean has_l2protocol_pkt_tx;
  uint32_t l2protocol_pkt_tx;
  protobuf_c_boolean has_nat_rule;
  uint32_t nat_rule;
  protobuf_c_boolean has_nat_session;
  uint32_t nat_session;
  protobuf_c_boolean has_nat_timer;
  uint32_t nat_timer;
  protobuf_c_boolean has_g8032_event;
  uint32_t g8032_event;
};
#define CDB__TBL_HSRV_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_hsrv_debug__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_APP_DEBUG
 */
struct  _Cdb__TblAppDebug
{
  ProtobufCMessage base;
  protobuf_c_boolean has_snmp_agent;
  uint32_t snmp_agent;
  protobuf_c_boolean has_rmon_event;
  uint32_t rmon_event;
  protobuf_c_boolean has_rmon_alarm;
  uint32_t rmon_alarm;
  protobuf_c_boolean has_rmon_stats;
  uint32_t rmon_stats;
  protobuf_c_boolean has_rmon_history;
  uint32_t rmon_history;
  protobuf_c_boolean has_ntp_debug_level;
  uint32_t ntp_debug_level;
  protobuf_c_boolean has_netconf_rpc;
  uint32_t netconf_rpc;
  protobuf_c_boolean has_netconf_rpc_clear;
  uint32_t netconf_rpc_clear;
  protobuf_c_boolean has_netconf_debug;
  uint32_t netconf_debug;
};
#define CDB__TBL_APP_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_app_debug__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_OPENFLOW_DEBUG
 */
struct  _Cdb__TblOpenflowDebug
{
  ProtobufCMessage base;
  protobuf_c_boolean has_openflow_vconn;
  uint32_t openflow_vconn;
  protobuf_c_boolean has_openflow_rconn;
  uint32_t openflow_rconn;
};
#define CDB__TBL_OPENFLOW_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_openflow_debug__descriptor) \
    , 0,0, 0,0 }


/*
 * TBL_RIF
 */
struct  _Cdb__TblRifKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_RIF_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rif_key__descriptor) \
    , NULL }


struct  _Cdb__TblRif
{
  ProtobufCMessage base;
  Cdb__TblRifKey *key;
  protobuf_c_boolean has_rif_id;
  uint64_t rif_id;
  protobuf_c_boolean has_hostif_id;
  uint64_t hostif_id;
};
#define CDB__TBL_RIF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rif__descriptor) \
    , NULL, 0,0, 0,0 }


/*
 * TBL_FEA_LAG
 */
struct  _Cdb__TblFeaLagKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_FEA_LAG_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_lag_key__descriptor) \
    , 0 }


struct  _Cdb__TblFeaLag
{
  ProtobufCMessage base;
  Cdb__TblFeaLagKey *key;
  protobuf_c_boolean has_lag_id;
  uint64_t lag_id;
};
#define CDB__TBL_FEA_LAG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_lag__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_FEA_GLOBAL
 */
struct  _Cdb__TblFeaGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_router_id;
  uint64_t router_id;
  protobuf_c_boolean has_port_stats_ms;
  uint32_t port_stats_ms;
};
#define CDB__TBL_FEA_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_global__descriptor) \
    , 0,0, 0,0 }


/*
 * TBL_FEA_ACL_TABLE
 */
struct  _Cdb__TblFeaAclTableKey
{
  ProtobufCMessage base;
  uint64_t acl_table_id;
};
#define CDB__TBL_FEA_ACL_TABLE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_acl_table_key__descriptor) \
    , 0 }


struct  _Cdb__TblFeaAclTable
{
  ProtobufCMessage base;
  Cdb__TblFeaAclTableKey *key;
  protobuf_c_boolean has_direct_in;
  uint32_t direct_in;
  protobuf_c_boolean has_priority;
  uint32_t priority;
  char *table_name;
  protobuf_c_boolean has_sai_table_id;
  uint64_t sai_table_id;
};
#define CDB__TBL_FEA_ACL_TABLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_acl_table__descriptor) \
    , NULL, 0,0, 0,0, NULL, 0,0 }


/*
 * TBL_FEA_ACL
 */
struct  _Cdb__TblFeaAclKey
{
  ProtobufCMessage base;
  uint64_t acl_id;
};
#define CDB__TBL_FEA_ACL_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_acl_key__descriptor) \
    , 0 }


struct  _Cdb__TblFeaAcl
{
  ProtobufCMessage base;
  Cdb__TblFeaAclKey *key;
  protobuf_c_boolean has_is_mac_acl;
  uint32_t is_mac_acl;
  protobuf_c_boolean has_sai_acl_id;
  uint64_t sai_acl_id;
  protobuf_c_boolean has_sai_acl_id_ipv4;
  uint64_t sai_acl_id_ipv4;
  protobuf_c_boolean has_sai_acl_id_ipv6;
  uint64_t sai_acl_id_ipv6;
  protobuf_c_boolean has_counter_id;
  uint64_t counter_id;
  protobuf_c_boolean has_stats_packet;
  uint64_t stats_packet;
  protobuf_c_boolean has_stats_byte;
  uint64_t stats_byte;
};
#define CDB__TBL_FEA_ACL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_acl__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_FEA_FDB
 */
struct  _Cdb__TblFeaFdb
{
  ProtobufCMessage base;
  Cdb__ComposeFdbKeyT *key;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_mlag_source_ifindex;
  uint32_t mlag_source_ifindex;
  protobuf_c_boolean has_portid;
  uint64_t portid;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_fea_fail;
  uint32_t fea_fail;
};
#define CDB__TBL_FEA_FDB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_fdb__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_FEA_BRG_IF
 */
struct  _Cdb__TblFeaBrgIfKey
{
  ProtobufCMessage base;
  uint32_t ifindex;
};
#define CDB__TBL_FEA_BRG_IF_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_brg_if_key__descriptor) \
    , 0 }


struct  _Cdb__TblFeaBrgIf
{
  ProtobufCMessage base;
  Cdb__TblFeaBrgIfKey *key;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_lag_id;
  uint32_t lag_id;
  protobuf_c_boolean has_mac_learning_en;
  uint32_t mac_learning_en;
  protobuf_c_boolean has_port_security_en;
  uint32_t port_security_en;
  protobuf_c_boolean has_max_mac;
  uint32_t max_mac;
  protobuf_c_boolean has_curr_mac;
  int32_t curr_mac;
  protobuf_c_boolean has_curr_mac_static;
  int32_t curr_mac_static;
  protobuf_c_boolean has_mlag_id;
  uint32_t mlag_id;
  protobuf_c_boolean has_mlag_peer_conf;
  uint32_t mlag_peer_conf;
  protobuf_c_boolean has_mlag_peer_if_up;
  uint32_t mlag_peer_if_up;
  protobuf_c_boolean has_mlag_is_group;
  uint32_t mlag_is_group;
  protobuf_c_boolean has_is_mirror_dest;
  uint32_t is_mirror_dest;
  protobuf_c_boolean has_hw_type;
  uint32_t hw_type;
  protobuf_c_boolean has_portid;
  uint64_t portid;
  protobuf_c_boolean has_disable_learn;
  ProtobufCBinaryData disable_learn;
};
#define CDB__TBL_FEA_BRG_IF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_brg_if__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL} }


/*
 * TBL_ACL_WORM_FILTER
 */
struct  _Cdb__TblAclWormFilterKey
{
  ProtobufCMessage base;
  char *worm_filter_name;
};
#define CDB__TBL_ACL_WORM_FILTER_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_worm_filter_key__descriptor) \
    , NULL }


struct  _Cdb__TblAclWormFilter
{
  ProtobufCMessage base;
  Cdb__TblAclWormFilterKey *key;
  protobuf_c_boolean has_seq_num;
  uint32_t seq_num;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  protobuf_c_boolean has_istcp;
  uint32_t istcp;
  protobuf_c_boolean has_dstport;
  uint32_t dstport;
  protobuf_c_boolean has_isrange;
  uint32_t isrange;
  protobuf_c_boolean has_stats_en;
  uint32_t stats_en;
};
#define CDB__TBL_ACL_WORM_FILTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_worm_filter__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_ACL_CONFIG
 */
struct  _Cdb__TblAclConfigKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_ACL_CONFIG_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_config_key__descriptor) \
    , NULL }


struct  _Cdb__TblAclConfig
{
  ProtobufCMessage base;
  Cdb__TblAclConfigKey *key;
  protobuf_c_boolean has_ace_ref;
  uint32_t ace_ref;
  protobuf_c_boolean has_acev6_ref;
  uint32_t acev6_ref;
  protobuf_c_boolean has_acemac_ref;
  uint32_t acemac_ref;
  protobuf_c_boolean has_intf_ref_in;
  uint32_t intf_ref_in;
  protobuf_c_boolean has_intf_ref_out;
  uint32_t intf_ref_out;
  protobuf_c_boolean has_l4_port_ref;
  uint32_t l4_port_ref;
  protobuf_c_boolean has_tcp_flags_ref;
  uint32_t tcp_flags_ref;
  char *remark;
  protobuf_c_boolean has_seq_ref;
  uint32_t seq_ref;
  protobuf_c_boolean has_ether_ref;
  uint32_t ether_ref;
  protobuf_c_boolean has_arp_ref;
  uint32_t arp_ref;
  protobuf_c_boolean has_tap_ref;
  uint32_t tap_ref;
  protobuf_c_boolean has_type_identifying;
  uint32_t type_identifying;
  protobuf_c_boolean has_ace_truncation_ref_cnt;
  uint32_t ace_truncation_ref_cnt;
  protobuf_c_boolean has_decap_en;
  uint32_t decap_en;
  protobuf_c_boolean has_decap_inner_match_seq_max;
  uint32_t decap_inner_match_seq_max;
  protobuf_c_boolean has_decap_normal_seq_min;
  uint32_t decap_normal_seq_min;
  protobuf_c_boolean has_service_ipt_attached;
  uint32_t service_ipt_attached;
};
#define CDB__TBL_ACL_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_config__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_ACE_CONFIG
 */
struct  _Cdb__TblAceConfig
{
  ProtobufCMessage base;
  Cdb__ComposeAceConfigKeyT *key;
  protobuf_c_boolean has_key_flags;
  uint32_t key_flags;
  protobuf_c_boolean has_key_flags2;
  uint32_t key_flags2;
  protobuf_c_boolean has_key_ipv6_flags;
  uint32_t key_ipv6_flags;
  protobuf_c_boolean has_is_ipv6;
  uint32_t is_ipv6;
  protobuf_c_boolean has_acl_type;
  uint32_t acl_type;
  protobuf_c_boolean has_key_arp_flags;
  uint32_t key_arp_flags;
  protobuf_c_boolean has_arp_op_code;
  uint32_t arp_op_code;
  protobuf_c_boolean has_arp_op_code_mask;
  uint32_t arp_op_code_mask;
  char *time_range;
  protobuf_c_boolean has_apply_cnt;
  uint32_t apply_cnt;
  protobuf_c_boolean has_in_port;
  uint32_t in_port;
  protobuf_c_boolean has_out_port;
  uint32_t out_port;
  protobuf_c_boolean has_ether_type;
  uint32_t ether_type;
  protobuf_c_boolean has_ether_type_mask;
  uint32_t ether_type_mask;
  Cdb__ComposeMacAddrT *src_mac;
  Cdb__ComposeMacAddrT *src_mac_mask;
  Cdb__ComposeMacAddrT *dst_mac;
  Cdb__ComposeMacAddrT *dst_mac_mask;
  protobuf_c_boolean has_svlan;
  uint32_t svlan;
  protobuf_c_boolean has_svlan_mask;
  uint32_t svlan_mask;
  protobuf_c_boolean has_svlan_cos;
  uint32_t svlan_cos;
  protobuf_c_boolean has_svlan_cos_mask;
  uint32_t svlan_cos_mask;
  protobuf_c_boolean has_cvlan;
  uint32_t cvlan;
  protobuf_c_boolean has_cvlan_mask;
  uint32_t cvlan_mask;
  protobuf_c_boolean has_cvlan_cos;
  uint32_t cvlan_cos;
  protobuf_c_boolean has_cvlan_cos_mask;
  uint32_t cvlan_cos_mask;
  protobuf_c_boolean has_untag_vlan;
  uint32_t untag_vlan;
  protobuf_c_boolean has_ip_type;
  uint32_t ip_type;
  protobuf_c_boolean has_ip_type_mask;
  uint32_t ip_type_mask;
  protobuf_c_boolean has_ip_flags;
  uint32_t ip_flags;
  protobuf_c_boolean has_ip_flags_mask;
  uint32_t ip_flags_mask;
  Cdb__ComposePrefixT *src_ip;
  Cdb__ComposePrefixT *src_ip_mask;
  Cdb__ComposePrefixT *dst_ip;
  Cdb__ComposePrefixT *dst_ip_mask;
  protobuf_c_boolean has_ipv6_flow_label;
  uint32_t ipv6_flow_label;
  protobuf_c_boolean has_ipv6_flow_label_mask;
  uint32_t ipv6_flow_label_mask;
  protobuf_c_boolean has_dscp;
  uint32_t dscp;
  protobuf_c_boolean has_dscp_mask;
  uint32_t dscp_mask;
  protobuf_c_boolean has_ip_precedence;
  uint32_t ip_precedence;
  protobuf_c_boolean has_ip_precedence_mask;
  uint32_t ip_precedence_mask;
  protobuf_c_boolean has_ip_protocol;
  uint32_t ip_protocol;
  protobuf_c_boolean has_ip_protocol_mask;
  uint32_t ip_protocol_mask;
  protobuf_c_boolean has_l4_src_port_type;
  uint32_t l4_src_port_type;
  protobuf_c_boolean has_l4_src_port;
  uint32_t l4_src_port;
  protobuf_c_boolean has_l4_src_port_mask;
  uint32_t l4_src_port_mask;
  protobuf_c_boolean has_l4_dst_port_type;
  uint32_t l4_dst_port_type;
  protobuf_c_boolean has_l4_dst_port;
  uint32_t l4_dst_port;
  protobuf_c_boolean has_l4_dst_port_mask;
  uint32_t l4_dst_port_mask;
  protobuf_c_boolean has_ip_frag;
  uint32_t ip_frag;
  protobuf_c_boolean has_tcp_flags;
  uint32_t tcp_flags;
  protobuf_c_boolean has_tcp_flags_mask;
  uint32_t tcp_flags_mask;
  protobuf_c_boolean has_igmp_type;
  uint32_t igmp_type;
  protobuf_c_boolean has_icmp_type;
  uint32_t icmp_type;
  protobuf_c_boolean has_icmp_code;
  uint32_t icmp_code;
  protobuf_c_boolean has_udf_id;
  uint32_t udf_id;
  protobuf_c_boolean has_udf_type;
  uint32_t udf_type;
  protobuf_c_boolean has_udf_offset;
  uint32_t udf_offset;
  size_t n_udf_value;
  uint32_t *udf_value;
  size_t n_udf_mask;
  uint32_t *udf_mask;
  size_t n_udf_value_valid;
  uint32_t *udf_value_valid;
  protobuf_c_boolean has_erspan_id;
  uint32_t erspan_id;
  protobuf_c_boolean has_erspan_id_mask;
  uint32_t erspan_id_mask;
  protobuf_c_boolean has_strip_header_pos;
  uint32_t strip_header_pos;
  protobuf_c_boolean has_strip_header_offset;
  uint32_t strip_header_offset;
  protobuf_c_boolean has_l4_vxlan_vni;
  uint32_t l4_vxlan_vni;
  protobuf_c_boolean has_l4_vxlan_vni_mask;
  uint32_t l4_vxlan_vni_mask;
  protobuf_c_boolean has_l4_gre_type;
  uint32_t l4_gre_type;
  protobuf_c_boolean has_l4_gre_key;
  uint32_t l4_gre_key;
  protobuf_c_boolean has_l4_gre_key_mask;
  uint32_t l4_gre_key_mask;
  protobuf_c_boolean has_l2gre_add_header;
  uint32_t l2gre_add_header;
  Cdb__ComposeAddrT *l2gre_src_ip;
  Cdb__ComposeAddrT *l2gre_dst_ip;
  Cdb__ComposeMacAddrT *l2gre_dst_mac;
  protobuf_c_boolean has_l2gre_key_num;
  uint32_t l2gre_key_num;
  protobuf_c_boolean has_l2gre_key_len;
  uint32_t l2gre_key_len;
  protobuf_c_boolean has_l3gre_add_header;
  uint32_t l3gre_add_header;
  Cdb__ComposeAddrT *l3gre_src_ip;
  Cdb__ComposeAddrT *l3gre_dst_ip;
  Cdb__ComposeMacAddrT *l3gre_dst_mac;
  protobuf_c_boolean has_deny;
  uint32_t deny;
  protobuf_c_boolean has_stats_en;
  uint32_t stats_en;
  protobuf_c_boolean has_options;
  uint32_t options;
  char *flow_match_name;
  protobuf_c_boolean has_action_strip_header;
  uint32_t action_strip_header;
  protobuf_c_boolean has_tap_action_redirect;
  uint32_t tap_action_redirect;
  protobuf_c_boolean has_tap_action_mark_vlan;
  uint32_t tap_action_mark_vlan;
  protobuf_c_boolean has_tap_action_untag;
  uint32_t tap_action_untag;
  protobuf_c_boolean has_tap_action_trunction;
  uint32_t tap_action_trunction;
  protobuf_c_boolean has_tap_action_edit_dest_mac_en;
  uint32_t tap_action_edit_dest_mac_en;
  Cdb__ComposeMacAddrT *tap_action_edit_dest_mac;
  protobuf_c_boolean has_tap_action_edit_src_mac_en;
  uint32_t tap_action_edit_src_mac_en;
  Cdb__ComposeMacAddrT *tap_action_edit_src_mac;
  protobuf_c_boolean has_tap_action_edit_ipda_en;
  uint32_t tap_action_edit_ipda_en;
  Cdb__ComposeAddrT *tap_action_edit_ipda;
  protobuf_c_boolean has_tap_action_edit_ipsa_en;
  uint32_t tap_action_edit_ipsa_en;
  Cdb__ComposeAddrT *tap_action_edit_ipsa;
  protobuf_c_boolean has_tap_action_edit_vlan_en;
  uint32_t tap_action_edit_vlan_en;
  protobuf_c_boolean has_tap_action_edit_vlan;
  uint32_t tap_action_edit_vlan;
  protobuf_c_boolean has_tap_action_edit_vlan_action;
  uint32_t tap_action_edit_vlan_action;
  protobuf_c_boolean has_tap_snmp_set;
  uint32_t tap_snmp_set;
  protobuf_c_boolean has_add_vxlan_header;
  uint32_t add_vxlan_header;
  Cdb__ComposeMacAddrT *vxlan_dst_mac;
  Cdb__ComposeAddrT *vxlan_src_ip;
  Cdb__ComposeAddrT *vxlan_dst_ip;
  protobuf_c_boolean has_vxlan_srcport;
  uint32_t vxlan_srcport;
  protobuf_c_boolean has_vxlan_destport;
  uint32_t vxlan_destport;
  protobuf_c_boolean has_vxlan_vni;
  uint32_t vxlan_vni;
};
#define CDB__TBL_ACE_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ace_config__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0, NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_ACL_ENTRY
 */
struct  _Cdb__TblAclEntryKey
{
  ProtobufCMessage base;
  uint64_t aclid;
};
#define CDB__TBL_ACL_ENTRY_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_entry_key__descriptor) \
    , 0 }


struct  _Cdb__TblAclEntry
{
  ProtobufCMessage base;
  Cdb__TblAclEntryKey *key;
  protobuf_c_boolean has_tblid;
  uint32_t tblid;
  protobuf_c_boolean has_entry_priority;
  uint32_t entry_priority;
  char *time_range;
  protobuf_c_boolean has_key_flags;
  uint32_t key_flags;
  protobuf_c_boolean has_key_flags2;
  uint32_t key_flags2;
  protobuf_c_boolean has_key_ipv6_flags;
  uint32_t key_ipv6_flags;
  protobuf_c_boolean has_is_ipv6;
  uint32_t is_ipv6;
  protobuf_c_boolean has_acl_type;
  uint32_t acl_type;
  protobuf_c_boolean has_key_arp_flags;
  uint32_t key_arp_flags;
  protobuf_c_boolean has_arp_op_code;
  uint32_t arp_op_code;
  protobuf_c_boolean has_arp_op_code_mask;
  uint32_t arp_op_code_mask;
  protobuf_c_boolean has_invalid;
  uint32_t invalid;
  protobuf_c_boolean has_is_copp;
  uint32_t is_copp;
  protobuf_c_boolean has_in_port;
  uint64_t in_port;
  protobuf_c_boolean has_out_port;
  uint64_t out_port;
  protobuf_c_boolean has_ether_type;
  uint32_t ether_type;
  protobuf_c_boolean has_ether_type_mask;
  uint32_t ether_type_mask;
  Cdb__ComposeMacAddrT *src_mac;
  Cdb__ComposeMacAddrT *src_mac_mask;
  Cdb__ComposeMacAddrT *dst_mac;
  Cdb__ComposeMacAddrT *dst_mac_mask;
  protobuf_c_boolean has_svlan;
  uint32_t svlan;
  protobuf_c_boolean has_svlan_mask;
  uint32_t svlan_mask;
  protobuf_c_boolean has_svlan_cos;
  uint32_t svlan_cos;
  protobuf_c_boolean has_svlan_cos_mask;
  uint32_t svlan_cos_mask;
  protobuf_c_boolean has_cvlan;
  uint32_t cvlan;
  protobuf_c_boolean has_cvlan_mask;
  uint32_t cvlan_mask;
  protobuf_c_boolean has_cvlan_cos;
  uint32_t cvlan_cos;
  protobuf_c_boolean has_cvlan_cos_mask;
  uint32_t cvlan_cos_mask;
  protobuf_c_boolean has_untag_vlan;
  uint32_t untag_vlan;
  protobuf_c_boolean has_ip_type;
  uint32_t ip_type;
  protobuf_c_boolean has_ip_type_mask;
  uint32_t ip_type_mask;
  protobuf_c_boolean has_ip_flags;
  uint32_t ip_flags;
  protobuf_c_boolean has_ip_flags_mask;
  uint32_t ip_flags_mask;
  Cdb__ComposePrefixT *src_ip;
  Cdb__ComposePrefixT *src_ip_mask;
  Cdb__ComposePrefixT *dst_ip;
  Cdb__ComposePrefixT *dst_ip_mask;
  protobuf_c_boolean has_ipv6_flow_label;
  uint32_t ipv6_flow_label;
  protobuf_c_boolean has_ipv6_flow_label_mask;
  uint32_t ipv6_flow_label_mask;
  protobuf_c_boolean has_dscp;
  uint32_t dscp;
  protobuf_c_boolean has_dscp_mask;
  uint32_t dscp_mask;
  protobuf_c_boolean has_ip_precedence;
  uint32_t ip_precedence;
  protobuf_c_boolean has_ip_precedence_mask;
  uint32_t ip_precedence_mask;
  protobuf_c_boolean has_ip_protocol;
  uint32_t ip_protocol;
  protobuf_c_boolean has_ip_protocol_mask;
  uint32_t ip_protocol_mask;
  protobuf_c_boolean has_l4_src_port_type;
  uint32_t l4_src_port_type;
  protobuf_c_boolean has_l4_src_port;
  uint32_t l4_src_port;
  protobuf_c_boolean has_l4_src_port_mask;
  uint32_t l4_src_port_mask;
  protobuf_c_boolean has_l4_dst_port_type;
  uint32_t l4_dst_port_type;
  protobuf_c_boolean has_l4_dst_port;
  uint32_t l4_dst_port;
  protobuf_c_boolean has_l4_dst_port_mask;
  uint32_t l4_dst_port_mask;
  protobuf_c_boolean has_ip_frag;
  uint32_t ip_frag;
  protobuf_c_boolean has_tcp_flags;
  uint32_t tcp_flags;
  protobuf_c_boolean has_tcp_flags_mask;
  uint32_t tcp_flags_mask;
  protobuf_c_boolean has_igmp_type;
  uint32_t igmp_type;
  protobuf_c_boolean has_icmp_type;
  uint32_t icmp_type;
  protobuf_c_boolean has_icmp_code;
  uint32_t icmp_code;
  protobuf_c_boolean has_udf_id;
  uint32_t udf_id;
  protobuf_c_boolean has_udf_type;
  uint32_t udf_type;
  protobuf_c_boolean has_udf_offset;
  uint32_t udf_offset;
  size_t n_udf_value;
  uint32_t *udf_value;
  size_t n_udf_mask;
  uint32_t *udf_mask;
  size_t n_udf_value_valid;
  uint32_t *udf_value_valid;
  protobuf_c_boolean has_erspan_id;
  uint32_t erspan_id;
  protobuf_c_boolean has_erspan_id_mask;
  uint32_t erspan_id_mask;
  protobuf_c_boolean has_strip_header_pos;
  uint32_t strip_header_pos;
  protobuf_c_boolean has_strip_header_offset;
  uint32_t strip_header_offset;
  protobuf_c_boolean has_l4_vxlan_vni;
  uint32_t l4_vxlan_vni;
  protobuf_c_boolean has_l4_vxlan_vni_mask;
  uint32_t l4_vxlan_vni_mask;
  protobuf_c_boolean has_l4_gre_type;
  uint32_t l4_gre_type;
  protobuf_c_boolean has_l4_gre_key;
  uint32_t l4_gre_key;
  protobuf_c_boolean has_l4_gre_key_mask;
  uint32_t l4_gre_key_mask;
  protobuf_c_boolean has_l2gre_add_header;
  uint32_t l2gre_add_header;
  Cdb__ComposeAddrT *l2gre_src_ip;
  Cdb__ComposeAddrT *l2gre_dst_ip;
  Cdb__ComposeMacAddrT *l2gre_dst_mac;
  protobuf_c_boolean has_l2gre_key_num;
  uint32_t l2gre_key_num;
  protobuf_c_boolean has_l2gre_key_len;
  uint32_t l2gre_key_len;
  protobuf_c_boolean has_l3gre_add_header;
  uint32_t l3gre_add_header;
  Cdb__ComposeAddrT *l3gre_src_ip;
  Cdb__ComposeAddrT *l3gre_dst_ip;
  Cdb__ComposeMacAddrT *l3gre_dst_mac;
  protobuf_c_boolean has_category_id;
  uint32_t category_id;
  protobuf_c_boolean has_deny;
  uint32_t deny;
  protobuf_c_boolean has_stats_en;
  uint32_t stats_en;
  protobuf_c_boolean has_options;
  uint32_t options;
  protobuf_c_boolean has_inner_key_flags;
  uint64_t inner_key_flags;
  protobuf_c_boolean has_inner_key_ipv6_flags;
  uint32_t inner_key_ipv6_flags;
  protobuf_c_boolean has_inner_is_ipv6;
  uint32_t inner_is_ipv6;
  protobuf_c_boolean has_inner_ether_type;
  uint32_t inner_ether_type;
  protobuf_c_boolean has_inner_ether_type_mask;
  uint32_t inner_ether_type_mask;
  Cdb__ComposeMacAddrT *inner_src_mac;
  Cdb__ComposeMacAddrT *inner_src_mac_mask;
  Cdb__ComposeMacAddrT *inner_dst_mac;
  Cdb__ComposeMacAddrT *inner_dst_mac_mask;
  protobuf_c_boolean has_inner_svlan;
  uint32_t inner_svlan;
  protobuf_c_boolean has_inner_svlan_mask;
  uint32_t inner_svlan_mask;
  protobuf_c_boolean has_inner_svlan_cos;
  uint32_t inner_svlan_cos;
  protobuf_c_boolean has_inner_svlan_cos_mask;
  uint32_t inner_svlan_cos_mask;
  protobuf_c_boolean has_inner_cvlan;
  uint32_t inner_cvlan;
  protobuf_c_boolean has_inner_cvlan_mask;
  uint32_t inner_cvlan_mask;
  protobuf_c_boolean has_inner_cvlan_cos;
  uint32_t inner_cvlan_cos;
  protobuf_c_boolean has_inner_cvlan_cos_mask;
  uint32_t inner_cvlan_cos_mask;
  protobuf_c_boolean has_inner_ip_type;
  uint32_t inner_ip_type;
  protobuf_c_boolean has_inner_ip_type_mask;
  uint32_t inner_ip_type_mask;
  protobuf_c_boolean has_inner_ip_flags;
  uint32_t inner_ip_flags;
  protobuf_c_boolean has_inner_ip_flags_mask;
  uint32_t inner_ip_flags_mask;
  Cdb__ComposePrefixT *inner_src_ip;
  Cdb__ComposePrefixT *inner_src_ip_mask;
  Cdb__ComposePrefixT *inner_dst_ip;
  Cdb__ComposePrefixT *inner_dst_ip_mask;
  protobuf_c_boolean has_inner_ipv6_flow_label;
  uint32_t inner_ipv6_flow_label;
  protobuf_c_boolean has_inner_ipv6_flow_label_mask;
  uint32_t inner_ipv6_flow_label_mask;
  protobuf_c_boolean has_inner_dscp;
  uint32_t inner_dscp;
  protobuf_c_boolean has_inner_dscp_mask;
  uint32_t inner_dscp_mask;
  protobuf_c_boolean has_inner_ip_precedence;
  uint32_t inner_ip_precedence;
  protobuf_c_boolean has_inner_ip_precedence_mask;
  uint32_t inner_ip_precedence_mask;
  protobuf_c_boolean has_inner_ip_protocol;
  uint32_t inner_ip_protocol;
  protobuf_c_boolean has_inner_ip_protocol_mask;
  uint32_t inner_ip_protocol_mask;
  protobuf_c_boolean has_inner_l4_src_port_type;
  uint32_t inner_l4_src_port_type;
  protobuf_c_boolean has_inner_l4_src_port;
  uint32_t inner_l4_src_port;
  protobuf_c_boolean has_inner_l4_src_port_mask;
  uint32_t inner_l4_src_port_mask;
  protobuf_c_boolean has_inner_l4_dst_port_type;
  uint32_t inner_l4_dst_port_type;
  protobuf_c_boolean has_inner_l4_dst_port;
  uint32_t inner_l4_dst_port;
  protobuf_c_boolean has_inner_l4_dst_port_mask;
  uint32_t inner_l4_dst_port_mask;
  protobuf_c_boolean has_inner_ip_frag;
  uint32_t inner_ip_frag;
  protobuf_c_boolean has_inner_tcp_flags;
  uint32_t inner_tcp_flags;
  protobuf_c_boolean has_inner_tcp_flags_mask;
  uint32_t inner_tcp_flags_mask;
  protobuf_c_boolean has_inner_igmp_type;
  uint32_t inner_igmp_type;
  protobuf_c_boolean has_inner_icmp_type;
  uint32_t inner_icmp_type;
  protobuf_c_boolean has_inner_icmp_code;
  uint32_t inner_icmp_code;
  protobuf_c_boolean has_inner_options;
  uint32_t inner_options;
  protobuf_c_boolean has_action_strip_header;
  uint32_t action_strip_header;
  protobuf_c_boolean has_tap_action_redirect;
  uint32_t tap_action_redirect;
  protobuf_c_boolean has_tap_action_mark_vlan;
  uint32_t tap_action_mark_vlan;
  protobuf_c_boolean has_tap_action_untag;
  uint32_t tap_action_untag;
  protobuf_c_boolean has_tap_action_trunction;
  uint32_t tap_action_trunction;
  protobuf_c_boolean has_tap_action_edit_dest_mac_en;
  uint32_t tap_action_edit_dest_mac_en;
  Cdb__ComposeMacAddrT *tap_action_edit_dest_mac;
  protobuf_c_boolean has_tap_action_edit_src_mac_en;
  uint32_t tap_action_edit_src_mac_en;
  Cdb__ComposeMacAddrT *tap_action_edit_src_mac;
  protobuf_c_boolean has_tap_action_edit_ipda_en;
  uint32_t tap_action_edit_ipda_en;
  Cdb__ComposeAddrT *tap_action_edit_ipda;
  protobuf_c_boolean has_tap_action_edit_ipsa_en;
  uint32_t tap_action_edit_ipsa_en;
  Cdb__ComposeAddrT *tap_action_edit_ipsa;
  protobuf_c_boolean has_tap_action_edit_vlan_en;
  uint32_t tap_action_edit_vlan_en;
  protobuf_c_boolean has_tap_action_edit_vlan;
  uint32_t tap_action_edit_vlan;
  protobuf_c_boolean has_tap_action_edit_vlan_action;
  uint32_t tap_action_edit_vlan_action;
  protobuf_c_boolean has_tap_group_oid;
  uint64_t tap_group_oid;
  protobuf_c_boolean has_add_vxlan_header;
  uint32_t add_vxlan_header;
  Cdb__ComposeMacAddrT *vxlan_dst_mac;
  Cdb__ComposeAddrT *vxlan_src_ip;
  Cdb__ComposeAddrT *vxlan_dst_ip;
  protobuf_c_boolean has_vxlan_srcport;
  uint32_t vxlan_srcport;
  protobuf_c_boolean has_vxlan_destport;
  uint32_t vxlan_destport;
  protobuf_c_boolean has_vxlan_vni;
  uint32_t vxlan_vni;
};
#define CDB__TBL_ACL_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_entry__descriptor) \
    , NULL, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0, NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_ACL_ENTRY_ACTION
 */
struct  _Cdb__TblAclEntryActionKey
{
  ProtobufCMessage base;
  uint64_t aclid;
};
#define CDB__TBL_ACL_ENTRY_ACTION_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_entry_action_key__descriptor) \
    , 0 }


struct  _Cdb__TblAclEntryAction
{
  ProtobufCMessage base;
  Cdb__TblAclEntryActionKey *key;
  protobuf_c_boolean has_action_flag;
  uint32_t action_flag;
  protobuf_c_boolean has_deny;
  uint32_t deny;
  protobuf_c_boolean has_stats_enale;
  uint32_t stats_enale;
  char *policer;
  protobuf_c_boolean has_nexthop_group;
  uint32_t nexthop_group;
  protobuf_c_boolean has_logen;
  uint32_t logen;
  protobuf_c_boolean has_tc;
  uint32_t tc;
  protobuf_c_boolean has_color;
  uint32_t color;
  protobuf_c_boolean has_dscp;
  uint32_t dscp;
  protobuf_c_boolean has_snat_cancel;
  uint32_t snat_cancel;
  protobuf_c_boolean has_session_id;
  uint32_t session_id;
  protobuf_c_boolean has_new_svlan_id;
  uint32_t new_svlan_id;
  protobuf_c_boolean has_new_cvlan_id;
  uint32_t new_cvlan_id;
  protobuf_c_boolean has_new_scos;
  uint32_t new_scos;
  protobuf_c_boolean has_new_ccos;
  uint32_t new_ccos;
  protobuf_c_boolean has_redirect_port_ifindex;
  uint32_t redirect_port_ifindex;
};
#define CDB__TBL_ACL_ENTRY_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_entry_action__descriptor) \
    , NULL, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_ACL_NEXTHOP_GROUP
 */
struct  _Cdb__TblAclNexthopGroupKey
{
  ProtobufCMessage base;
  uint32_t nexthop_group;
};
#define CDB__TBL_ACL_NEXTHOP_GROUP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_nexthop_group_key__descriptor) \
    , 0 }


struct  _Cdb__TblAclNexthopGroup
{
  ProtobufCMessage base;
  Cdb__TblAclNexthopGroupKey *key;
  size_t n_acl_nexthop_key;
  uint32_t *acl_nexthop_key;
};
#define CDB__TBL_ACL_NEXTHOP_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_nexthop_group__descriptor) \
    , NULL, 0,NULL }


/*
 * TBL_ACL_NEXTHOP
 */
struct  _Cdb__TblAclNexthopKey
{
  ProtobufCMessage base;
  uint32_t acl_nexthop_id;
};
#define CDB__TBL_ACL_NEXTHOP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_nexthop_key__descriptor) \
    , 0 }


struct  _Cdb__TblAclNexthop
{
  ProtobufCMessage base;
  Cdb__TblAclNexthopKey *key;
  protobuf_c_boolean has_edit_flags;
  uint32_t edit_flags;
  protobuf_c_boolean has_port;
  uint32_t port;
  Cdb__ComposeMacAddrT *src_mac;
  Cdb__ComposeMacAddrT *dst_mac;
  protobuf_c_boolean has_vlan;
  uint32_t vlan;
  Cdb__ComposeAddrIpv4T *src_ipv4;
  Cdb__ComposeAddrIpv4T *dst_ipv4;
  protobuf_c_boolean has_dscp;
  uint32_t dscp;
  protobuf_c_boolean has_l4_src_port;
  uint32_t l4_src_port;
  protobuf_c_boolean has_l4_dst_port;
  uint32_t l4_dst_port;
  protobuf_c_boolean has_ref;
  uint32_t ref;
};
#define CDB__TBL_ACL_NEXTHOP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_nexthop__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_TIME_RANGE
 */
struct  _Cdb__TblTimeRangeKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_TIME_RANGE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_time_range_key__descriptor) \
    , NULL }


struct  _Cdb__TblTimeRange
{
  ProtobufCMessage base;
  Cdb__TblTimeRangeKey *key;
  Cdb__ComposeTimeRangeValueT *time;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
  Cdb__ComposeTimeRangeTimerT *running_timer;
};
#define CDB__TBL_TIME_RANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_time_range__descriptor) \
    , NULL, NULL, 0,0, NULL }


/*
 * TBL_SSH_CFG
 */
struct  _Cdb__TblSshCfg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_version;
  uint32_t version;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  protobuf_c_boolean has_auth_retry;
  uint32_t auth_retry;
  protobuf_c_boolean has_auth_timeout;
  uint32_t auth_timeout;
  protobuf_c_boolean has_rekey_interval;
  uint32_t rekey_interval;
  protobuf_c_boolean has_auth_type;
  uint32_t auth_type;
  protobuf_c_boolean has_listen_port;
  uint32_t listen_port;
  char *hostkey;
  protobuf_c_boolean has_netconf_port;
  uint32_t netconf_port;
  protobuf_c_boolean has_netconf_service;
  uint32_t netconf_service;
};
#define CDB__TBL_SSH_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ssh_cfg__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0 }


/*
 * TBL_SNMP_CFG
 */
struct  _Cdb__TblSnmpCfg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  protobuf_c_boolean has_server_enable;
  uint32_t server_enable;
  protobuf_c_boolean has_version;
  uint32_t version;
  char *engineid;
  Cdb__ComposeSnmpInfoT *contact;
  Cdb__ComposeSnmpInfoT *location;
  protobuf_c_boolean has_trap_enable_coldstart;
  uint32_t trap_enable_coldstart;
  protobuf_c_boolean has_trap_enable_warmstart;
  uint32_t trap_enable_warmstart;
  protobuf_c_boolean has_trap_enable_linkdown;
  uint32_t trap_enable_linkdown;
  protobuf_c_boolean has_trap_enable_linkup;
  uint32_t trap_enable_linkup;
  protobuf_c_boolean has_trap_enable_system;
  uint32_t trap_enable_system;
  protobuf_c_boolean has_trap_enable_vrrp;
  uint32_t trap_enable_vrrp;
  protobuf_c_boolean has_trap_enable_ptp_master_change;
  uint32_t trap_enable_ptp_master_change;
  protobuf_c_boolean has_trap_enable_ptp_state_change;
  uint32_t trap_enable_ptp_state_change;
  protobuf_c_boolean has_trap_enable_ptp_accuracy_change;
  uint32_t trap_enable_ptp_accuracy_change;
  protobuf_c_boolean has_trap_enable_all;
  uint32_t trap_enable_all;
  protobuf_c_boolean has_watch_restart_count;
  uint32_t watch_restart_count;
  protobuf_c_boolean has_agent_stats;
  uint32_t agent_stats;
};
#define CDB__TBL_SNMP_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_cfg__descriptor) \
    , 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_SNMP_VIEW
 */
struct  _Cdb__TblSnmpViewKey
{
  ProtobufCMessage base;
  Cdb__ComposeSnmpViewKeyT *view;
};
#define CDB__TBL_SNMP_VIEW_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_view_key__descriptor) \
    , NULL }


struct  _Cdb__TblSnmpView
{
  ProtobufCMessage base;
  Cdb__TblSnmpViewKey *key;
  protobuf_c_boolean has_type;
  uint32_t type;
  char *mask;
  protobuf_c_boolean has_access_cnt;
  uint32_t access_cnt;
  protobuf_c_boolean has_refcnt;
  uint32_t refcnt;
};
#define CDB__TBL_SNMP_VIEW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_view__descriptor) \
    , NULL, 0,0, NULL, 0,0, 0,0 }


/*
 * TBL_SNMP_COMMUNITY
 */
struct  _Cdb__TblSnmpCommunityKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_SNMP_COMMUNITY_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_community_key__descriptor) \
    , NULL }


struct  _Cdb__TblSnmpCommunity
{
  ProtobufCMessage base;
  Cdb__TblSnmpCommunityKey *key;
  protobuf_c_boolean has_type;
  uint32_t type;
  char *view;
  protobuf_c_boolean has_secidx;
  uint32_t secidx;
};
#define CDB__TBL_SNMP_COMMUNITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_community__descriptor) \
    , NULL, 0,0, NULL, 0,0 }


/*
 * TBL_SNMP_CONTEXT
 */
struct  _Cdb__TblSnmpContextKey
{
  ProtobufCMessage base;
  char *context_name;
};
#define CDB__TBL_SNMP_CONTEXT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_context_key__descriptor) \
    , NULL }


struct  _Cdb__TblSnmpContext
{
  ProtobufCMessage base;
  Cdb__TblSnmpContextKey *key;
  protobuf_c_boolean has_flags;
  uint32_t flags;
};
#define CDB__TBL_SNMP_CONTEXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_context__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_SNMP_USM_USER
 */
struct  _Cdb__TblSnmpUsmUserKey
{
  ProtobufCMessage base;
  char *usm_user_name;
};
#define CDB__TBL_SNMP_USM_USER_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_usm_user_key__descriptor) \
    , NULL }


struct  _Cdb__TblSnmpUsmUser
{
  ProtobufCMessage base;
  Cdb__TblSnmpUsmUserKey *key;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  char *remo_engid;
  protobuf_c_boolean has_auth_type;
  uint32_t auth_type;
  char *auth_pwd;
  char *enc_auth_pwd;
  protobuf_c_boolean has_priv_type;
  uint32_t priv_type;
  char *priv_pwd;
  char *enc_priv_pwd;
};
#define CDB__TBL_SNMP_USM_USER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_usm_user__descriptor) \
    , NULL, 0,0, NULL, 0,0, NULL, NULL, 0,0, NULL, NULL }


/*
 * TBL_SNMP_GROUP_USM
 */
struct  _Cdb__TblSnmpGroupUsmKey
{
  ProtobufCMessage base;
  Cdb__ComposeSnmpGroupUsmKeyT *group_usm;
};
#define CDB__TBL_SNMP_GROUP_USM_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_group_usm_key__descriptor) \
    , NULL }


struct  _Cdb__TblSnmpGroupUsm
{
  ProtobufCMessage base;
  Cdb__TblSnmpGroupUsmKey *key;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  char *security_name;
};
#define CDB__TBL_SNMP_GROUP_USM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_group_usm__descriptor) \
    , NULL, 0,0, NULL }


/*
 * TBL_SNMP_ACCESS_USM
 */
struct  _Cdb__TblSnmpAccessUsmKey
{
  ProtobufCMessage base;
  char *usm_access_name;
};
#define CDB__TBL_SNMP_ACCESS_USM_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_access_usm_key__descriptor) \
    , NULL }


struct  _Cdb__TblSnmpAccessUsm
{
  ProtobufCMessage base;
  Cdb__TblSnmpAccessUsmKey *key;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_usm_level;
  uint32_t usm_level;
  char *read_view;
  char *write_view;
  char *notify_view;
  char *context_name;
  protobuf_c_boolean has_isprefix;
  uint32_t isprefix;
};
#define CDB__TBL_SNMP_ACCESS_USM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_access_usm__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, NULL, NULL, 0,0 }


/*
 * TBL_SNMP_NOTIFY
 */
struct  _Cdb__TblSnmpNotifyKey
{
  ProtobufCMessage base;
  char *notify_name;
};
#define CDB__TBL_SNMP_NOTIFY_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_notify_key__descriptor) \
    , NULL }


struct  _Cdb__TblSnmpNotify
{
  ProtobufCMessage base;
  Cdb__TblSnmpNotifyKey *key;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  char *tag_name;
  protobuf_c_boolean has_notify_type;
  uint32_t notify_type;
};
#define CDB__TBL_SNMP_NOTIFY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_notify__descriptor) \
    , NULL, 0,0, NULL, 0,0 }


/*
 * TBL_SNMP_TARGET_ADDR
 */
struct  _Cdb__TblSnmpTargetAddrKey
{
  ProtobufCMessage base;
  char *taraddr_name;
};
#define CDB__TBL_SNMP_TARGET_ADDR_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_target_addr_key__descriptor) \
    , NULL }


struct  _Cdb__TblSnmpTargetAddr
{
  ProtobufCMessage base;
  Cdb__TblSnmpTargetAddrKey *key;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  char *para_name;
  Cdb__ComposeAddrT *ip_addr;
  protobuf_c_boolean has_upd_port;
  uint32_t upd_port;
  protobuf_c_boolean has_timeout;
  uint32_t timeout;
  protobuf_c_boolean has_retries;
  uint32_t retries;
  protobuf_c_boolean has_mgmt_if;
  uint32_t mgmt_if;
  char *tag_list;
};
#define CDB__TBL_SNMP_TARGET_ADDR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_target_addr__descriptor) \
    , NULL, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, NULL }


/*
 * TBL_SNMP_TARGET_PARAMS
 */
struct  _Cdb__TblSnmpTargetParamsKey
{
  ProtobufCMessage base;
  char *params_name;
};
#define CDB__TBL_SNMP_TARGET_PARAMS_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_target_params_key__descriptor) \
    , NULL }


struct  _Cdb__TblSnmpTargetParams
{
  ProtobufCMessage base;
  Cdb__TblSnmpTargetParamsKey *key;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  char *user_name;
  protobuf_c_boolean has_usm_level;
  uint32_t usm_level;
};
#define CDB__TBL_SNMP_TARGET_PARAMS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_target_params__descriptor) \
    , NULL, 0,0, NULL, 0,0 }


/*
 * TBL_SNMP_TRAP
 */
struct  _Cdb__TblSnmpTrapKey
{
  ProtobufCMessage base;
  Cdb__ComposeSnmpTrapKeyT *trap;
};
#define CDB__TBL_SNMP_TRAP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_trap_key__descriptor) \
    , NULL }


struct  _Cdb__TblSnmpTrap
{
  ProtobufCMessage base;
  Cdb__TblSnmpTrapKey *key;
  protobuf_c_boolean has_is_inband;
  uint32_t is_inband;
};
#define CDB__TBL_SNMP_TRAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_trap__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_SNMP_INFORM
 */
struct  _Cdb__TblSnmpInformKey
{
  ProtobufCMessage base;
  Cdb__ComposeSnmpInformKeyT *inform;
};
#define CDB__TBL_SNMP_INFORM_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_inform_key__descriptor) \
    , NULL }


struct  _Cdb__TblSnmpInform
{
  ProtobufCMessage base;
  Cdb__TblSnmpInformKey *key;
  protobuf_c_boolean has_is_inband;
  uint32_t is_inband;
  protobuf_c_boolean has_timeout;
  uint32_t timeout;
  protobuf_c_boolean has_retries;
  uint32_t retries;
};
#define CDB__TBL_SNMP_INFORM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_inform__descriptor) \
    , NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_SNMP_TRAP_MSG
 */
struct  _Cdb__TblSnmpTrapMsg
{
  ProtobufCMessage base;
  char *msg;
};
#define CDB__TBL_SNMP_TRAP_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_snmp_trap_msg__descriptor) \
    , NULL }


/*
 * TBL_RMON_EVENT
 */
struct  _Cdb__TblRmonEventKey
{
  ProtobufCMessage base;
  uint32_t index;
};
#define CDB__TBL_RMON_EVENT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rmon_event_key__descriptor) \
    , 0 }


struct  _Cdb__TblRmonEvent
{
  ProtobufCMessage base;
  Cdb__TblRmonEventKey *key;
  protobuf_c_boolean has_conf;
  uint32_t conf;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_status;
  uint32_t status;
  protobuf_c_boolean has_last_sent;
  uint64_t last_sent;
  char *desc;
  char *community;
  char *owner;
};
#define CDB__TBL_RMON_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rmon_event__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL }


/*
 * TBL_RMON_ALARM
 */
struct  _Cdb__TblRmonAlarmKey
{
  ProtobufCMessage base;
  uint32_t index;
};
#define CDB__TBL_RMON_ALARM_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rmon_alarm_key__descriptor) \
    , 0 }


struct  _Cdb__TblRmonAlarm
{
  ProtobufCMessage base;
  Cdb__TblRmonAlarmKey *key;
  protobuf_c_boolean has_conf;
  uint32_t conf;
  protobuf_c_boolean has_interval;
  uint32_t interval;
  size_t n_variable;
  uint32_t *variable;
  char *variable_word;
  protobuf_c_boolean has_sample_type;
  uint32_t sample_type;
  protobuf_c_boolean has_value;
  int64_t value;
  protobuf_c_boolean has_startup_alarm;
  uint32_t startup_alarm;
  protobuf_c_boolean has_rising_threshold;
  int32_t rising_threshold;
  protobuf_c_boolean has_falling_threshold;
  int32_t falling_threshold;
  protobuf_c_boolean has_rising_event_index;
  uint32_t rising_event_index;
  protobuf_c_boolean has_falling_event_index;
  uint32_t falling_event_index;
  char *owner;
  protobuf_c_boolean has_status;
  uint32_t status;
  protobuf_c_boolean has_last_event;
  uint32_t last_event;
  protobuf_c_boolean has_prev_value;
  uint64_t prev_value;
  protobuf_c_boolean has_curr_value;
  uint64_t curr_value;
};
#define CDB__TBL_RMON_ALARM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rmon_alarm__descriptor) \
    , NULL, 0,0, 0,0, 0,NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_RMON_ETHER_STATS
 */
struct  _Cdb__TblRmonEtherStatsKey
{
  ProtobufCMessage base;
  uint32_t index;
};
#define CDB__TBL_RMON_ETHER_STATS_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rmon_ether_stats_key__descriptor) \
    , 0 }


struct  _Cdb__TblRmonEtherStats
{
  ProtobufCMessage base;
  Cdb__TblRmonEtherStatsKey *key;
  protobuf_c_boolean has_status;
  uint32_t status;
  char *owner;
  size_t n_data_source;
  uint32_t *data_source;
  protobuf_c_boolean has_data_source_ifindex;
  uint32_t data_source_ifindex;
  protobuf_c_boolean has_drop_events;
  uint64_t drop_events;
  protobuf_c_boolean has_octets;
  uint64_t octets;
  protobuf_c_boolean has_pkts;
  uint64_t pkts;
  protobuf_c_boolean has_broadcast_pkts;
  uint64_t broadcast_pkts;
  protobuf_c_boolean has_multicast_pkts;
  uint64_t multicast_pkts;
  protobuf_c_boolean has_crc_align_errors;
  uint64_t crc_align_errors;
  protobuf_c_boolean has_undersize_pkts;
  uint64_t undersize_pkts;
  protobuf_c_boolean has_oversize_pkts;
  uint64_t oversize_pkts;
  protobuf_c_boolean has_fragments;
  uint64_t fragments;
  protobuf_c_boolean has_jabbers;
  uint64_t jabbers;
  protobuf_c_boolean has_collisions;
  uint64_t collisions;
  protobuf_c_boolean has_pkts_64_octets;
  uint64_t pkts_64_octets;
  protobuf_c_boolean has_pkts_65to127_octets;
  uint64_t pkts_65to127_octets;
  protobuf_c_boolean has_pkts_128to255_octets;
  uint64_t pkts_128to255_octets;
  protobuf_c_boolean has_pkts_256to511_octets;
  uint64_t pkts_256to511_octets;
  protobuf_c_boolean has_pkts_512to1023_octets;
  uint64_t pkts_512to1023_octets;
  protobuf_c_boolean has_pkts_1024to1518_octets;
  uint64_t pkts_1024to1518_octets;
};
#define CDB__TBL_RMON_ETHER_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rmon_ether_stats__descriptor) \
    , NULL, 0,0, NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_RMON_HISTORY
 */
struct  _Cdb__TblRmonHistoryKey
{
  ProtobufCMessage base;
  uint32_t index;
};
#define CDB__TBL_RMON_HISTORY_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rmon_history_key__descriptor) \
    , 0 }


struct  _Cdb__TblRmonHistory
{
  ProtobufCMessage base;
  Cdb__TblRmonHistoryKey *key;
  protobuf_c_boolean has_status;
  uint32_t status;
  char *owner;
  size_t n_data;
  uint32_t *data;
  protobuf_c_boolean has_data_source;
  uint32_t data_source;
  protobuf_c_boolean has_buckets_requested;
  uint32_t buckets_requested;
  protobuf_c_boolean has_buckets_granted;
  uint32_t buckets_granted;
  protobuf_c_boolean has_interval;
  uint32_t interval;
  protobuf_c_boolean has_current_sample_no;
  uint32_t current_sample_no;
};
#define CDB__TBL_RMON_HISTORY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rmon_history__descriptor) \
    , NULL, 0,0, NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_RMON_STATS_HISTORY
 */
struct  _Cdb__TblRmonStatsHistory
{
  ProtobufCMessage base;
  Cdb__ComposeRmonStatsHistoryKeyT *key;
  protobuf_c_boolean has_interval_start;
  uint64_t interval_start;
  protobuf_c_boolean has_drop_events;
  uint64_t drop_events;
  protobuf_c_boolean has_octets;
  uint64_t octets;
  protobuf_c_boolean has_pkts;
  uint64_t pkts;
  protobuf_c_boolean has_broadcast_pkts;
  uint64_t broadcast_pkts;
  protobuf_c_boolean has_multicast_pkts;
  uint64_t multicast_pkts;
  protobuf_c_boolean has_crc_align_errors;
  uint64_t crc_align_errors;
  protobuf_c_boolean has_undersize_pkts;
  uint64_t undersize_pkts;
  protobuf_c_boolean has_oversize_pkts;
  uint64_t oversize_pkts;
  protobuf_c_boolean has_fragments;
  uint64_t fragments;
  protobuf_c_boolean has_jabbers;
  uint64_t jabbers;
  protobuf_c_boolean has_collisions;
  uint64_t collisions;
  protobuf_c_boolean has_utilization;
  uint32_t utilization;
  protobuf_c_boolean has_total_drop_events;
  uint64_t total_drop_events;
  protobuf_c_boolean has_total_octets;
  uint64_t total_octets;
  protobuf_c_boolean has_total_pkts;
  uint64_t total_pkts;
  protobuf_c_boolean has_total_broadcast_pkts;
  uint64_t total_broadcast_pkts;
  protobuf_c_boolean has_total_multicast_pkts;
  uint64_t total_multicast_pkts;
  protobuf_c_boolean has_total_crc_align_errors;
  uint64_t total_crc_align_errors;
  protobuf_c_boolean has_total_undersize_pkts;
  uint64_t total_undersize_pkts;
  protobuf_c_boolean has_total_oversize_pkts;
  uint64_t total_oversize_pkts;
  protobuf_c_boolean has_total_fragments;
  uint64_t total_fragments;
  protobuf_c_boolean has_total_jabbers;
  uint64_t total_jabbers;
  protobuf_c_boolean has_total_collisions;
  uint64_t total_collisions;
};
#define CDB__TBL_RMON_STATS_HISTORY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rmon_stats_history__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_SYSLOG_CFG
 */
struct  _Cdb__TblSyslogCfg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_enable_to_server;
  uint32_t enable_to_server;
  protobuf_c_boolean has_enable_to_file;
  uint32_t enable_to_file;
  protobuf_c_boolean has_enable_to_trap;
  uint32_t enable_to_trap;
  protobuf_c_boolean has_enable_to_diag;
  uint32_t enable_to_diag;
  protobuf_c_boolean has_logging_lines;
  uint32_t logging_lines;
  char *server_addr;
  protobuf_c_boolean has_server_facility;
  uint32_t server_facility;
  protobuf_c_boolean has_server_severity;
  uint32_t server_severity;
  protobuf_c_boolean has_trap_facility;
  uint32_t trap_facility;
  protobuf_c_boolean has_trap_severity;
  uint32_t trap_severity;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  protobuf_c_boolean has_file_severity;
  uint32_t file_severity;
  protobuf_c_boolean has_module_severity;
  uint32_t module_severity;
  protobuf_c_boolean has_enable_merge;
  uint32_t enable_merge;
  protobuf_c_boolean has_enable_operate;
  uint32_t enable_operate;
  protobuf_c_boolean has_merge_timeout;
  uint32_t merge_timeout;
  protobuf_c_boolean has_merge_fifosize;
  uint32_t merge_fifosize;
};
#define CDB__TBL_SYSLOG_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_syslog_cfg__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_NTP_SERVER
 */
struct  _Cdb__TblNtpServerKey
{
  ProtobufCMessage base;
  char *host;
};
#define CDB__TBL_NTP_SERVER_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ntp_server_key__descriptor) \
    , NULL }


struct  _Cdb__TblNtpServer
{
  ProtobufCMessage base;
  Cdb__TblNtpServerKey *key;
  protobuf_c_boolean has_keyid;
  uint32_t keyid;
  protobuf_c_boolean has_version;
  uint32_t version;
  protobuf_c_boolean has_prefer;
  uint32_t prefer;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_is_inband;
  uint32_t is_inband;
};
#define CDB__TBL_NTP_SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ntp_server__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_NTP_ACE
 */
struct  _Cdb__TblNtpAceKey
{
  ProtobufCMessage base;
  char *host;
  char *mask;
};
#define CDB__TBL_NTP_ACE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ntp_ace_key__descriptor) \
    , NULL, NULL }


struct  _Cdb__TblNtpAce
{
  ProtobufCMessage base;
  Cdb__TblNtpAceKey *key;
  protobuf_c_boolean has_option;
  uint32_t option;
  protobuf_c_boolean has_family;
  uint32_t family;
  protobuf_c_boolean has_masklen;
  uint32_t masklen;
};
#define CDB__TBL_NTP_ACE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ntp_ace__descriptor) \
    , NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_NTP_KEY
 */
struct  _Cdb__TblNtpKeyKey
{
  ProtobufCMessage base;
  uint32_t keyid;
};
#define CDB__TBL_NTP_KEY_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ntp_key_key__descriptor) \
    , 0 }


struct  _Cdb__TblNtpKey
{
  ProtobufCMessage base;
  Cdb__TblNtpKeyKey *key;
  char *value;
  protobuf_c_boolean has_trusted;
  uint32_t trusted;
};
#define CDB__TBL_NTP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ntp_key__descriptor) \
    , NULL, NULL, 0,0 }


/*
 * TBL_NTP_CFG
 */
struct  _Cdb__TblNtpCfg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_aclcount;
  int32_t aclcount;
  protobuf_c_boolean has_ucastservercount;
  int32_t ucastservercount;
  protobuf_c_boolean has_ucastclientcount;
  int32_t ucastclientcount;
  protobuf_c_boolean has_bcastservercount;
  int32_t bcastservercount;
  protobuf_c_boolean has_mcastclientcount;
  int32_t mcastclientcount;
  protobuf_c_boolean has_mcastservercount;
  int32_t mcastservercount;
  protobuf_c_boolean has_bcastdelay;
  int32_t bcastdelay;
  protobuf_c_boolean has_minimumdistance;
  int32_t minimumdistance;
  protobuf_c_boolean has_authentication;
  int32_t authentication;
  protobuf_c_boolean has_brefclock;
  int32_t brefclock;
  protobuf_c_boolean has_refclock_stratum;
  int32_t refclock_stratum;
  protobuf_c_boolean has_ifreloadcount;
  int32_t ifreloadcount;
  protobuf_c_boolean has_clearstats;
  int32_t clearstats;
  protobuf_c_boolean has_debug_level;
  int32_t debug_level;
  protobuf_c_boolean has_ucastservercount_inband;
  int32_t ucastservercount_inband;
  protobuf_c_boolean has_ucastservercount_outband;
  int32_t ucastservercount_outband;
};
#define CDB__TBL_NTP_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ntp_cfg__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_NTP_IF
 */
struct  _Cdb__TblNtpIf
{
  ProtobufCMessage base;
  protobuf_c_boolean has_disable;
  int32_t disable;
  protobuf_c_boolean has_broadcastclient;
  int32_t broadcastclient;
};
#define CDB__TBL_NTP_IF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ntp_if__descriptor) \
    , 0,0, 0,0 }


/*
 * TBL_NTP_SYNCSTATUS
 */
struct  _Cdb__TblNtpSyncstatus
{
  ProtobufCMessage base;
  char *status;
  char *stratum;
  char *frequency;
  char *precision;
  char *reference_time;
  char *root_delay;
  char *root_dispersion;
  char *stability;
};
#define CDB__TBL_NTP_SYNCSTATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ntp_syncstatus__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * TBL_STATIC_DNS
 */
struct  _Cdb__TblStaticDnsKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_STATIC_DNS_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_static_dns_key__descriptor) \
    , NULL }


struct  _Cdb__TblStaticDns
{
  ProtobufCMessage base;
  Cdb__TblStaticDnsKey *key;
  Cdb__ComposeAddrT *ip_addr;
};
#define CDB__TBL_STATIC_DNS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_static_dns__descriptor) \
    , NULL, NULL }


/*
 * TBL_DYNAMIC_DNS_DOMAIN
 */
struct  _Cdb__TblDynamicDnsDomainKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_DYNAMIC_DNS_DOMAIN_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dynamic_dns_domain_key__descriptor) \
    , NULL }


struct  _Cdb__TblDynamicDnsDomain
{
  ProtobufCMessage base;
  Cdb__TblDynamicDnsDomainKey *key;
};
#define CDB__TBL_DYNAMIC_DNS_DOMAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dynamic_dns_domain__descriptor) \
    , NULL }


/*
 * TBL_DYNAMIC_DNS_SERVER
 */
struct  _Cdb__TblDynamicDnsServerKey
{
  ProtobufCMessage base;
  Cdb__ComposeAddrT *ip_addr;
};
#define CDB__TBL_DYNAMIC_DNS_SERVER_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dynamic_dns_server_key__descriptor) \
    , NULL }


struct  _Cdb__TblDynamicDnsServer
{
  ProtobufCMessage base;
  Cdb__TblDynamicDnsServerKey *key;
};
#define CDB__TBL_DYNAMIC_DNS_SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dynamic_dns_server__descriptor) \
    , NULL }


/*
 * TBL_QOS_DOMAIN
 */
struct  _Cdb__TblQosDomainKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_QOS_DOMAIN_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_domain_key__descriptor) \
    , 0 }


struct  _Cdb__TblQosDomain
{
  ProtobufCMessage base;
  Cdb__TblQosDomainKey *key;
  protobuf_c_boolean has_phb_enable;
  uint32_t phb_enable;
  protobuf_c_boolean has_cfi_enable;
  uint32_t cfi_enable;
  size_t n_cos2pri;
  uint32_t *cos2pri;
  size_t n_cos2color;
  uint32_t *cos2color;
  size_t n_cos2phb;
  uint32_t *cos2phb;
  size_t n_dscp2pri;
  uint32_t *dscp2pri;
  size_t n_dscp2color;
  uint32_t *dscp2color;
  size_t n_dscp2phb;
  uint32_t *dscp2phb;
  size_t n_prec2pri;
  uint32_t *prec2pri;
  size_t n_prec2color;
  uint32_t *prec2color;
  size_t n_prec2phb;
  uint32_t *prec2phb;
  size_t n_exp2pri;
  uint32_t *exp2pri;
  size_t n_exp2color;
  uint32_t *exp2color;
  size_t n_exp2phb;
  uint32_t *exp2phb;
  size_t n_pri_color2cos;
  uint32_t *pri_color2cos;
  size_t n_pri_color2dscp;
  uint32_t *pri_color2dscp;
  size_t n_pri_color2exp;
  uint32_t *pri_color2exp;
  size_t n_phb2cos;
  uint32_t *phb2cos;
  size_t n_phb2dscp;
  uint32_t *phb2dscp;
  size_t n_phb2exp;
  uint32_t *phb2exp;
  size_t n_cos2tc;
  uint32_t *cos2tc;
  size_t n_dscp2tc;
  uint32_t *dscp2tc;
  size_t n_exp2tc;
  uint32_t *exp2tc;
  size_t n_tc_color2cos;
  uint32_t *tc_color2cos;
  size_t n_tc_color2dscp;
  uint32_t *tc_color2dscp;
  size_t n_tc_color2exp;
  uint32_t *tc_color2exp;
};
#define CDB__TBL_QOS_DOMAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_domain__descriptor) \
    , NULL, 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/*
 * TBL_QOS_MPLS_DOMAIN
 */
struct  _Cdb__TblQosMplsDomainKey
{
  ProtobufCMessage base;
  uint32_t mpls_label;
};
#define CDB__TBL_QOS_MPLS_DOMAIN_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_mpls_domain_key__descriptor) \
    , 0 }


struct  _Cdb__TblQosMplsDomain
{
  ProtobufCMessage base;
  Cdb__TblQosMplsDomainKey *key;
  protobuf_c_boolean has_exp_domain;
  uint32_t exp_domain;
};
#define CDB__TBL_QOS_MPLS_DOMAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_mpls_domain__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_QOS_POLICER_RES
 */
struct  _Cdb__TblQosPolicerRes
{
  ProtobufCMessage base;
  Cdb__ComposeQosPolicerResKeyT *key;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
};
#define CDB__TBL_QOS_POLICER_RES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_policer_res__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_QOS_POLICER_ACTION_PROFILE
 */
struct  _Cdb__TblQosPolicerActionProfileKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_QOS_POLICER_ACTION_PROFILE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_policer_action_profile_key__descriptor) \
    , 0 }


struct  _Cdb__TblQosPolicerActionProfile
{
  ProtobufCMessage base;
  Cdb__TblQosPolicerActionProfileKey *key;
  char *name;
  Cdb__ComposeGlbQosColorActionT *confirm_action;
  Cdb__ComposeGlbQosColorActionT *exceed_action;
  Cdb__ComposeGlbQosColorActionT *violate_action;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
};
#define CDB__TBL_QOS_POLICER_ACTION_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_policer_action_profile__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0,0 }


/*
 * TBL_QOS_POLICER_PROFILE
 */
struct  _Cdb__TblQosPolicerProfileKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_QOS_POLICER_PROFILE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_policer_profile_key__descriptor) \
    , 0 }


struct  _Cdb__TblQosPolicerProfile
{
  ProtobufCMessage base;
  Cdb__TblQosPolicerProfileKey *key;
  char *name;
  protobuf_c_boolean has_flags_policer_agp;
  uint32_t flags_policer_agp;
  protobuf_c_boolean has_flags_algorithm_mode;
  uint32_t flags_algorithm_mode;
  protobuf_c_boolean has_flags_color_mode;
  uint32_t flags_color_mode;
  protobuf_c_boolean has_flags_cir;
  uint32_t flags_cir;
  protobuf_c_boolean has_flags_cbs;
  uint32_t flags_cbs;
  protobuf_c_boolean has_flags_eir_or_pir;
  uint32_t flags_eir_or_pir;
  protobuf_c_boolean has_flags_ebs_or_pbs;
  uint32_t flags_ebs_or_pbs;
  protobuf_c_boolean has_flags_drop_color;
  uint32_t flags_drop_color;
  protobuf_c_boolean has_flags_use_l3_legth;
  uint32_t flags_use_l3_legth;
  protobuf_c_boolean has_flags_stats;
  uint32_t flags_stats;
  protobuf_c_boolean has_flags_dump_stats;
  uint32_t flags_dump_stats;
  protobuf_c_boolean has_algorithm_mode;
  uint32_t algorithm_mode;
  protobuf_c_boolean has_color_mode;
  uint32_t color_mode;
  protobuf_c_boolean has_drop_color;
  uint32_t drop_color;
  protobuf_c_boolean has_cir;
  uint64_t cir;
  protobuf_c_boolean has_cbs;
  uint32_t cbs;
  protobuf_c_boolean has_eir_or_pir;
  uint64_t eir_or_pir;
  protobuf_c_boolean has_ebs_or_pbs;
  uint32_t ebs_or_pbs;
  protobuf_c_boolean has_confirm_pkt;
  uint64_t confirm_pkt;
  protobuf_c_boolean has_confirm_byte;
  uint64_t confirm_byte;
  protobuf_c_boolean has_exceed_pkt;
  uint64_t exceed_pkt;
  protobuf_c_boolean has_exceed_byte;
  uint64_t exceed_byte;
  protobuf_c_boolean has_violate_pkt;
  uint64_t violate_pkt;
  protobuf_c_boolean has_violate_byte;
  uint64_t violate_byte;
  protobuf_c_boolean has_is_pps;
  uint32_t is_pps;
  char *action_profile_name;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
};
#define CDB__TBL_QOS_POLICER_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_policer_profile__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0 }


/*
 * TBL_QOS_DROP_PROFILE
 */
struct  _Cdb__TblQosDropProfileKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_QOS_DROP_PROFILE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_drop_profile_key__descriptor) \
    , 0 }


struct  _Cdb__TblQosDropProfile
{
  ProtobufCMessage base;
  Cdb__TblQosDropProfileKey *key;
  char *name;
  protobuf_c_boolean has_flags_green_max_threshold;
  uint32_t flags_green_max_threshold;
  protobuf_c_boolean has_flags_green_min_threshold;
  uint32_t flags_green_min_threshold;
  protobuf_c_boolean has_flags_green_probabilty;
  uint32_t flags_green_probabilty;
  protobuf_c_boolean has_flags_yellow_max_threshold;
  uint32_t flags_yellow_max_threshold;
  protobuf_c_boolean has_flags_yellow_min_threshold;
  uint32_t flags_yellow_min_threshold;
  protobuf_c_boolean has_flags_yellow_probabilty;
  uint32_t flags_yellow_probabilty;
  protobuf_c_boolean has_flags_red_max_threshold;
  uint32_t flags_red_max_threshold;
  protobuf_c_boolean has_flags_red_min_threshold;
  uint32_t flags_red_min_threshold;
  protobuf_c_boolean has_flags_red_probabilty;
  uint32_t flags_red_probabilty;
  protobuf_c_boolean has_flags_random_detect;
  uint32_t flags_random_detect;
  protobuf_c_boolean has_green_max_threashold;
  uint32_t green_max_threashold;
  protobuf_c_boolean has_green_min_threashold;
  uint32_t green_min_threashold;
  protobuf_c_boolean has_green_probability;
  uint32_t green_probability;
  protobuf_c_boolean has_yellow_max_threashold;
  uint32_t yellow_max_threashold;
  protobuf_c_boolean has_yellow_min_threashold;
  uint32_t yellow_min_threashold;
  protobuf_c_boolean has_yellow_probability;
  uint32_t yellow_probability;
  protobuf_c_boolean has_red_max_threashold;
  uint32_t red_max_threashold;
  protobuf_c_boolean has_red_min_threashold;
  uint32_t red_min_threashold;
  protobuf_c_boolean has_red_probability;
  uint32_t red_probability;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
};
#define CDB__TBL_QOS_DROP_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_drop_profile__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_QOS_QUEUE_SHAPE_PROFILE
 */
struct  _Cdb__TblQosQueueShapeProfileKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_QOS_QUEUE_SHAPE_PROFILE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_queue_shape_profile_key__descriptor) \
    , 0 }


struct  _Cdb__TblQosQueueShapeProfile
{
  ProtobufCMessage base;
  Cdb__TblQosQueueShapeProfileKey *key;
  char *name;
  protobuf_c_boolean has_pir;
  uint32_t pir;
  protobuf_c_boolean has_cir;
  uint32_t cir;
  protobuf_c_boolean has_mode;
  uint32_t mode;
  protobuf_c_boolean has_queue_weight;
  uint32_t queue_weight;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
  protobuf_c_boolean has_flags_pir;
  uint32_t flags_pir;
  protobuf_c_boolean has_flags_cir;
  uint32_t flags_cir;
  protobuf_c_boolean has_flags_mode;
  uint32_t flags_mode;
  protobuf_c_boolean has_flags_weight;
  uint32_t flags_weight;
};
#define CDB__TBL_QOS_QUEUE_SHAPE_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_queue_shape_profile__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_QOS_PORT_SHAPE_PROFILE
 */
struct  _Cdb__TblQosPortShapeProfileKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_QOS_PORT_SHAPE_PROFILE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_port_shape_profile_key__descriptor) \
    , 0 }


struct  _Cdb__TblQosPortShapeProfile
{
  ProtobufCMessage base;
  Cdb__TblQosPortShapeProfileKey *key;
  char *name;
  protobuf_c_boolean has_pir;
  uint32_t pir;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
  protobuf_c_boolean has_flags_pir;
  uint32_t flags_pir;
};
#define CDB__TBL_QOS_PORT_SHAPE_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_port_shape_profile__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_QOS_QUEUE_SMART_BUFFER
 */
struct  _Cdb__TblQosQueueSmartBufferKey
{
  ProtobufCMessage base;
  uint32_t queue_id;
};
#define CDB__TBL_QOS_QUEUE_SMART_BUFFER_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_queue_smart_buffer_key__descriptor) \
    , 0 }


struct  _Cdb__TblQosQueueSmartBuffer
{
  ProtobufCMessage base;
  Cdb__TblQosQueueSmartBufferKey *key;
  protobuf_c_boolean has_smart_buffer_enable;
  uint32_t smart_buffer_enable;
};
#define CDB__TBL_QOS_QUEUE_SMART_BUFFER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_queue_smart_buffer__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_QOS_GLOBAL
 */
struct  _Cdb__TblQosGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_qos_enable;
  uint32_t qos_enable;
  protobuf_c_boolean has_phb_enable;
  uint32_t phb_enable;
  protobuf_c_boolean has_port_policer_first_enable;
  uint32_t port_policer_first_enable;
  protobuf_c_boolean has_policer_stats_enable;
  uint32_t policer_stats_enable;
  protobuf_c_boolean has_cur_cpu_rate;
  uint32_t cur_cpu_rate;
  protobuf_c_boolean has_def_cpu_rate;
  uint32_t def_cpu_rate;
  size_t n_latency_range;
  uint32_t *latency_range;
  protobuf_c_boolean has_buffer_event_enable;
  uint32_t buffer_event_enable;
  protobuf_c_boolean has_buffer_event_high;
  uint32_t buffer_event_high;
  protobuf_c_boolean has_buffer_event_low;
  uint32_t buffer_event_low;
  protobuf_c_boolean has_check_qos_enable;
  uint32_t check_qos_enable;
  protobuf_c_boolean has_qos_ipg_enable;
  uint32_t qos_ipg_enable;
  protobuf_c_boolean has_in_port_policer_res_cnt;
  uint32_t in_port_policer_res_cnt;
  protobuf_c_boolean has_eg_port_policer_res_cnt;
  uint32_t eg_port_policer_res_cnt;
  protobuf_c_boolean has_in_flow_policer_res_cnt;
  uint32_t in_flow_policer_res_cnt;
  protobuf_c_boolean has_eg_flow_policer_res_cnt;
  uint32_t eg_flow_policer_res_cnt;
  protobuf_c_boolean has_queue_shape_enable;
  uint32_t queue_shape_enable;
};
#define CDB__TBL_QOS_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_qos_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_MIRROR
 */
struct  _Cdb__TblMirrorKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_MIRROR_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mirror_key__descriptor) \
    , 0 }


struct  _Cdb__TblMirror
{
  ProtobufCMessage base;
  Cdb__TblMirrorKey *key;
  protobuf_c_boolean has_source_igs_port_bmp;
  ProtobufCBinaryData source_igs_port_bmp;
  protobuf_c_boolean has_source_egs_port_bmp;
  ProtobufCBinaryData source_egs_port_bmp;
  protobuf_c_boolean has_source_igs_vlan_bmp;
  ProtobufCBinaryData source_igs_vlan_bmp;
  protobuf_c_boolean has_source_egs_vlan_bmp;
  ProtobufCBinaryData source_egs_vlan_bmp;
  protobuf_c_boolean has_cpu_source_dir;
  uint32_t cpu_source_dir;
  protobuf_c_boolean has_dest_type;
  uint32_t dest_type;
  protobuf_c_boolean has_dest_port_bmp;
  ProtobufCBinaryData dest_port_bmp;
  protobuf_c_boolean has_dest_port;
  uint32_t dest_port;
  protobuf_c_boolean has_dest_group;
  uint32_t dest_group;
  protobuf_c_boolean has_dest_vlan;
  uint32_t dest_vlan;
};
#define CDB__TBL_MIRROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mirror__descriptor) \
    , NULL, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0 }


/*
 * TBL_MIRROR_MAC_ESCAPE
 */
struct  _Cdb__TblMirrorMacEscape
{
  ProtobufCMessage base;
  Cdb__ComposeMirrorMacEscapeKeyT *key;
};
#define CDB__TBL_MIRROR_MAC_ESCAPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mirror_mac_escape__descriptor) \
    , NULL }


/*
 * TBL_TAP_GROUP_INGRESS
 */
struct  _Cdb__TblTapGroupIngress
{
  ProtobufCMessage base;
  Cdb__ComposeTapGroupIngressKeyT *key;
  protobuf_c_boolean has_ing_mark_vlan_en;
  uint32_t ing_mark_vlan_en;
  protobuf_c_boolean has_ing_mark_vlan_vid;
  uint32_t ing_mark_vlan_vid;
  protobuf_c_boolean has_ing_untag_en;
  uint32_t ing_untag_en;
  protobuf_c_boolean has_ing_trunction_en;
  uint32_t ing_trunction_en;
  protobuf_c_boolean has_ing_tap_group_member_oid;
  uint64_t ing_tap_group_member_oid;
  protobuf_c_boolean has_ing_edit_dest_mac_en;
  uint32_t ing_edit_dest_mac_en;
  Cdb__ComposeMacAddrT *ing_edit_dest_mac;
  protobuf_c_boolean has_ing_edit_src_mac_en;
  uint32_t ing_edit_src_mac_en;
  Cdb__ComposeMacAddrT *ing_edit_src_mac;
  protobuf_c_boolean has_ing_edit_ipda_en;
  uint32_t ing_edit_ipda_en;
  Cdb__ComposeAddrT *ing_edit_ipda;
  protobuf_c_boolean has_ing_edit_ipsa_en;
  uint32_t ing_edit_ipsa_en;
  Cdb__ComposeAddrT *ing_edit_ipsa;
  protobuf_c_boolean has_ing_edit_vlan_en;
  uint32_t ing_edit_vlan_en;
  protobuf_c_boolean has_ing_edit_vlan;
  uint32_t ing_edit_vlan;
};
#define CDB__TBL_TAP_GROUP_INGRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_tap_group_ingress__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, 0,0, NULL, 0,0, NULL, 0,0, 0,0 }


/*
 * TBL_TAP_GROUP_INGRESS_FLOW
 */
struct  _Cdb__TblTapGroupIngressFlow
{
  ProtobufCMessage base;
  Cdb__ComposeTapGroupIngressFlowKeyT *key;
  protobuf_c_boolean has_tap_grp_id;
  uint32_t tap_grp_id;
  protobuf_c_boolean has_if_idx;
  uint32_t if_idx;
  protobuf_c_boolean has_ing_untag_en;
  uint32_t ing_untag_en;
  protobuf_c_boolean has_ing_mark_vlan_en;
  uint32_t ing_mark_vlan_en;
  protobuf_c_boolean has_ing_mark_vlan_vid;
  uint32_t ing_mark_vlan_vid;
  protobuf_c_boolean has_ing_tap_group_member_oid;
  uint64_t ing_tap_group_member_oid;
};
#define CDB__TBL_TAP_GROUP_INGRESS_FLOW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_tap_group_ingress_flow__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_TAP_GROUP_EGRESS
 */
struct  _Cdb__TblTapGroupEgress
{
  ProtobufCMessage base;
  Cdb__ComposeTapGroupEgressKeyT *key;
  protobuf_c_boolean has_timestamp_en;
  uint32_t timestamp_en;
  protobuf_c_boolean has_tap_group_member_oid;
  uint64_t tap_group_member_oid;
};
#define CDB__TBL_TAP_GROUP_EGRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_tap_group_egress__descriptor) \
    , NULL, 0,0, 0,0 }


/*
 * TBL_TAP_GROUP
 */
struct  _Cdb__TblTapGroupKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_TAP_GROUP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_tap_group_key__descriptor) \
    , NULL }


struct  _Cdb__TblTapGroup
{
  ProtobufCMessage base;
  Cdb__TblTapGroupKey *key;
  protobuf_c_boolean has_id;
  uint32_t id;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  char *desc;
  protobuf_c_boolean has_truncation_use;
  uint32_t truncation_use;
  protobuf_c_boolean has_tap_group_oid;
  uint64_t tap_group_oid;
};
#define CDB__TBL_TAP_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_tap_group__descriptor) \
    , NULL, 0,0, 0,0, NULL, 0,0, 0,0 }


/*
 * TBL_TAP_FIVE_TUPLE
 */
struct  _Cdb__TblTapFiveTuple
{
  ProtobufCMessage base;
  Cdb__ComposeTapFiveTupleKeyT *key;
  protobuf_c_boolean has_acl_entry_id;
  uint32_t acl_entry_id;
  protobuf_c_boolean has_stats_id;
  uint32_t stats_id;
  protobuf_c_boolean has_packet_count;
  uint64_t packet_count;
  protobuf_c_boolean has_byte_count;
  uint64_t byte_count;
};
#define CDB__TBL_TAP_FIVE_TUPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_tap_five_tuple__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_TAP_DPI_GLOBAL
 */
struct  _Cdb__TblTapDpiGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_dpi_action;
  uint32_t dpi_action;
  char *redir_if;
};
#define CDB__TBL_TAP_DPI_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_tap_dpi_global__descriptor) \
    , 0,0, NULL }


/*
 * TBL_USER
 */
struct  _Cdb__TblUserKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_USER_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_user_key__descriptor) \
    , NULL }


struct  _Cdb__TblUser
{
  ProtobufCMessage base;
  Cdb__TblUserKey *key;
  protobuf_c_boolean has_uid;
  uint32_t uid;
  protobuf_c_boolean has_privilege;
  uint32_t privilege;
  char *enc_passwd;
  char *passwd;
  char *rsakey;
  protobuf_c_boolean has_service_type;
  uint32_t service_type;
};
#define CDB__TBL_USER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_user__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, NULL, 0,0 }


/*
 * TBL_LOGIN_RECORD
 */
struct  _Cdb__TblLoginRecordKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_LOGIN_RECORD_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_login_record_key__descriptor) \
    , NULL }


struct  _Cdb__TblLoginRecord
{
  ProtobufCMessage base;
  Cdb__TblLoginRecordKey *key;
  protobuf_c_boolean has_locked;
  uint32_t locked;
  protobuf_c_boolean has_first_fail_ts;
  uint32_t first_fail_ts;
  protobuf_c_boolean has_lock_ts;
  uint32_t lock_ts;
  protobuf_c_boolean has_fail_count;
  uint32_t fail_count;
  protobuf_c_boolean has_invalid_user;
  uint32_t invalid_user;
};
#define CDB__TBL_LOGIN_RECORD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_login_record__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_LOGIN_SECURITY_GLB
 */
struct  _Cdb__TblLoginSecurityGlb
{
  ProtobufCMessage base;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  protobuf_c_boolean has_max_fail_num;
  uint32_t max_fail_num;
  protobuf_c_boolean has_fail_period;
  uint32_t fail_period;
  protobuf_c_boolean has_lock_duration;
  uint32_t lock_duration;
  protobuf_c_boolean has_curr_invalid_user;
  uint32_t curr_invalid_user;
  protobuf_c_boolean has_max_invalid_user;
  uint32_t max_invalid_user;
};
#define CDB__TBL_LOGIN_SECURITY_GLB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_login_security_glb__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_VTY
 */
struct  _Cdb__TblVtyKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_VTY_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vty_key__descriptor) \
    , 0 }


struct  _Cdb__TblVty
{
  ProtobufCMessage base;
  Cdb__TblVtyKey *key;
  protobuf_c_boolean has_timeout_min;
  uint32_t timeout_min;
  protobuf_c_boolean has_timeout_sec;
  uint32_t timeout_sec;
  char *protocol;
  protobuf_c_boolean has_login;
  uint32_t login;
  protobuf_c_boolean has_privilege;
  uint32_t privilege;
  char *enc_passwd;
  char *passwd;
  char *auth_method;
  protobuf_c_boolean has_inuse;
  uint32_t inuse;
  char *author_method;
  char *account_method;
  char *accountcmd_method;
  char *ipv4_acl;
  char *ipv6_acl;
  protobuf_c_boolean has_aaa_privilege;
  uint32_t aaa_privilege;
  protobuf_c_boolean has_config_privilege;
  uint32_t config_privilege;
  protobuf_c_boolean has_aaa_start_time;
  uint32_t aaa_start_time;
  protobuf_c_boolean has_cmd_buf;
  ProtobufCBinaryData cmd_buf;
  protobuf_c_boolean has_old_cmd_buf;
  ProtobufCBinaryData old_cmd_buf;
  char *acct_stop_ipaddr;
  protobuf_c_boolean has_acct_stop_pid;
  uint32_t acct_stop_pid;
  protobuf_c_boolean has_acct_stop_privilege;
  uint32_t acct_stop_privilege;
  protobuf_c_boolean has_is_not_ssh_key;
  uint32_t is_not_ssh_key;
  protobuf_c_boolean has_is_ssh_login;
  uint32_t is_ssh_login;
};
#define CDB__TBL_VTY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vty__descriptor) \
    , NULL, 0,0, 0,0, NULL, 0,0, 0,0, NULL, NULL, NULL, 0,0, NULL, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,{0,NULL}, NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_CONSOLE
 */
struct  _Cdb__TblConsole
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timeout_min;
  uint32_t timeout_min;
  protobuf_c_boolean has_timeout_sec;
  uint32_t timeout_sec;
  protobuf_c_boolean has_login;
  uint32_t login;
  protobuf_c_boolean has_privilege;
  uint32_t privilege;
  char *enc_passwd;
  char *passwd;
  char *auth_method;
  protobuf_c_boolean has_stopbits;
  uint32_t stopbits;
  protobuf_c_boolean has_parity;
  uint32_t parity;
  protobuf_c_boolean has_databits;
  uint32_t databits;
  protobuf_c_boolean has_baudrate;
  uint32_t baudrate;
  protobuf_c_boolean has_inuse;
  uint32_t inuse;
};
#define CDB__TBL_CONSOLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_console__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_AUTHEN
 */
struct  _Cdb__TblAuthenKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_AUTHEN_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_authen_key__descriptor) \
    , NULL }


struct  _Cdb__TblAuthen
{
  ProtobufCMessage base;
  Cdb__TblAuthenKey *key;
  char *methods;
};
#define CDB__TBL_AUTHEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_authen__descriptor) \
    , NULL, NULL }


/*
 * TBL_LOGIN
 */
struct  _Cdb__TblLoginKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_LOGIN_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_login_key__descriptor) \
    , NULL }


struct  _Cdb__TblLogin
{
  ProtobufCMessage base;
  Cdb__TblLoginKey *key;
  Cdb__ComposeUserT *user;
  char *vty;
  protobuf_c_boolean has_privilege;
  uint32_t privilege;
  char *ipaddr;
  char *dest_ipaddr;
  protobuf_c_boolean has_remote_port;
  uint32_t remote_port;
  protobuf_c_boolean has_dest_port;
  uint32_t dest_port;
  char *protocol;
  protobuf_c_boolean has_expire_time;
  uint32_t expire_time;
  protobuf_c_boolean has_pid;
  uint32_t pid;
};
#define CDB__TBL_LOGIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_login__descriptor) \
    , NULL, NULL, NULL, 0,0, NULL, NULL, 0,0, 0,0, NULL, 0,0, 0,0 }


/*
 * TBL_RSA
 */
struct  _Cdb__TblRsaKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_RSA_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rsa_key__descriptor) \
    , NULL }


struct  _Cdb__TblRsa
{
  ProtobufCMessage base;
  Cdb__TblRsaKey *key;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_refcnt;
  uint32_t refcnt;
  Cdb__ComposeRsaKeystrT *pem;
  char *enc_passwd;
  char *passwd;
};
#define CDB__TBL_RSA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rsa__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, NULL }


/*
 * TBL_OPENFLOW
 */
struct  _Cdb__TblOpenflow
{
  ProtobufCMessage base;
  protobuf_c_boolean has_group_hash_key;
  uint32_t group_hash_key;
  protobuf_c_boolean has_bond_hash_key;
  uint32_t bond_hash_key;
  protobuf_c_boolean has_bond_hash_use;
  uint32_t bond_hash_use;
  protobuf_c_boolean has_lacp_local_proc;
  uint32_t lacp_local_proc;
  Cdb__ComposeAddrIpv4T *local_vtep_ip;
  char *decap_mode;
  protobuf_c_boolean has_flow_drop_pkt_to_ingress_port;
  uint32_t flow_drop_pkt_to_ingress_port;
  protobuf_c_boolean has_group_drop_pkt_to_ingress_port;
  uint32_t group_drop_pkt_to_ingress_port;
  protobuf_c_boolean has_udf_parser;
  uint32_t udf_parser;
  protobuf_c_boolean has_meter_ipg;
  uint32_t meter_ipg;
  protobuf_c_boolean has_inband_en;
  uint32_t inband_en;
  protobuf_c_boolean has_ptp_e2e_en;
  uint32_t ptp_e2e_en;
  protobuf_c_boolean has_inband_stag;
  uint32_t inband_stag;
  Cdb__ComposePrefixIpv4T *inband_addr;
  Cdb__ComposeAddrIpv4T *inband_gw;
  protobuf_c_boolean has_mpls_parser;
  uint32_t mpls_parser;
  protobuf_c_boolean has_stpid;
  int32_t stpid;
  protobuf_c_boolean has_ctpid;
  int32_t ctpid;
  protobuf_c_boolean has_inband_downlink_port_bmp;
  ProtobufCBinaryData inband_downlink_port_bmp;
  char *inband_uplink_port_name;
  protobuf_c_boolean has_flow_hash_key;
  uint32_t flow_hash_key;
  protobuf_c_boolean has_vxlan_hash_merge_en;
  uint32_t vxlan_hash_merge_en;
  protobuf_c_boolean has_nvgre_hash_merge_en;
  uint32_t nvgre_hash_merge_en;
  protobuf_c_boolean has_efd_tcp_only_enable;
  uint32_t efd_tcp_only_enable;
  protobuf_c_boolean has_efd_granularity;
  uint32_t efd_granularity;
  protobuf_c_boolean has_efd_detect_speed;
  uint32_t efd_detect_speed;
  protobuf_c_boolean has_efd_detect_time_interval;
  uint32_t efd_detect_time_interval;
  protobuf_c_boolean has_efd_aging_timer;
  uint32_t efd_aging_timer;
  protobuf_c_boolean has_efd_flow_traffic_class;
  uint32_t efd_flow_traffic_class;
  protobuf_c_boolean has_efd_flow_color;
  uint32_t efd_flow_color;
  protobuf_c_boolean has_efd_ipg_enable;
  uint32_t efd_ipg_enable;
  char *dpid;
  protobuf_c_boolean has_dpid_is_set;
  uint32_t dpid_is_set;
  char *private_key;
  char *certificate;
  char *ca_cert;
  protobuf_c_boolean has_vxlan_srcport;
  uint32_t vxlan_srcport;
  protobuf_c_boolean has_vxlan_srcport_is_set;
  uint32_t vxlan_srcport_is_set;
  protobuf_c_boolean has_vxlan_destport;
  uint32_t vxlan_destport;
  protobuf_c_boolean has_vxlan_destport_is_set;
  uint32_t vxlan_destport_is_set;
  protobuf_c_boolean has_tp_oam_oam_interval;
  uint32_t tp_oam_oam_interval;
  protobuf_c_boolean has_tp_oam_oam_interval_is_set;
  uint32_t tp_oam_oam_interval_is_set;
  protobuf_c_boolean has_tp_oam_oam_cycle_is_disable;
  uint32_t tp_oam_oam_cycle_is_disable;
  protobuf_c_boolean has_tp_oam_aps_interval;
  uint32_t tp_oam_aps_interval;
  protobuf_c_boolean has_tp_oam_aps_interval_is_set;
  uint32_t tp_oam_aps_interval_is_set;
  protobuf_c_boolean has_tp_oam_aps_cycle_is_disable;
  uint32_t tp_oam_aps_cycle_is_disable;
  protobuf_c_boolean has_pw_not_standard_mode;
  uint32_t pw_not_standard_mode;
  protobuf_c_boolean has_check_port_bind_oam;
  uint32_t check_port_bind_oam;
  protobuf_c_boolean has_oam_packet_in_cycle_cnt;
  uint32_t oam_packet_in_cycle_cnt;
  protobuf_c_boolean has_oam_packet_in_event_ccm_cnt;
  uint32_t oam_packet_in_event_ccm_cnt;
  protobuf_c_boolean has_oam_packet_in_event_lm_cnt;
  uint32_t oam_packet_in_event_lm_cnt;
  protobuf_c_boolean has_oam_packet_in_event_dm_cnt;
  uint32_t oam_packet_in_event_dm_cnt;
  protobuf_c_boolean has_aps_packet_in_cycle_cnt;
  uint32_t aps_packet_in_cycle_cnt;
  protobuf_c_boolean has_aps_packet_in_event_path_change_cnt;
  uint32_t aps_packet_in_event_path_change_cnt;
  protobuf_c_boolean has_oam_packet_in_cycle_packet_cnt;
  uint32_t oam_packet_in_cycle_packet_cnt;
  protobuf_c_boolean has_oam_packet_in_event_packet_ccm_cnt;
  uint32_t oam_packet_in_event_packet_ccm_cnt;
  protobuf_c_boolean has_oam_packet_in_event_packet_lm_cnt;
  uint32_t oam_packet_in_event_packet_lm_cnt;
  protobuf_c_boolean has_oam_packet_in_event_packet_dm_cnt;
  uint32_t oam_packet_in_event_packet_dm_cnt;
  protobuf_c_boolean has_aps_packet_in_cycle_packet_cnt;
  uint32_t aps_packet_in_cycle_packet_cnt;
  protobuf_c_boolean has_aps_packet_in_event_path_change_packet_cnt;
  uint32_t aps_packet_in_event_path_change_packet_cnt;
  protobuf_c_boolean has_openflow_mac_learning_enable;
  uint32_t openflow_mac_learning_enable;
  protobuf_c_boolean has_controller_affect_flow_disable;
  uint32_t controller_affect_flow_disable;
  protobuf_c_boolean has_async_msgid_en;
  uint32_t async_msgid_en;
  protobuf_c_boolean has_fdb_flow_en;
  uint32_t fdb_flow_en;
  protobuf_c_boolean has_fdb_flow_valid;
  uint32_t fdb_flow_valid;
  protobuf_c_boolean has_ffgroup_switchback_en;
  uint32_t ffgroup_switchback_en;
};
#define CDB__TBL_OPENFLOW__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_openflow__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,{0,NULL}, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_CPU_TRAFFIC
 */
struct  _Cdb__TblCpuTrafficKey
{
  ProtobufCMessage base;
  uint32_t reason_id;
};
#define CDB__TBL_CPU_TRAFFIC_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cpu_traffic_key__descriptor) \
    , 0 }


struct  _Cdb__TblCpuTraffic
{
  ProtobufCMessage base;
  Cdb__TblCpuTrafficKey *key;
  protobuf_c_boolean has_rate;
  uint64_t rate;
  protobuf_c_boolean has_class_id;
  uint32_t class_id;
};
#define CDB__TBL_CPU_TRAFFIC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cpu_traffic__descriptor) \
    , NULL, 0,0, 0,0 }


/*
 * TBL_CPU_TRAFFIC_GROUP
 */
struct  _Cdb__TblCpuTrafficGroupKey
{
  ProtobufCMessage base;
  uint32_t class_id;
};
#define CDB__TBL_CPU_TRAFFIC_GROUP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cpu_traffic_group_key__descriptor) \
    , 0 }


struct  _Cdb__TblCpuTrafficGroup
{
  ProtobufCMessage base;
  Cdb__TblCpuTrafficGroupKey *key;
  protobuf_c_boolean has_rate;
  uint64_t rate;
};
#define CDB__TBL_CPU_TRAFFIC_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cpu_traffic_group__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_CPU_UTILIZATION
 */
struct  _Cdb__TblCpuUtilizationKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_CPU_UTILIZATION_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cpu_utilization_key__descriptor) \
    , NULL }


struct  _Cdb__TblCpuUtilization
{
  ProtobufCMessage base;
  Cdb__TblCpuUtilizationKey *key;
  protobuf_c_boolean has_cpu_usage;
  double cpu_usage;
};
#define CDB__TBL_CPU_UTILIZATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cpu_utilization__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_CPU_LIMIT
 */
struct  _Cdb__TblCpuLimitKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_CPU_LIMIT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cpu_limit_key__descriptor) \
    , NULL }


struct  _Cdb__TblCpuLimit
{
  ProtobufCMessage base;
  Cdb__TblCpuLimitKey *key;
  protobuf_c_boolean has_percent;
  uint32_t percent;
};
#define CDB__TBL_CPU_LIMIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cpu_limit__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_DHCRELAY
 */
struct  _Cdb__TblDhcrelay
{
  ProtobufCMessage base;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  protobuf_c_boolean has_drop_agent_mismatch;
  uint32_t drop_agent_mismatch;
  protobuf_c_boolean has_add_agent_options;
  uint32_t add_agent_options;
  protobuf_c_boolean has_agent_proc_option;
  uint32_t agent_proc_option;
  protobuf_c_boolean has_trust_all;
  uint32_t trust_all;
};
#define CDB__TBL_DHCRELAY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dhcrelay__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_DHCSRVGRP
 */
struct  _Cdb__TblDhcsrvgrpKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_DHCSRVGRP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dhcsrvgrp_key__descriptor) \
    , 0 }


struct  _Cdb__TblDhcsrvgrp
{
  ProtobufCMessage base;
  Cdb__TblDhcsrvgrpKey *key;
  protobuf_c_boolean has_cnt;
  uint32_t cnt;
  char *addrs;
};
#define CDB__TBL_DHCSRVGRP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dhcsrvgrp__descriptor) \
    , NULL, 0,0, NULL }


/*
 * TBL_DHCP_DEBUG
 */
struct  _Cdb__TblDhcpDebug
{
  ProtobufCMessage base;
  protobuf_c_boolean has_relay_error;
  uint32_t relay_error;
  protobuf_c_boolean has_relay_events;
  uint32_t relay_events;
  protobuf_c_boolean has_relay_packet;
  uint32_t relay_packet;
  protobuf_c_boolean has_relay_dump;
  uint32_t relay_dump;
  protobuf_c_boolean has_snooping_error;
  uint32_t snooping_error;
  protobuf_c_boolean has_snooping_event;
  uint32_t snooping_event;
  protobuf_c_boolean has_snooping_packet;
  uint32_t snooping_packet;
  protobuf_c_boolean has_snooping_dump;
  uint32_t snooping_dump;
  protobuf_c_boolean has_snoopingv6_error;
  uint32_t snoopingv6_error;
  protobuf_c_boolean has_snoopingv6_events;
  uint32_t snoopingv6_events;
  protobuf_c_boolean has_snoopingv6_packet;
  uint32_t snoopingv6_packet;
  protobuf_c_boolean has_snoopingv6_dump;
  uint32_t snoopingv6_dump;
  protobuf_c_boolean has_client_error;
  uint32_t client_error;
  protobuf_c_boolean has_client_events;
  uint32_t client_events;
  protobuf_c_boolean has_client_packet;
  uint32_t client_packet;
  protobuf_c_boolean has_client_dump;
  uint32_t client_dump;
  protobuf_c_boolean has_clientv6_error;
  uint32_t clientv6_error;
  protobuf_c_boolean has_clientv6_events;
  uint32_t clientv6_events;
  protobuf_c_boolean has_clientv6_packet;
  uint32_t clientv6_packet;
  protobuf_c_boolean has_clientv6_dump;
  uint32_t clientv6_dump;
};
#define CDB__TBL_DHCP_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dhcp_debug__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_DHCLIENT
 */
struct  _Cdb__TblDhclient
{
  ProtobufCMessage base;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  protobuf_c_boolean has_distance;
  uint32_t distance;
  protobuf_c_boolean has_broadcast;
  uint32_t broadcast;
};
#define CDB__TBL_DHCLIENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dhclient__descriptor) \
    , 0,0, 0,0, 0,0 }


/*
 * TBL_DHCSNOOPING
 */
struct  _Cdb__TblDhcsnooping
{
  ProtobufCMessage base;
  protobuf_c_boolean has_verify_mac_address;
  uint32_t verify_mac_address;
  protobuf_c_boolean has_add_agent_options;
  uint32_t add_agent_options;
  protobuf_c_boolean has_allow_untrusted;
  uint32_t allow_untrusted;
  protobuf_c_boolean has_hostname_as_remote_id;
  uint32_t hostname_as_remote_id;
  char *remote_id_string;
  protobuf_c_boolean has_database_save_interval;
  uint32_t database_save_interval;
  protobuf_c_boolean has_vlans;
  ProtobufCBinaryData vlans;
  protobuf_c_boolean has_snooping_acl_applied;
  ProtobufCBinaryData snooping_acl_applied;
};
#define CDB__TBL_DHCSNOOPING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dhcsnooping__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,{0,NULL}, 0,{0,NULL} }


/*
 * TBL_DHCBINDING
 */
struct  _Cdb__TblDhcbinding
{
  ProtobufCMessage base;
  Cdb__ComposeBindingKeyT *key;
  protobuf_c_boolean has_vid;
  uint32_t vid;
  char *ifname;
  char *ifname_new;
  Cdb__ComposeMacAddrT *client_mac;
  Cdb__ComposeAddrT *client_ip;
  protobuf_c_boolean has_cipsour;
  uint32_t cipsour;
  protobuf_c_boolean has_lease;
  uint32_t lease;
  protobuf_c_boolean has_lease_new;
  uint32_t lease_new;
  protobuf_c_boolean has_transid;
  uint32_t transid;
  protobuf_c_boolean has_ipsg_tbl_exsit;
  uint32_t ipsg_tbl_exsit;
  protobuf_c_boolean has_state;
  uint32_t state;
  protobuf_c_boolean has_type;
  uint32_t type;
};
#define CDB__TBL_DHCBINDING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dhcbinding__descriptor) \
    , NULL, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_IPTABLES_PREVENT
 */
struct  _Cdb__TblIptablesPrevent
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ipt_cfg_icmp;
  uint32_t ipt_cfg_icmp;
  protobuf_c_boolean has_ipt_cfg_smurf;
  uint32_t ipt_cfg_smurf;
  protobuf_c_boolean has_ipt_cfg_fraggle;
  uint32_t ipt_cfg_fraggle;
  protobuf_c_boolean has_ipt_cfg_udp;
  uint32_t ipt_cfg_udp;
  protobuf_c_boolean has_ipt_cfg_tcp;
  uint32_t ipt_cfg_tcp;
  protobuf_c_boolean has_ipt_cfg_small_pkt;
  uint32_t ipt_cfg_small_pkt;
  protobuf_c_boolean has_ipt_cfg_maceq;
  uint32_t ipt_cfg_maceq;
  protobuf_c_boolean has_ipt_cfg_ipeq;
  uint32_t ipt_cfg_ipeq;
  protobuf_c_boolean has_icmp_rate_limit;
  uint32_t icmp_rate_limit;
  protobuf_c_boolean has_tcp_rate_limit;
  uint32_t tcp_rate_limit;
  protobuf_c_boolean has_udp_rate_limit;
  uint32_t udp_rate_limit;
  protobuf_c_boolean has_small_pkt_length;
  uint32_t small_pkt_length;
  protobuf_c_boolean has_pkt_statistic_update;
  uint32_t pkt_statistic_update;
  protobuf_c_boolean has_small_pkt_static_base;
  uint32_t small_pkt_static_base;
  protobuf_c_boolean has_small_pkt_mgmt_static_base;
  uint32_t small_pkt_mgmt_static_base;
  protobuf_c_boolean has_icmp_count;
  uint32_t icmp_count;
  protobuf_c_boolean has_smurf_count;
  uint32_t smurf_count;
  protobuf_c_boolean has_fraggle_count;
  uint32_t fraggle_count;
  protobuf_c_boolean has_udp_count;
  uint32_t udp_count;
  protobuf_c_boolean has_tcp_count;
  uint32_t tcp_count;
  protobuf_c_boolean has_small_pkt_count;
  uint32_t small_pkt_count;
  protobuf_c_boolean has_icmp_mgmt_count;
  uint32_t icmp_mgmt_count;
  protobuf_c_boolean has_smurf_mgmt_count;
  uint32_t smurf_mgmt_count;
  protobuf_c_boolean has_fraggle_mgmt_count;
  uint32_t fraggle_mgmt_count;
  protobuf_c_boolean has_udp_mgmt_count;
  uint32_t udp_mgmt_count;
  protobuf_c_boolean has_tcp_mgmt_count;
  uint32_t tcp_mgmt_count;
  protobuf_c_boolean has_small_pkt_mgmt_count;
  uint32_t small_pkt_mgmt_count;
};
#define CDB__TBL_IPTABLES_PREVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_iptables_prevent__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_ERRDISABLE
 */
struct  _Cdb__TblErrdisableKey
{
  ProtobufCMessage base;
  uint32_t reason;
};
#define CDB__TBL_ERRDISABLE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_errdisable_key__descriptor) \
    , 0 }


struct  _Cdb__TblErrdisable
{
  ProtobufCMessage base;
  Cdb__TblErrdisableKey *key;
  protobuf_c_boolean has_errdisable_en;
  uint32_t errdisable_en;
  protobuf_c_boolean has_recovery_en;
  uint32_t recovery_en;
};
#define CDB__TBL_ERRDISABLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_errdisable__descriptor) \
    , NULL, 0,0, 0,0 }


/*
 * TBL_NS_PORT_FORWARDING
 */
struct  _Cdb__TblNsPortForwarding
{
  ProtobufCMessage base;
  Cdb__ComposeNsPortForwardingKeyT *key;
  Cdb__ComposeAddrIpv4T *ip;
};
#define CDB__TBL_NS_PORT_FORWARDING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ns_port_forwarding__descriptor) \
    , NULL, NULL }


/*
 * TBL_LOG_GLOBAL
 */
struct  _Cdb__TblLogGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_log_to_cdb;
  ProtobufCBinaryData log_to_cdb;
};
#define CDB__TBL_LOG_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_log_global__descriptor) \
    , 0,{0,NULL} }


/*
 * TBL_LOG
 */
struct  _Cdb__TblLogKey
{
  ProtobufCMessage base;
  uint32_t sequence_id;
};
#define CDB__TBL_LOG_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_log_key__descriptor) \
    , 0 }


struct  _Cdb__TblLog
{
  ProtobufCMessage base;
  Cdb__TblLogKey *key;
  protobuf_c_boolean has_log_id;
  uint32_t log_id;
  protobuf_c_boolean has_severity;
  uint32_t severity;
  Cdb__ComposeTimestampT *timestamp;
  char *data;
};
#define CDB__TBL_LOG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_log__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL }


/*
 * TBL_SYS_LOAD
 */
struct  _Cdb__TblSysLoad
{
  ProtobufCMessage base;
  protobuf_c_boolean has_sys_load_en;
  uint32_t sys_load_en;
  protobuf_c_boolean has_cli_back_pressure_en;
  uint32_t cli_back_pressure_en;
  protobuf_c_boolean has_cdb_queue_notice_threshold;
  uint32_t cdb_queue_notice_threshold;
  protobuf_c_boolean has_cdb_queue_warning_threshold;
  uint32_t cdb_queue_warning_threshold;
  protobuf_c_boolean has_cdb_queue_depth_switch;
  uint32_t cdb_queue_depth_switch;
  protobuf_c_boolean has_cdb_queue_depth_routed;
  uint32_t cdb_queue_depth_routed;
  protobuf_c_boolean has_cdb_queue_depth_cds;
  uint32_t cdb_queue_depth_cds;
  protobuf_c_boolean has_cdb_queue_depth_fea;
  uint32_t cdb_queue_depth_fea;
};
#define CDB__TBL_SYS_LOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_sys_load__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_CEM
 */
struct  _Cdb__TblCemKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_CEM_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cem_key__descriptor) \
    , NULL }


struct  _Cdb__TblCem
{
  ProtobufCMessage base;
  Cdb__TblCemKey *key;
  char *event;
  protobuf_c_boolean has_threshold;
  uint32_t threshold;
  protobuf_c_boolean has_snmptrap;
  uint32_t snmptrap;
  char *loadpath;
  Cdb__ComposeMailT *mail;
};
#define CDB__TBL_CEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cem__descriptor) \
    , NULL, NULL, 0,0, 0,0, NULL, NULL }


/*
 * TBL_CLOCK
 */
struct  _Cdb__TblClock
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timezone_positive;
  uint32_t timezone_positive;
  protobuf_c_boolean has_timezone_hour;
  uint32_t timezone_hour;
  protobuf_c_boolean has_timezone_minute;
  uint32_t timezone_minute;
  protobuf_c_boolean has_timezone_second;
  uint32_t timezone_second;
  char *timezone_name;
  protobuf_c_boolean has_cp_timezone_positive;
  uint32_t cp_timezone_positive;
  protobuf_c_boolean has_cp_timezone_hour;
  uint32_t cp_timezone_hour;
  protobuf_c_boolean has_cp_timezone_minute;
  uint32_t cp_timezone_minute;
  protobuf_c_boolean has_cp_timezone_second;
  uint32_t cp_timezone_second;
  char *cp_timezone_name;
};
#define CDB__TBL_CLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_clock__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, NULL }


/*
 * TBL_TAG_SUMMER_CLOCK
 */
struct  _Cdb__TblTagSummerClock
{
  ProtobufCMessage base;
  Cdb__ComposeSummerTimeT *tmstart;
  Cdb__ComposeSummerTimeT *tmend;
  protobuf_c_boolean has_idstoffset;
  int32_t idstoffset;
  protobuf_c_boolean has_is_recurring;
  int32_t is_recurring;
  protobuf_c_boolean has_nstartfebday;
  int32_t nstartfebday;
  protobuf_c_boolean has_nendfebday;
  int32_t nendfebday;
  char *strzonename;
  protobuf_c_boolean has_is_wday_tm;
  int32_t is_wday_tm;
  Cdb__ComposeWhichSummerTimeT *wday_tm_start;
  Cdb__ComposeWhichSummerTimeT *wday_tm_end;
};
#define CDB__TBL_TAG_SUMMER_CLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_tag_summer_clock__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, NULL, NULL }


/*
 * TBL_PORT_STATS
 */
struct  _Cdb__TblPortStatsKey
{
  ProtobufCMessage base;
  uint32_t ifindex;
};
#define CDB__TBL_PORT_STATS_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_port_stats_key__descriptor) \
    , 0 }


struct  _Cdb__TblPortStats
{
  ProtobufCMessage base;
  Cdb__TblPortStatsKey *key;
  protobuf_c_boolean has_port_id;
  uint32_t port_id;
  protobuf_c_boolean has_octets_rcv;
  uint64_t octets_rcv;
  protobuf_c_boolean has_pkts_rcv;
  uint64_t pkts_rcv;
  protobuf_c_boolean has_uc_pkts_rcv;
  uint64_t uc_pkts_rcv;
  protobuf_c_boolean has_brdc_pkts_rcv;
  uint64_t brdc_pkts_rcv;
  protobuf_c_boolean has_mc_pkts_rcv;
  uint64_t mc_pkts_rcv;
  protobuf_c_boolean has_oam_pkts_rcv;
  uint64_t oam_pkts_rcv;
  protobuf_c_boolean has_undersize_pkts;
  uint64_t undersize_pkts;
  protobuf_c_boolean has_oversize_pkts;
  uint64_t oversize_pkts;
  protobuf_c_boolean has_jabber_pkts;
  uint64_t jabber_pkts;
  protobuf_c_boolean has_mac_rcv_error;
  uint64_t mac_rcv_error;
  protobuf_c_boolean has_bad_crc;
  uint64_t bad_crc;
  protobuf_c_boolean has_frame_error;
  uint64_t frame_error;
  protobuf_c_boolean has_drop_events;
  uint64_t drop_events;
  protobuf_c_boolean has_pause_rcv;
  uint64_t pause_rcv;
  protobuf_c_boolean has_octets_send;
  uint64_t octets_send;
  protobuf_c_boolean has_pkts_send;
  uint64_t pkts_send;
  protobuf_c_boolean has_uc_pkts_send;
  uint64_t uc_pkts_send;
  protobuf_c_boolean has_brdc_pkts_send;
  uint64_t brdc_pkts_send;
  protobuf_c_boolean has_mc_pkts_send;
  uint64_t mc_pkts_send;
  protobuf_c_boolean has_oam_pkts_send;
  uint64_t oam_pkts_send;
  protobuf_c_boolean has_underruns;
  uint64_t underruns;
  protobuf_c_boolean has_mac_transmit_err;
  uint64_t mac_transmit_err;
  protobuf_c_boolean has_pause_send;
  uint64_t pause_send;
  protobuf_c_boolean has_fcs_pkts_rcv;
  uint64_t fcs_pkts_rcv;
  protobuf_c_boolean has_fcs_octets_rcv;
  uint64_t fcs_octets_rcv;
  protobuf_c_boolean has_fcs_pkts_send;
  uint64_t fcs_pkts_send;
  protobuf_c_boolean has_fcs_octets_send;
  uint64_t fcs_octets_send;
  protobuf_c_boolean has_fragments_pkts;
  uint64_t fragments_pkts;
  protobuf_c_boolean has_bad_pkts_rcv;
  uint64_t bad_pkts_rcv;
  protobuf_c_boolean has_bad_octets_rcv;
  uint64_t bad_octets_rcv;
  protobuf_c_boolean has_pkts_64_rcv;
  uint64_t pkts_64_rcv;
  protobuf_c_boolean has_pkts_65_to_127_rcv;
  uint64_t pkts_65_to_127_rcv;
  protobuf_c_boolean has_pkts_128_to_255_rcv;
  uint64_t pkts_128_to_255_rcv;
  protobuf_c_boolean has_pkts_256_to_511_rcv;
  uint64_t pkts_256_to_511_rcv;
  protobuf_c_boolean has_pkts_512_to_1023_rcv;
  uint64_t pkts_512_to_1023_rcv;
  protobuf_c_boolean has_pkts_1024_to_1518_rcv;
  uint64_t pkts_1024_to_1518_rcv;
  protobuf_c_boolean has_last_clear_ts;
  uint32_t last_clear_ts;
};
#define CDB__TBL_PORT_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_port_stats__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_VLAN_STATS
 */
struct  _Cdb__TblVlanStatsKey
{
  ProtobufCMessage base;
  uint32_t vid;
};
#define CDB__TBL_VLAN_STATS_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vlan_stats_key__descriptor) \
    , 0 }


struct  _Cdb__TblVlanStats
{
  ProtobufCMessage base;
  Cdb__TblVlanStatsKey *key;
  protobuf_c_boolean has_pktcntl2in;
  uint64_t pktcntl2in;
  protobuf_c_boolean has_pktcntl2out;
  uint64_t pktcntl2out;
  protobuf_c_boolean has_pktcntl3in;
  uint64_t pktcntl3in;
  protobuf_c_boolean has_pktcntl3out;
  uint64_t pktcntl3out;
  protobuf_c_boolean has_pktcntacl;
  uint64_t pktcntacl;
  protobuf_c_boolean has_bytecntl2in;
  uint64_t bytecntl2in;
  protobuf_c_boolean has_bytecntl2out;
  uint64_t bytecntl2out;
  protobuf_c_boolean has_bytecntl3in;
  uint64_t bytecntl3in;
  protobuf_c_boolean has_bytecntl3out;
  uint64_t bytecntl3out;
  protobuf_c_boolean has_bytecntacl;
  uint64_t bytecntacl;
};
#define CDB__TBL_VLAN_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vlan_stats__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_PORT_STATS_RATE
 */
struct  _Cdb__TblPortStatsRateKey
{
  ProtobufCMessage base;
  uint32_t ifindex;
};
#define CDB__TBL_PORT_STATS_RATE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_port_stats_rate_key__descriptor) \
    , 0 }


struct  _Cdb__TblPortStatsRate
{
  ProtobufCMessage base;
  Cdb__TblPortStatsRateKey *key;
  protobuf_c_boolean has_port_id;
  uint32_t port_id;
  protobuf_c_boolean has_octets_rcv_rate;
  uint64_t octets_rcv_rate;
  protobuf_c_boolean has_pkts_rcv_rate;
  uint64_t pkts_rcv_rate;
  protobuf_c_boolean has_octets_send_rate;
  uint64_t octets_send_rate;
  protobuf_c_boolean has_pkts_send_rate;
  uint64_t pkts_send_rate;
  protobuf_c_boolean has_load_interval;
  uint32_t load_interval;
  protobuf_c_boolean has_input_rate;
  uint32_t input_rate;
  protobuf_c_boolean has_input_rate_state;
  uint32_t input_rate_state;
  protobuf_c_boolean has_input_rate_threshold;
  uint32_t input_rate_threshold;
  protobuf_c_boolean has_input_rate_resume;
  uint32_t input_rate_resume;
  protobuf_c_boolean has_output_rate;
  uint32_t output_rate;
  protobuf_c_boolean has_output_rate_state;
  uint32_t output_rate_state;
  protobuf_c_boolean has_output_rate_threshold;
  uint32_t output_rate_threshold;
  protobuf_c_boolean has_output_rate_resume;
  uint32_t output_rate_resume;
  protobuf_c_boolean has_output_discard_threshold;
  uint64_t output_discard_threshold;
  protobuf_c_boolean has_output_discard_interval;
  uint32_t output_discard_interval;
  protobuf_c_boolean has_output_discard_packets;
  uint64_t output_discard_packets;
  protobuf_c_boolean has_output_discard_total_packets;
  uint64_t output_discard_total_packets;
  protobuf_c_boolean has_output_discard_state;
  uint32_t output_discard_state;
  protobuf_c_boolean has_output_discard_running_interval;
  uint32_t output_discard_running_interval;
};
#define CDB__TBL_PORT_STATS_RATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_port_stats_rate__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_ACLQOS_IF
 */
struct  _Cdb__TblAclqosIfKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_ACLQOS_IF_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_aclqos_if_key__descriptor) \
    , NULL }


struct  _Cdb__TblAclqosIf
{
  ProtobufCMessage base;
  Cdb__TblAclqosIfKey *key;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_port_type;
  uint32_t port_type;
  protobuf_c_boolean has_flags_domain;
  uint32_t flags_domain;
  protobuf_c_boolean has_flags_port_shape_profile;
  uint32_t flags_port_shape_profile;
  protobuf_c_boolean has_flags_input_policer;
  uint32_t flags_input_policer;
  protobuf_c_boolean has_flags_output_policer;
  uint32_t flags_output_policer;
  protobuf_c_boolean has_flags_queue_shape_profile;
  uint32_t flags_queue_shape_profile;
  protobuf_c_boolean has_flags_queue_drop_profile;
  uint32_t flags_queue_drop_profile;
  protobuf_c_boolean has_flags_queue_drop_mode;
  uint32_t flags_queue_drop_mode;
  protobuf_c_boolean has_flags_replace_dscp;
  uint32_t flags_replace_dscp;
  protobuf_c_boolean has_flags_replace_cos;
  uint32_t flags_replace_cos;
  protobuf_c_boolean has_flags_trust;
  uint32_t flags_trust;
  protobuf_c_boolean has_flags_port_tc;
  uint32_t flags_port_tc;
  protobuf_c_boolean has_domain;
  uint32_t domain;
  protobuf_c_boolean has_cos_domain;
  uint32_t cos_domain;
  protobuf_c_boolean has_dscp_domain;
  uint32_t dscp_domain;
  char *port_shape_profile;
  char *input_policy_map;
  char *output_policy_map;
  char *input_policer;
  char *output_policer;
  size_t n_queue_shape_profile;
  char **queue_shape_profile;
  size_t n_queue_drop_profile;
  char **queue_drop_profile;
  size_t n_queue_drop_mode;
  uint32_t *queue_drop_mode;
  protobuf_c_boolean has_replace_dscp;
  uint32_t replace_dscp;
  protobuf_c_boolean has_replace_cos;
  uint32_t replace_cos;
  protobuf_c_boolean has_trust;
  uint32_t trust;
  protobuf_c_boolean has_port_tc;
  uint32_t port_tc;
};
#define CDB__TBL_ACLQOS_IF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_aclqos_if__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, NULL, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_L2_ACTION
 */
struct  _Cdb__TblL2Action
{
  ProtobufCMessage base;
};
#define CDB__TBL_L2_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_l2_action__descriptor) \
     }


/*
 * TBL_FEA_QOS_DROP_PROFILE
 */
struct  _Cdb__TblFeaQosDropProfileKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_FEA_QOS_DROP_PROFILE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_qos_drop_profile_key__descriptor) \
    , 0 }


struct  _Cdb__TblFeaQosDropProfile
{
  ProtobufCMessage base;
  Cdb__TblFeaQosDropProfileKey *key;
  protobuf_c_boolean has_sai_drop_id;
  uint64_t sai_drop_id;
};
#define CDB__TBL_FEA_QOS_DROP_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_qos_drop_profile__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_FEA_QOS_DOMAIN
 */
struct  _Cdb__TblFeaQosDomainKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_FEA_QOS_DOMAIN_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_qos_domain_key__descriptor) \
    , 0 }


struct  _Cdb__TblFeaQosDomain
{
  ProtobufCMessage base;
  Cdb__TblFeaQosDomainKey *key;
  protobuf_c_boolean has_dot1p_to_tc_color_map_id;
  uint64_t dot1p_to_tc_color_map_id;
  protobuf_c_boolean has_dscp_to_tc_color_map_id;
  uint64_t dscp_to_tc_color_map_id;
  protobuf_c_boolean has_exp_to_tc_color_map_id;
  uint64_t exp_to_tc_color_map_id;
  protobuf_c_boolean has_tc_and_color_to_dot1p_map_id;
  uint64_t tc_and_color_to_dot1p_map_id;
  protobuf_c_boolean has_tc_and_color_to_dscp_map_id;
  uint64_t tc_and_color_to_dscp_map_id;
  protobuf_c_boolean has_tc_and_color_to_exp_map_id;
  uint64_t tc_and_color_to_exp_map_id;
};
#define CDB__TBL_FEA_QOS_DOMAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_qos_domain__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_FEA_G8032_RING
 */
struct  _Cdb__TblFeaG8032Ring
{
  ProtobufCMessage base;
  Cdb__ComposeFeaG8032RingKeyT *key;
  protobuf_c_boolean has_mc_group_id;
  uint32_t mc_group_id;
  protobuf_c_boolean has_aps_group_id;
  uint32_t aps_group_id;
  protobuf_c_boolean has_nh_id;
  uint32_t nh_id;
  protobuf_c_boolean has_nhoffset;
  uint32_t nhoffset;
};
#define CDB__TBL_FEA_G8032_RING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_g8032_ring__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_FEA_G8032_RING_MC_GROUP
 */
struct  _Cdb__TblFeaG8032RingMcGroupKey
{
  ProtobufCMessage base;
  uint32_t ring_id;
};
#define CDB__TBL_FEA_G8032_RING_MC_GROUP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_g8032_ring_mc_group_key__descriptor) \
    , 0 }


struct  _Cdb__TblFeaG8032RingMcGroup
{
  ProtobufCMessage base;
  Cdb__TblFeaG8032RingMcGroupKey *key;
  protobuf_c_boolean has_mc_group_id;
  uint32_t mc_group_id;
};
#define CDB__TBL_FEA_G8032_RING_MC_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_g8032_ring_mc_group__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_FEA_QOS_QUEUE_SHAPE_PROFILE
 */
struct  _Cdb__TblFeaQosQueueShapeProfileKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_FEA_QOS_QUEUE_SHAPE_PROFILE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_qos_queue_shape_profile_key__descriptor) \
    , 0 }


struct  _Cdb__TblFeaQosQueueShapeProfile
{
  ProtobufCMessage base;
  Cdb__TblFeaQosQueueShapeProfileKey *key;
  protobuf_c_boolean has_sai_scheduler_id;
  uint64_t sai_scheduler_id;
};
#define CDB__TBL_FEA_QOS_QUEUE_SHAPE_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_qos_queue_shape_profile__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_FEA_QOS_PORT_SHAPE_PROFILE
 */
struct  _Cdb__TblFeaQosPortShapeProfileKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_FEA_QOS_PORT_SHAPE_PROFILE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_qos_port_shape_profile_key__descriptor) \
    , 0 }


struct  _Cdb__TblFeaQosPortShapeProfile
{
  ProtobufCMessage base;
  Cdb__TblFeaQosPortShapeProfileKey *key;
  protobuf_c_boolean has_sai_scheduler_id;
  uint64_t sai_scheduler_id;
};
#define CDB__TBL_FEA_QOS_PORT_SHAPE_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_qos_port_shape_profile__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_FEA_PORT_POLICER_APPLY
 */
struct  _Cdb__TblFeaPortPolicerApplyKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_FEA_PORT_POLICER_APPLY_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_port_policer_apply_key__descriptor) \
    , NULL }


struct  _Cdb__TblFeaPortPolicerApply
{
  ProtobufCMessage base;
  Cdb__TblFeaPortPolicerApplyKey *key;
  protobuf_c_boolean has_in_policer_id;
  uint64_t in_policer_id;
  protobuf_c_boolean has_out_policer_id;
  uint64_t out_policer_id;
};
#define CDB__TBL_FEA_PORT_POLICER_APPLY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_port_policer_apply__descriptor) \
    , NULL, 0,0, 0,0 }


/*
 * TBL_ACLQOS_IF_STATS
 */
struct  _Cdb__TblAclqosIfStatsKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_ACLQOS_IF_STATS_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_aclqos_if_stats_key__descriptor) \
    , NULL }


struct  _Cdb__TblAclqosIfStats
{
  ProtobufCMessage base;
  Cdb__TblAclqosIfStatsKey *key;
  protobuf_c_boolean has_flags_port_get_input_policer_stats;
  uint32_t flags_port_get_input_policer_stats;
  protobuf_c_boolean has_flags_port_get_output_policer_stats;
  uint32_t flags_port_get_output_policer_stats;
  protobuf_c_boolean has_flags_port_clear_input_policer_stats;
  uint32_t flags_port_clear_input_policer_stats;
  protobuf_c_boolean has_flags_port_clear_output_policer_stats;
  uint32_t flags_port_clear_output_policer_stats;
  protobuf_c_boolean has_flags_get_queue_stats;
  uint32_t flags_get_queue_stats;
  protobuf_c_boolean has_flags_clear_queue_stats;
  uint32_t flags_clear_queue_stats;
  size_t n_queue_transimt_pkt;
  uint64_t *queue_transimt_pkt;
  size_t n_queue_transimt_byte;
  uint64_t *queue_transimt_byte;
  size_t n_queue_drop_pkt;
  uint64_t *queue_drop_pkt;
  size_t n_queue_drop_byte;
  uint64_t *queue_drop_byte;
  protobuf_c_boolean has_green_packet;
  uint64_t green_packet;
  protobuf_c_boolean has_green_byte;
  uint64_t green_byte;
  protobuf_c_boolean has_yellow_packet;
  uint64_t yellow_packet;
  protobuf_c_boolean has_yellow_byte;
  uint64_t yellow_byte;
  protobuf_c_boolean has_red_packet;
  uint64_t red_packet;
  protobuf_c_boolean has_red_byte;
  uint64_t red_byte;
  protobuf_c_boolean has_green_packet_out;
  uint64_t green_packet_out;
  protobuf_c_boolean has_green_byte_out;
  uint64_t green_byte_out;
  protobuf_c_boolean has_yellow_packet_out;
  uint64_t yellow_packet_out;
  protobuf_c_boolean has_yellow_byte_out;
  uint64_t yellow_byte_out;
  protobuf_c_boolean has_red_packet_out;
  uint64_t red_packet_out;
  protobuf_c_boolean has_red_byte_out;
  uint64_t red_byte_out;
};
#define CDB__TBL_ACLQOS_IF_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_aclqos_if_stats__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_VERSION
 */
struct  _Cdb__TblVersion
{
  ProtobufCMessage base;
  char *version;
  char *company;
  char *package;
  char *product;
  char *hw_type;
  protobuf_c_boolean has_is_cst;
  uint32_t is_cst;
  char *cst_company;
  char *cst_hw_type;
  char *cst_hw_info;
  char *cst_hw_ver;
  char *cst_sw_ver;
};
#define CDB__TBL_VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_version__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0,0, NULL, NULL, NULL, NULL, NULL }


/*
 * TBL_MANAGE_IF
 */
struct  _Cdb__TblManageIf
{
  ProtobufCMessage base;
  Cdb__ComposePrefixIpv4T *addr;
  Cdb__ComposeAddrIpv4T *gateway;
  protobuf_c_boolean has_dhclient_enable;
  uint32_t dhclient_enable;
  Cdb__ComposePrefixIpv4T *dhclient_addr;
  Cdb__ComposeAddrIpv4T *dhclient_gateway;
  Cdb__ComposePrefixT *addr_v6;
  Cdb__ComposePrefixT *gateway_v6;
  char *link_local_addr_str;
  protobuf_c_boolean has_dhclientv6_enable;
  uint32_t dhclientv6_enable;
  Cdb__ComposePrefixT *dhclientv6_addr;
  Cdb__ComposePrefixT *dhclientv6_gateway;
};
#define CDB__TBL_MANAGE_IF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_manage_if__descriptor) \
    , NULL, NULL, 0,0, NULL, NULL, NULL, NULL, NULL, 0,0, NULL, NULL }


/*
 * TBL_BOOTIMAGE
 */
struct  _Cdb__TblBootimage
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mode;
  uint32_t mode;
  protobuf_c_boolean has_fast;
  uint32_t fast;
  char *image;
  char *serverip;
  char *ipaddr;
  char *bootcmd;
  char *current_image;
};
#define CDB__TBL_BOOTIMAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_bootimage__descriptor) \
    , 0,0, 0,0, NULL, NULL, NULL, NULL, NULL }


/*
 * TBL_CHASSIS
 */
struct  _Cdb__TblChassis
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  int32_t type;
  protobuf_c_boolean has_slot_num;
  int32_t slot_num;
  protobuf_c_boolean has_cur_stm_mode;
  int32_t cur_stm_mode;
  protobuf_c_boolean has_next_stm_mode;
  int32_t next_stm_mode;
  protobuf_c_boolean has_mac_num;
  int32_t mac_num;
  Cdb__ComposeMacAddrT *sys_mac;
  protobuf_c_boolean has_location_led;
  uint32_t location_led;
  protobuf_c_boolean has_reset_reboot_info;
  uint32_t reset_reboot_info;
  protobuf_c_boolean has_support_reboot_info;
  uint32_t support_reboot_info;
  protobuf_c_boolean has_one_minute_reboot_alarm;
  uint32_t one_minute_reboot_alarm;
  protobuf_c_boolean has_schedule_reboot;
  uint32_t schedule_reboot;
};
#define CDB__TBL_CHASSIS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_chassis__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_IFNAME_INFO
 */
struct  _Cdb__TblIfnameInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_connection;
  int32_t connection;
  protobuf_c_boolean has_sub_connection;
  int32_t sub_connection;
  protobuf_c_boolean has_prefix_num;
  int32_t prefix_num;
  size_t n_prefix;
  char **prefix;
  size_t n_full_prefix;
  char **full_prefix;
};
#define CDB__TBL_IFNAME_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ifname_info__descriptor) \
    , 0,0, 0,0, 0,0, 0,NULL, 0,NULL }


/*
 * TBL_CARD
 */
struct  _Cdb__TblCardKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_CARD_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_card_key__descriptor) \
    , 0 }


struct  _Cdb__TblCard
{
  ProtobufCMessage base;
  Cdb__TblCardKey *key;
  protobuf_c_boolean has_slot;
  uint32_t slot;
  char *product_name;
  char *hardware_name;
  char *company_name;
  char *package_name;
  char *enterprise_oid;
  char *hardware_type;
  char *serial_no;
  char *bootrom_ver;
  char *epld_ver;
  char *sw_ver;
  char *hardware_ver;
  protobuf_c_boolean has_board_type;
  uint32_t board_type;
  protobuf_c_boolean has_board_series;
  uint32_t board_series;
  protobuf_c_boolean has_flash_size;
  int32_t flash_size;
  protobuf_c_boolean has_dram_size;
  int32_t dram_size;
  protobuf_c_boolean has_port_num;
  int32_t port_num;
  protobuf_c_boolean has_uptime_day;
  int32_t uptime_day;
  protobuf_c_boolean has_uptime_hour;
  int32_t uptime_hour;
  protobuf_c_boolean has_uptime_min;
  int32_t uptime_min;
  Cdb__ComposeSalTimeT *attach_time;
  protobuf_c_boolean has_attach_count;
  uint32_t attach_count;
  protobuf_c_boolean has_tmpr_low;
  int32_t tmpr_low;
  protobuf_c_boolean has_tmpr_high;
  int32_t tmpr_high;
  protobuf_c_boolean has_tmpr_critical;
  int32_t tmpr_critical;
  protobuf_c_boolean has_status;
  uint32_t status;
  protobuf_c_boolean has_epld_status;
  uint32_t epld_status;
  protobuf_c_boolean has_reboot;
  uint32_t reboot;
  protobuf_c_boolean has_update_phy_firmware_port_idx;
  int32_t update_phy_firmware_port_idx;
  protobuf_c_boolean has_platform_type;
  int32_t platform_type;
  protobuf_c_boolean has_bootup_diag_level;
  int32_t bootup_diag_level;
  protobuf_c_boolean has_next_bootup_diag_level;
  int32_t next_bootup_diag_level;
  protobuf_c_boolean has_fan_speed_bottom;
  int32_t fan_speed_bottom;
  protobuf_c_boolean has_fan_speed_low;
  int32_t fan_speed_low;
  protobuf_c_boolean has_fan_speed_high;
  int32_t fan_speed_high;
  protobuf_c_boolean has_fan_speed_full;
  int32_t fan_speed_full;
  char *bootcmd;
  char *update_epld_name;
  char *update_bootrom_name;
  char *update_phy_firmware_name;
  protobuf_c_boolean has_glb_poe_enable;
  int32_t glb_poe_enable;
  protobuf_c_boolean has_glb_poe_power_max;
  uint32_t glb_poe_power_max;
};
#define CDB__TBL_CARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_card__descriptor) \
    , NULL, 0,0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0 }


/*
 * TBL_PORT
 */
struct  _Cdb__TblPortKey
{
  ProtobufCMessage base;
  int32_t port_id;
};
#define CDB__TBL_PORT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_port_key__descriptor) \
    , 0 }


struct  _Cdb__TblPort
{
  ProtobufCMessage base;
  Cdb__TblPortKey *key;
  protobuf_c_boolean has_slot_no;
  int32_t slot_no;
  protobuf_c_boolean has_panel_port_no;
  int32_t panel_port_no;
  protobuf_c_boolean has_panel_sub_port_no;
  int32_t panel_sub_port_no;
  protobuf_c_boolean has_phy_type;
  int32_t phy_type;
  protobuf_c_boolean has_phyinfo_flag;
  int32_t phyinfo_flag;
  protobuf_c_boolean has_speed_capbility;
  int32_t speed_capbility;
  protobuf_c_boolean has_logic_port_id;
  int32_t logic_port_id;
  protobuf_c_boolean has_media;
  int32_t media;
  protobuf_c_boolean has_port_media_type;
  int32_t port_media_type;
  protobuf_c_boolean has_support_media_switch;
  int32_t support_media_switch;
  protobuf_c_boolean has_split_type;
  int32_t split_type;
  protobuf_c_boolean has_bypass;
  int32_t bypass;
  protobuf_c_boolean has_bypass_slot;
  int32_t bypass_slot;
  protobuf_c_boolean has_training_enable;
  int32_t training_enable;
  protobuf_c_boolean has_training_status;
  int32_t training_status;
  protobuf_c_boolean has_present_status;
  int32_t present_status;
  char *name;
  Cdb__ComposeMacAddrT *mac;
};
#define CDB__TBL_PORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_port__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL }


/*
 * TBL_FIBER
 */
struct  _Cdb__TblFiberKey
{
  ProtobufCMessage base;
  int32_t port_id;
};
#define CDB__TBL_FIBER_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fiber_key__descriptor) \
    , 0 }


struct  _Cdb__TblFiber
{
  ProtobufCMessage base;
  Cdb__TblFiberKey *key;
  char *interface_name;
  char *fiber_type_name;
  char *name;
  protobuf_c_boolean has_oui;
  ProtobufCBinaryData oui;
  char *pn;
  char *rev;
  char *sn;
  protobuf_c_boolean has_compliance_code;
  ProtobufCBinaryData compliance_code;
  protobuf_c_boolean has_slot;
  int32_t slot;
  size_t n_tmpr;
  double *tmpr;
  size_t n_voltage;
  double *voltage;
  size_t n_bias;
  double *bias;
  size_t n_tx_pwr;
  double *tx_pwr;
  size_t n_rx_pwr;
  double *rx_pwr;
  size_t n_tmpr2;
  double *tmpr2;
  size_t n_voltage2;
  double *voltage2;
  size_t n_bias2;
  double *bias2;
  size_t n_tx_pwr2;
  double *tx_pwr2;
  size_t n_rx_pwr2;
  double *rx_pwr2;
  size_t n_alarm_flag;
  uint32_t *alarm_flag;
  size_t n_warn_flag;
  uint32_t *warn_flag;
  protobuf_c_boolean has_update_cnt;
  uint32_t update_cnt;
  protobuf_c_boolean has_channel_num;
  uint32_t channel_num;
  protobuf_c_boolean has_channel_idx;
  uint32_t channel_idx;
  protobuf_c_boolean has_is_detail;
  uint32_t is_detail;
  protobuf_c_boolean has_fiber_type;
  uint32_t fiber_type;
  protobuf_c_boolean has_fiber_flag;
  uint32_t fiber_flag;
  protobuf_c_boolean has_is_copper;
  uint32_t is_copper;
  protobuf_c_boolean has_speed;
  uint32_t speed;
  protobuf_c_boolean has_ddm_support;
  uint32_t ddm_support;
  protobuf_c_boolean has_externally_calibrated;
  uint32_t externally_calibrated;
  protobuf_c_boolean has_wavelength;
  ProtobufCBinaryData wavelength;
  protobuf_c_boolean has_length;
  ProtobufCBinaryData length;
};
#define CDB__TBL_FIBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fiber__descriptor) \
    , NULL, NULL, NULL, NULL, 0,{0,NULL}, NULL, NULL, NULL, 0,{0,NULL}, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,{0,NULL} }


/*
 * TBL_SYS_SPEC
 */
struct  _Cdb__TblSysSpecKey
{
  ProtobufCMessage base;
  uint32_t type;
};
#define CDB__TBL_SYS_SPEC_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_sys_spec_key__descriptor) \
    , 0 }


struct  _Cdb__TblSysSpec
{
  ProtobufCMessage base;
  Cdb__TblSysSpecKey *key;
  protobuf_c_boolean has_ucast_fdb;
  uint32_t ucast_fdb;
  protobuf_c_boolean has_static_fdb;
  uint32_t static_fdb;
  protobuf_c_boolean has_mstp_instance;
  uint32_t mstp_instance;
  protobuf_c_boolean has_vlan_instance;
  uint32_t vlan_instance;
  protobuf_c_boolean has_mac_filter;
  uint32_t mac_filter;
  protobuf_c_boolean has_mac_based_vlan_class;
  uint32_t mac_based_vlan_class;
  protobuf_c_boolean has_ipv4_based_vlan_class;
  uint32_t ipv4_based_vlan_class;
  protobuf_c_boolean has_ipv4_source_guard;
  uint32_t ipv4_source_guard;
  protobuf_c_boolean has_vlan_mapping_entry_applied_port;
  uint32_t vlan_mapping_entry_applied_port;
  protobuf_c_boolean has_dot1x_mac;
  uint32_t dot1x_mac;
  protobuf_c_boolean has_indirect_routes;
  uint32_t indirect_routes;
  protobuf_c_boolean has_static_routes;
  uint32_t static_routes;
  protobuf_c_boolean has_host_routes;
  uint32_t host_routes;
  protobuf_c_boolean has_ecmp_routes;
  uint32_t ecmp_routes;
  protobuf_c_boolean has_ecmp_member_maximum;
  uint32_t ecmp_member_maximum;
  protobuf_c_boolean has_indirect_v6_routes;
  uint32_t indirect_v6_routes;
  protobuf_c_boolean has_static_v6_routes;
  uint32_t static_v6_routes;
  protobuf_c_boolean has_host_v6_routes;
  uint32_t host_v6_routes;
  protobuf_c_boolean has_ecmp_v6_routes;
  uint32_t ecmp_v6_routes;
  protobuf_c_boolean has_ecmp_v6_member_maximum;
  uint32_t ecmp_v6_member_maximum;
  protobuf_c_boolean has_pbr_entries;
  uint32_t pbr_entries;
  protobuf_c_boolean has_l2mc_entries;
  uint32_t l2mc_entries;
  protobuf_c_boolean has_l3mc_entries;
  uint32_t l3mc_entries;
  protobuf_c_boolean has_l2mc_member_ports;
  uint32_t l2mc_member_ports;
  protobuf_c_boolean has_l3mc_member_ports;
  uint32_t l3mc_member_ports;
  protobuf_c_boolean has_vlan_member_ports;
  uint32_t vlan_member_ports;
  protobuf_c_boolean has_voice_vlan;
  uint32_t voice_vlan;
  protobuf_c_boolean has_flow_entries_ingress;
  uint32_t flow_entries_ingress;
  protobuf_c_boolean has_flow_entries_egress;
  uint32_t flow_entries_egress;
  protobuf_c_boolean has_flow6_entries_ingress;
  uint32_t flow6_entries_ingress;
  protobuf_c_boolean has_flow6_entries_egress;
  uint32_t flow6_entries_egress;
  protobuf_c_boolean has_cfm_local_and_remote_meps;
  uint32_t cfm_local_and_remote_meps;
  protobuf_c_boolean has_g8031_groups;
  uint32_t g8031_groups;
  protobuf_c_boolean has_g8032_rings;
  uint32_t g8032_rings;
  protobuf_c_boolean has_g8032_member_ports_per_ring;
  uint32_t g8032_member_ports_per_ring;
  protobuf_c_boolean has_ftn_entries;
  uint32_t ftn_entries;
  protobuf_c_boolean has_ilm_entries;
  uint32_t ilm_entries;
  protobuf_c_boolean has_mpls_lables;
  uint32_t mpls_lables;
  protobuf_c_boolean has_vpws;
  uint32_t vpws;
  protobuf_c_boolean has_lsp_pe;
  uint32_t lsp_pe;
  protobuf_c_boolean has_lsp_p;
  uint32_t lsp_p;
  protobuf_c_boolean has_vpls_peer;
  uint32_t vpls_peer;
  protobuf_c_boolean has_vpls_ac;
  uint32_t vpls_ac;
  protobuf_c_boolean has_vsi;
  uint32_t vsi;
  protobuf_c_boolean has_lsp_oam;
  uint32_t lsp_oam;
  protobuf_c_boolean has_pw_oam;
  uint32_t pw_oam;
  protobuf_c_boolean has_mpls_aps_tunnel;
  uint32_t mpls_aps_tunnel;
  protobuf_c_boolean has_cfm_lck;
  uint32_t cfm_lck;
  protobuf_c_boolean has_ip_tunnel;
  uint32_t ip_tunnel;
  protobuf_c_boolean has_ivi_peers;
  uint32_t ivi_peers;
  protobuf_c_boolean has_pbr_v6_entries;
  uint32_t pbr_v6_entries;
  protobuf_c_boolean has_l3mc_v6_entries;
  uint32_t l3mc_v6_entries;
  protobuf_c_boolean has_l2mc_v6_entries;
  uint32_t l2mc_v6_entries;
  protobuf_c_boolean has_flow_v6_entries;
  uint32_t flow_v6_entries;
  protobuf_c_boolean has_ipv6_based_vlan_class;
  uint32_t ipv6_based_vlan_class;
  protobuf_c_boolean has_ipv6_source_guard;
  uint32_t ipv6_source_guard;
  protobuf_c_boolean has_l3mc_v6_member_ports;
  uint32_t l3mc_v6_member_ports;
  protobuf_c_boolean has_l2mc_v6_member_ports;
  uint32_t l2mc_v6_member_ports;
  protobuf_c_boolean has_vlan_mapping_default_entry;
  uint32_t vlan_mapping_default_entry;
  protobuf_c_boolean has_bfd_sessions;
  uint32_t bfd_sessions;
  protobuf_c_boolean has_nvgre_tunnel_id_mappings;
  uint32_t nvgre_tunnel_id_mappings;
  protobuf_c_boolean has_nvgre_peers;
  uint32_t nvgre_peers;
  protobuf_c_boolean has_nvgre_tunnels;
  uint32_t nvgre_tunnels;
  protobuf_c_boolean has_openflow_flow_entries;
  uint32_t openflow_flow_entries;
  protobuf_c_boolean has_policer_profile_num;
  uint32_t policer_profile_num;
  protobuf_c_boolean has_port_shape_profile_num;
  uint32_t port_shape_profile_num;
  protobuf_c_boolean has_queue_shape_profile_num;
  uint32_t queue_shape_profile_num;
  protobuf_c_boolean has_drop_profile_num;
  uint32_t drop_profile_num;
  protobuf_c_boolean has_lag_group_num;
  uint32_t lag_group_num;
  protobuf_c_boolean has_ospf_area_range_num;
  uint32_t ospf_area_range_num;
  protobuf_c_boolean has_tap_group_profile_num;
  uint32_t tap_group_profile_num;
  protobuf_c_boolean has_tap_flow_num;
  uint32_t tap_flow_num;
  protobuf_c_boolean has_tap_flow_entry_num;
  uint32_t tap_flow_entry_num;
  protobuf_c_boolean has_l2protocol_num;
  uint32_t l2protocol_num;
  protobuf_c_boolean has_openflow_dynamic_tunnel_num;
  uint32_t openflow_dynamic_tunnel_num;
  protobuf_c_boolean has_nat_pool_num;
  uint32_t nat_pool_num;
  protobuf_c_boolean has_nat_rule_num;
  uint32_t nat_rule_num;
  protobuf_c_boolean has_nat_inside_rtif_num;
  uint32_t nat_inside_rtif_num;
  protobuf_c_boolean has_nat_outside_rtif_num;
  uint32_t nat_outside_rtif_num;
  protobuf_c_boolean has_nat_session_upstream_num;
  uint32_t nat_session_upstream_num;
  protobuf_c_boolean has_nat_session_dnstream_num;
  uint32_t nat_session_dnstream_num;
  protobuf_c_boolean has_nat_session_fast_path_entry_num;
  uint32_t nat_session_fast_path_entry_num;
  protobuf_c_boolean has_nat_session_limit_node_num;
  uint32_t nat_session_limit_node_num;
};
#define CDB__TBL_SYS_SPEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_sys_spec__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_FAN
 */
struct  _Cdb__TblFanKey
{
  ProtobufCMessage base;
  int32_t id;
};
#define CDB__TBL_FAN_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fan_key__descriptor) \
    , 0 }


struct  _Cdb__TblFan
{
  ProtobufCMessage base;
  Cdb__TblFanKey *key;
  protobuf_c_boolean has_slot;
  int32_t slot;
  protobuf_c_boolean has_tray;
  int32_t tray;
  protobuf_c_boolean has_percent;
  int32_t percent;
  protobuf_c_boolean has_absent;
  int32_t absent;
  char *name;
  char *direction;
  char *status;
  char *mode;
};
#define CDB__TBL_FAN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fan__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL }


/*
 * TBL_PSU
 */
struct  _Cdb__TblPsuKey
{
  ProtobufCMessage base;
  int32_t id;
};
#define CDB__TBL_PSU_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_psu_key__descriptor) \
    , 0 }


struct  _Cdb__TblPsu
{
  ProtobufCMessage base;
  Cdb__TblPsuKey *key;
  protobuf_c_boolean has_slot;
  int32_t slot;
  char *name;
  protobuf_c_boolean has_absent;
  int32_t absent;
  char *run_status;
  char *alert_status;
  char *mode;
  protobuf_c_boolean has_fixed_status;
  uint32_t fixed_status;
  protobuf_c_boolean has_psu_health_status_change;
  uint32_t psu_health_status_change;
  protobuf_c_boolean has_support_pmbus;
  uint32_t support_pmbus;
  protobuf_c_boolean has_pmbus_status_byte;
  uint32_t pmbus_status_byte;
  protobuf_c_boolean has_pmbus_status_word;
  uint32_t pmbus_status_word;
  protobuf_c_boolean has_pmbus_status_vout;
  uint32_t pmbus_status_vout;
  protobuf_c_boolean has_pmbus_status_iout;
  uint32_t pmbus_status_iout;
  protobuf_c_boolean has_pmbus_status_input;
  uint32_t pmbus_status_input;
  protobuf_c_boolean has_pmbus_status_temperature;
  uint32_t pmbus_status_temperature;
  protobuf_c_boolean has_pmbus_status_cml;
  uint32_t pmbus_status_cml;
  protobuf_c_boolean has_pmbus_status_other;
  uint32_t pmbus_status_other;
  protobuf_c_boolean has_pmbus_status_mfr_specific;
  uint32_t pmbus_status_mfr_specific;
  protobuf_c_boolean has_pmbus_status_fans_1_2;
  uint32_t pmbus_status_fans_1_2;
  protobuf_c_boolean has_pmbus_status_fans_3_4;
  uint32_t pmbus_status_fans_3_4;
};
#define CDB__TBL_PSU__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_psu__descriptor) \
    , NULL, 0,0, NULL, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_LED
 */
struct  _Cdb__TblLedKey
{
  ProtobufCMessage base;
  int32_t id;
};
#define CDB__TBL_LED_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_led_key__descriptor) \
    , 0 }


struct  _Cdb__TblLed
{
  ProtobufCMessage base;
  Cdb__TblLedKey *key;
  protobuf_c_boolean has_slot;
  int32_t slot;
  char *name;
  char *status;
  char *mode;
};
#define CDB__TBL_LED__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_led__descriptor) \
    , NULL, 0,0, NULL, NULL, NULL }


/*
 * TBL_SENSOR
 */
struct  _Cdb__TblSensorKey
{
  ProtobufCMessage base;
  int32_t id;
};
#define CDB__TBL_SENSOR_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_sensor_key__descriptor) \
    , 0 }


struct  _Cdb__TblSensor
{
  ProtobufCMessage base;
  Cdb__TblSensorKey *key;
  protobuf_c_boolean has_slot;
  int32_t slot;
  protobuf_c_boolean has_temperature;
  int32_t temperature;
  char *name;
  char *position;
  char *status;
  protobuf_c_boolean has_tmpr_low;
  int32_t tmpr_low;
  protobuf_c_boolean has_tmpr_high;
  int32_t tmpr_high;
  protobuf_c_boolean has_tmpr_critical;
  int32_t tmpr_critical;
  protobuf_c_boolean has_is_chip;
  uint32_t is_chip;
};
#define CDB__TBL_SENSOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_sensor__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_VCM
 */
struct  _Cdb__TblVcmKey
{
  ProtobufCMessage base;
  int32_t id;
};
#define CDB__TBL_VCM_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vcm_key__descriptor) \
    , 0 }


struct  _Cdb__TblVcm
{
  ProtobufCMessage base;
  Cdb__TblVcmKey *key;
  protobuf_c_boolean has_slot;
  int32_t slot;
  protobuf_c_boolean has_vcm_type;
  uint32_t vcm_type;
  protobuf_c_boolean has_vcm_channel_nums;
  uint32_t vcm_channel_nums;
  char *channel_name0;
  char *channel_name1;
  char *channel_name2;
  char *channel_name3;
  char *channel_name4;
  char *channel_name5;
  char *channel_name6;
  char *channel_name7;
  char *channel_name8;
  size_t n_flag;
  uint32_t *flag;
  protobuf_c_boolean has_curr_depend_pin;
  ProtobufCBinaryData curr_depend_pin;
  size_t n_volt_split_factor;
  double *volt_split_factor;
  size_t n_low;
  double *low;
  size_t n_high;
  double *high;
  size_t n_volt;
  double *volt;
  size_t n_curr;
  double *curr;
  size_t n_tmpr;
  double *tmpr;
};
#define CDB__TBL_VCM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vcm__descriptor) \
    , NULL, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0,NULL, 0,{0,NULL}, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/*
 * TBL_POE
 */
struct  _Cdb__TblPoeKey
{
  ProtobufCMessage base;
  int32_t id;
};
#define CDB__TBL_POE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_poe_key__descriptor) \
    , 0 }


struct  _Cdb__TblPoe
{
  ProtobufCMessage base;
  Cdb__TblPoeKey *key;
  protobuf_c_boolean has_slot;
  int32_t slot;
  protobuf_c_boolean has_glb_enable;
  uint32_t glb_enable;
  protobuf_c_boolean has_glb_power_limit;
  uint32_t glb_power_limit;
  protobuf_c_boolean has_glb_status;
  uint32_t glb_status;
  protobuf_c_boolean has_glb_cur_consump;
  uint32_t glb_cur_consump;
  protobuf_c_boolean has_glb_aver_consump;
  uint32_t glb_aver_consump;
  protobuf_c_boolean has_glb_peak_consump;
  uint32_t glb_peak_consump;
  protobuf_c_boolean has_pse_channel_num;
  uint32_t pse_channel_num;
  protobuf_c_boolean has_const_power_limit;
  uint32_t const_power_limit;
  size_t n_pse_channel_id;
  uint32_t *pse_channel_id;
  size_t n_panel_slot_no;
  uint32_t *panel_slot_no;
  size_t n_panel_port_no;
  uint32_t *panel_port_no;
  size_t n_panel_sub_port_no;
  uint32_t *panel_sub_port_no;
  size_t n_enable;
  uint32_t *enable;
  size_t n_force_power;
  uint32_t *force_power;
  size_t n_mode;
  uint32_t *mode;
  size_t n_priority;
  uint32_t *priority;
  size_t n_power_limit;
  uint32_t *power_limit;
  size_t n_class_level;
  uint32_t *class_level;
  size_t n_status;
  uint32_t *status;
  size_t n_cur_consump;
  uint32_t *cur_consump;
  size_t n_aver_consump;
  uint32_t *aver_consump;
  size_t n_peak_consump;
  uint32_t *peak_consump;
  size_t n_current;
  uint32_t *current;
  size_t n_voltage;
  uint32_t *voltage;
  size_t n_temper;
  uint32_t *temper;
};
#define CDB__TBL_POE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_poe__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/*
 * TBL_REBOOT_INFO
 */
struct  _Cdb__TblRebootInfoKey
{
  ProtobufCMessage base;
  uint32_t index;
};
#define CDB__TBL_REBOOT_INFO_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_reboot_info_key__descriptor) \
    , 0 }


struct  _Cdb__TblRebootInfo
{
  ProtobufCMessage base;
  Cdb__TblRebootInfoKey *key;
  char *reboot_type;
  char *reboot_time;
};
#define CDB__TBL_REBOOT_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_reboot_info__descriptor) \
    , NULL, NULL, NULL }


/*
 * TBL_ERRDISABLE_FLAP
 */
struct  _Cdb__TblErrdisableFlapKey
{
  ProtobufCMessage base;
  uint32_t flap_rsn;
};
#define CDB__TBL_ERRDISABLE_FLAP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_errdisable_flap_key__descriptor) \
    , 0 }


struct  _Cdb__TblErrdisableFlap
{
  ProtobufCMessage base;
  Cdb__TblErrdisableFlapKey *key;
  protobuf_c_boolean has_errdisable_rsn;
  uint32_t errdisable_rsn;
  protobuf_c_boolean has_flap_cnt_threshold;
  uint32_t flap_cnt_threshold;
  protobuf_c_boolean has_flap_time_threshold;
  uint32_t flap_time_threshold;
  protobuf_c_boolean has_flap_time_cnt;
  uint32_t flap_time_cnt;
};
#define CDB__TBL_ERRDISABLE_FLAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_errdisable_flap__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_OPM_GLOBAL
 */
struct  _Cdb__TblOpmGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_erps_mode;
  uint32_t erps_mode;
  protobuf_c_boolean has_erps_unreload;
  uint32_t erps_unreload;
};
#define CDB__TBL_OPM_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_opm_global__descriptor) \
    , 0,0, 0,0 }


/*
 * TBL_ERPS_RING
 */
struct  _Cdb__TblErpsRing
{
  ProtobufCMessage base;
  Cdb__ComposeErpsRingKeyT *key;
  protobuf_c_boolean has_erps_ring_state;
  uint32_t erps_ring_state;
  protobuf_c_boolean has_erps_ring_level;
  uint32_t erps_ring_level;
  protobuf_c_boolean has_instance_id_num;
  uint32_t instance_id_num;
  size_t n_instance_id;
  uint32_t *instance_id;
  protobuf_c_boolean has_node_role;
  uint32_t node_role;
  protobuf_c_boolean has_edge_node_role;
  uint32_t edge_node_role;
  protobuf_c_boolean has_erps_srpt_enable;
  uint32_t erps_srpt_enable;
  protobuf_c_boolean has_primary_port_ifindex;
  uint32_t primary_port_ifindex;
  protobuf_c_boolean has_secondary_port_ifindex;
  uint32_t secondary_port_ifindex;
  protobuf_c_boolean has_edge_port_ifindex;
  uint32_t edge_port_ifindex;
  protobuf_c_boolean has_common_port_ifindex;
  uint32_t common_port_ifindex;
  protobuf_c_boolean has_blocked_port_ifindex;
  uint32_t blocked_port_ifindex;
  protobuf_c_boolean has_blocked;
  uint32_t blocked;
  protobuf_c_boolean has_hello_seq;
  uint32_t hello_seq;
  protobuf_c_boolean has_expect_hello_seq;
  uint32_t expect_hello_seq;
  protobuf_c_boolean has_rcv_hello_cnt;
  uint32_t rcv_hello_cnt;
  protobuf_c_boolean has_rcv_ring_up_flush_fdb_cnt;
  uint32_t rcv_ring_up_flush_fdb_cnt;
  protobuf_c_boolean has_rcv_ring_down_flush_fdb_cnt;
  uint32_t rcv_ring_down_flush_fdb_cnt;
  protobuf_c_boolean has_rcv_link_down_cnt;
  uint32_t rcv_link_down_cnt;
  protobuf_c_boolean has_rcv_edge_hello_cnt;
  uint32_t rcv_edge_hello_cnt;
  protobuf_c_boolean has_rcv_major_fault_cnt;
  uint32_t rcv_major_fault_cnt;
  protobuf_c_boolean has_send_hello_cnt;
  uint32_t send_hello_cnt;
  protobuf_c_boolean has_send_ring_up_flush_fdb_cnt;
  uint32_t send_ring_up_flush_fdb_cnt;
  protobuf_c_boolean has_send_ring_down_flush_fdb_cnt;
  uint32_t send_ring_down_flush_fdb_cnt;
  protobuf_c_boolean has_send_link_down_cnt;
  uint32_t send_link_down_cnt;
  protobuf_c_boolean has_send_edge_hello_cnt;
  uint32_t send_edge_hello_cnt;
  protobuf_c_boolean has_send_major_fault_cnt;
  uint32_t send_major_fault_cnt;
};
#define CDB__TBL_ERPS_RING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_erps_ring__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_ERPS_DOMAIN
 */
struct  _Cdb__TblErpsDomainKey
{
  ProtobufCMessage base;
  uint32_t domain_id;
};
#define CDB__TBL_ERPS_DOMAIN_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_erps_domain_key__descriptor) \
    , 0 }


struct  _Cdb__TblErpsDomain
{
  ProtobufCMessage base;
  Cdb__TblErpsDomainKey *key;
  char *name;
  protobuf_c_boolean has_instance_id_num;
  uint32_t instance_id_num;
  size_t n_instance_id;
  uint32_t *instance_id;
  protobuf_c_boolean has_primary_control_vlan_id;
  uint32_t primary_control_vlan_id;
  protobuf_c_boolean has_sub_control_vlan_id;
  uint32_t sub_control_vlan_id;
  protobuf_c_boolean has_hello_timer_interval;
  uint32_t hello_timer_interval;
  protobuf_c_boolean has_failure_timer_interval;
  uint32_t failure_timer_interval;
  protobuf_c_boolean has_pre_forwarding_timer_interval;
  uint32_t pre_forwarding_timer_interval;
  protobuf_c_boolean has_flush_timer_interval;
  uint32_t flush_timer_interval;
  protobuf_c_boolean has_edge_hello_timer_interval;
  uint32_t edge_hello_timer_interval;
  protobuf_c_boolean has_edge_failure_timer_interval;
  uint32_t edge_failure_timer_interval;
  protobuf_c_boolean has_erps_enable;
  uint32_t erps_enable;
};
#define CDB__TBL_ERPS_DOMAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_erps_domain__descriptor) \
    , NULL, NULL, 0,0, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_OPM_DEBUG
 */
struct  _Cdb__TblOpmDebug
{
  ProtobufCMessage base;
  protobuf_c_boolean has_erps_all;
  uint32_t erps_all;
  protobuf_c_boolean has_erps_packet;
  uint32_t erps_packet;
  protobuf_c_boolean has_erps_timer;
  uint32_t erps_timer;
  protobuf_c_boolean has_erps_protocol;
  uint32_t erps_protocol;
  protobuf_c_boolean has_erps_event;
  uint32_t erps_event;
  protobuf_c_boolean has_g8131_tx;
  uint32_t g8131_tx;
  protobuf_c_boolean has_g8131_rx;
  uint32_t g8131_rx;
  protobuf_c_boolean has_g8131_event;
  uint32_t g8131_event;
  protobuf_c_boolean has_tpoam_lb_lbm_debug;
  uint32_t tpoam_lb_lbm_debug;
  protobuf_c_boolean has_tpoam_lb_lbr_debug;
  uint32_t tpoam_lb_lbr_debug;
  protobuf_c_boolean has_tpoam_lm_comm_debug;
  uint32_t tpoam_lm_comm_debug;
  protobuf_c_boolean has_tpoam_lm_lmm_debug;
  uint32_t tpoam_lm_lmm_debug;
  protobuf_c_boolean has_tpoam_lm_lmr_debug;
  uint32_t tpoam_lm_lmr_debug;
  protobuf_c_boolean has_tpoam_dm_comm_debug;
  uint32_t tpoam_dm_comm_debug;
  protobuf_c_boolean has_tpoam_dm_dmm_debug;
  uint32_t tpoam_dm_dmm_debug;
  protobuf_c_boolean has_tpoam_dm_dmr_debug;
  uint32_t tpoam_dm_dmr_debug;
  protobuf_c_boolean has_tpoam_dm_1dmtx_debug;
  uint32_t tpoam_dm_1dmtx_debug;
  protobuf_c_boolean has_tpoam_dm_1dmrx_debug;
  uint32_t tpoam_dm_1dmrx_debug;
  protobuf_c_boolean has_tpoam_packet_rx_debug;
  uint32_t tpoam_packet_rx_debug;
  protobuf_c_boolean has_tpoam_packet_tx_debug;
  uint32_t tpoam_packet_tx_debug;
  protobuf_c_boolean has_tpoam_event_debug;
  uint32_t tpoam_event_debug;
  protobuf_c_boolean has_g8032_all;
  uint32_t g8032_all;
  protobuf_c_boolean has_g8032_packet_tx;
  uint32_t g8032_packet_tx;
  protobuf_c_boolean has_g8032_packet_rx;
  uint32_t g8032_packet_rx;
  protobuf_c_boolean has_g8032_event;
  uint32_t g8032_event;
  protobuf_c_boolean has_g8032_timer;
  uint32_t g8032_timer;
  protobuf_c_boolean has_cfm_all;
  uint32_t cfm_all;
  protobuf_c_boolean has_cfm_packet;
  uint32_t cfm_packet;
  protobuf_c_boolean has_cfm_timer;
  uint32_t cfm_timer;
  protobuf_c_boolean has_cfm_event;
  uint32_t cfm_event;
};
#define CDB__TBL_OPM_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_opm_debug__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_POLICY_MAP_CONFIG
 */
struct  _Cdb__TblPolicyMapConfigKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_POLICY_MAP_CONFIG_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_policy_map_config_key__descriptor) \
    , NULL }


struct  _Cdb__TblPolicyMapConfig
{
  ProtobufCMessage base;
  Cdb__TblPolicyMapConfigKey *key;
  protobuf_c_boolean has_intf_ref;
  uint32_t intf_ref;
  protobuf_c_boolean has_class_ref;
  uint32_t class_ref;
  protobuf_c_boolean has_max_class_priority;
  uint64_t max_class_priority;
};
#define CDB__TBL_POLICY_MAP_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_policy_map_config__descriptor) \
    , NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_CLASS_MAP_CONFIG
 */
struct  _Cdb__TblClassMapConfigKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_CLASS_MAP_CONFIG_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_class_map_config_key__descriptor) \
    , NULL }


struct  _Cdb__TblClassMapConfig
{
  ProtobufCMessage base;
  Cdb__TblClassMapConfigKey *key;
  protobuf_c_boolean has_policy_map_ref;
  uint32_t policy_map_ref;
  protobuf_c_boolean has_acl_ref;
  uint32_t acl_ref;
  protobuf_c_boolean has_max_acl_priority;
  uint64_t max_acl_priority;
};
#define CDB__TBL_CLASS_MAP_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_class_map_config__descriptor) \
    , NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_CLASS_IN_POLICY_CONFIG
 */
struct  _Cdb__TblClassInPolicyConfig
{
  ProtobufCMessage base;
  Cdb__ComposeClassInPolicyConfigKeyT *key;
  protobuf_c_boolean has_class_priority;
  uint64_t class_priority;
};
#define CDB__TBL_CLASS_IN_POLICY_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_class_in_policy_config__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_ACL_IN_CLASS_CONFIG
 */
struct  _Cdb__TblAclInClassConfig
{
  ProtobufCMessage base;
  Cdb__ComposeAclInClassConfigKeyT *key;
  protobuf_c_boolean has_acl_priority;
  uint64_t acl_priority;
};
#define CDB__TBL_ACL_IN_CLASS_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_in_class_config__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_CLASS_MAP_ACTION_CONFIG
 */
struct  _Cdb__TblClassMapActionConfig
{
  ProtobufCMessage base;
  Cdb__ComposeClassMapActionConfigKeyT *key;
  protobuf_c_boolean has_action_flag;
  uint32_t action_flag;
  protobuf_c_boolean has_new_tc;
  uint32_t new_tc;
  protobuf_c_boolean has_new_color;
  int32_t new_color;
  protobuf_c_boolean has_new_dscp;
  uint32_t new_dscp;
  protobuf_c_boolean has_session_id;
  uint32_t session_id;
  char *policer;
  protobuf_c_boolean has_new_svlan_id;
  uint32_t new_svlan_id;
  protobuf_c_boolean has_new_cvlan_id;
  uint32_t new_cvlan_id;
  protobuf_c_boolean has_new_scos;
  uint32_t new_scos;
  protobuf_c_boolean has_new_ccos;
  uint32_t new_ccos;
  protobuf_c_boolean has_redirect_port_ifindex;
  uint32_t redirect_port_ifindex;
  char *red_unexist_agg;
};
#define CDB__TBL_CLASS_MAP_ACTION_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_class_map_action_config__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, NULL }


/*
 * TBL_FEA_ACL_POLICY_ACTION
 */
struct  _Cdb__TblFeaAclPolicyActionKey
{
  ProtobufCMessage base;
  uint64_t acl_policy_action_id;
};
#define CDB__TBL_FEA_ACL_POLICY_ACTION_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_acl_policy_action_key__descriptor) \
    , 0 }


struct  _Cdb__TblFeaAclPolicyAction
{
  ProtobufCMessage base;
  Cdb__TblFeaAclPolicyActionKey *key;
  protobuf_c_boolean has_flags_class_get_policer_stats;
  uint32_t flags_class_get_policer_stats;
  protobuf_c_boolean has_flags_calss_clear_policer_stats;
  uint32_t flags_calss_clear_policer_stats;
  protobuf_c_boolean has_policer_id;
  uint64_t policer_id;
  char *policer_name;
  protobuf_c_boolean has_policer_id_ref;
  uint64_t policer_id_ref;
  protobuf_c_boolean has_green_packet;
  uint64_t green_packet;
  protobuf_c_boolean has_green_byte;
  uint64_t green_byte;
  protobuf_c_boolean has_yellow_packet;
  uint64_t yellow_packet;
  protobuf_c_boolean has_yellow_byte;
  uint64_t yellow_byte;
  protobuf_c_boolean has_red_packet;
  uint64_t red_packet;
  protobuf_c_boolean has_red_byte;
  uint64_t red_byte;
};
#define CDB__TBL_FEA_ACL_POLICY_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_acl_policy_action__descriptor) \
    , NULL, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_IGSP_GLOBAL
 */
struct  _Cdb__TblIgspGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  protobuf_c_boolean has_fast_leave;
  uint32_t fast_leave;
  protobuf_c_boolean has_discard_unknown;
  uint32_t discard_unknown;
  protobuf_c_boolean has_report_suppress;
  uint32_t report_suppress;
  protobuf_c_boolean has_version;
  uint32_t version;
  protobuf_c_boolean has_querier_max_response_time;
  uint32_t querier_max_response_time;
  protobuf_c_boolean has_query_interval;
  uint32_t query_interval;
  protobuf_c_boolean has_lmqi;
  uint32_t lmqi;
  protobuf_c_boolean has_lmqc;
  uint32_t lmqc;
  protobuf_c_boolean has_robustness_var;
  uint32_t robustness_var;
  protobuf_c_boolean has_max_member_number;
  uint32_t max_member_number;
  protobuf_c_boolean has_curr_group_member;
  uint32_t curr_group_member;
  protobuf_c_boolean has_tcn_enable;
  uint32_t tcn_enable;
  protobuf_c_boolean has_tcn_query_count;
  uint32_t tcn_query_count;
  protobuf_c_boolean has_tcn_query_interval;
  uint32_t tcn_query_interval;
  protobuf_c_boolean has_tcn_query_current_count;
  uint32_t tcn_query_current_count;
  protobuf_c_boolean has_tcn_query_max_response_time;
  uint32_t tcn_query_max_response_time;
  protobuf_c_boolean has_host_join_enable;
  uint32_t host_join_enable;
  protobuf_c_boolean has_host_joined_num;
  uint32_t host_joined_num;
  Cdb__ComposeAddrIpv4T *global_src;
  Cdb__ComposeAddrIpv4T *all_hosts;
  Cdb__ComposeAddrIpv4T *all_routers;
  Cdb__ComposeAddrIpv4T *v3_routers;
};
#define CDB__TBL_IGSP_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_igsp_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL }


/*
 * TBL_IGSP_INTF
 */
struct  _Cdb__TblIgspIntfKey
{
  ProtobufCMessage base;
  uint32_t vid;
};
#define CDB__TBL_IGSP_INTF_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_igsp_intf_key__descriptor) \
    , 0 }


struct  _Cdb__TblIgspIntf
{
  ProtobufCMessage base;
  Cdb__TblIgspIntfKey *key;
  char *acl_name;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  protobuf_c_boolean has_fast_leave;
  uint32_t fast_leave;
  protobuf_c_boolean has_discard_unknown;
  uint32_t discard_unknown;
  protobuf_c_boolean has_discard_unknown_act;
  uint32_t discard_unknown_act;
  protobuf_c_boolean has_report_suppress;
  uint32_t report_suppress;
  protobuf_c_boolean has_version;
  uint32_t version;
  protobuf_c_boolean has_querier_enable;
  uint32_t querier_enable;
  protobuf_c_boolean has_querier_operate;
  uint32_t querier_operate;
  protobuf_c_boolean has_query_interval;
  uint32_t query_interval;
  protobuf_c_boolean has_admin_other_query_interval;
  uint32_t admin_other_query_interval;
  protobuf_c_boolean has_other_query_interval;
  uint32_t other_query_interval;
  protobuf_c_boolean has_querier_max_response_time;
  uint32_t querier_max_response_time;
  Cdb__ComposeAddrIpv4T *querier_config_address;
  Cdb__ComposeAddrIpv4T *querier_oper_address;
  Cdb__ComposeAddrIpv4T *other_querier_address;
  Cdb__ComposeAddrIpv4T *vlan_if_address;
  protobuf_c_boolean has_lmqi;
  uint32_t lmqi;
  protobuf_c_boolean has_lmqc;
  uint32_t lmqc;
  protobuf_c_boolean has_max_member_number;
  uint32_t max_member_number;
  protobuf_c_boolean has_curr_group_member;
  uint32_t curr_group_member;
  protobuf_c_boolean has_group_member_interval;
  uint32_t group_member_interval;
  protobuf_c_boolean has_robustness_var;
  uint32_t robustness_var;
  protobuf_c_boolean has_mrouter_aging_interval;
  uint32_t mrouter_aging_interval;
  protobuf_c_boolean has_startup_query_count;
  uint32_t startup_query_count;
};
#define CDB__TBL_IGSP_INTF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_igsp_intf__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_IGSP_GROUP
 */
struct  _Cdb__TblIgspGroup
{
  ProtobufCMessage base;
  Cdb__ComposeIgspGroupKeyT *key;
  protobuf_c_boolean has_retx_group_lmqc;
  uint32_t retx_group_lmqc;
  protobuf_c_boolean has_retx_group_source_lmqc;
  uint32_t retx_group_source_lmqc;
  protobuf_c_boolean has_liveness;
  uint32_t liveness;
  protobuf_c_boolean has_has_rx_leave;
  uint32_t has_rx_leave;
  Cdb__ComposeAddrIpv4T *last_reporter_address;
  Cdb__ComposeSalTimeT *uptime;
  Cdb__ComposeSalTimeT *update_time;
  Cdb__ComposeSalTimeT *v1_update_time;
  protobuf_c_boolean has_is_v1_host_exist;
  uint32_t is_v1_host_exist;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_inactive;
  uint32_t inactive;
  protobuf_c_boolean has_is_v3_leave;
  uint32_t is_v3_leave;
};
#define CDB__TBL_IGSP_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_igsp_group__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_AUTH_CFG
 */
struct  _Cdb__TblAuthCfg
{
  ProtobufCMessage base;
  char *secret;
  char *enc_secret;
  protobuf_c_boolean has_timeout;
  uint32_t timeout;
  protobuf_c_boolean has_retries;
  uint32_t retries;
  protobuf_c_boolean has_deadtime;
  uint32_t deadtime;
};
#define CDB__TBL_AUTH_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_auth_cfg__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_AUTH_SERVER
 */
struct  _Cdb__TblAuthServer
{
  ProtobufCMessage base;
  Cdb__ComposeAuthServerKeyT *key;
  char *secret;
  char *enc_secret;
  protobuf_c_boolean has_port;
  uint32_t port;
  protobuf_c_boolean has_timeout;
  uint32_t timeout;
  protobuf_c_boolean has_retries;
  uint32_t retries;
  protobuf_c_boolean has_dead;
  uint32_t dead;
  protobuf_c_boolean has_is_inband;
  uint32_t is_inband;
  protobuf_c_boolean has_reawake_time;
  uint32_t reawake_time;
};
#define CDB__TBL_AUTH_SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_auth_server__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_AUTH_SESSION
 */
struct  _Cdb__TblAuthSession
{
  ProtobufCMessage base;
  Cdb__ComposeAuthSessionKeyT *key;
  Cdb__ComposeUserT *user;
  char *passwd;
  protobuf_c_boolean has_status;
  uint32_t status;
  protobuf_c_boolean has_authenticator;
  ProtobufCBinaryData authenticator;
  protobuf_c_boolean has_oauthenticator;
  ProtobufCBinaryData oauthenticator;
  protobuf_c_boolean has_dot1x_mac_ifindex;
  uint32_t dot1x_mac_ifindex;
  Cdb__ComposeMacAddrT *dot1x_mac_addr;
  protobuf_c_boolean has_is_auth_bypass;
  uint32_t is_auth_bypass;
  protobuf_c_boolean has_author_start;
  uint32_t author_start;
  protobuf_c_boolean has_acct_start;
  uint32_t acct_start;
  protobuf_c_boolean has_acct_stop;
  uint32_t acct_stop;
  protobuf_c_boolean has_acctcmd_start;
  uint32_t acctcmd_start;
  protobuf_c_boolean has_next_acct_stop;
  uint32_t next_acct_stop;
};
#define CDB__TBL_AUTH_SESSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_auth_session__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_AUTHD_DEBUG
 */
struct  _Cdb__TblAuthdDebug
{
  ProtobufCMessage base;
  protobuf_c_boolean has_auth_event;
  uint32_t auth_event;
  protobuf_c_boolean has_auth_packet;
  uint32_t auth_packet;
  protobuf_c_boolean has_auth_protocol;
  uint32_t auth_protocol;
  protobuf_c_boolean has_auth_timer;
  uint32_t auth_timer;
};
#define CDB__TBL_AUTHD_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_authd_debug__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_DOT1X_GLOBAL
 */
struct  _Cdb__TblDot1xGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_global_auth_enable;
  uint32_t global_auth_enable;
  Cdb__ComposeMacAddrT *eapol_group_address;
  protobuf_c_boolean has_radius_default_retry;
  uint32_t radius_default_retry;
  protobuf_c_boolean has_radius_default_timeout;
  uint32_t radius_default_timeout;
  protobuf_c_boolean has_radius_default_deadtime;
  uint32_t radius_default_deadtime;
  protobuf_c_boolean has_mac_user_count_max;
  uint32_t mac_user_count_max;
  protobuf_c_boolean has_mac_user_count_current;
  uint32_t mac_user_count_current;
  protobuf_c_boolean has_mac_user_count_db;
  uint32_t mac_user_count_db;
  protobuf_c_boolean has_mac_port_count_current;
  uint32_t mac_port_count_current;
  protobuf_c_boolean has_radius_default_shared_secret_valid;
  uint32_t radius_default_shared_secret_valid;
  protobuf_c_boolean has_radius_default_shared_secret;
  ProtobufCBinaryData radius_default_shared_secret;
  char *radius_default_shared_enc_secret;
  protobuf_c_boolean has_last_session_id;
  uint32_t last_session_id;
  protobuf_c_boolean has_session_id_allocated;
  ProtobufCBinaryData session_id_allocated;
  protobuf_c_boolean has_dot1x_all;
  uint32_t dot1x_all;
  protobuf_c_boolean has_dot1x_packet;
  uint32_t dot1x_packet;
  protobuf_c_boolean has_dot1x_timer;
  uint32_t dot1x_timer;
  protobuf_c_boolean has_dot1x_protocol;
  uint32_t dot1x_protocol;
  protobuf_c_boolean has_dot1x_event;
  uint32_t dot1x_event;
};
#define CDB__TBL_DOT1X_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dot1x_global__descriptor) \
    , 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, NULL, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_DOT1X_PORT
 */
struct  _Cdb__TblDot1xPortKey
{
  ProtobufCMessage base;
  uint32_t ifindex;
};
#define CDB__TBL_DOT1X_PORT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dot1x_port_key__descriptor) \
    , 0 }


struct  _Cdb__TblDot1xPort
{
  ProtobufCMessage base;
  Cdb__TblDot1xPortKey *key;
  protobuf_c_boolean has_radius_msg_id;
  uint32_t radius_msg_id;
  protobuf_c_boolean has_retry;
  uint32_t retry;
  protobuf_c_boolean has_sessiontype;
  uint32_t sessiontype;
  char *name;
  protobuf_c_boolean has_buf;
  ProtobufCBinaryData buf;
  Cdb__ComposeMacAddrT *dest_mac;
  Cdb__ComposeMacAddrT *src_mac;
  protobuf_c_boolean has_user_name;
  ProtobufCBinaryData user_name;
  protobuf_c_boolean has_authcontrolledportcontrol;
  uint32_t authcontrolledportcontrol;
  protobuf_c_boolean has_protocol_version;
  uint32_t protocol_version;
  protobuf_c_boolean has_guest_vlan_valid;
  uint32_t guest_vlan_valid;
  protobuf_c_boolean has_guest_vlan;
  uint32_t guest_vlan;
  protobuf_c_boolean has_current_user;
  uint32_t current_user;
  protobuf_c_boolean has_current_user_count_db;
  uint32_t current_user_count_db;
  protobuf_c_boolean has_max_user;
  uint32_t max_user;
  protobuf_c_boolean has_auth_mode;
  uint32_t auth_mode;
  protobuf_c_boolean has_mac_auth_bypass;
  uint32_t mac_auth_bypass;
  protobuf_c_boolean has_share_reauth;
  uint32_t share_reauth;
  protobuf_c_boolean has_authwhile;
  uint32_t authwhile;
  protobuf_c_boolean has_awhile;
  uint32_t awhile;
  protobuf_c_boolean has_quietwhile;
  uint32_t quietwhile;
  protobuf_c_boolean has_reauthwhen;
  uint32_t reauthwhen;
  protobuf_c_boolean has_txwhen;
  uint32_t txwhen;
  protobuf_c_boolean has_authabort;
  uint32_t authabort;
  protobuf_c_boolean has_authfail;
  uint32_t authfail;
  protobuf_c_boolean has_authstart;
  uint32_t authstart;
  protobuf_c_boolean has_authtimeout;
  uint32_t authtimeout;
  protobuf_c_boolean has_authsuccess;
  uint32_t authsuccess;
  protobuf_c_boolean has_initialize;
  uint32_t initialize;
  protobuf_c_boolean has_portenabled;
  uint32_t portenabled;
  protobuf_c_boolean has_reauthenticate;
  uint32_t reauthenticate;
  protobuf_c_boolean has_eapnoreq;
  uint32_t eapnoreq;
  protobuf_c_boolean has_eaprestart;
  uint32_t eaprestart;
  protobuf_c_boolean has_eapresp;
  uint32_t eapresp;
  protobuf_c_boolean has_eapreq;
  uint32_t eapreq;
  protobuf_c_boolean has_eapsuccess;
  uint32_t eapsuccess;
  protobuf_c_boolean has_eapfail;
  uint32_t eapfail;
  protobuf_c_boolean has_retransmit;
  uint32_t retransmit;
  protobuf_c_boolean has_currentid;
  uint32_t currentid;
  protobuf_c_boolean has_portcontrol;
  uint32_t portcontrol;
  protobuf_c_boolean has_portstatus;
  uint32_t portstatus;
  protobuf_c_boolean has_auth_pae_eaplogoff;
  uint32_t auth_pae_eaplogoff;
  protobuf_c_boolean has_auth_pae_eapstart;
  uint32_t auth_pae_eapstart;
  protobuf_c_boolean has_auth_pae_portmode;
  uint32_t auth_pae_portmode;
  protobuf_c_boolean has_auth_pae_reauthcount;
  uint32_t auth_pae_reauthcount;
  protobuf_c_boolean has_auth_pae_rxrespid;
  uint32_t auth_pae_rxrespid;
  protobuf_c_boolean has_auth_pae_state;
  uint32_t auth_pae_state;
  protobuf_c_boolean has_auth_pae_quietperiod;
  uint32_t auth_pae_quietperiod;
  protobuf_c_boolean has_auth_pae_reauthmax;
  uint32_t auth_pae_reauthmax;
  protobuf_c_boolean has_auth_pae_txperiod;
  uint32_t auth_pae_txperiod;
  protobuf_c_boolean has_auth_pae_enter_connecting;
  uint32_t auth_pae_enter_connecting;
  protobuf_c_boolean has_auth_pae_eaplogoff_while_connecting;
  uint32_t auth_pae_eaplogoff_while_connecting;
  protobuf_c_boolean has_auth_pae_enter_authenticating;
  uint32_t auth_pae_enter_authenticating;
  protobuf_c_boolean has_auth_pae_success_while_authenticating;
  uint32_t auth_pae_success_while_authenticating;
  protobuf_c_boolean has_auth_pae_timeout_while_authenticating;
  uint32_t auth_pae_timeout_while_authenticating;
  protobuf_c_boolean has_auth_pae_fail_while_authenticating;
  uint32_t auth_pae_fail_while_authenticating;
  protobuf_c_boolean has_auth_pae_eapstart_while_authenticating;
  uint32_t auth_pae_eapstart_while_authenticating;
  protobuf_c_boolean has_auth_pae_eaplogoff_while_authenticating;
  uint32_t auth_pae_eaplogoff_while_authenticating;
  protobuf_c_boolean has_auth_pae_reauths_while_authenticated;
  uint32_t auth_pae_reauths_while_authenticated;
  protobuf_c_boolean has_auth_pae_eapstart_while_authenticated;
  uint32_t auth_pae_eapstart_while_authenticated;
  protobuf_c_boolean has_auth_pae_eaplogoff_while_authenticated;
  uint32_t auth_pae_eaplogoff_while_authenticated;
  protobuf_c_boolean has_auth_pae_reauths_while_authenticating;
  uint32_t auth_pae_reauths_while_authenticating;
  protobuf_c_boolean has_auth_key_xmit_keyavailable;
  uint32_t auth_key_xmit_keyavailable;
  protobuf_c_boolean has_auth_key_xmit_keytxenabled;
  uint32_t auth_key_xmit_keytxenabled;
  protobuf_c_boolean has_auth_key_xmit_keyrun;
  uint32_t auth_key_xmit_keyrun;
  protobuf_c_boolean has_auth_key_xmit_keydone;
  uint32_t auth_key_xmit_keydone;
  protobuf_c_boolean has_auth_key_xmit_state;
  uint32_t auth_key_xmit_state;
  protobuf_c_boolean has_reauthperiod;
  uint32_t reauthperiod;
  protobuf_c_boolean has_reauthenabled;
  uint32_t reauthenabled;
  protobuf_c_boolean has_auth_be_state;
  uint32_t auth_be_state;
  protobuf_c_boolean has_auth_be_reqcount;
  uint32_t auth_be_reqcount;
  protobuf_c_boolean has_auth_be_idfromserver;
  uint32_t auth_be_idfromserver;
  protobuf_c_boolean has_auth_be_supptimeout;
  uint32_t auth_be_supptimeout;
  protobuf_c_boolean has_auth_be_servertimeout;
  uint32_t auth_be_servertimeout;
  protobuf_c_boolean has_auth_be_maxreq;
  uint32_t auth_be_maxreq;
  protobuf_c_boolean has_auth_be_backend_responses;
  uint32_t auth_be_backend_responses;
  protobuf_c_boolean has_auth_be_backend_access_challenges;
  uint32_t auth_be_backend_access_challenges;
  protobuf_c_boolean has_auth_be_backend_otherrequest_to_supplicant;
  uint32_t auth_be_backend_otherrequest_to_supplicant;
  protobuf_c_boolean has_auth_be_backend_auth_success;
  uint32_t auth_be_backend_auth_success;
  protobuf_c_boolean has_auth_be_backend_auth_fails;
  uint32_t auth_be_backend_auth_fails;
  protobuf_c_boolean has_auth_be_backend_nonnak_responses_from_supplicant;
  uint32_t auth_be_backend_nonnak_responses_from_supplicant;
  protobuf_c_boolean has_auth_ctrl_dir_state;
  uint32_t auth_ctrl_dir_state;
  protobuf_c_boolean has_auth_ctrl_dir_admincontrolleddirections;
  uint32_t auth_ctrl_dir_admincontrolleddirections;
  protobuf_c_boolean has_auth_ctrl_dir_opercontrolleddirections;
  uint32_t auth_ctrl_dir_opercontrolleddirections;
  protobuf_c_boolean has_auth_ctrl_dir_bridgedetected;
  uint32_t auth_ctrl_dir_bridgedetected;
  protobuf_c_boolean has_auth_key_recv_rxkey;
  uint32_t auth_key_recv_rxkey;
  protobuf_c_boolean has_eapol_frames_rx;
  uint32_t eapol_frames_rx;
  protobuf_c_boolean has_eapol_frames_tx;
  uint32_t eapol_frames_tx;
  protobuf_c_boolean has_eapol_start_frames_rx;
  uint32_t eapol_start_frames_rx;
  protobuf_c_boolean has_eapol_logoff_frames_rx;
  uint32_t eapol_logoff_frames_rx;
  protobuf_c_boolean has_eap_respid_frames_rx;
  uint32_t eap_respid_frames_rx;
  protobuf_c_boolean has_eap_resp_frames_rx;
  uint32_t eap_resp_frames_rx;
  protobuf_c_boolean has_eap_reqid_frames_tx;
  uint32_t eap_reqid_frames_tx;
  protobuf_c_boolean has_eap_req_frames_tx;
  uint32_t eap_req_frames_tx;
  protobuf_c_boolean has_eapol_invalid_frames_rx;
  uint32_t eapol_invalid_frames_rx;
  protobuf_c_boolean has_eap_len_error_frames_rx;
  uint32_t eap_len_error_frames_rx;
  protobuf_c_boolean has_eapol_last_frame_version;
  uint32_t eapol_last_frame_version;
  protobuf_c_boolean has_eapol_last_frame_source;
  ProtobufCBinaryData eapol_last_frame_source;
  protobuf_c_boolean has_session_time;
  uint32_t session_time;
  protobuf_c_boolean has_session_authentication_method;
  uint32_t session_authentication_method;
  protobuf_c_boolean has_session_terminate_cause;
  uint32_t session_terminate_cause;
  protobuf_c_boolean has_session_user_name;
  ProtobufCBinaryData session_user_name;
  protobuf_c_boolean has_class_id;
  uint32_t class_id;
};
#define CDB__TBL_DOT1X_PORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dot1x_port__descriptor) \
    , NULL, 0,0, 0,0, 0,0, NULL, 0,{0,NULL}, NULL, NULL, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0 }


/*
 * TBL_DOT1X_RADIUS
 */
struct  _Cdb__TblDot1xRadius
{
  ProtobufCMessage base;
  Cdb__ComposeDot1xRadiusKeyT *key;
  protobuf_c_boolean has_identifier;
  uint32_t identifier;
  protobuf_c_boolean has_server_string;
  ProtobufCBinaryData server_string;
  Cdb__ComposeAddrIpv4T *server_addr;
  protobuf_c_boolean has_radius_state_len;
  uint32_t radius_state_len;
  protobuf_c_boolean has_radius_state;
  ProtobufCBinaryData radius_state;
  protobuf_c_boolean has_max_retry;
  uint32_t max_retry;
  protobuf_c_boolean has_radius_defalt_timeout;
  uint32_t radius_defalt_timeout;
  protobuf_c_boolean has_radius_defalt_retransmit;
  uint32_t radius_defalt_retransmit;
  protobuf_c_boolean has_radius_defalt_key;
  uint32_t radius_defalt_key;
  protobuf_c_boolean has_timeout;
  uint32_t timeout;
  protobuf_c_boolean has_shared_secret_valid;
  uint32_t shared_secret_valid;
  protobuf_c_boolean has_shared_secret;
  ProtobufCBinaryData shared_secret;
  char *shared_enc_secret;
  protobuf_c_boolean has_authenticator;
  ProtobufCBinaryData authenticator;
  protobuf_c_boolean has_oauthenticator;
  ProtobufCBinaryData oauthenticator;
  protobuf_c_boolean has_session_number;
  uint32_t session_number;
  size_t n_session_ifindex;
  uint32_t *session_ifindex;
  protobuf_c_boolean has_reactivate;
  uint32_t reactivate;
  protobuf_c_boolean has_is_inband;
  uint32_t is_inband;
};
#define CDB__TBL_DOT1X_RADIUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dot1x_radius__descriptor) \
    , NULL, 0,0, 0,{0,NULL}, NULL, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, NULL, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,NULL, 0,0, 0,0 }


/*
 * TBL_DOT1X_MAC
 */
struct  _Cdb__TblDot1xMac
{
  ProtobufCMessage base;
  Cdb__ComposeDot1xMacKeyT *key;
  protobuf_c_boolean has_user_name;
  ProtobufCBinaryData user_name;
  protobuf_c_boolean has_session_id;
  uint32_t session_id;
  protobuf_c_boolean has_entry_id;
  uint32_t entry_id;
  protobuf_c_boolean has_is_auth_bypass;
  uint32_t is_auth_bypass;
  protobuf_c_boolean has_auth_mac_reject;
  uint32_t auth_mac_reject;
  protobuf_c_boolean has_auth_mac_accept;
  uint32_t auth_mac_accept;
  protobuf_c_boolean has_auth_mac_bypass;
  uint32_t auth_mac_bypass;
  protobuf_c_boolean has_auth_mac_reauth_accept;
  uint32_t auth_mac_reauth_accept;
  protobuf_c_boolean has_auth_mac_eapol_reauth;
  uint32_t auth_mac_eapol_reauth;
};
#define CDB__TBL_DOT1X_MAC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dot1x_mac__descriptor) \
    , NULL, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_ENABLE
 */
struct  _Cdb__TblEnableKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_ENABLE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_enable_key__descriptor) \
    , 0 }


struct  _Cdb__TblEnable
{
  ProtobufCMessage base;
  Cdb__TblEnableKey *key;
  char *enc_passwd;
  char *passwd;
};
#define CDB__TBL_ENABLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_enable__descriptor) \
    , NULL, NULL, NULL }


/*
 * TBL_CHIP
 */
struct  _Cdb__TblChip
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  uint32_t type;
};
#define CDB__TBL_CHIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_chip__descriptor) \
    , 0,0 }


/*
 * TBL_CLEAR_ACL_POLICY
 */
struct  _Cdb__TblClearAclPolicy
{
  ProtobufCMessage base;
  protobuf_c_boolean has_counter_id;
  uint64_t counter_id;
  protobuf_c_boolean has_acl_id;
  uint64_t acl_id;
};
#define CDB__TBL_CLEAR_ACL_POLICY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_clear_acl_policy__descriptor) \
    , 0,0, 0,0 }


/*
 * TBL_AUTHOR
 */
struct  _Cdb__TblAuthorKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_AUTHOR_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_author_key__descriptor) \
    , NULL }


struct  _Cdb__TblAuthor
{
  ProtobufCMessage base;
  Cdb__TblAuthorKey *key;
  char *methods;
};
#define CDB__TBL_AUTHOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_author__descriptor) \
    , NULL, NULL }


/*
 * TBL_ACCOUNT
 */
struct  _Cdb__TblAccountKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_ACCOUNT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_account_key__descriptor) \
    , NULL }


struct  _Cdb__TblAccount
{
  ProtobufCMessage base;
  Cdb__TblAccountKey *key;
  protobuf_c_boolean has_start_stop;
  uint32_t start_stop;
  protobuf_c_boolean has_stop_only;
  uint32_t stop_only;
  char *methods;
};
#define CDB__TBL_ACCOUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_account__descriptor) \
    , NULL, 0,0, 0,0, NULL }


/*
 * TBL_ACCOUNTCMD
 */
struct  _Cdb__TblAccountcmdKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_ACCOUNTCMD_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_accountcmd_key__descriptor) \
    , NULL }


struct  _Cdb__TblAccountcmd
{
  ProtobufCMessage base;
  Cdb__TblAccountcmdKey *key;
  char *methods;
};
#define CDB__TBL_ACCOUNTCMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_accountcmd__descriptor) \
    , NULL, NULL }


/*
 * TBL_VLANCLASS_RULE
 */
struct  _Cdb__TblVlanclassRuleKey
{
  ProtobufCMessage base;
  uint32_t rule_id;
};
#define CDB__TBL_VLANCLASS_RULE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vlanclass_rule_key__descriptor) \
    , 0 }


struct  _Cdb__TblVlanclassRule
{
  ProtobufCMessage base;
  Cdb__TblVlanclassRuleKey *key;
  protobuf_c_boolean has_rule_type;
  uint32_t rule_type;
  protobuf_c_boolean has_vlan_id;
  uint32_t vlan_id;
  Cdb__ComposeMacAddrT *mac;
  Cdb__ComposeAddrT *ip_address;
  protobuf_c_boolean has_protocol_type;
  uint32_t protocol_type;
  protobuf_c_boolean has_protocol_action;
  uint32_t protocol_action;
  protobuf_c_boolean has_rule_oid;
  uint64_t rule_oid;
};
#define CDB__TBL_VLANCLASS_RULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vlanclass_rule__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_VLANCLASS_GROUP
 */
struct  _Cdb__TblVlanclassGroupKey
{
  ProtobufCMessage base;
  uint32_t group_id;
};
#define CDB__TBL_VLANCLASS_GROUP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vlanclass_group_key__descriptor) \
    , 0 }


struct  _Cdb__TblVlanclassGroup
{
  ProtobufCMessage base;
  Cdb__TblVlanclassGroupKey *key;
  protobuf_c_boolean has_rule_id;
  ProtobufCBinaryData rule_id;
  protobuf_c_boolean has_action_rule_id;
  uint64_t action_rule_id;
  protobuf_c_boolean has_group_oid;
  uint64_t group_oid;
};
#define CDB__TBL_VLANCLASS_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vlanclass_group__descriptor) \
    , NULL, 0,{0,NULL}, 0,0, 0,0 }


/*
 * TBL_ACL_L4_PORT_RANGE
 */
struct  _Cdb__TblAclL4PortRangeKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_ACL_L4_PORT_RANGE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_l4_port_range_key__descriptor) \
    , 0 }


struct  _Cdb__TblAclL4PortRange
{
  ProtobufCMessage base;
  Cdb__TblAclL4PortRangeKey *key;
  protobuf_c_boolean has_port_min;
  uint32_t port_min;
  protobuf_c_boolean has_port_max;
  uint32_t port_max;
  protobuf_c_boolean has_cnt;
  uint32_t cnt;
  protobuf_c_boolean has_is_src;
  uint32_t is_src;
};
#define CDB__TBL_ACL_L4_PORT_RANGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_l4_port_range__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_ACL_UDF_GROUP
 */
struct  _Cdb__TblAclUdfGroupKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_ACL_UDF_GROUP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_udf_group_key__descriptor) \
    , 0 }


struct  _Cdb__TblAclUdfGroup
{
  ProtobufCMessage base;
  Cdb__TblAclUdfGroupKey *key;
  protobuf_c_boolean has_group_type;
  uint32_t group_type;
  protobuf_c_boolean has_ip_version;
  uint32_t ip_version;
  protobuf_c_boolean has_l3_protocol;
  uint32_t l3_protocol;
  protobuf_c_boolean has_offset;
  uint32_t offset;
  protobuf_c_boolean has_udf_match_oid;
  uint64_t udf_match_oid;
  protobuf_c_boolean has_udf_oid;
  uint64_t udf_oid;
  protobuf_c_boolean has_udf_group_oid;
  uint64_t udf_group_oid;
  protobuf_c_boolean has_cnt;
  uint32_t cnt;
};
#define CDB__TBL_ACL_UDF_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_udf_group__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_ACL_UDF_ENTRY
 */
struct  _Cdb__TblAclUdfEntryKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_ACL_UDF_ENTRY_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_udf_entry_key__descriptor) \
    , 0 }


struct  _Cdb__TblAclUdfEntry
{
  ProtobufCMessage base;
  Cdb__TblAclUdfEntryKey *key;
  protobuf_c_boolean has_acl_ref_cnt;
  uint32_t acl_ref_cnt;
  protobuf_c_boolean has_priority;
  uint32_t priority;
  protobuf_c_boolean has_offset_type;
  uint32_t offset_type;
  protobuf_c_boolean has_offset_num;
  uint32_t offset_num;
  protobuf_c_boolean has_valid;
  ProtobufCBinaryData valid;
  protobuf_c_boolean has_offset;
  ProtobufCBinaryData offset;
  protobuf_c_boolean has_key_flags;
  uint32_t key_flags;
  protobuf_c_boolean has_ethtype;
  uint32_t ethtype;
  protobuf_c_boolean has_ethtype_mask;
  uint32_t ethtype_mask;
  protobuf_c_boolean has_vlannum;
  uint32_t vlannum;
  protobuf_c_boolean has_vlannum_mask;
  uint32_t vlannum_mask;
  protobuf_c_boolean has_ipproto;
  uint32_t ipproto;
  protobuf_c_boolean has_ipproto_mask;
  uint32_t ipproto_mask;
  protobuf_c_boolean has_l4_type;
  uint32_t l4_type;
  protobuf_c_boolean has_l4_type_mask;
  uint32_t l4_type_mask;
  protobuf_c_boolean has_srcport;
  uint32_t srcport;
  protobuf_c_boolean has_srcport_mask;
  uint32_t srcport_mask;
  protobuf_c_boolean has_dstport;
  uint32_t dstport;
  protobuf_c_boolean has_dstport_mask;
  uint32_t dstport_mask;
  protobuf_c_boolean has_mplsnum;
  uint32_t mplsnum;
  protobuf_c_boolean has_mplsnum_mask;
  uint32_t mplsnum_mask;
};
#define CDB__TBL_ACL_UDF_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_acl_udf_entry__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_FEA_PCAP
 */
struct  _Cdb__TblFeaPcap
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tx_en;
  uint32_t tx_en;
  protobuf_c_boolean has_rx_en;
  uint32_t rx_en;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
};
#define CDB__TBL_FEA_PCAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_pcap__descriptor) \
    , 0,0, 0,0, 0,0 }


/*
 * TBL_CONTROLLER
 */
struct  _Cdb__TblControllerKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_CONTROLLER_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_controller_key__descriptor) \
    , NULL }


struct  _Cdb__TblController
{
  ProtobufCMessage base;
  Cdb__TblControllerKey *key;
  Cdb__ComposeAddrIpv4T *ip;
  protobuf_c_boolean has_port;
  uint32_t port;
};
#define CDB__TBL_CONTROLLER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_controller__descriptor) \
    , NULL, NULL, 0,0 }


/*
 * TBL_CPU_PACKETS
 */
struct  _Cdb__TblCpuPackets
{
  ProtobufCMessage base;
  protobuf_c_boolean has_total;
  uint64_t total;
  protobuf_c_boolean has_rx;
  uint64_t rx;
  protobuf_c_boolean has_tx;
  uint64_t tx;
  protobuf_c_boolean has_rx_bpdu;
  uint64_t rx_bpdu;
  protobuf_c_boolean has_rx_slow_proto;
  uint64_t rx_slow_proto;
  protobuf_c_boolean has_rx_eapol;
  uint64_t rx_eapol;
  protobuf_c_boolean has_rx_lldp;
  uint64_t rx_lldp;
  protobuf_c_boolean has_rx_erps;
  uint64_t rx_erps;
  protobuf_c_boolean has_rx_macda;
  uint64_t rx_macda;
  protobuf_c_boolean has_rx_rip;
  uint64_t rx_rip;
  protobuf_c_boolean has_rx_ospf;
  uint64_t rx_ospf;
  protobuf_c_boolean has_rx_bgp;
  uint64_t rx_bgp;
  protobuf_c_boolean has_rx_arp;
  uint64_t rx_arp;
  protobuf_c_boolean has_rx_dhcp;
  uint64_t rx_dhcp;
  protobuf_c_boolean has_rx_ipda;
  uint64_t rx_ipda;
  protobuf_c_boolean has_rx_igmp;
  uint64_t rx_igmp;
  protobuf_c_boolean has_rx_mac_limit;
  uint64_t rx_mac_limit;
  protobuf_c_boolean has_rx_mac_mismatch;
  uint64_t rx_mac_mismatch;
  protobuf_c_boolean has_rx_l3copy_cpu;
  uint64_t rx_l3copy_cpu;
  protobuf_c_boolean has_rx_ttl_error;
  uint64_t rx_ttl_error;
  protobuf_c_boolean has_rx_ptp;
  uint64_t rx_ptp;
  protobuf_c_boolean has_rx_tpoam;
  uint64_t rx_tpoam;
  protobuf_c_boolean has_rx_l2pro_protocol_mac;
  uint64_t rx_l2pro_protocol_mac;
  protobuf_c_boolean has_rx_l2pro_group_mac;
  uint64_t rx_l2pro_group_mac;
  protobuf_c_boolean has_rx_cpu_mirror;
  uint64_t rx_cpu_mirror;
  protobuf_c_boolean has_rx_nd;
  uint64_t rx_nd;
  protobuf_c_boolean has_rx_packetin;
  uint64_t rx_packetin;
  protobuf_c_boolean has_rx_mtu_fail;
  uint64_t rx_mtu_fail;
  protobuf_c_boolean has_rx_g8032;
  uint64_t rx_g8032;
  protobuf_c_boolean has_rx_other;
  uint64_t rx_other;
  protobuf_c_boolean has_tx_igmp;
  uint64_t tx_igmp;
  protobuf_c_boolean has_tx_bpdu;
  uint64_t tx_bpdu;
  protobuf_c_boolean has_tx_slow_proto;
  uint64_t tx_slow_proto;
  protobuf_c_boolean has_tx_arp;
  uint64_t tx_arp;
  protobuf_c_boolean has_tx_dhcp;
  uint64_t tx_dhcp;
  protobuf_c_boolean has_tx_lldp;
  uint64_t tx_lldp;
  protobuf_c_boolean has_tx_erps;
  uint64_t tx_erps;
  protobuf_c_boolean has_tx_eapol;
  uint64_t tx_eapol;
  protobuf_c_boolean has_tx_ptp;
  uint64_t tx_ptp;
  protobuf_c_boolean has_tx_tpoam;
  uint64_t tx_tpoam;
  protobuf_c_boolean has_tx_l2pro_protocol_mac;
  uint64_t tx_l2pro_protocol_mac;
  protobuf_c_boolean has_tx_l2pro_group_mac;
  uint64_t tx_l2pro_group_mac;
  protobuf_c_boolean has_tx_cpu_mirror;
  uint64_t tx_cpu_mirror;
  protobuf_c_boolean has_tx_nd;
  uint64_t tx_nd;
  protobuf_c_boolean has_tx_g8032;
  uint64_t tx_g8032;
  protobuf_c_boolean has_tx_other;
  uint64_t tx_other;
};
#define CDB__TBL_CPU_PACKETS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cpu_packets__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_NS_ROUTE
 */
struct  _Cdb__TblNsRoute
{
  ProtobufCMessage base;
  Cdb__ComposeNsRouteKeyT *key;
  protobuf_c_boolean has_flag;
  uint32_t flag;
  protobuf_c_boolean has_is_inband;
  uint32_t is_inband;
  char *ifname;
  protobuf_c_boolean has_cnt;
  int32_t cnt;
};
#define CDB__TBL_NS_ROUTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ns_route__descriptor) \
    , NULL, 0,0, 0,0, NULL, 0,0 }


/*
 * TBL_NS_ROUTE_IP
 */
struct  _Cdb__TblNsRouteIpKey
{
  ProtobufCMessage base;
  Cdb__ComposeAddrT *ip;
};
#define CDB__TBL_NS_ROUTE_IP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ns_route_ip_key__descriptor) \
    , NULL }


struct  _Cdb__TblNsRouteIp
{
  ProtobufCMessage base;
  Cdb__TblNsRouteIpKey *key;
  protobuf_c_boolean has_is_inband;
  uint32_t is_inband;
  protobuf_c_boolean has_cnt;
  int32_t cnt;
};
#define CDB__TBL_NS_ROUTE_IP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ns_route_ip__descriptor) \
    , NULL, 0,0, 0,0 }


/*
 * TBL_OPENFLOW_INTERFACE
 */
struct  _Cdb__TblOpenflowInterfaceKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_OPENFLOW_INTERFACE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_openflow_interface_key__descriptor) \
    , NULL }


struct  _Cdb__TblOpenflowInterface
{
  ProtobufCMessage base;
  Cdb__TblOpenflowInterfaceKey *key;
  protobuf_c_boolean has_openflow_enable;
  uint32_t openflow_enable;
  protobuf_c_boolean has_obey_vlan_filter;
  uint32_t obey_vlan_filter;
  protobuf_c_boolean has_openflow_instance_enable;
  uint32_t openflow_instance_enable;
  protobuf_c_boolean has_is_add_to_br0;
  uint32_t is_add_to_br0;
  size_t n_protected_vlan;
  uint32_t *protected_vlan;
  protobuf_c_boolean has_protected_vlan_change;
  uint32_t protected_vlan_change;
  protobuf_c_boolean has_protected_vlan_change_is_set;
  uint32_t protected_vlan_change_is_set;
  size_t n_action;
  uint32_t *action;
  protobuf_c_boolean has_ingress_add_native_vlan_enable;
  uint32_t ingress_add_native_vlan_enable;
  protobuf_c_boolean has_egress_remove_native_vlan_enable;
  uint32_t egress_remove_native_vlan_enable;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_bind_tunnel_type;
  uint32_t bind_tunnel_type;
  protobuf_c_boolean has_bind_tunnel_cnt;
  uint32_t bind_tunnel_cnt;
  protobuf_c_boolean has_tunnel_mpls_disable;
  uint32_t tunnel_mpls_disable;
  protobuf_c_boolean has_is_bind_tunnel;
  uint32_t is_bind_tunnel;
};
#define CDB__TBL_OPENFLOW_INTERFACE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_openflow_interface__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,0, 0,0, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_OPENFLOW_MANAGER
 */
struct  _Cdb__TblOpenflowManager
{
  ProtobufCMessage base;
  Cdb__ComposeOpenflowManagerKeyT *key;
  protobuf_c_boolean has_mode;
  uint32_t mode;
  protobuf_c_boolean has_is_inband;
  uint32_t is_inband;
};
#define CDB__TBL_OPENFLOW_MANAGER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_openflow_manager__descriptor) \
    , NULL, 0,0, 0,0 }


/*
 * TBL_PTP_GLOBAL
 */
struct  _Cdb__TblPtpGlobal
{
  ProtobufCMessage base;
  Cdb__ComposePtpDefaultT *default_ds;
  Cdb__ComposePtpCurrentT *current_ds;
  Cdb__ComposePtpParentT *parent_ds;
  Cdb__ComposePtpTimePropertiesT *time_prop_ds;
  Cdb__ComposePtpTimePropertiesT *time_prop_intern;
  protobuf_c_boolean has_device_type;
  uint32_t device_type;
  protobuf_c_boolean has_global_enable;
  uint32_t global_enable;
  protobuf_c_boolean has_master_min_delay_req_interval;
  int32_t master_min_delay_req_interval;
  Cdb__ComposePtpGlobalCT *c;
  char *current_slave_port;
  protobuf_c_boolean has_set_system_time;
  uint32_t set_system_time;
  protobuf_c_boolean has_masterchangetrap;
  uint32_t masterchangetrap;
  protobuf_c_boolean has_statechangetrap;
  uint32_t statechangetrap;
  protobuf_c_boolean has_accuracychange;
  uint32_t accuracychange;
  protobuf_c_boolean has_glb_enable_hw_msec_time;
  uint64_t glb_enable_hw_msec_time;
  protobuf_c_boolean has_glb_enable_pf_msec_time;
  uint64_t glb_enable_pf_msec_time;
  protobuf_c_boolean has_total_offset;
  int64_t total_offset;
  protobuf_c_boolean has_hsrv_adjust_offset;
  int64_t hsrv_adjust_offset;
  protobuf_c_boolean has_hsrv_adjust_ffo;
  int64_t hsrv_adjust_ffo;
  protobuf_c_boolean has_hsrv_update_system_time;
  int32_t hsrv_update_system_time;
  protobuf_c_boolean has_hsrv_device_type;
  uint32_t hsrv_device_type;
};
#define CDB__TBL_PTP_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ptp_global__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_PTP_PORT
 */
struct  _Cdb__TblPtpPortKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_PTP_PORT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ptp_port_key__descriptor) \
    , NULL }


struct  _Cdb__TblPtpPort
{
  ProtobufCMessage base;
  Cdb__TblPtpPortKey *key;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_hsrv_path_delay;
  int64_t hsrv_path_delay;
  Cdb__ComposePtpPortT *port_ds;
  Cdb__ComposeGlbPtpPortAddressT *port_addr;
  Cdb__ComposeGlbPtpTimeintervalT *asymmetry_correction;
  protobuf_c_boolean has_ingress_latency;
  int32_t ingress_latency;
  protobuf_c_boolean has_egress_latency;
  int32_t egress_latency;
  Cdb__ComposePtpDumpFlagT *dump_flag;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  protobuf_c_boolean has_lag_id;
  uint32_t lag_id;
  protobuf_c_boolean has_link_up;
  uint32_t link_up;
  protobuf_c_boolean has_drop_announce;
  uint32_t drop_announce;
  Cdb__ComposePtpPortStatsT *packet_stats;
  Cdb__ComposePtpVlanInfoT *vlan_info;
  protobuf_c_boolean has_recommended_state;
  uint32_t recommended_state;
  protobuf_c_boolean has_bmc_code;
  uint32_t bmc_code;
  protobuf_c_boolean has_bmc_expires;
  uint32_t bmc_expires;
  protobuf_c_boolean has_slave_change_master;
  uint32_t slave_change_master;
  protobuf_c_boolean has_synchronization_fault;
  uint32_t synchronization_fault;
  protobuf_c_boolean has_master_clock_selected;
  uint32_t master_clock_selected;
  protobuf_c_boolean has_ptp_seq_id;
  uint32_t ptp_seq_id;
  protobuf_c_boolean has_uncalibrated_update_offset_times;
  uint32_t uncalibrated_update_offset_times;
  protobuf_c_boolean has_uncalibrated_update_limit_times;
  uint32_t uncalibrated_update_limit_times;
  Cdb__ComposePtpPortPT *p;
  Cdb__ComposePtpPortCT *c;
  Cdb__ComposePtpMsgProcOpsT *msg_proc_ops;
};
#define CDB__TBL_PTP_PORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ptp_port__descriptor) \
    , NULL, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL }


/*
 * TBL_PTP_FOREIGN
 */
struct  _Cdb__TblPtpForeign
{
  ProtobufCMessage base;
  Cdb__ComposePtpForeignMasterT *key;
  protobuf_c_boolean has_foreign_master_announce_messages;
  uint32_t foreign_master_announce_messages;
  Cdb__ComposePtpCommonMessageHeaderT *header;
  Cdb__ComposePtpMsgAnnounceT *announce;
  protobuf_c_boolean has_qualified;
  uint32_t qualified;
  protobuf_c_boolean has_port_foreign_num;
  uint32_t port_foreign_num;
};
#define CDB__TBL_PTP_FOREIGN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ptp_foreign__descriptor) \
    , NULL, 0,0, NULL, NULL, 0,0, 0,0 }


/*
 * TBL_PTP_RESIDENCE_TIME_CACHE
 */
struct  _Cdb__TblPtpResidenceTimeCache
{
  ProtobufCMessage base;
  Cdb__ComposePtpResidenceTimeCacheT *key;
  protobuf_c_boolean has_sequence_id;
  uint32_t sequence_id;
  protobuf_c_boolean has_ifindex_port_ingress;
  uint32_t ifindex_port_ingress;
  protobuf_c_boolean has_domain;
  uint32_t domain;
  Cdb__ComposeGlbPtpTimeintervalT *residence_time;
  protobuf_c_boolean has_outdated;
  uint32_t outdated;
};
#define CDB__TBL_PTP_RESIDENCE_TIME_CACHE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ptp_residence_time_cache__descriptor) \
    , NULL, 0,0, 0,0, 0,0, NULL, 0,0 }


/*
 * TBL_FEA_PTP_GLOBAL
 */
struct  _Cdb__TblFeaPtpGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_global_enable;
  uint32_t global_enable;
  protobuf_c_boolean has_device_type;
  uint32_t device_type;
  protobuf_c_boolean has_retry_cnt;
  uint32_t retry_cnt;
  protobuf_c_boolean has_ready;
  uint32_t ready;
  protobuf_c_boolean has_blocked;
  uint32_t blocked;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_tx_ifindex;
  uint32_t tx_ifindex;
  protobuf_c_boolean has_tx_seq_id;
  uint32_t tx_seq_id;
  protobuf_c_boolean has_intr_count;
  uint32_t intr_count;
  protobuf_c_boolean has_acl_update_time_range;
  uint32_t acl_update_time_range;
};
#define CDB__TBL_FEA_PTP_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_ptp_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_FEA_PTP_TS
 */
struct  _Cdb__TblFeaPtpTsKey
{
  ProtobufCMessage base;
  uint32_t intr_seq_id;
};
#define CDB__TBL_FEA_PTP_TS_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_ptp_ts_key__descriptor) \
    , 0 }


struct  _Cdb__TblFeaPtpTs
{
  ProtobufCMessage base;
  Cdb__TblFeaPtpTsKey *key;
  protobuf_c_boolean has_intr_ifindex;
  uint32_t intr_ifindex;
  protobuf_c_boolean has_ns;
  uint32_t ns;
  protobuf_c_boolean has_s_lsb;
  uint32_t s_lsb;
  protobuf_c_boolean has_s_msb;
  uint32_t s_msb;
};
#define CDB__TBL_FEA_PTP_TS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_ptp_ts__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_FEA_TIME
 */
struct  _Cdb__TblFeaTime
{
  ProtobufCMessage base;
  protobuf_c_boolean has_sync_type;
  uint32_t sync_type;
  protobuf_c_boolean has_sync_count;
  uint32_t sync_count;
  Cdb__ComposeSalTimeT *last_sync_time;
};
#define CDB__TBL_FEA_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_time__descriptor) \
    , 0,0, 0,0, NULL }


/*
 * TBL_BHM_GLOBAL
 */
struct  _Cdb__TblBhmGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_hw_watchdog_fd;
  int32_t hw_watchdog_fd;
  protobuf_c_boolean has_hw_watchdog_feed_en;
  uint32_t hw_watchdog_feed_en;
  protobuf_c_boolean has_hw_watchdog_enable;
  uint32_t hw_watchdog_enable;
  protobuf_c_boolean has_sw_watchdog_enable;
  uint32_t sw_watchdog_enable;
  protobuf_c_boolean has_reactive;
  uint32_t reactive;
  protobuf_c_boolean has_is_reload;
  uint32_t is_reload;
  protobuf_c_boolean has_is_shutdown;
  uint32_t is_shutdown;
  protobuf_c_boolean has_is_warning;
  uint32_t is_warning;
  protobuf_c_boolean has_reboot;
  uint32_t reboot;
};
#define CDB__TBL_BHM_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_bhm_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_BHM_MODULE
 */
struct  _Cdb__TblBhmModuleKey
{
  ProtobufCMessage base;
  uint32_t pm_id;
};
#define CDB__TBL_BHM_MODULE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_bhm_module_key__descriptor) \
    , 0 }


struct  _Cdb__TblBhmModule
{
  ProtobufCMessage base;
  Cdb__TblBhmModuleKey *key;
  protobuf_c_boolean has_running;
  uint32_t running;
  protobuf_c_boolean has_pid;
  uint32_t pid;
  protobuf_c_boolean has_death_count;
  uint32_t death_count;
};
#define CDB__TBL_BHM_MODULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_bhm_module__descriptor) \
    , NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_OPENFLOW_TUNNEL_INTERFACE
 */
struct  _Cdb__TblOpenflowTunnelInterfaceKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_OPENFLOW_TUNNEL_INTERFACE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_openflow_tunnel_interface_key__descriptor) \
    , NULL }


struct  _Cdb__TblOpenflowTunnelInterface
{
  ProtobufCMessage base;
  Cdb__TblOpenflowTunnelInterfaceKey *key;
  protobuf_c_boolean has_openflow_enable;
  uint32_t openflow_enable;
  char *source_ip;
  char *remote_ip;
  char *bind_port_name;
  char *bind_mac;
  protobuf_c_boolean has_bind_vlan;
  uint32_t bind_vlan;
  protobuf_c_boolean has_flag;
  uint32_t flag;
  protobuf_c_boolean has_tunnel_status;
  uint32_t tunnel_status;
};
#define CDB__TBL_OPENFLOW_TUNNEL_INTERFACE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_openflow_tunnel_interface__descriptor) \
    , NULL, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_OPENFLOW_TUNNEL_LOCAL_IP_CNT
 */
struct  _Cdb__TblOpenflowTunnelLocalIpCntKey
{
  ProtobufCMessage base;
  char *local_ip;
};
#define CDB__TBL_OPENFLOW_TUNNEL_LOCAL_IP_CNT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_openflow_tunnel_local_ip_cnt_key__descriptor) \
    , NULL }


struct  _Cdb__TblOpenflowTunnelLocalIpCnt
{
  ProtobufCMessage base;
  Cdb__TblOpenflowTunnelLocalIpCntKey *key;
  protobuf_c_boolean has_local_ip_ref;
  uint32_t local_ip_ref;
};
#define CDB__TBL_OPENFLOW_TUNNEL_LOCAL_IP_CNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_openflow_tunnel_local_ip_cnt__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_INBAND_SNAT
 */
struct  _Cdb__TblInbandSnat
{
  ProtobufCMessage base;
  Cdb__ComposeInbandSnatKeyT *key;
  char *ifname;
  Cdb__ComposeAddrIpv4T *ip;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_nft_handle;
  uint32_t nft_handle;
};
#define CDB__TBL_INBAND_SNAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_inband_snat__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,0 }


/*
 * TBL_ARPINSP
 */
struct  _Cdb__TblArpinspKey
{
  ProtobufCMessage base;
  uint32_t vlan_id;
};
#define CDB__TBL_ARPINSP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_arpinsp_key__descriptor) \
    , 0 }


struct  _Cdb__TblArpinsp
{
  ProtobufCMessage base;
  Cdb__TblArpinspKey *key;
  protobuf_c_boolean has_acllog_filter;
  uint32_t acllog_filter;
  protobuf_c_boolean has_dhcplog_filter;
  uint32_t dhcplog_filter;
  protobuf_c_boolean has_filter_state;
  uint32_t filter_state;
  protobuf_c_boolean has_enable_state;
  uint32_t enable_state;
  protobuf_c_boolean has_forwarded;
  uint64_t forwarded;
  protobuf_c_boolean has_dropped;
  uint64_t dropped;
  protobuf_c_boolean has_dhcp_dropped;
  uint64_t dhcp_dropped;
  protobuf_c_boolean has_acl_dropped;
  uint64_t acl_dropped;
  protobuf_c_boolean has_dhcp_permit;
  uint64_t dhcp_permit;
  protobuf_c_boolean has_acl_permit;
  uint64_t acl_permit;
  protobuf_c_boolean has_srcmac_failure;
  uint64_t srcmac_failure;
  protobuf_c_boolean has_dstmac_failure;
  uint64_t dstmac_failure;
  protobuf_c_boolean has_ip_failure;
  uint64_t ip_failure;
  protobuf_c_boolean has_invalid_protocol;
  uint64_t invalid_protocol;
  char *filter;
};
#define CDB__TBL_ARPINSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_arpinsp__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL }


/*
 * TBL_ARPACL_CONFIG
 */
struct  _Cdb__TblArpaclConfigKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_ARPACL_CONFIG_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_arpacl_config_key__descriptor) \
    , NULL }


struct  _Cdb__TblArpaclConfig
{
  ProtobufCMessage base;
  Cdb__TblArpaclConfigKey *key;
  protobuf_c_boolean has_seq_ref;
  uint32_t seq_ref;
};
#define CDB__TBL_ARPACL_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_arpacl_config__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_ARPACE_CONFIG
 */
struct  _Cdb__TblArpaceConfig
{
  ProtobufCMessage base;
  Cdb__ComposeArpaceConfigKeyT *key;
  protobuf_c_boolean has_arp_type;
  uint32_t arp_type;
  Cdb__ComposeMacAddrT *src_mac;
  Cdb__ComposeMacAddrT *src_mac_mask;
  Cdb__ComposeAddrIpv4T *src_ip;
  Cdb__ComposeAddrIpv4T *src_ip_mask;
  protobuf_c_boolean has_arp_deny;
  uint32_t arp_deny;
  protobuf_c_boolean has_arp_log;
  uint32_t arp_log;
};
#define CDB__TBL_ARPACE_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_arpace_config__descriptor) \
    , NULL, 0,0, NULL, NULL, NULL, NULL, 0,0, 0,0 }


/*
 * TBL_COPP_CFG
 */
struct  _Cdb__TblCoppCfg
{
  ProtobufCMessage base;
  char *copp_pname;
  protobuf_c_boolean has_copp_ifidx;
  uint32_t copp_ifidx;
  protobuf_c_boolean has_copp_total_rate;
  uint32_t copp_total_rate;
};
#define CDB__TBL_COPP_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_copp_cfg__descriptor) \
    , NULL, 0,0, 0,0 }


/*
 * TBL_FEA_COPP_TRAP_GROUP
 */
struct  _Cdb__TblFeaCoppTrapGroupKey
{
  ProtobufCMessage base;
  uint32_t copp_trap_reason_id;
};
#define CDB__TBL_FEA_COPP_TRAP_GROUP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_copp_trap_group_key__descriptor) \
    , 0 }


struct  _Cdb__TblFeaCoppTrapGroup
{
  ProtobufCMessage base;
  Cdb__TblFeaCoppTrapGroupKey *key;
  protobuf_c_boolean has_policer_oid;
  uint64_t policer_oid;
  protobuf_c_boolean has_trap_oid;
  uint64_t trap_oid;
  protobuf_c_boolean has_queue_id;
  uint32_t queue_id;
  protobuf_c_boolean has_green_packet;
  uint64_t green_packet;
  protobuf_c_boolean has_green_byte;
  uint64_t green_byte;
  protobuf_c_boolean has_yellow_packet;
  uint64_t yellow_packet;
  protobuf_c_boolean has_yellow_byte;
  uint64_t yellow_byte;
  protobuf_c_boolean has_red_packet;
  uint64_t red_packet;
  protobuf_c_boolean has_red_byte;
  uint64_t red_byte;
};
#define CDB__TBL_FEA_COPP_TRAP_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_fea_copp_trap_group__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_SFLOW_GLOBAL
 */
struct  _Cdb__TblSflowGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  protobuf_c_boolean has_version;
  uint32_t version;
  Cdb__ComposeAddrT *agent;
  Cdb__ComposeAddrT *agent_ipv6;
  protobuf_c_boolean has_counter_interval;
  uint32_t counter_interval;
  protobuf_c_boolean has_counter_port_num;
  uint32_t counter_port_num;
  protobuf_c_boolean has_counter_next_port;
  uint32_t counter_next_port;
  protobuf_c_boolean has_sflow_all;
  uint32_t sflow_all;
  protobuf_c_boolean has_sflow_counter;
  uint32_t sflow_counter;
  protobuf_c_boolean has_sflow_sample;
  uint32_t sflow_sample;
  protobuf_c_boolean has_sflow_packet;
  uint32_t sflow_packet;
};
#define CDB__TBL_SFLOW_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_sflow_global__descriptor) \
    , 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_SFLOW_COLLECTOR
 */
struct  _Cdb__TblSflowCollector
{
  ProtobufCMessage base;
  Cdb__ComposeSflowCollectorKeyT *key;
  protobuf_c_boolean has_buf;
  ProtobufCBinaryData buf;
  protobuf_c_boolean has_pkt_len;
  uint32_t pkt_len;
  protobuf_c_boolean has_sendfd;
  uint32_t sendfd;
  protobuf_c_boolean has_sequence;
  uint32_t sequence;
};
#define CDB__TBL_SFLOW_COLLECTOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_sflow_collector__descriptor) \
    , NULL, 0,{0,NULL}, 0,0, 0,0, 0,0 }


/*
 * TBL_SFLOW_COUNTER_PORT
 */
struct  _Cdb__TblSflowCounterPortKey
{
  ProtobufCMessage base;
  uint32_t ifindex;
};
#define CDB__TBL_SFLOW_COUNTER_PORT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_sflow_counter_port_key__descriptor) \
    , 0 }


struct  _Cdb__TblSflowCounterPort
{
  ProtobufCMessage base;
  Cdb__TblSflowCounterPortKey *key;
  protobuf_c_boolean has_left_interval;
  uint32_t left_interval;
  protobuf_c_boolean has_sequence;
  uint32_t sequence;
};
#define CDB__TBL_SFLOW_COUNTER_PORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_sflow_counter_port__descriptor) \
    , NULL, 0,0, 0,0 }


/*
 * TBL_VRRP_GLOBAL
 */
struct  _Cdb__TblVrrpGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_vrrp_version;
  uint32_t vrrp_version;
  protobuf_c_boolean has_vrrp_session_count;
  uint32_t vrrp_session_count;
  protobuf_c_boolean has_vrrp_msec_session_count;
  uint32_t vrrp_msec_session_count;
  protobuf_c_boolean has_buf;
  ProtobufCBinaryData buf;
  protobuf_c_boolean has_pkt_len;
  uint32_t pkt_len;
};
#define CDB__TBL_VRRP_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vrrp_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0 }


/*
 * TBL_VRRP_VMAC
 */
struct  _Cdb__TblVrrpVmacKey
{
  ProtobufCMessage base;
  Cdb__ComposeMacAddrT *mac;
};
#define CDB__TBL_VRRP_VMAC_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vrrp_vmac_key__descriptor) \
    , NULL }


struct  _Cdb__TblVrrpVmac
{
  ProtobufCMessage base;
  Cdb__TblVrrpVmacKey *key;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
};
#define CDB__TBL_VRRP_VMAC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vrrp_vmac__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_VRRP_VIP
 */
struct  _Cdb__TblVrrpVip
{
  ProtobufCMessage base;
  Cdb__ComposeAddrT *key;
  Cdb__ComposeMacAddrT *vmac;
  Cdb__ComposeMacAddrT *interface_mac;
};
#define CDB__TBL_VRRP_VIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vrrp_vip__descriptor) \
    , NULL, NULL, NULL }


/*
 * TBL_VRRP_SESSION
 */
struct  _Cdb__TblVrrpSessionKey
{
  ProtobufCMessage base;
  uint32_t vrid;
};
#define CDB__TBL_VRRP_SESSION_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vrrp_session_key__descriptor) \
    , 0 }


struct  _Cdb__TblVrrpSession
{
  ProtobufCMessage base;
  Cdb__TblVrrpSessionKey *key;
  protobuf_c_boolean has_enable;
  uint32_t enable;
  protobuf_c_boolean has_state;
  uint32_t state;
  Cdb__ComposeAddrT *vip;
  protobuf_c_boolean has_owner;
  uint32_t owner;
  char *ifname;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_priority;
  uint32_t priority;
  protobuf_c_boolean has_config_priority;
  uint32_t config_priority;
  protobuf_c_boolean has_advt_interval;
  uint32_t advt_interval;
  protobuf_c_boolean has_time_mode;
  uint32_t time_mode;
  protobuf_c_boolean has_preempt_delay;
  uint32_t preempt_delay;
  protobuf_c_boolean has_preempt_mode;
  uint32_t preempt_mode;
  Cdb__ComposeMacAddrT *vmac;
  protobuf_c_boolean has_ip_protocol;
  uint32_t ip_protocol;
  protobuf_c_boolean has_timer;
  uint32_t timer;
  Cdb__ComposeMacAddrT *old_mac;
  protobuf_c_boolean has_vip_status;
  uint32_t vip_status;
  protobuf_c_boolean has_ifp_status;
  uint32_t ifp_status;
  protobuf_c_boolean has_shutdown_flag;
  uint32_t shutdown_flag;
  protobuf_c_boolean has_skew_time;
  uint32_t skew_time;
  protobuf_c_boolean has_master_down_interval;
  uint32_t master_down_interval;
  protobuf_c_boolean has_num_ip_addrs;
  uint32_t num_ip_addrs;
  protobuf_c_boolean has_trackobj_id;
  uint32_t trackobj_id;
  protobuf_c_boolean has_trackobj_status;
  uint32_t trackobj_status;
  protobuf_c_boolean has_priority_delta;
  uint32_t priority_delta;
  Cdb__ComposeSalTimeT *vrrp_uptime;
  protobuf_c_boolean has_admin_state;
  uint32_t admin_state;
  protobuf_c_boolean has_rowstatus;
  uint32_t rowstatus;
  protobuf_c_boolean has_stats_become_master;
  uint32_t stats_become_master;
  protobuf_c_boolean has_stats_advt_rcvd;
  uint32_t stats_advt_rcvd;
  protobuf_c_boolean has_stats_advt_interval_errors;
  uint32_t stats_advt_interval_errors;
  protobuf_c_boolean has_stats_auth_failures;
  uint32_t stats_auth_failures;
  protobuf_c_boolean has_stats_ip_ttl_errors;
  uint32_t stats_ip_ttl_errors;
  protobuf_c_boolean has_stats_priority_zero_pkts_rcvd;
  uint32_t stats_priority_zero_pkts_rcvd;
  protobuf_c_boolean has_stats_priority_zero_pkts_sent;
  uint32_t stats_priority_zero_pkts_sent;
  protobuf_c_boolean has_stats_invalid_type_pkts_rcvd;
  uint32_t stats_invalid_type_pkts_rcvd;
  protobuf_c_boolean has_stats_addr_list_errors;
  uint32_t stats_addr_list_errors;
  protobuf_c_boolean has_stats_invalid_auth_type;
  uint32_t stats_invalid_auth_type;
  protobuf_c_boolean has_stats_auth_type_mismatch;
  uint32_t stats_auth_type_mismatch;
  protobuf_c_boolean has_stats_pkt_len_errors;
  uint32_t stats_pkt_len_errors;
  protobuf_c_boolean has_master_ip_status;
  uint32_t master_ip_status;
  Cdb__ComposeAddrT *master_ip;
  protobuf_c_boolean has_master_priority;
  uint32_t master_priority;
  protobuf_c_boolean has_master_advt_interval;
  uint32_t master_advt_interval;
  Cdb__ComposeAddrT *primary_ip;
  protobuf_c_boolean has_learn_master;
  uint32_t learn_master;
  protobuf_c_boolean has_secondaryip_same_vip;
  uint32_t secondaryip_same_vip;
};
#define CDB__TBL_VRRP_SESSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vrrp_session__descriptor) \
    , NULL, 0,0, 0,0, NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, NULL, 0,0, 0,0 }


/*
 * TBL_SSM_GLOBAL
 */
struct  _Cdb__TblSsmGlobal
{
  ProtobufCMessage base;
  Cdb__ComposeSsmClockIdT *device_clock_id;
  protobuf_c_boolean has_synce_enable;
  uint32_t synce_enable;
  protobuf_c_boolean has_local_priority;
  uint32_t local_priority;
  protobuf_c_boolean has_option_mode;
  uint32_t option_mode;
  protobuf_c_boolean has_system_quality;
  uint32_t system_quality;
  protobuf_c_boolean has_current_quality;
  uint32_t current_quality;
  protobuf_c_boolean has_device_role;
  uint32_t device_role;
  protobuf_c_boolean has_ssm_enable;
  uint32_t ssm_enable;
  protobuf_c_boolean has_ssm_extend_enable;
  uint32_t ssm_extend_enable;
  protobuf_c_boolean has_holdover_en;
  uint32_t holdover_en;
  protobuf_c_boolean has_freerun_en;
  uint32_t freerun_en;
  protobuf_c_boolean has_select_ifindex;
  uint32_t select_ifindex;
  protobuf_c_boolean has_dpll_selected_ifindex;
  uint32_t dpll_selected_ifindex;
  protobuf_c_boolean has_dpll_current_status;
  uint32_t dpll_current_status;
  protobuf_c_boolean has_force_quality_option1_cnt;
  uint32_t force_quality_option1_cnt;
  protobuf_c_boolean has_force_quality_option2_cnt;
  uint32_t force_quality_option2_cnt;
  protobuf_c_boolean has_clock_recovery_select;
  uint32_t clock_recovery_select;
  protobuf_c_boolean has_next_selected_ifindex;
  uint32_t next_selected_ifindex;
  protobuf_c_boolean has_select_if_linkup_restore_en;
  uint32_t select_if_linkup_restore_en;
  protobuf_c_boolean has_select_if_priority_change_en;
  uint32_t select_if_priority_change_en;
  protobuf_c_boolean has_select_if_quality_change_en;
  uint32_t select_if_quality_change_en;
  protobuf_c_boolean has_holdoff_time;
  uint32_t holdoff_time;
  protobuf_c_boolean has_wtr_time;
  uint32_t wtr_time;
};
#define CDB__TBL_SSM_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ssm_global__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_SSM_PORT
 */
struct  _Cdb__TblSsmPortKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_SSM_PORT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ssm_port_key__descriptor) \
    , NULL }


struct  _Cdb__TblSsmPort
{
  ProtobufCMessage base;
  Cdb__TblSsmPortKey *key;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_synce_enable;
  uint32_t synce_enable;
  protobuf_c_boolean has_ssm_pdu_direct;
  uint32_t ssm_pdu_direct;
  protobuf_c_boolean has_priority;
  uint32_t priority;
  protobuf_c_boolean has_replace_clockid_en;
  uint32_t replace_clockid_en;
  protobuf_c_boolean has_receive_pdu_enable;
  uint32_t receive_pdu_enable;
  protobuf_c_boolean has_send_quality;
  uint32_t send_quality;
  protobuf_c_boolean has_receive_quality;
  uint32_t receive_quality;
  protobuf_c_boolean has_force_tx_quality;
  uint32_t force_tx_quality;
  protobuf_c_boolean has_force_rx_quality;
  uint32_t force_rx_quality;
  protobuf_c_boolean has_dnu_group_id;
  uint32_t dnu_group_id;
  protobuf_c_boolean has_hop;
  uint32_t hop;
  Cdb__ComposeSsmClockIdT *receive_clock_id;
};
#define CDB__TBL_SSM_PORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ssm_port__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL }


/*
 * TBL_IPSLA_GLOBAL
 */
struct  _Cdb__TblIpslaGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ipsla_entry_num;
  uint32_t ipsla_entry_num;
  protobuf_c_boolean has_trap_test_failure;
  uint32_t trap_test_failure;
  protobuf_c_boolean has_trap_test_success;
  uint32_t trap_test_success;
  protobuf_c_boolean has_trap_pkt_timeout;
  uint32_t trap_pkt_timeout;
  protobuf_c_boolean has_trap_overthreshold;
  uint32_t trap_overthreshold;
};
#define CDB__TBL_IPSLA_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ipsla_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_IPSLA_ENTRY
 */
struct  _Cdb__TblIpslaEntryKey
{
  ProtobufCMessage base;
  uint32_t entry_id;
};
#define CDB__TBL_IPSLA_ENTRY_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ipsla_entry_key__descriptor) \
    , 0 }


struct  _Cdb__TblIpslaEntry
{
  ProtobufCMessage base;
  Cdb__TblIpslaEntryKey *key;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_admin_state;
  uint32_t admin_state;
  char *desc;
  protobuf_c_boolean has_frequency;
  uint32_t frequency;
  protobuf_c_boolean has_timeout;
  uint32_t timeout;
  protobuf_c_boolean has_threshold;
  uint32_t threshold;
  protobuf_c_boolean has_interval;
  uint32_t interval;
  protobuf_c_boolean has_packets_per_test;
  uint32_t packets_per_test;
  protobuf_c_boolean has_fail_percent;
  uint32_t fail_percent;
  protobuf_c_boolean has_ttl;
  uint32_t ttl;
  protobuf_c_boolean has_tos;
  uint32_t tos;
  protobuf_c_boolean has_data_size;
  uint32_t data_size;
  protobuf_c_boolean has_data_pattern;
  uint32_t data_pattern;
  Cdb__ComposeAddrIpv4T *inaddr;
  Cdb__ComposeAddrIpv4T *src_inaddr;
  char *src_ifname;
  protobuf_c_boolean has_sock;
  int32_t sock;
  protobuf_c_boolean has_send_sock;
  int32_t send_sock;
  protobuf_c_boolean has_sock_flag;
  int32_t sock_flag;
  protobuf_c_boolean has_buf;
  ProtobufCBinaryData buf;
  protobuf_c_boolean has_packet_length;
  uint32_t packet_length;
  protobuf_c_boolean has_testid;
  uint32_t testid;
  protobuf_c_boolean has_running_frequency;
  uint32_t running_frequency;
  protobuf_c_boolean has_running_timeout;
  uint32_t running_timeout;
  protobuf_c_boolean has_running_interval;
  uint32_t running_interval;
  protobuf_c_boolean has_running_probe_cnt;
  uint32_t running_probe_cnt;
  protobuf_c_boolean has_sequence;
  uint32_t sequence;
  protobuf_c_boolean has_rtt;
  uint32_t rtt;
  protobuf_c_boolean has_send_time;
  uint64_t send_time;
  protobuf_c_boolean has_last_send_time;
  uint64_t last_send_time;
  protobuf_c_boolean has_send_cnt;
  uint32_t send_cnt;
  protobuf_c_boolean has_receive_cnt;
  uint32_t receive_cnt;
  protobuf_c_boolean has_overthreshold_cnt;
  uint32_t overthreshold_cnt;
  protobuf_c_boolean has_sendfail_cnt;
  uint32_t sendfail_cnt;
  protobuf_c_boolean has_running_rtt_min;
  uint32_t running_rtt_min;
  protobuf_c_boolean has_running_rtt_max;
  uint32_t running_rtt_max;
  protobuf_c_boolean has_running_rtt_sum;
  uint32_t running_rtt_sum;
  protobuf_c_boolean has_running_success;
  uint32_t running_success;
  protobuf_c_boolean has_running_fail_percent;
  uint32_t running_fail_percent;
  protobuf_c_boolean has_returncode;
  uint32_t returncode;
  protobuf_c_boolean has_echo_reply;
  uint32_t echo_reply;
  protobuf_c_boolean has_total_receive;
  uint32_t total_receive;
  protobuf_c_boolean has_total_send;
  uint32_t total_send;
  protobuf_c_boolean has_rtt_sum;
  uint64_t rtt_sum;
  protobuf_c_boolean has_rtt_max;
  uint32_t rtt_max;
  protobuf_c_boolean has_rtt_min;
  uint32_t rtt_min;
  protobuf_c_boolean has_probe_result_config_cnt;
  uint32_t probe_result_config_cnt;
  protobuf_c_boolean has_probe_result_index;
  uint32_t probe_result_index;
  protobuf_c_boolean has_test_result_config_cnt;
  uint32_t test_result_config_cnt;
  protobuf_c_boolean has_test_result_index;
  uint32_t test_result_index;
};
#define CDB__TBL_IPSLA_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ipsla_entry__descriptor) \
    , NULL, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_IPSLA_PACKET_STATS
 */
struct  _Cdb__TblIpslaPacketStats
{
  ProtobufCMessage base;
  Cdb__ComposeIpslaPacketStatsKeyT *key;
  protobuf_c_boolean has_send_time;
  uint64_t send_time;
  protobuf_c_boolean has_rtt;
  uint32_t rtt;
  protobuf_c_boolean has_testid;
  uint32_t testid;
  protobuf_c_boolean has_index;
  uint32_t index;
  protobuf_c_boolean has_status;
  uint32_t status;
  protobuf_c_boolean has_timeout;
  uint32_t timeout;
  protobuf_c_boolean has_threshold;
  uint32_t threshold;
};
#define CDB__TBL_IPSLA_PACKET_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ipsla_packet_stats__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_IPSLA_TEST_STATS
 */
struct  _Cdb__TblIpslaTestStats
{
  ProtobufCMessage base;
  Cdb__ComposeIpslaTestStatsKeyT *key;
  protobuf_c_boolean has_last_send_time;
  uint64_t last_send_time;
  protobuf_c_boolean has_testid;
  uint32_t testid;
  protobuf_c_boolean has_send_cnt;
  uint32_t send_cnt;
  protobuf_c_boolean has_receive_cnt;
  uint32_t receive_cnt;
  protobuf_c_boolean has_overthreshold_cnt;
  uint32_t overthreshold_cnt;
  protobuf_c_boolean has_sendfail_cnt;
  uint32_t sendfail_cnt;
  protobuf_c_boolean has_rtt_min;
  uint32_t rtt_min;
  protobuf_c_boolean has_rtt_max;
  uint32_t rtt_max;
  protobuf_c_boolean has_rtt_sum;
  uint32_t rtt_sum;
  protobuf_c_boolean has_success;
  uint32_t success;
  protobuf_c_boolean has_fail_percent;
  uint32_t fail_percent;
  protobuf_c_boolean has_timeout;
  uint32_t timeout;
};
#define CDB__TBL_IPSLA_TEST_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ipsla_test_stats__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_TRACK_GLOBAL
 */
struct  _Cdb__TblTrackGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_track_object_num;
  uint32_t track_object_num;
  protobuf_c_boolean has_track_timer_interval;
  uint32_t track_timer_interval;
};
#define CDB__TBL_TRACK_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_track_global__descriptor) \
    , 0,0, 0,0 }


/*
 * TBL_TRACK_OBJECT
 */
struct  _Cdb__TblTrackObjectKey
{
  ProtobufCMessage base;
  uint32_t trackobj_id;
};
#define CDB__TBL_TRACK_OBJECT_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_track_object_key__descriptor) \
    , 0 }


struct  _Cdb__TblTrackObject
{
  ProtobufCMessage base;
  Cdb__TblTrackObjectKey *key;
  protobuf_c_boolean has_type;
  uint32_t type;
  protobuf_c_boolean has_state;
  uint32_t state;
  char *track_if;
  protobuf_c_boolean has_rtr_entryid;
  uint32_t rtr_entryid;
  protobuf_c_boolean has_delay_up;
  uint32_t delay_up;
  protobuf_c_boolean has_running_delay_up;
  uint32_t running_delay_up;
  protobuf_c_boolean has_delay_down;
  uint32_t delay_down;
  protobuf_c_boolean has_running_delay_down;
  uint32_t running_delay_down;
  protobuf_c_boolean has_tracked_vrid_bmp;
  ProtobufCBinaryData tracked_vrid_bmp;
  protobuf_c_boolean has_static_rt_refcnt;
  uint32_t static_rt_refcnt;
};
#define CDB__TBL_TRACK_OBJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_track_object__descriptor) \
    , NULL, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0 }


/*
 * TBL_CONTROLLER_ATTR
 */
struct  _Cdb__TblControllerAttr
{
  ProtobufCMessage base;
  Cdb__ComposeNsRouteKeyT *key;
  char *controller_name;
  protobuf_c_boolean has_max_backoff;
  uint32_t max_backoff;
  protobuf_c_boolean has_inactivity_probe;
  uint32_t inactivity_probe;
};
#define CDB__TBL_CONTROLLER_ATTR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_controller_attr__descriptor) \
    , NULL, NULL, 0,0, 0,0 }


/*
 * TBL_OAM_SESSION
 */
struct  _Cdb__TblOamSessionKey
{
  ProtobufCMessage base;
  uint32_t session_id;
};
#define CDB__TBL_OAM_SESSION_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_oam_session_key__descriptor) \
    , 0 }


struct  _Cdb__TblOamSession
{
  ProtobufCMessage base;
  Cdb__TblOamSessionKey *key;
  protobuf_c_boolean has_creat_by_flow;
  uint32_t creat_by_flow;
  protobuf_c_boolean has_oam_type;
  uint32_t oam_type;
  protobuf_c_boolean has_pw_type;
  uint32_t pw_type;
  protobuf_c_boolean has_mp_type;
  uint32_t mp_type;
  protobuf_c_boolean has_service_ifindex;
  uint32_t service_ifindex;
  char *service_name;
  char *megid_str;
  protobuf_c_boolean has_mepid;
  uint32_t mepid;
  protobuf_c_boolean has_rmepid;
  uint32_t rmepid;
  protobuf_c_boolean has_cc_enable;
  uint32_t cc_enable;
  protobuf_c_boolean has_cc_interval;
  uint32_t cc_interval;
  protobuf_c_boolean has_cc_interval_cfg;
  uint32_t cc_interval_cfg;
  protobuf_c_boolean has_lm_enable;
  uint32_t lm_enable;
  protobuf_c_boolean has_dm_enable;
  uint32_t dm_enable;
  protobuf_c_boolean has_exp;
  uint32_t exp;
  protobuf_c_boolean has_level;
  uint32_t level;
  protobuf_c_boolean has_ttl;
  uint32_t ttl;
  protobuf_c_boolean has_bind_oam_flow_id;
  uint32_t bind_oam_flow_id;
  protobuf_c_boolean has_bind_oam_ifindex;
  uint32_t bind_oam_ifindex;
  protobuf_c_boolean has_icclen;
  uint32_t icclen;
  char *description;
  Cdb__ComposeTpoamDmT *oam_dm;
  Cdb__ComposeTpoamLmT *oam_lm;
  Cdb__ComposeTpoamLbT *oam_lb;
  Cdb__ComposeTpoamEventT *oam_event;
  protobuf_c_boolean has_dm_active;
  uint32_t dm_active;
  protobuf_c_boolean has_oam_status;
  uint32_t oam_status;
  protobuf_c_boolean has_signal_status;
  uint32_t signal_status;
  Cdb__ComposeTpoamStatsT *oam_stats;
  Cdb__ComposeTpoamListT *oam_list;
  protobuf_c_boolean has_aps_group_id;
  uint32_t aps_group_id;
  protobuf_c_boolean has_flag_add_flow;
  uint32_t flag_add_flow;
};
#define CDB__TBL_OAM_SESSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_oam_session__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0 }


/*
 * TBL_OAM_SESSION_UPLOAD
 */
struct  _Cdb__TblOamSessionUploadKey
{
  ProtobufCMessage base;
  uint32_t session_id;
};
#define CDB__TBL_OAM_SESSION_UPLOAD_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_oam_session_upload_key__descriptor) \
    , 0 }


struct  _Cdb__TblOamSessionUpload
{
  ProtobufCMessage base;
  Cdb__TblOamSessionUploadKey *key;
  protobuf_c_boolean has_bind_oam_flow_id;
  uint32_t bind_oam_flow_id;
  Cdb__ComposeUploadTpoamDmT *upload_dm;
  Cdb__ComposeUploadTpoamDmT *upload_dm_event;
  Cdb__ComposeUploadTpoamLmT *upload_lm;
  Cdb__ComposeUploadTpoamLmT *upload_lm_event;
  Cdb__ComposeUploadTpoamCcmT *upload_ccm;
};
#define CDB__TBL_OAM_SESSION_UPLOAD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_oam_session_upload__descriptor) \
    , NULL, 0,0, NULL, NULL, NULL, NULL, NULL }


/*
 * TBL_LSP_APS_GROUP
 */
struct  _Cdb__TblLspApsGroupKey
{
  ProtobufCMessage base;
  uint32_t group_id;
};
#define CDB__TBL_LSP_APS_GROUP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_lsp_aps_group_key__descriptor) \
    , 0 }


struct  _Cdb__TblLspApsGroup
{
  ProtobufCMessage base;
  Cdb__TblLspApsGroupKey *key;
  char *working_lsp_name;
  char *protection_lsp_name;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
  protobuf_c_boolean has_flow_flag;
  uint32_t flow_flag;
  protobuf_c_boolean has_wait_to_restore_time;
  uint32_t wait_to_restore_time;
  protobuf_c_boolean has_hold_off_time;
  uint32_t hold_off_time;
  protobuf_c_boolean has_is_revertive;
  uint32_t is_revertive;
  protobuf_c_boolean has_active_path;
  uint32_t active_path;
  protobuf_c_boolean has_bridge_permanent;
  uint32_t bridge_permanent;
  protobuf_c_boolean has_current_state;
  uint32_t current_state;
};
#define CDB__TBL_LSP_APS_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_lsp_aps_group__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_PW_APS_GROUP
 */
struct  _Cdb__TblPwApsGroupKey
{
  ProtobufCMessage base;
  uint32_t group_id;
};
#define CDB__TBL_PW_APS_GROUP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pw_aps_group_key__descriptor) \
    , 0 }


struct  _Cdb__TblPwApsGroup
{
  ProtobufCMessage base;
  Cdb__TblPwApsGroupKey *key;
  char *working_pw_name;
  char *protection_pw_name;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
  protobuf_c_boolean has_flow_flag;
  uint32_t flow_flag;
  protobuf_c_boolean has_wait_to_restore_time;
  uint32_t wait_to_restore_time;
  protobuf_c_boolean has_hold_off_time;
  uint32_t hold_off_time;
  protobuf_c_boolean has_is_revertive;
  uint32_t is_revertive;
  protobuf_c_boolean has_active_path;
  uint32_t active_path;
  protobuf_c_boolean has_bridge_permanent;
  uint32_t bridge_permanent;
  protobuf_c_boolean has_current_state;
  uint32_t current_state;
};
#define CDB__TBL_PW_APS_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pw_aps_group__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_LSP_PE
 */
struct  _Cdb__TblLspPeKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_LSP_PE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_lsp_pe_key__descriptor) \
    , NULL }


struct  _Cdb__TblLspPe
{
  ProtobufCMessage base;
  Cdb__TblLspPeKey *key;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
  protobuf_c_boolean has_inlabel;
  uint32_t inlabel;
  protobuf_c_boolean has_outlabel;
  uint32_t outlabel;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  protobuf_c_boolean has_vid;
  uint32_t vid;
  protobuf_c_boolean has_outlabel_exp;
  uint32_t outlabel_exp;
  protobuf_c_boolean has_outlabel_exp_is_set;
  uint32_t outlabel_exp_is_set;
  protobuf_c_boolean has_outlabel_ttl;
  uint32_t outlabel_ttl;
  protobuf_c_boolean has_oam_session_id;
  uint32_t oam_session_id;
  protobuf_c_boolean has_lsp_aps_group_id;
  uint32_t lsp_aps_group_id;
  Cdb__ComposeMacAddrT *nexthop_mac;
};
#define CDB__TBL_LSP_PE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_lsp_pe__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL }


/*
 * TBL_LSP_P
 */
struct  _Cdb__TblLspPKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_LSP_P_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_lsp_p_key__descriptor) \
    , NULL }


struct  _Cdb__TblLspP
{
  ProtobufCMessage base;
  Cdb__TblLspPKey *key;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
  protobuf_c_boolean has_west_inlabel;
  uint32_t west_inlabel;
  protobuf_c_boolean has_west_outlabel;
  uint32_t west_outlabel;
  protobuf_c_boolean has_west_ifindex;
  uint32_t west_ifindex;
  protobuf_c_boolean has_west_vid;
  uint32_t west_vid;
  Cdb__ComposeMacAddrT *west_nexthop_mac;
  protobuf_c_boolean has_west_outlabel_exp;
  uint32_t west_outlabel_exp;
  protobuf_c_boolean has_west_outlabel_exp_is_set;
  uint32_t west_outlabel_exp_is_set;
  protobuf_c_boolean has_west_outlabel_ttl;
  uint32_t west_outlabel_ttl;
  protobuf_c_boolean has_east_inlabel;
  uint32_t east_inlabel;
  protobuf_c_boolean has_east_outlabel;
  uint32_t east_outlabel;
  protobuf_c_boolean has_east_ifindex;
  uint32_t east_ifindex;
  protobuf_c_boolean has_east_vid;
  uint32_t east_vid;
  protobuf_c_boolean has_east_outlabel_exp;
  uint32_t east_outlabel_exp;
  protobuf_c_boolean has_east_outlabel_exp_is_set;
  uint32_t east_outlabel_exp_is_set;
  protobuf_c_boolean has_east_outlabel_ttl;
  uint32_t east_outlabel_ttl;
  Cdb__ComposeMacAddrT *east_nexthop_mac;
  protobuf_c_boolean has_oam_session_id;
  uint32_t oam_session_id;
};
#define CDB__TBL_LSP_P__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_lsp_p__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0 }


/*
 * TBL_PW_TPE
 */
struct  _Cdb__TblPwTpeKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_PW_TPE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pw_tpe_key__descriptor) \
    , NULL }


struct  _Cdb__TblPwTpe
{
  ProtobufCMessage base;
  Cdb__TblPwTpeKey *key;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
  protobuf_c_boolean has_inlabel;
  uint32_t inlabel;
  protobuf_c_boolean has_outlabel;
  uint32_t outlabel;
  protobuf_c_boolean has_outlabel_exp;
  uint32_t outlabel_exp;
  protobuf_c_boolean has_outlabel_exp_is_set;
  uint32_t outlabel_exp_is_set;
  protobuf_c_boolean has_outlabel_ttl;
  uint32_t outlabel_ttl;
  protobuf_c_boolean has_tunnel_type;
  uint32_t tunnel_type;
  char *lsp_name;
  protobuf_c_boolean has_lsp_aps_group_id;
  uint32_t lsp_aps_group_id;
  protobuf_c_boolean has_pw_aps_group_id;
  uint32_t pw_aps_group_id;
  protobuf_c_boolean has_oam_session_id;
  uint32_t oam_session_id;
};
#define CDB__TBL_PW_TPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pw_tpe__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_SECTION_OAM
 */
struct  _Cdb__TblSectionOamKey
{
  ProtobufCMessage base;
  uint32_t ifindex;
};
#define CDB__TBL_SECTION_OAM_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_section_oam_key__descriptor) \
    , 0 }


struct  _Cdb__TblSectionOam
{
  ProtobufCMessage base;
  Cdb__TblSectionOamKey *key;
  protobuf_c_boolean has_oam_session_id;
  uint32_t oam_session_id;
  Cdb__ComposeMacAddrT *nexthop_mac;
};
#define CDB__TBL_SECTION_OAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_section_oam__descriptor) \
    , NULL, 0,0, NULL }


/*
 * TBL_OAM_FLOW_INFO
 */
struct  _Cdb__TblOamFlowInfoKey
{
  ProtobufCMessage base;
  uint32_t flow_id;
};
#define CDB__TBL_OAM_FLOW_INFO_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_oam_flow_info_key__descriptor) \
    , 0 }


struct  _Cdb__TblOamFlowInfo
{
  ProtobufCMessage base;
  Cdb__TblOamFlowInfoKey *key;
  protobuf_c_boolean has_type;
  uint32_t type;
  char *name;
  protobuf_c_boolean has_session_id;
  uint32_t session_id;
  protobuf_c_boolean has_outlabel_flow_id;
  uint32_t outlabel_flow_id;
  protobuf_c_boolean has_inlabel_flow_id;
  uint32_t inlabel_flow_id;
  protobuf_c_boolean has_outlabel_group_id;
  uint32_t outlabel_group_id;
  protobuf_c_boolean has_inlabel_group_id;
  uint32_t inlabel_group_id;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
};
#define CDB__TBL_OAM_FLOW_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_oam_flow_info__descriptor) \
    , NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_TPOAM_GLOBAL
 */
struct  _Cdb__TblTpoamGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_node_id;
  uint32_t node_id;
  protobuf_c_boolean has_channel_type;
  uint32_t channel_type;
  protobuf_c_boolean has_fast_aps_en;
  uint32_t fast_aps_en;
  protobuf_c_boolean has_rdi_reason;
  uint32_t rdi_reason;
  protobuf_c_boolean has_rdi_reason_mask;
  uint32_t rdi_reason_mask;
  protobuf_c_boolean has_sf_reason_mask;
  uint32_t sf_reason_mask;
  protobuf_c_boolean has_sd_reason_mask;
  uint32_t sd_reason_mask;
  Cdb__ComposeTpoamRcCountT *resouce_count_max;
  Cdb__ComposeTpoamRcCountT *resouce_count_curr;
  size_t n_event_rule_map;
  uint32_t *event_rule_map;
  Cdb__ComposeTpoamStatsT *oam_glb_stats;
  Cdb__ComposeTpoamExecT *exec;
  Cdb__ComposeTpoamTrapCacheT *trap_cache;
  Cdb__ComposeTpoamRatelimitT *trap;
  Cdb__ComposeTpoamRatelimitT *log;
  protobuf_c_boolean has_dm_enable_global;
  uint32_t dm_enable_global;
  protobuf_c_boolean has_dm_delay_threshold;
  uint32_t dm_delay_threshold;
  protobuf_c_boolean has_dm_calc_interval;
  uint32_t dm_calc_interval;
  protobuf_c_boolean has_lm_enable_global;
  uint32_t lm_enable_global;
  protobuf_c_boolean has_lm_local_threshold;
  uint32_t lm_local_threshold;
  protobuf_c_boolean has_lm_remote_threshold;
  uint32_t lm_remote_threshold;
  protobuf_c_boolean has_lm_calc_interval;
  uint32_t lm_calc_interval;
};
#define CDB__TBL_TPOAM_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_tpoam_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,NULL, NULL, NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_TPOAM_EXEC_GLOBAL
 */
struct  _Cdb__TblTpoamExecGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_test_type;
  uint32_t test_type;
  protobuf_c_boolean has_oam_session_id;
  uint32_t oam_session_id;
  protobuf_c_boolean has_pid;
  uint32_t pid;
  protobuf_c_boolean has_sock;
  uint32_t sock;
  Cdb__ComposeTpoamLmmExecT *exec_lm;
  Cdb__ComposeTpoamLbExecT *exec_lb_rmep;
  Cdb__ComposeTpoamLbExecT *exec_lb_mip;
  Cdb__ComposeTpoamLbExecT *exec_lb_discovery;
  Cdb__ComposeTpoam1dmDmmExecT *exec_dmm;
  Cdb__ComposeTpoam1dmDmmExecT *exec_1dm;
};
#define CDB__TBL_TPOAM_EXEC_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_tpoam_exec_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * TBL_APS_GROUP_INFO
 */
struct  _Cdb__TblApsGroupInfoKey
{
  ProtobufCMessage base;
  uint32_t aps_group_id;
};
#define CDB__TBL_APS_GROUP_INFO_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_aps_group_info_key__descriptor) \
    , 0 }


struct  _Cdb__TblApsGroupInfo
{
  ProtobufCMessage base;
  Cdb__TblApsGroupInfoKey *key;
  char *working_name;
  char *protection_name;
  char *select_name;
  protobuf_c_boolean has_aps_group_type;
  int32_t aps_group_type;
  protobuf_c_boolean has_wait_to_restore_time;
  uint32_t wait_to_restore_time;
  protobuf_c_boolean has_hold_off_time;
  uint32_t hold_off_time;
  protobuf_c_boolean has_is_revertive;
  uint32_t is_revertive;
  protobuf_c_boolean has_active_path;
  uint32_t active_path;
  protobuf_c_boolean has_bridge_permanent;
  uint32_t bridge_permanent;
  protobuf_c_boolean has_current_event;
  uint32_t current_event;
  protobuf_c_boolean has_dfop_reason;
  uint32_t dfop_reason;
  protobuf_c_boolean has_sc_aps_intervel;
  uint32_t sc_aps_intervel;
  protobuf_c_boolean has_fast_aps_en;
  uint32_t fast_aps_en;
  protobuf_c_boolean has_aps_channel;
  uint32_t aps_channel;
  protobuf_c_boolean has_requested_signal;
  uint32_t requested_signal;
  protobuf_c_boolean has_direction;
  uint32_t direction;
  protobuf_c_boolean has_bridge_type;
  uint32_t bridge_type;
  protobuf_c_boolean has_last_state;
  uint32_t last_state;
  protobuf_c_boolean has_current_state;
  uint32_t current_state;
  protobuf_c_boolean has_far_end_last_event;
  uint32_t far_end_last_event;
  protobuf_c_boolean has_sc_aps_out_pdu_count;
  uint32_t sc_aps_out_pdu_count;
  protobuf_c_boolean has_hold_off_expired;
  uint32_t hold_off_expired;
};
#define CDB__TBL_APS_GROUP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_aps_group_info__descriptor) \
    , NULL, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_OAM_INLABEL_INFO
 */
struct  _Cdb__TblOamInlabelInfoKey
{
  ProtobufCMessage base;
  uint32_t inlabel;
};
#define CDB__TBL_OAM_INLABEL_INFO_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_oam_inlabel_info_key__descriptor) \
    , 0 }


struct  _Cdb__TblOamInlabelInfo
{
  ProtobufCMessage base;
  Cdb__TblOamInlabelInfoKey *key;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
};
#define CDB__TBL_OAM_INLABEL_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_oam_inlabel_info__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_OAM_MPLS_APS_CHECK
 */
struct  _Cdb__TblOamMplsApsCheckKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_OAM_MPLS_APS_CHECK_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_oam_mpls_aps_check_key__descriptor) \
    , NULL }


struct  _Cdb__TblOamMplsApsCheck
{
  ProtobufCMessage base;
  Cdb__TblOamMplsApsCheckKey *key;
  protobuf_c_boolean has_lsp_label;
  uint32_t lsp_label;
  protobuf_c_boolean has_is_aps_action;
  uint32_t is_aps_action;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  Cdb__ComposeMacAddrT *nexthop_mac;
  protobuf_c_boolean has_vid;
  uint32_t vid;
  protobuf_c_boolean has_outlabel_exp;
  uint32_t outlabel_exp;
  protobuf_c_boolean has_outlabel_exp_is_set;
  uint32_t outlabel_exp_is_set;
  protobuf_c_boolean has_outlabel_ttl;
  uint32_t outlabel_ttl;
};
#define CDB__TBL_OAM_MPLS_APS_CHECK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_oam_mpls_aps_check__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_VLAN_MAPPING_TABLE
 */
struct  _Cdb__TblVlanMappingTableKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_VLAN_MAPPING_TABLE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vlan_mapping_table_key__descriptor) \
    , NULL }


struct  _Cdb__TblVlanMappingTable
{
  ProtobufCMessage base;
  Cdb__TblVlanMappingTableKey *key;
  protobuf_c_boolean has_applied_ports;
  ProtobufCBinaryData applied_ports;
  protobuf_c_boolean has_entry_num;
  uint32_t entry_num;
  protobuf_c_boolean has_egress_entry_num;
  uint32_t egress_entry_num;
  protobuf_c_boolean has_group_id;
  uint32_t group_id;
  protobuf_c_boolean has_group_mapped_svid;
  uint32_t group_mapped_svid;
  char *group_evc_entry_name;
};
#define CDB__TBL_VLAN_MAPPING_TABLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vlan_mapping_table__descriptor) \
    , NULL, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, NULL }


/*
 * TBL_VLAN_MAPPING_ENTRY
 */
struct  _Cdb__TblVlanMappingEntry
{
  ProtobufCMessage base;
  Cdb__ComposeVlanMappingEntryKeyT *key;
  protobuf_c_boolean has_mapped_svid;
  uint32_t mapped_svid;
  protobuf_c_boolean has_mapped_cvid;
  uint32_t mapped_cvid;
  char *evc_entry;
};
#define CDB__TBL_VLAN_MAPPING_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vlan_mapping_entry__descriptor) \
    , NULL, 0,0, 0,0, NULL }


/*
 * TBL_EGRESS_MAPPING_ENTRY
 */
struct  _Cdb__TblEgressMappingEntry
{
  ProtobufCMessage base;
  Cdb__ComposeEgressMappingEntryKeyT *key;
  protobuf_c_boolean has_mapped_vid;
  uint32_t mapped_vid;
};
#define CDB__TBL_EGRESS_MAPPING_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_egress_mapping_entry__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_VLAN_GROUP
 */
struct  _Cdb__TblVlanGroupKey
{
  ProtobufCMessage base;
  uint32_t group_id;
};
#define CDB__TBL_VLAN_GROUP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vlan_group_key__descriptor) \
    , 0 }


struct  _Cdb__TblVlanGroup
{
  ProtobufCMessage base;
  Cdb__TblVlanGroupKey *key;
  size_t n_valid;
  uint32_t *valid;
  size_t n_min_vid;
  uint32_t *min_vid;
  size_t n_max_vid;
  uint32_t *max_vid;
};
#define CDB__TBL_VLAN_GROUP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_vlan_group__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0,NULL }


/*
 * TBL_EVC_ENTRY
 */
struct  _Cdb__TblEvcEntryKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_EVC_ENTRY_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_evc_entry_key__descriptor) \
    , NULL }


struct  _Cdb__TblEvcEntry
{
  ProtobufCMessage base;
  Cdb__TblEvcEntryKey *key;
  protobuf_c_boolean has_mapped_svid;
  uint32_t mapped_svid;
  protobuf_c_boolean has_mapped_cvid;
  uint32_t mapped_cvid;
  protobuf_c_boolean has_evc_type;
  uint32_t evc_type;
  protobuf_c_boolean has_ref_count;
  uint32_t ref_count;
};
#define CDB__TBL_EVC_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_evc_entry__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_MAPPED_VLAN_INFO
 */
struct  _Cdb__TblMappedVlanInfo
{
  ProtobufCMessage base;
  Cdb__ComposeMappedVlanInfoKeyT *key;
  protobuf_c_boolean has_mapped_svid;
  uint32_t mapped_svid;
  protobuf_c_boolean has_mapped_cvid;
  uint32_t mapped_cvid;
  protobuf_c_boolean has_raw_vid_bmp;
  ProtobufCBinaryData raw_vid_bmp;
};
#define CDB__TBL_MAPPED_VLAN_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_mapped_vlan_info__descriptor) \
    , NULL, 0,0, 0,0, 0,{0,NULL} }


/*
 * TBL_L2_PROTOCOL
 */
struct  _Cdb__TblL2ProtocolKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_L2_PROTOCOL_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_l2_protocol_key__descriptor) \
    , NULL }


struct  _Cdb__TblL2Protocol
{
  ProtobufCMessage base;
  Cdb__TblL2ProtocolKey *key;
  Cdb__ComposeMacAddrT *protocol_mac;
  Cdb__ComposeMacAddrT *group_mac;
  protobuf_c_boolean has_is_standard_pro;
  uint32_t is_standard_pro;
  protobuf_c_boolean has_protocol_index;
  uint32_t protocol_index;
};
#define CDB__TBL_L2_PROTOCOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_l2_protocol__descriptor) \
    , NULL, NULL, NULL, 0,0, 0,0 }


/*
 * TBL_ND_FIB
 */
struct  _Cdb__TblNdFib
{
  ProtobufCMessage base;
  Cdb__ComposeNdPrefixKeyT *key;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  char *ifname;
  Cdb__ComposeMacAddrT *mac_addr;
  protobuf_c_boolean has_state;
  uint32_t state;
  protobuf_c_boolean has_permanent;
  uint32_t permanent;
  protobuf_c_boolean has_dynamic;
  uint32_t dynamic;
  protobuf_c_boolean has_active;
  uint32_t active;
  protobuf_c_boolean has_router;
  uint32_t router;
  protobuf_c_boolean has_fdb_age;
  uint32_t fdb_age;
  Cdb__ComposeSalTimeT *uptime;
  protobuf_c_boolean has_probes;
  uint32_t probes;
  protobuf_c_boolean has_ipackets;
  uint32_t ipackets;
  protobuf_c_boolean has_opackets;
  uint32_t opackets;
  protobuf_c_boolean has_route_ref;
  uint32_t route_ref;
  protobuf_c_boolean has_is_static_route_dup;
  uint32_t is_static_route_dup;
  Cdb__ComposeAddrIpv6T *staic_route_dup_ipv6_nh;
};
#define CDB__TBL_ND_FIB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nd_fib__descriptor) \
    , NULL, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, NULL }


/*
 * TBL_ND_STATS
 */
struct  _Cdb__TblNdStats
{
  ProtobufCMessage base;
  protobuf_c_boolean has_rcv;
  uint64_t rcv;
  protobuf_c_boolean has_rcv_error;
  uint64_t rcv_error;
  protobuf_c_boolean has_rcv_tooshort;
  uint64_t rcv_tooshort;
  protobuf_c_boolean has_rcv_invalid;
  uint64_t rcv_invalid;
  protobuf_c_boolean has_rcv_inconsistent;
  uint64_t rcv_inconsistent;
  protobuf_c_boolean has_rcv_rs;
  uint64_t rcv_rs;
  protobuf_c_boolean has_rcv_ra;
  uint64_t rcv_ra;
  protobuf_c_boolean has_rcv_ns;
  uint64_t rcv_ns;
  protobuf_c_boolean has_rcv_na;
  uint64_t rcv_na;
  protobuf_c_boolean has_rcv_redirect;
  uint64_t rcv_redirect;
  protobuf_c_boolean has_overflow_failed;
  uint64_t overflow_failed;
  protobuf_c_boolean has_rcv_miss;
  uint64_t rcv_miss;
  protobuf_c_boolean has_rcv_miss_conflict;
  uint64_t rcv_miss_conflict;
  protobuf_c_boolean has_rcv_static_conflict;
  uint64_t rcv_static_conflict;
  protobuf_c_boolean has_allocs;
  uint64_t allocs;
  protobuf_c_boolean has_destroys;
  uint64_t destroys;
  protobuf_c_boolean has_error;
  uint64_t error;
  protobuf_c_boolean has_intf_invalid;
  uint64_t intf_invalid;
  protobuf_c_boolean has_res_failed;
  uint64_t res_failed;
  protobuf_c_boolean has_rcv_probes_mcast;
  uint64_t rcv_probes_mcast;
  protobuf_c_boolean has_rcv_probes_ucast;
  uint64_t rcv_probes_ucast;
  protobuf_c_boolean has_snd_solicited_na;
  uint64_t snd_solicited_na;
  protobuf_c_boolean has_snd_unsolicited_na;
  uint64_t snd_unsolicited_na;
  protobuf_c_boolean has_snd_dad_ns;
  uint64_t snd_dad_ns;
};
#define CDB__TBL_ND_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nd_stats__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_CPU_MIRROR_GLOBAL
 */
struct  _Cdb__TblCpuMirrorGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_strategy;
  uint32_t strategy;
  protobuf_c_boolean has_buf_size;
  uint32_t buf_size;
  protobuf_c_boolean has_write_file;
  uint32_t write_file;
  protobuf_c_boolean has_flash_size_threshold;
  uint64_t flash_size_threshold;
};
#define CDB__TBL_CPU_MIRROR_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cpu_mirror_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_TAP_SERVER
 */
struct  _Cdb__TblTapServer
{
  ProtobufCMessage base;
  protobuf_c_boolean has_server_sock;
  int32_t server_sock;
  protobuf_c_boolean has_client_sock;
  int32_t client_sock;
  Cdb__ComposeAddrIpv4T *peer_addr;
  Cdb__ComposeSalTimeT *lastread;
  protobuf_c_boolean has_debug;
  uint32_t debug;
  Cdb__ComposeAddrIpv4T *client_peer_addr;
  protobuf_c_boolean has_client_test;
  uint32_t client_test;
};
#define CDB__TBL_TAP_SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_tap_server__descriptor) \
    , 0,0, 0,0, NULL, NULL, 0,0, NULL, 0,0 }


/*
 * TBL_DHCPV6_DEBUG
 */
struct  _Cdb__TblDhcpv6Debug
{
  ProtobufCMessage base;
  protobuf_c_boolean has_clientv6_error;
  uint32_t clientv6_error;
  protobuf_c_boolean has_clientv6_events;
  uint32_t clientv6_events;
  protobuf_c_boolean has_clientv6_packet;
  uint32_t clientv6_packet;
  protobuf_c_boolean has_clientv6_dump;
  uint32_t clientv6_dump;
};
#define CDB__TBL_DHCPV6_DEBUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_dhcpv6_debug__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_L2EDIT
 */
struct  _Cdb__TblL2edit
{
  ProtobufCMessage base;
  Cdb__ComposeL2editKeyT *key;
  protobuf_c_boolean has_count;
  uint32_t count;
};
#define CDB__TBL_L2EDIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_l2edit__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_HASH_FIELD_PROFILE
 */
struct  _Cdb__TblHashFieldProfileKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_HASH_FIELD_PROFILE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_hash_field_profile_key__descriptor) \
    , NULL }


struct  _Cdb__TblHashFieldProfile
{
  ProtobufCMessage base;
  Cdb__TblHashFieldProfileKey *key;
  char *description;
  protobuf_c_boolean has_bitmap_data;
  uint32_t bitmap_data;
  protobuf_c_boolean has_flag;
  uint32_t flag;
  protobuf_c_boolean has_index;
  uint32_t index;
  protobuf_c_boolean has_l2_set;
  uint32_t l2_set;
  protobuf_c_boolean has_ip_set;
  uint32_t ip_set;
  protobuf_c_boolean has_ipv6_set;
  uint32_t ipv6_set;
  protobuf_c_boolean has_gre_set;
  uint32_t gre_set;
  protobuf_c_boolean has_nvgre_set;
  uint32_t nvgre_set;
  protobuf_c_boolean has_mpls_set;
  uint32_t mpls_set;
  protobuf_c_boolean has_vpws_set;
  uint32_t vpws_set;
  protobuf_c_boolean has_l3vpn_set;
  uint32_t l3vpn_set;
  protobuf_c_boolean has_vxlan_set;
  uint32_t vxlan_set;
  protobuf_c_boolean has_vpls_set;
  uint32_t vpls_set;
  protobuf_c_boolean has_hash_arithmetic;
  uint32_t hash_arithmetic;
  protobuf_c_boolean has_hash_seed_value;
  uint32_t hash_seed_value;
  protobuf_c_boolean has_mode_symmetry;
  uint32_t mode_symmetry;
  protobuf_c_boolean has_bitmap_disable;
  uint32_t bitmap_disable;
};
#define CDB__TBL_HASH_FIELD_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_hash_field_profile__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_HASH_VALUE_PROFILE
 */
struct  _Cdb__TblHashValueProfileKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_HASH_VALUE_PROFILE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_hash_value_profile_key__descriptor) \
    , NULL }


struct  _Cdb__TblHashValueProfile
{
  ProtobufCMessage base;
  Cdb__TblHashValueProfileKey *key;
  char *description;
  protobuf_c_boolean has_bitmap_data;
  uint32_t bitmap_data;
  protobuf_c_boolean has_bitmap_command;
  uint32_t bitmap_command;
  protobuf_c_boolean has_index;
  uint32_t index;
  protobuf_c_boolean has_agg_all;
  uint32_t agg_all;
  protobuf_c_boolean has_agg_input;
  uint32_t agg_input;
  protobuf_c_boolean has_agg_static;
  uint32_t agg_static;
  protobuf_c_boolean has_agg_dynamic;
  uint32_t agg_dynamic;
  protobuf_c_boolean has_agg_resilient;
  uint32_t agg_resilient;
  protobuf_c_boolean has_ecmp_all;
  uint32_t ecmp_all;
  protobuf_c_boolean has_ecmp_static;
  uint32_t ecmp_static;
  protobuf_c_boolean has_ecmp_static_l3;
  uint32_t ecmp_static_l3;
  protobuf_c_boolean has_ecmp_static_mpls;
  uint32_t ecmp_static_mpls;
  protobuf_c_boolean has_ecmp_static_nvgre;
  uint32_t ecmp_static_nvgre;
  protobuf_c_boolean has_ecmp_static_vxlan;
  uint32_t ecmp_static_vxlan;
  protobuf_c_boolean has_ecmp_dynamic;
  uint32_t ecmp_dynamic;
  protobuf_c_boolean has_ecmp_dynamic_flow_id;
  uint32_t ecmp_dynamic_flow_id;
  protobuf_c_boolean has_ref_cnt;
  uint32_t ref_cnt;
};
#define CDB__TBL_HASH_VALUE_PROFILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_hash_value_profile__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_HASH_VALUE_GLOBAL
 */
struct  _Cdb__TblHashValueGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_bitmap_data;
  uint32_t bitmap_data;
  protobuf_c_boolean has_bitmap_command;
  uint32_t bitmap_command;
  protobuf_c_boolean has_agg_hash;
  uint32_t agg_hash;
  protobuf_c_boolean has_ecmp_all;
  uint32_t ecmp_all;
  protobuf_c_boolean has_ecmp_static;
  uint32_t ecmp_static;
  protobuf_c_boolean has_ecmp_static_l3;
  uint32_t ecmp_static_l3;
  protobuf_c_boolean has_ecmp_static_mpls;
  uint32_t ecmp_static_mpls;
  protobuf_c_boolean has_ecmp_static_nvgre;
  uint32_t ecmp_static_nvgre;
  protobuf_c_boolean has_ecmp_static_vxlan;
  uint32_t ecmp_static_vxlan;
  protobuf_c_boolean has_ecmp_dynamic;
  uint32_t ecmp_dynamic;
  protobuf_c_boolean has_ecmp_dynamic_flow_id;
  uint32_t ecmp_dynamic_flow_id;
  protobuf_c_boolean has_lbid;
  uint32_t lbid;
};
#define CDB__TBL_HASH_VALUE_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_hash_value_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_NAT_GLOBAL
 */
struct  _Cdb__TblNatGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_timeout;
  uint32_t timeout;
  protobuf_c_boolean has_timeout_icmp;
  uint32_t timeout_icmp;
  protobuf_c_boolean has_timeout_tcp;
  uint32_t timeout_tcp;
  protobuf_c_boolean has_timeout_udp;
  uint32_t timeout_udp;
  protobuf_c_boolean has_session_limit;
  uint32_t session_limit;
  protobuf_c_boolean has_nft_hdl;
  uint32_t nft_hdl;
  protobuf_c_boolean has_nft_hdl_upstream_if;
  uint32_t nft_hdl_upstream_if;
  protobuf_c_boolean has_nft_hdl_connlimit_post;
  uint32_t nft_hdl_connlimit_post;
  protobuf_c_boolean has_nft_hdl_connlimit_pre;
  uint32_t nft_hdl_connlimit_pre;
  protobuf_c_boolean has_nft_hdl_upstream_filter_nat_rule;
  uint32_t nft_hdl_upstream_filter_nat_rule;
  Cdb__ComposeCtclibOpbT *rule_id_opb;
  Cdb__ComposeCtclibOpbT *session_id_opb;
  Cdb__ComposeCtclibOpbT *category_id_opb;
  protobuf_c_boolean has_timer_mark;
  uint32_t timer_mark;
  protobuf_c_boolean has_rule_cfg_order;
  uint64_t rule_cfg_order;
  protobuf_c_boolean has_session_cnt_upstream;
  uint32_t session_cnt_upstream;
  protobuf_c_boolean has_session_cnt_dnstream;
  uint32_t session_cnt_dnstream;
  protobuf_c_boolean has_session_fast_fwd_cnt_upstream;
  uint32_t session_fast_fwd_cnt_upstream;
  protobuf_c_boolean has_session_fast_fwd_cnt_dnstream;
  uint32_t session_fast_fwd_cnt_dnstream;
  protobuf_c_boolean has_nfct_kernel_notify_add_cnt;
  uint32_t nfct_kernel_notify_add_cnt;
  protobuf_c_boolean has_nfct_kernel_notify_del_cnt;
  uint32_t nfct_kernel_notify_del_cnt;
  protobuf_c_boolean has_nfct_notify_kernel_add_cnt;
  uint32_t nfct_notify_kernel_add_cnt;
  protobuf_c_boolean has_nfct_notify_kernel_del_cnt;
  uint32_t nfct_notify_kernel_del_cnt;
  protobuf_c_boolean has_session_aging_del_cnt;
  uint32_t session_aging_del_cnt;
  protobuf_c_boolean has_session_aging_upd_ttl_cnt;
  uint32_t session_aging_upd_ttl_cnt;
};
#define CDB__TBL_NAT_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nat_global__descriptor) \
    , 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_NAT_POOL
 */
struct  _Cdb__TblNatPoolKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_NAT_POOL_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nat_pool_key__descriptor) \
    , NULL }


struct  _Cdb__TblNatPool
{
  ProtobufCMessage base;
  Cdb__TblNatPoolKey *key;
  Cdb__ComposeAddrT *ip_lo;
  Cdb__ComposeAddrT *ip_hi;
  Cdb__ComposeAddrT *ip_mask;
  char *refer_oif;
};
#define CDB__TBL_NAT_POOL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nat_pool__descriptor) \
    , NULL, NULL, NULL, NULL, NULL }


/*
 * TBL_NAT_RULE
 */
struct  _Cdb__TblNatRule
{
  ProtobufCMessage base;
  Cdb__ComposeNatRuleKeyT *key;
  protobuf_c_boolean has_handle_postrouting;
  uint32_t handle_postrouting;
  protobuf_c_boolean has_handle_prerouting;
  uint32_t handle_prerouting;
  protobuf_c_boolean has_category_id;
  uint32_t category_id;
  char *refer_iif;
  char *refer_oif;
  protobuf_c_boolean has_nft_chain_id_acl;
  uint32_t nft_chain_id_acl;
  protobuf_c_boolean has_nft_chain_id_rule_pre;
  uint32_t nft_chain_id_rule_pre;
  protobuf_c_boolean has_nft_chain_id_rule_post;
  uint32_t nft_chain_id_rule_post;
  protobuf_c_boolean has_cfg_order;
  uint64_t cfg_order;
};
#define CDB__TBL_NAT_RULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nat_rule__descriptor) \
    , NULL, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_NAT_SESSION
 */
struct  _Cdb__TblNatSession
{
  ProtobufCMessage base;
  Cdb__ComposeNatSessionKeyT *key;
  protobuf_c_boolean has_id;
  uint32_t id;
  Cdb__ComposeSalTimeT *timestamp;
  Cdb__ComposeSalTimeT *hit;
  Cdb__ComposeSalTimeT *upd_kernel_ttl_time;
  protobuf_c_boolean has_ttl;
  uint32_t ttl;
  protobuf_c_boolean has_iif_index;
  uint32_t iif_index;
  protobuf_c_boolean has_oif_index;
  uint32_t oif_index;
  char *helper;
  protobuf_c_boolean has_slow_path_fwd;
  uint32_t slow_path_fwd;
  protobuf_c_boolean has_creator;
  uint32_t creator;
  protobuf_c_boolean has_set_sai_status;
  uint32_t set_sai_status;
};
#define CDB__TBL_NAT_SESSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nat_session__descriptor) \
    , NULL, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_NAT_SESSION_LIMIT
 */
struct  _Cdb__TblNatSessionLimit
{
  ProtobufCMessage base;
  Cdb__ComposeAddrT *key;
  protobuf_c_boolean has_limit;
  uint32_t limit;
  protobuf_c_boolean has_count_upstream;
  uint32_t count_upstream;
  protobuf_c_boolean has_count_dnstream;
  uint32_t count_dnstream;
  protobuf_c_boolean has_nft_hdl_post;
  uint32_t nft_hdl_post;
  protobuf_c_boolean has_nft_hdl_pre;
  uint32_t nft_hdl_pre;
};
#define CDB__TBL_NAT_SESSION_LIMIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nat_session_limit__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_NAT_PROXY_ARP
 */
struct  _Cdb__TblNatProxyArp
{
  ProtobufCMessage base;
  Cdb__ComposeNatProxyArpKeyT *key;
  protobuf_c_boolean has_enable;
  uint32_t enable;
};
#define CDB__TBL_NAT_PROXY_ARP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nat_proxy_arp__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_NAT_RTIF_INSIDE
 */
struct  _Cdb__TblNatRtifInsideKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_NAT_RTIF_INSIDE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nat_rtif_inside_key__descriptor) \
    , NULL }


struct  _Cdb__TblNatRtifInside
{
  ProtobufCMessage base;
  Cdb__TblNatRtifInsideKey *key;
};
#define CDB__TBL_NAT_RTIF_INSIDE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nat_rtif_inside__descriptor) \
    , NULL }


/*
 * TBL_NAT_RTIF_OUTSIDE
 */
struct  _Cdb__TblNatRtifOutsideKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_NAT_RTIF_OUTSIDE_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nat_rtif_outside_key__descriptor) \
    , NULL }


struct  _Cdb__TblNatRtifOutside
{
  ProtobufCMessage base;
  Cdb__TblNatRtifOutsideKey *key;
};
#define CDB__TBL_NAT_RTIF_OUTSIDE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_nat_rtif_outside__descriptor) \
    , NULL }


/*
 * TBL_G8032_RING
 */
struct  _Cdb__TblG8032RingKey
{
  ProtobufCMessage base;
  uint32_t ring_id;
};
#define CDB__TBL_G8032_RING_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_g8032_ring_key__descriptor) \
    , 0 }


struct  _Cdb__TblG8032Ring
{
  ProtobufCMessage base;
  Cdb__TblG8032RingKey *key;
  protobuf_c_boolean has_rpl_owner;
  uint32_t rpl_owner;
  protobuf_c_boolean has_rpl_neighbor;
  uint32_t rpl_neighbor;
  protobuf_c_boolean has_rpl_next_neighbor;
  uint32_t rpl_next_neighbor;
  protobuf_c_boolean has_ring_level_id;
  uint32_t ring_level_id;
  protobuf_c_boolean has_protection_en;
  uint32_t protection_en;
  protobuf_c_boolean has_config_sync;
  uint32_t config_sync;
  protobuf_c_boolean has_aps_protection_en;
  uint32_t aps_protection_en;
  protobuf_c_boolean has_protection_time;
  uint32_t protection_time;
  protobuf_c_boolean has_mode_revertive;
  uint32_t mode_revertive;
  protobuf_c_boolean has_virtual_channel;
  uint32_t virtual_channel;
  protobuf_c_boolean has_g8032_major_ring_id;
  uint32_t g8032_major_ring_id;
  protobuf_c_boolean has_is_sub_ring;
  uint32_t is_sub_ring;
  protobuf_c_boolean has_instance_count;
  uint32_t instance_count;
  size_t n_instance;
  uint32_t *instance;
  size_t n_sub_ring_id;
  uint32_t *sub_ring_id;
  protobuf_c_boolean has_is_local_fs;
  uint32_t is_local_fs;
  protobuf_c_boolean has_is_local_ms;
  uint32_t is_local_ms;
  protobuf_c_boolean has_east_port_ifindex;
  uint32_t east_port_ifindex;
  protobuf_c_boolean has_east_port_is_rpl;
  uint32_t east_port_is_rpl;
  protobuf_c_boolean has_east_port_is_rpl_neighbor;
  uint32_t east_port_is_rpl_neighbor;
  protobuf_c_boolean has_east_port_is_rpl_next_neighbor;
  uint32_t east_port_is_rpl_next_neighbor;
  protobuf_c_boolean has_east_port_is_force_switch;
  uint32_t east_port_is_force_switch;
  protobuf_c_boolean has_east_port_is_manual_switch;
  uint32_t east_port_is_manual_switch;
  protobuf_c_boolean has_east_port_is_blocked;
  uint32_t east_port_is_blocked;
  protobuf_c_boolean has_east_port_flush_fdb;
  uint32_t east_port_flush_fdb;
  protobuf_c_boolean has_east_port_is_fail;
  uint32_t east_port_is_fail;
  protobuf_c_boolean has_east_port_rec_node_id;
  ProtobufCBinaryData east_port_rec_node_id;
  protobuf_c_boolean has_east_port_rec_bpr;
  uint32_t east_port_rec_bpr;
  protobuf_c_boolean has_west_port_ifindex;
  uint32_t west_port_ifindex;
  protobuf_c_boolean has_west_port_is_rpl;
  uint32_t west_port_is_rpl;
  protobuf_c_boolean has_west_port_is_rpl_neighbor;
  uint32_t west_port_is_rpl_neighbor;
  protobuf_c_boolean has_west_port_is_rpl_next_neighbor;
  uint32_t west_port_is_rpl_next_neighbor;
  protobuf_c_boolean has_west_port_is_force_switch;
  uint32_t west_port_is_force_switch;
  protobuf_c_boolean has_west_port_is_manual_switch;
  uint32_t west_port_is_manual_switch;
  protobuf_c_boolean has_west_port_is_blocked;
  uint32_t west_port_is_blocked;
  protobuf_c_boolean has_west_port_flush_fdb;
  uint32_t west_port_flush_fdb;
  protobuf_c_boolean has_west_port_is_fail;
  uint32_t west_port_is_fail;
  protobuf_c_boolean has_west_port_rec_node_id;
  ProtobufCBinaryData west_port_rec_node_id;
  protobuf_c_boolean has_west_port_rec_bpr;
  uint32_t west_port_rec_bpr;
  protobuf_c_boolean has_control_vlan;
  uint32_t control_vlan;
  protobuf_c_boolean has_is_sub_control_vlan;
  uint32_t is_sub_control_vlan;
  protobuf_c_boolean has_is_fwdtocpu;
  uint32_t is_fwdtocpu;
  protobuf_c_boolean has_raps_mel;
  uint32_t raps_mel;
  protobuf_c_boolean has_raps_dnf;
  uint32_t raps_dnf;
  protobuf_c_boolean has_protection_trigger;
  uint32_t protection_trigger;
  protobuf_c_boolean has_vlan;
  ProtobufCBinaryData vlan;
  protobuf_c_boolean has_primary_vlan;
  uint32_t primary_vlan;
  protobuf_c_boolean has_current_node_state;
  uint32_t current_node_state;
  protobuf_c_boolean has_priority_request;
  uint32_t priority_request;
  protobuf_c_boolean has_hold_off_expired;
  uint32_t hold_off_expired;
  protobuf_c_boolean has_wtr_timeout_val;
  uint32_t wtr_timeout_val;
  protobuf_c_boolean has_wtb_timeout_val;
  uint32_t wtb_timeout_val;
  protobuf_c_boolean has_guard_timeout_val;
  uint32_t guard_timeout_val;
  protobuf_c_boolean has_hold_off_timeout_val;
  uint32_t hold_off_timeout_val;
  protobuf_c_boolean has_flush_fdb_timeout_val;
  uint32_t flush_fdb_timeout_val;
  char *cfm_md_name;
  char *cfm_ma_name;
  protobuf_c_boolean has_level;
  uint32_t level;
  protobuf_c_boolean has_vlan_id;
  uint32_t vlan_id;
  protobuf_c_boolean has_east_interface_cfm_state;
  uint32_t east_interface_cfm_state;
  protobuf_c_boolean has_west_interface_cfm_state;
  uint32_t west_interface_cfm_state;
};
#define CDB__TBL_G8032_RING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_g8032_ring__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_CFM_GLOBAL
 */
struct  _Cdb__TblCfmGlobal
{
  ProtobufCMessage base;
  protobuf_c_boolean has_cfm_enable;
  uint32_t cfm_enable;
  protobuf_c_boolean has_cfm_mode;
  uint32_t cfm_mode;
};
#define CDB__TBL_CFM_GLOBAL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cfm_global__descriptor) \
    , 0,0, 0,0 }


/*
 * TBL_CFM_MD
 */
struct  _Cdb__TblCfmMdKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_CFM_MD_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cfm_md_key__descriptor) \
    , NULL }


struct  _Cdb__TblCfmMd
{
  ProtobufCMessage base;
  Cdb__TblCfmMdKey *key;
  protobuf_c_boolean has_level;
  uint32_t level;
  protobuf_c_boolean has_name_type;
  uint32_t name_type;
  char *pkt_name;
  protobuf_c_boolean has_pkt_name_length;
  uint32_t pkt_name_length;
  char *pkt_name_input;
  protobuf_c_boolean has_service_number;
  uint32_t service_number;
};
#define CDB__TBL_CFM_MD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cfm_md__descriptor) \
    , NULL, 0,0, 0,0, NULL, 0,0, NULL, 0,0 }


/*
 * TBL_CFM_MA
 */
struct  _Cdb__TblCfmMa
{
  ProtobufCMessage base;
  Cdb__ComposeCfmMaKeyT *key;
  char *name;
  protobuf_c_boolean has_name_type;
  uint32_t name_type;
  protobuf_c_boolean has_cci_enabled;
  uint32_t cci_enabled;
  protobuf_c_boolean has_ccm_vlan_cos;
  uint32_t ccm_vlan_cos;
  char *pkt_name;
  char *maid;
  protobuf_c_boolean has_error_write_disable;
  uint32_t error_write_disable;
  protobuf_c_boolean has_error_number;
  uint32_t error_number;
};
#define CDB__TBL_CFM_MA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cfm_ma__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0 }


/*
 * TBL_CFM_MAID
 */
struct  _Cdb__TblCfmMaidKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_CFM_MAID_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cfm_maid_key__descriptor) \
    , NULL }


struct  _Cdb__TblCfmMaid
{
  ProtobufCMessage base;
  Cdb__TblCfmMaidKey *key;
};
#define CDB__TBL_CFM_MAID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cfm_maid__descriptor) \
    , NULL }


/*
 * TBL_CFM_LMEP
 */
struct  _Cdb__TblCfmLmep
{
  ProtobufCMessage base;
  Cdb__ComposeCfmLmepKeyT *key;
  protobuf_c_boolean has_mep_id;
  uint32_t mep_id;
  char *maid;
  char *md_name;
  protobuf_c_boolean has_direction;
  uint32_t direction;
  protobuf_c_boolean has_d_unexp_mep;
  uint32_t d_unexp_mep;
  protobuf_c_boolean has_d_mismerge;
  uint32_t d_mismerge;
  protobuf_c_boolean has_d_meg_lvl;
  uint32_t d_meg_lvl;
  protobuf_c_boolean has_cci_enabled;
  uint32_t cci_enabled;
  protobuf_c_boolean has_cci_interval;
  uint32_t cci_interval;
  protobuf_c_boolean has_rdi;
  uint32_t rdi;
  char *ifname;
  Cdb__ComposeMacAddrT *if_mac_addr;
  protobuf_c_boolean has_ccm_vlan_cos;
  uint32_t ccm_vlan_cos;
  protobuf_c_boolean has_ring_id;
  uint32_t ring_id;
  protobuf_c_boolean has_mep_index;
  uint32_t mep_index;
  protobuf_c_boolean has_rmep_num;
  uint32_t rmep_num;
};
#define CDB__TBL_CFM_LMEP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cfm_lmep__descriptor) \
    , NULL, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_CFM_RMEP
 */
struct  _Cdb__TblCfmRmep
{
  ProtobufCMessage base;
  Cdb__ComposeCfmRmepKeyT *key;
  protobuf_c_boolean has_ifindex;
  uint32_t ifindex;
  char *md_name;
  char *maid;
  Cdb__ComposeMacAddrT *mac_addr;
  protobuf_c_boolean has_first_pkt_rx;
  uint32_t first_pkt_rx;
  protobuf_c_boolean has_d_loc;
  uint32_t d_loc;
  protobuf_c_boolean has_d_unexp_period;
  uint32_t d_unexp_period;
  protobuf_c_boolean has_ma_sa_mismatch;
  uint32_t ma_sa_mismatch;
  protobuf_c_boolean has_rmep_last_rdi;
  uint32_t rmep_last_rdi;
  char *ifname;
  protobuf_c_boolean has_local_mep_id;
  uint32_t local_mep_id;
};
#define CDB__TBL_CFM_RMEP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_cfm_rmep__descriptor) \
    , NULL, 0,0, NULL, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0 }


/*
 * TBL_PIM_SM
 */
struct  _Cdb__TblPimSmKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_PIM_SM_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pim_sm_key__descriptor) \
    , 0 }


struct  _Cdb__TblPimSm
{
  ProtobufCMessage base;
  Cdb__TblPimSmKey *key;
  Cdb__ComposePimStaticRpAddrT *rp_addr;
  protobuf_c_boolean has_hello_time;
  uint32_t hello_time;
  protobuf_c_boolean has_spt_infinity;
  uint32_t spt_infinity;
  protobuf_c_boolean has_jp_timer;
  uint32_t jp_timer;
};
#define CDB__TBL_PIM_SM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pim_sm__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_PIM_SM_BSR
 */
struct  _Cdb__TblPimSmBsrKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_PIM_SM_BSR_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pim_sm_bsr_key__descriptor) \
    , NULL }


struct  _Cdb__TblPimSmBsr
{
  ProtobufCMessage base;
  Cdb__TblPimSmBsrKey *key;
  protobuf_c_boolean has_priority;
  uint32_t priority;
  protobuf_c_boolean has_interval;
  uint32_t interval;
  protobuf_c_boolean has_dr_pri;
  uint32_t dr_pri;
};
#define CDB__TBL_PIM_SM_BSR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pim_sm_bsr__descriptor) \
    , NULL, 0,0, 0,0, 0,0 }


/*
 * TBL_PIM_SM_RP
 */
struct  _Cdb__TblPimSmRpKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_PIM_SM_RP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pim_sm_rp_key__descriptor) \
    , NULL }


struct  _Cdb__TblPimSmRp
{
  ProtobufCMessage base;
  Cdb__TblPimSmRpKey *key;
  protobuf_c_boolean has_priority;
  uint32_t priority;
  protobuf_c_boolean has_interval;
  uint32_t interval;
};
#define CDB__TBL_PIM_SM_RP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pim_sm_rp__descriptor) \
    , NULL, 0,0, 0,0 }


/*
 * TBL_PIM_SM_RP_GP
 */
struct  _Cdb__TblPimSmRpGpKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_PIM_SM_RP_GP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pim_sm_rp_gp_key__descriptor) \
    , 0 }


struct  _Cdb__TblPimSmRpGp
{
  ProtobufCMessage base;
  Cdb__TblPimSmRpGpKey *key;
  Cdb__ComposePimSmGprefixT *group_prefix;
};
#define CDB__TBL_PIM_SM_RP_GP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pim_sm_rp_gp__descriptor) \
    , NULL, NULL }


/*
 * TBL_PIM_DM
 */
struct  _Cdb__TblPimDmKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_PIM_DM_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pim_dm_key__descriptor) \
    , 0 }


struct  _Cdb__TblPimDm
{
  ProtobufCMessage base;
  Cdb__TblPimDmKey *key;
};
#define CDB__TBL_PIM_DM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_pim_dm__descriptor) \
    , NULL }


/*
 * TBL_IGMP_INTF
 */
struct  _Cdb__TblIgmpIntfKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_IGMP_INTF_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_igmp_intf_key__descriptor) \
    , NULL }


struct  _Cdb__TblIgmpIntf
{
  ProtobufCMessage base;
  Cdb__TblIgmpIntfKey *key;
  protobuf_c_boolean has_querier_timeout;
  uint32_t querier_timeout;
  protobuf_c_boolean has_query_interval;
  uint32_t query_interval;
  protobuf_c_boolean has_robustness_variable;
  uint32_t robustness_variable;
  protobuf_c_boolean has_layer3_protocol_index;
  uint32_t layer3_protocol_index;
  protobuf_c_boolean has_layer3_protocol;
  uint32_t layer3_protocol;
  protobuf_c_boolean has_entry_valid;
  uint32_t entry_valid;
  protobuf_c_boolean has_action_index;
  uint32_t action_index;
  protobuf_c_boolean has_last_member_query_count;
  uint32_t last_member_query_count;
  protobuf_c_boolean has_last_member_query_interval;
  uint32_t last_member_query_interval;
  protobuf_c_boolean has_global_limit_number;
  uint32_t global_limit_number;
};
#define CDB__TBL_IGMP_INTF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_igmp_intf__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0 }


/*
 * TBL_RIP
 */
struct  _Cdb__TblRipKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_RIP_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rip_key__descriptor) \
    , 0 }


struct  _Cdb__TblRip
{
  ProtobufCMessage base;
  Cdb__TblRipKey *key;
  protobuf_c_boolean has_version;
  uint32_t version;
  protobuf_c_boolean has_allow_ecmp;
  uint32_t allow_ecmp;
  Cdb__ComposeRipTimersT *timers;
  protobuf_c_boolean has_default_information;
  uint32_t default_information;
  protobuf_c_boolean has_redistribute;
  uint32_t redistribute;
  size_t n_red_metric;
  uint32_t *red_metric;
  protobuf_c_boolean has_default_metric;
  uint32_t default_metric;
  protobuf_c_boolean has_passive_if_default;
  uint32_t passive_if_default;
};
#define CDB__TBL_RIP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rip__descriptor) \
    , NULL, 0,0, 0,0, NULL, 0,0, 0,0, 0,NULL, 0,0, 0,0 }


/*
 * TBL_RIPNG
 */
struct  _Cdb__TblRipngKey
{
  ProtobufCMessage base;
  uint32_t id;
};
#define CDB__TBL_RIPNG_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ripng_key__descriptor) \
    , 0 }


struct  _Cdb__TblRipng
{
  ProtobufCMessage base;
  Cdb__TblRipngKey *key;
  protobuf_c_boolean has_allow_ecmp;
  uint32_t allow_ecmp;
  Cdb__ComposeRipTimersT *timers;
  protobuf_c_boolean has_default_information;
  uint32_t default_information;
  protobuf_c_boolean has_redistribute;
  uint32_t redistribute;
  size_t n_red_metric;
  uint32_t *red_metric;
  protobuf_c_boolean has_default_metric;
  uint32_t default_metric;
};
#define CDB__TBL_RIPNG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ripng__descriptor) \
    , NULL, 0,0, NULL, 0,0, 0,0, 0,NULL, 0,0 }


/*
 * TBL_RIP_NETWORK
 */
struct  _Cdb__TblRipNetwork
{
  ProtobufCMessage base;
  Cdb__ComposePrefixT *key;
};
#define CDB__TBL_RIP_NETWORK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rip_network__descriptor) \
    , NULL }


/*
 * TBL_RIPNG_NETWORK
 */
struct  _Cdb__TblRipngNetwork
{
  ProtobufCMessage base;
  Cdb__ComposePrefixT *key;
};
#define CDB__TBL_RIPNG_NETWORK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ripng_network__descriptor) \
    , NULL }


/*
 * TBL_RIP_NEIGHBOR
 */
struct  _Cdb__TblRipNeighbor
{
  ProtobufCMessage base;
  Cdb__ComposeAddrT *key;
};
#define CDB__TBL_RIP_NEIGHBOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rip_neighbor__descriptor) \
    , NULL }


/*
 * TBL_RIP_PASSIVE_IF
 */
struct  _Cdb__TblRipPassiveIfKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_RIP_PASSIVE_IF_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rip_passive_if_key__descriptor) \
    , NULL }


struct  _Cdb__TblRipPassiveIf
{
  ProtobufCMessage base;
  Cdb__TblRipPassiveIfKey *key;
};
#define CDB__TBL_RIP_PASSIVE_IF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_rip_passive_if__descriptor) \
    , NULL }


/*
 * TBL_RIPNG_PASSIVE_IF
 */
struct  _Cdb__TblRipngPassiveIfKey
{
  ProtobufCMessage base;
  char *name;
};
#define CDB__TBL_RIPNG_PASSIVE_IF_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ripng_passive_if_key__descriptor) \
    , NULL }


struct  _Cdb__TblRipngPassiveIf
{
  ProtobufCMessage base;
  Cdb__TblRipngPassiveIfKey *key;
};
#define CDB__TBL_RIPNG_PASSIVE_IF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ripng_passive_if__descriptor) \
    , NULL }


/*
 * TBL_OSPF_AREA_STUB
 */
struct  _Cdb__TblOspfAreaStubKey
{
  ProtobufCMessage base;
  uint32_t areaid;
};
#define CDB__TBL_OSPF_AREA_STUB_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf_area_stub_key__descriptor) \
    , 0 }


struct  _Cdb__TblOspfAreaStub
{
  ProtobufCMessage base;
  Cdb__TblOspfAreaStubKey *key;
  protobuf_c_boolean has_no_summary;
  int32_t no_summary;
};
#define CDB__TBL_OSPF_AREA_STUB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf_area_stub__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_OSPF6_AREA_STUB
 */
struct  _Cdb__TblOspf6AreaStubKey
{
  ProtobufCMessage base;
  uint32_t areaid;
};
#define CDB__TBL_OSPF6_AREA_STUB_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf6_area_stub_key__descriptor) \
    , 0 }


struct  _Cdb__TblOspf6AreaStub
{
  ProtobufCMessage base;
  Cdb__TblOspf6AreaStubKey *key;
  protobuf_c_boolean has_no_summary;
  int32_t no_summary;
};
#define CDB__TBL_OSPF6_AREA_STUB__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf6_area_stub__descriptor) \
    , NULL, 0,0 }


/*
 * TBL_OSPF_AREA_NSSA
 */
struct  _Cdb__TblOspfAreaNssaKey
{
  ProtobufCMessage base;
  uint32_t areaid;
};
#define CDB__TBL_OSPF_AREA_NSSA_KEY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf_area_nssa_key__descriptor) \
    , 0 }


struct  _Cdb__TblOspfAreaNssa
{
  ProtobufCMessage base;
  Cdb__TblOspfAreaNssaKey *key;
  protobuf_c_boolean has_nssa_role;
  uint32_t nssa_role;
  protobuf_c_boolean has_no_summary;
  int32_t no_summary;
};
#define CDB__TBL_OSPF_AREA_NSSA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf_area_nssa__descriptor) \
    , NULL, 0,0, 0,0 }


/*
 * TBL_OSPF_AREA_VLINK
 */
struct  _Cdb__TblOspfAreaVlink
{
  ProtobufCMessage base;
  Cdb__ComposeOspfAreaVlinkKeyT *key;
  protobuf_c_boolean has_auth_flag;
  int32_t auth_flag;
  protobuf_c_boolean has_auth_type;
  uint32_t auth_type;
  char *auth_key;
  protobuf_c_boolean has_md5_id;
  uint32_t md5_id;
  char *md5_key;
  protobuf_c_boolean has_hello_interval;
  uint32_t hello_interval;
  protobuf_c_boolean has_dead_interval;
  uint32_t dead_interval;
  protobuf_c_boolean has_retransmit_interval;
  uint32_t retransmit_interval;
  protobuf_c_boolean has_transmit_delay;
  uint32_t transmit_delay;
};
#define CDB__TBL_OSPF_AREA_VLINK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdb__tbl_ospf_area_vlink__descriptor) \
    , NULL, 0,0, 0,0, NULL, 0,0, NULL, 0,0, 0,0, 0,0, 0,0 }


/* Cdb__TblInterfaceKey methods */
void   cdb__tbl_interface_key__init
                     (Cdb__TblInterfaceKey         *message);
size_t cdb__tbl_interface_key__get_packed_size
                     (const Cdb__TblInterfaceKey   *message);
size_t cdb__tbl_interface_key__pack
                     (const Cdb__TblInterfaceKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_interface_key__pack_to_buffer
                     (const Cdb__TblInterfaceKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblInterfaceKey *
       cdb__tbl_interface_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_interface_key__free_unpacked
                     (Cdb__TblInterfaceKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblInterface methods */
void   cdb__tbl_interface__init
                     (Cdb__TblInterface         *message);
size_t cdb__tbl_interface__get_packed_size
                     (const Cdb__TblInterface   *message);
size_t cdb__tbl_interface__pack
                     (const Cdb__TblInterface   *message,
                      uint8_t             *out);
size_t cdb__tbl_interface__pack_to_buffer
                     (const Cdb__TblInterface   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblInterface *
       cdb__tbl_interface__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_interface__free_unpacked
                     (Cdb__TblInterface *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRouteIfKey methods */
void   cdb__tbl_route_if_key__init
                     (Cdb__TblRouteIfKey         *message);
size_t cdb__tbl_route_if_key__get_packed_size
                     (const Cdb__TblRouteIfKey   *message);
size_t cdb__tbl_route_if_key__pack
                     (const Cdb__TblRouteIfKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_route_if_key__pack_to_buffer
                     (const Cdb__TblRouteIfKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRouteIfKey *
       cdb__tbl_route_if_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_route_if_key__free_unpacked
                     (Cdb__TblRouteIfKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRouteIf methods */
void   cdb__tbl_route_if__init
                     (Cdb__TblRouteIf         *message);
size_t cdb__tbl_route_if__get_packed_size
                     (const Cdb__TblRouteIf   *message);
size_t cdb__tbl_route_if__pack
                     (const Cdb__TblRouteIf   *message,
                      uint8_t             *out);
size_t cdb__tbl_route_if__pack_to_buffer
                     (const Cdb__TblRouteIf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRouteIf *
       cdb__tbl_route_if__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_route_if__free_unpacked
                     (Cdb__TblRouteIf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblKernelIfKey methods */
void   cdb__tbl_kernel_if_key__init
                     (Cdb__TblKernelIfKey         *message);
size_t cdb__tbl_kernel_if_key__get_packed_size
                     (const Cdb__TblKernelIfKey   *message);
size_t cdb__tbl_kernel_if_key__pack
                     (const Cdb__TblKernelIfKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_kernel_if_key__pack_to_buffer
                     (const Cdb__TblKernelIfKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblKernelIfKey *
       cdb__tbl_kernel_if_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_kernel_if_key__free_unpacked
                     (Cdb__TblKernelIfKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblKernelIf methods */
void   cdb__tbl_kernel_if__init
                     (Cdb__TblKernelIf         *message);
size_t cdb__tbl_kernel_if__get_packed_size
                     (const Cdb__TblKernelIf   *message);
size_t cdb__tbl_kernel_if__pack
                     (const Cdb__TblKernelIf   *message,
                      uint8_t             *out);
size_t cdb__tbl_kernel_if__pack_to_buffer
                     (const Cdb__TblKernelIf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblKernelIf *
       cdb__tbl_kernel_if__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_kernel_if__free_unpacked
                     (Cdb__TblKernelIf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaPortIfKey methods */
void   cdb__tbl_fea_port_if_key__init
                     (Cdb__TblFeaPortIfKey         *message);
size_t cdb__tbl_fea_port_if_key__get_packed_size
                     (const Cdb__TblFeaPortIfKey   *message);
size_t cdb__tbl_fea_port_if_key__pack
                     (const Cdb__TblFeaPortIfKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_port_if_key__pack_to_buffer
                     (const Cdb__TblFeaPortIfKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaPortIfKey *
       cdb__tbl_fea_port_if_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_port_if_key__free_unpacked
                     (Cdb__TblFeaPortIfKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaPortIf methods */
void   cdb__tbl_fea_port_if__init
                     (Cdb__TblFeaPortIf         *message);
size_t cdb__tbl_fea_port_if__get_packed_size
                     (const Cdb__TblFeaPortIf   *message);
size_t cdb__tbl_fea_port_if__pack
                     (const Cdb__TblFeaPortIf   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_port_if__pack_to_buffer
                     (const Cdb__TblFeaPortIf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaPortIf *
       cdb__tbl_fea_port_if__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_port_if__free_unpacked
                     (Cdb__TblFeaPortIf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVlanKey methods */
void   cdb__tbl_vlan_key__init
                     (Cdb__TblVlanKey         *message);
size_t cdb__tbl_vlan_key__get_packed_size
                     (const Cdb__TblVlanKey   *message);
size_t cdb__tbl_vlan_key__pack
                     (const Cdb__TblVlanKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_vlan_key__pack_to_buffer
                     (const Cdb__TblVlanKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVlanKey *
       cdb__tbl_vlan_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vlan_key__free_unpacked
                     (Cdb__TblVlanKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVlan methods */
void   cdb__tbl_vlan__init
                     (Cdb__TblVlan         *message);
size_t cdb__tbl_vlan__get_packed_size
                     (const Cdb__TblVlan   *message);
size_t cdb__tbl_vlan__pack
                     (const Cdb__TblVlan   *message,
                      uint8_t             *out);
size_t cdb__tbl_vlan__pack_to_buffer
                     (const Cdb__TblVlan   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVlan *
       cdb__tbl_vlan__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vlan__free_unpacked
                     (Cdb__TblVlan *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPvlanKey methods */
void   cdb__tbl_pvlan_key__init
                     (Cdb__TblPvlanKey         *message);
size_t cdb__tbl_pvlan_key__get_packed_size
                     (const Cdb__TblPvlanKey   *message);
size_t cdb__tbl_pvlan_key__pack
                     (const Cdb__TblPvlanKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_pvlan_key__pack_to_buffer
                     (const Cdb__TblPvlanKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPvlanKey *
       cdb__tbl_pvlan_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pvlan_key__free_unpacked
                     (Cdb__TblPvlanKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPvlan methods */
void   cdb__tbl_pvlan__init
                     (Cdb__TblPvlan         *message);
size_t cdb__tbl_pvlan__get_packed_size
                     (const Cdb__TblPvlan   *message);
size_t cdb__tbl_pvlan__pack
                     (const Cdb__TblPvlan   *message,
                      uint8_t             *out);
size_t cdb__tbl_pvlan__pack_to_buffer
                     (const Cdb__TblPvlan   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPvlan *
       cdb__tbl_pvlan__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pvlan__free_unpacked
                     (Cdb__TblPvlan *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFdb methods */
void   cdb__tbl_fdb__init
                     (Cdb__TblFdb         *message);
size_t cdb__tbl_fdb__get_packed_size
                     (const Cdb__TblFdb   *message);
size_t cdb__tbl_fdb__pack
                     (const Cdb__TblFdb   *message,
                      uint8_t             *out);
size_t cdb__tbl_fdb__pack_to_buffer
                     (const Cdb__TblFdb   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFdb *
       cdb__tbl_fdb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fdb__free_unpacked
                     (Cdb__TblFdb *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMcfdb methods */
void   cdb__tbl_mcfdb__init
                     (Cdb__TblMcfdb         *message);
size_t cdb__tbl_mcfdb__get_packed_size
                     (const Cdb__TblMcfdb   *message);
size_t cdb__tbl_mcfdb__pack
                     (const Cdb__TblMcfdb   *message,
                      uint8_t             *out);
size_t cdb__tbl_mcfdb__pack_to_buffer
                     (const Cdb__TblMcfdb   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMcfdb *
       cdb__tbl_mcfdb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mcfdb__free_unpacked
                     (Cdb__TblMcfdb *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMacfilterKey methods */
void   cdb__tbl_macfilter_key__init
                     (Cdb__TblMacfilterKey         *message);
size_t cdb__tbl_macfilter_key__get_packed_size
                     (const Cdb__TblMacfilterKey   *message);
size_t cdb__tbl_macfilter_key__pack
                     (const Cdb__TblMacfilterKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_macfilter_key__pack_to_buffer
                     (const Cdb__TblMacfilterKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMacfilterKey *
       cdb__tbl_macfilter_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_macfilter_key__free_unpacked
                     (Cdb__TblMacfilterKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMacfilter methods */
void   cdb__tbl_macfilter__init
                     (Cdb__TblMacfilter         *message);
size_t cdb__tbl_macfilter__get_packed_size
                     (const Cdb__TblMacfilter   *message);
size_t cdb__tbl_macfilter__pack
                     (const Cdb__TblMacfilter   *message,
                      uint8_t             *out);
size_t cdb__tbl_macfilter__pack_to_buffer
                     (const Cdb__TblMacfilter   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMacfilter *
       cdb__tbl_macfilter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_macfilter__free_unpacked
                     (Cdb__TblMacfilter *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPsfdb methods */
void   cdb__tbl_psfdb__init
                     (Cdb__TblPsfdb         *message);
size_t cdb__tbl_psfdb__get_packed_size
                     (const Cdb__TblPsfdb   *message);
size_t cdb__tbl_psfdb__pack
                     (const Cdb__TblPsfdb   *message,
                      uint8_t             *out);
size_t cdb__tbl_psfdb__pack_to_buffer
                     (const Cdb__TblPsfdb   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPsfdb *
       cdb__tbl_psfdb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_psfdb__free_unpacked
                     (Cdb__TblPsfdb *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIpsgSIpKey methods */
void   cdb__tbl_ipsg_s_ip_key__init
                     (Cdb__TblIpsgSIpKey         *message);
size_t cdb__tbl_ipsg_s_ip_key__get_packed_size
                     (const Cdb__TblIpsgSIpKey   *message);
size_t cdb__tbl_ipsg_s_ip_key__pack
                     (const Cdb__TblIpsgSIpKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ipsg_s_ip_key__pack_to_buffer
                     (const Cdb__TblIpsgSIpKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIpsgSIpKey *
       cdb__tbl_ipsg_s_ip_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ipsg_s_ip_key__free_unpacked
                     (Cdb__TblIpsgSIpKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIpsgSIp methods */
void   cdb__tbl_ipsg_s_ip__init
                     (Cdb__TblIpsgSIp         *message);
size_t cdb__tbl_ipsg_s_ip__get_packed_size
                     (const Cdb__TblIpsgSIp   *message);
size_t cdb__tbl_ipsg_s_ip__pack
                     (const Cdb__TblIpsgSIp   *message,
                      uint8_t             *out);
size_t cdb__tbl_ipsg_s_ip__pack_to_buffer
                     (const Cdb__TblIpsgSIp   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIpsgSIp *
       cdb__tbl_ipsg_s_ip__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ipsg_s_ip__free_unpacked
                     (Cdb__TblIpsgSIp *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIpsgSMacKey methods */
void   cdb__tbl_ipsg_s_mac_key__init
                     (Cdb__TblIpsgSMacKey         *message);
size_t cdb__tbl_ipsg_s_mac_key__get_packed_size
                     (const Cdb__TblIpsgSMacKey   *message);
size_t cdb__tbl_ipsg_s_mac_key__pack
                     (const Cdb__TblIpsgSMacKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ipsg_s_mac_key__pack_to_buffer
                     (const Cdb__TblIpsgSMacKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIpsgSMacKey *
       cdb__tbl_ipsg_s_mac_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ipsg_s_mac_key__free_unpacked
                     (Cdb__TblIpsgSMacKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIpsgSMac methods */
void   cdb__tbl_ipsg_s_mac__init
                     (Cdb__TblIpsgSMac         *message);
size_t cdb__tbl_ipsg_s_mac__get_packed_size
                     (const Cdb__TblIpsgSMac   *message);
size_t cdb__tbl_ipsg_s_mac__pack
                     (const Cdb__TblIpsgSMac   *message,
                      uint8_t             *out);
size_t cdb__tbl_ipsg_s_mac__pack_to_buffer
                     (const Cdb__TblIpsgSMac   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIpsgSMac *
       cdb__tbl_ipsg_s_mac__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ipsg_s_mac__free_unpacked
                     (Cdb__TblIpsgSMac *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIpsgFib methods */
void   cdb__tbl_ipsg_fib__init
                     (Cdb__TblIpsgFib         *message);
size_t cdb__tbl_ipsg_fib__get_packed_size
                     (const Cdb__TblIpsgFib   *message);
size_t cdb__tbl_ipsg_fib__pack
                     (const Cdb__TblIpsgFib   *message,
                      uint8_t             *out);
size_t cdb__tbl_ipsg_fib__pack_to_buffer
                     (const Cdb__TblIpsgFib   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIpsgFib *
       cdb__tbl_ipsg_fib__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ipsg_fib__free_unpacked
                     (Cdb__TblIpsgFib *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblBrgGlobal methods */
void   cdb__tbl_brg_global__init
                     (Cdb__TblBrgGlobal         *message);
size_t cdb__tbl_brg_global__get_packed_size
                     (const Cdb__TblBrgGlobal   *message);
size_t cdb__tbl_brg_global__pack
                     (const Cdb__TblBrgGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_brg_global__pack_to_buffer
                     (const Cdb__TblBrgGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblBrgGlobal *
       cdb__tbl_brg_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_brg_global__free_unpacked
                     (Cdb__TblBrgGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMstpPortKey methods */
void   cdb__tbl_mstp_port_key__init
                     (Cdb__TblMstpPortKey         *message);
size_t cdb__tbl_mstp_port_key__get_packed_size
                     (const Cdb__TblMstpPortKey   *message);
size_t cdb__tbl_mstp_port_key__pack
                     (const Cdb__TblMstpPortKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_mstp_port_key__pack_to_buffer
                     (const Cdb__TblMstpPortKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMstpPortKey *
       cdb__tbl_mstp_port_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mstp_port_key__free_unpacked
                     (Cdb__TblMstpPortKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMstpPort methods */
void   cdb__tbl_mstp_port__init
                     (Cdb__TblMstpPort         *message);
size_t cdb__tbl_mstp_port__get_packed_size
                     (const Cdb__TblMstpPort   *message);
size_t cdb__tbl_mstp_port__pack
                     (const Cdb__TblMstpPort   *message,
                      uint8_t             *out);
size_t cdb__tbl_mstp_port__pack_to_buffer
                     (const Cdb__TblMstpPort   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMstpPort *
       cdb__tbl_mstp_port__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mstp_port__free_unpacked
                     (Cdb__TblMstpPort *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMstiPort methods */
void   cdb__tbl_msti_port__init
                     (Cdb__TblMstiPort         *message);
size_t cdb__tbl_msti_port__get_packed_size
                     (const Cdb__TblMstiPort   *message);
size_t cdb__tbl_msti_port__pack
                     (const Cdb__TblMstiPort   *message,
                      uint8_t             *out);
size_t cdb__tbl_msti_port__pack_to_buffer
                     (const Cdb__TblMstiPort   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMstiPort *
       cdb__tbl_msti_port__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_msti_port__free_unpacked
                     (Cdb__TblMstiPort *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMstpInstanceKey methods */
void   cdb__tbl_mstp_instance_key__init
                     (Cdb__TblMstpInstanceKey         *message);
size_t cdb__tbl_mstp_instance_key__get_packed_size
                     (const Cdb__TblMstpInstanceKey   *message);
size_t cdb__tbl_mstp_instance_key__pack
                     (const Cdb__TblMstpInstanceKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_mstp_instance_key__pack_to_buffer
                     (const Cdb__TblMstpInstanceKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMstpInstanceKey *
       cdb__tbl_mstp_instance_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mstp_instance_key__free_unpacked
                     (Cdb__TblMstpInstanceKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMstpInstance methods */
void   cdb__tbl_mstp_instance__init
                     (Cdb__TblMstpInstance         *message);
size_t cdb__tbl_mstp_instance__get_packed_size
                     (const Cdb__TblMstpInstance   *message);
size_t cdb__tbl_mstp_instance__pack
                     (const Cdb__TblMstpInstance   *message,
                      uint8_t             *out);
size_t cdb__tbl_mstp_instance__pack_to_buffer
                     (const Cdb__TblMstpInstance   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMstpInstance *
       cdb__tbl_mstp_instance__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mstp_instance__free_unpacked
                     (Cdb__TblMstpInstance *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMstpGlobal methods */
void   cdb__tbl_mstp_global__init
                     (Cdb__TblMstpGlobal         *message);
size_t cdb__tbl_mstp_global__get_packed_size
                     (const Cdb__TblMstpGlobal   *message);
size_t cdb__tbl_mstp_global__pack
                     (const Cdb__TblMstpGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_mstp_global__pack_to_buffer
                     (const Cdb__TblMstpGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMstpGlobal *
       cdb__tbl_mstp_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mstp_global__free_unpacked
                     (Cdb__TblMstpGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLldpGlobal methods */
void   cdb__tbl_lldp_global__init
                     (Cdb__TblLldpGlobal         *message);
size_t cdb__tbl_lldp_global__get_packed_size
                     (const Cdb__TblLldpGlobal   *message);
size_t cdb__tbl_lldp_global__pack
                     (const Cdb__TblLldpGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_lldp_global__pack_to_buffer
                     (const Cdb__TblLldpGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLldpGlobal *
       cdb__tbl_lldp_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_lldp_global__free_unpacked
                     (Cdb__TblLldpGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLldpIfKey methods */
void   cdb__tbl_lldp_if_key__init
                     (Cdb__TblLldpIfKey         *message);
size_t cdb__tbl_lldp_if_key__get_packed_size
                     (const Cdb__TblLldpIfKey   *message);
size_t cdb__tbl_lldp_if_key__pack
                     (const Cdb__TblLldpIfKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_lldp_if_key__pack_to_buffer
                     (const Cdb__TblLldpIfKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLldpIfKey *
       cdb__tbl_lldp_if_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_lldp_if_key__free_unpacked
                     (Cdb__TblLldpIfKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLldpIf methods */
void   cdb__tbl_lldp_if__init
                     (Cdb__TblLldpIf         *message);
size_t cdb__tbl_lldp_if__get_packed_size
                     (const Cdb__TblLldpIf   *message);
size_t cdb__tbl_lldp_if__pack
                     (const Cdb__TblLldpIf   *message,
                      uint8_t             *out);
size_t cdb__tbl_lldp_if__pack_to_buffer
                     (const Cdb__TblLldpIf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLldpIf *
       cdb__tbl_lldp_if__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_lldp_if__free_unpacked
                     (Cdb__TblLldpIf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMlag methods */
void   cdb__tbl_mlag__init
                     (Cdb__TblMlag         *message);
size_t cdb__tbl_mlag__get_packed_size
                     (const Cdb__TblMlag   *message);
size_t cdb__tbl_mlag__pack
                     (const Cdb__TblMlag   *message,
                      uint8_t             *out);
size_t cdb__tbl_mlag__pack_to_buffer
                     (const Cdb__TblMlag   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMlag *
       cdb__tbl_mlag__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mlag__free_unpacked
                     (Cdb__TblMlag *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMlagPeer methods */
void   cdb__tbl_mlag_peer__init
                     (Cdb__TblMlagPeer         *message);
size_t cdb__tbl_mlag_peer__get_packed_size
                     (const Cdb__TblMlagPeer   *message);
size_t cdb__tbl_mlag_peer__pack
                     (const Cdb__TblMlagPeer   *message,
                      uint8_t             *out);
size_t cdb__tbl_mlag_peer__pack_to_buffer
                     (const Cdb__TblMlagPeer   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMlagPeer *
       cdb__tbl_mlag_peer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mlag_peer__free_unpacked
                     (Cdb__TblMlagPeer *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMlagPortKey methods */
void   cdb__tbl_mlag_port_key__init
                     (Cdb__TblMlagPortKey         *message);
size_t cdb__tbl_mlag_port_key__get_packed_size
                     (const Cdb__TblMlagPortKey   *message);
size_t cdb__tbl_mlag_port_key__pack
                     (const Cdb__TblMlagPortKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_mlag_port_key__pack_to_buffer
                     (const Cdb__TblMlagPortKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMlagPortKey *
       cdb__tbl_mlag_port_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mlag_port_key__free_unpacked
                     (Cdb__TblMlagPortKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMlagPort methods */
void   cdb__tbl_mlag_port__init
                     (Cdb__TblMlagPort         *message);
size_t cdb__tbl_mlag_port__get_packed_size
                     (const Cdb__TblMlagPort   *message);
size_t cdb__tbl_mlag_port__pack
                     (const Cdb__TblMlagPort   *message,
                      uint8_t             *out);
size_t cdb__tbl_mlag_port__pack_to_buffer
                     (const Cdb__TblMlagPort   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMlagPort *
       cdb__tbl_mlag_port__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mlag_port__free_unpacked
                     (Cdb__TblMlagPort *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIsolationKey methods */
void   cdb__tbl_isolation_key__init
                     (Cdb__TblIsolationKey         *message);
size_t cdb__tbl_isolation_key__get_packed_size
                     (const Cdb__TblIsolationKey   *message);
size_t cdb__tbl_isolation_key__pack
                     (const Cdb__TblIsolationKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_isolation_key__pack_to_buffer
                     (const Cdb__TblIsolationKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIsolationKey *
       cdb__tbl_isolation_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_isolation_key__free_unpacked
                     (Cdb__TblIsolationKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIsolation methods */
void   cdb__tbl_isolation__init
                     (Cdb__TblIsolation         *message);
size_t cdb__tbl_isolation__get_packed_size
                     (const Cdb__TblIsolation   *message);
size_t cdb__tbl_isolation__pack
                     (const Cdb__TblIsolation   *message,
                      uint8_t             *out);
size_t cdb__tbl_isolation__pack_to_buffer
                     (const Cdb__TblIsolation   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIsolation *
       cdb__tbl_isolation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_isolation__free_unpacked
                     (Cdb__TblIsolation *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRouteGlobal methods */
void   cdb__tbl_route_global__init
                     (Cdb__TblRouteGlobal         *message);
size_t cdb__tbl_route_global__get_packed_size
                     (const Cdb__TblRouteGlobal   *message);
size_t cdb__tbl_route_global__pack
                     (const Cdb__TblRouteGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_route_global__pack_to_buffer
                     (const Cdb__TblRouteGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRouteGlobal *
       cdb__tbl_route_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_route_global__free_unpacked
                     (Cdb__TblRouteGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblBgpKey methods */
void   cdb__tbl_bgp_key__init
                     (Cdb__TblBgpKey         *message);
size_t cdb__tbl_bgp_key__get_packed_size
                     (const Cdb__TblBgpKey   *message);
size_t cdb__tbl_bgp_key__pack
                     (const Cdb__TblBgpKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_bgp_key__pack_to_buffer
                     (const Cdb__TblBgpKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblBgpKey *
       cdb__tbl_bgp_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_bgp_key__free_unpacked
                     (Cdb__TblBgpKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblBgp methods */
void   cdb__tbl_bgp__init
                     (Cdb__TblBgp         *message);
size_t cdb__tbl_bgp__get_packed_size
                     (const Cdb__TblBgp   *message);
size_t cdb__tbl_bgp__pack
                     (const Cdb__TblBgp   *message,
                      uint8_t             *out);
size_t cdb__tbl_bgp__pack_to_buffer
                     (const Cdb__TblBgp   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblBgp *
       cdb__tbl_bgp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_bgp__free_unpacked
                     (Cdb__TblBgp *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblBgpNetwork methods */
void   cdb__tbl_bgp_network__init
                     (Cdb__TblBgpNetwork         *message);
size_t cdb__tbl_bgp_network__get_packed_size
                     (const Cdb__TblBgpNetwork   *message);
size_t cdb__tbl_bgp_network__pack
                     (const Cdb__TblBgpNetwork   *message,
                      uint8_t             *out);
size_t cdb__tbl_bgp_network__pack_to_buffer
                     (const Cdb__TblBgpNetwork   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblBgpNetwork *
       cdb__tbl_bgp_network__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_bgp_network__free_unpacked
                     (Cdb__TblBgpNetwork *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblBgpNeighbor methods */
void   cdb__tbl_bgp_neighbor__init
                     (Cdb__TblBgpNeighbor         *message);
size_t cdb__tbl_bgp_neighbor__get_packed_size
                     (const Cdb__TblBgpNeighbor   *message);
size_t cdb__tbl_bgp_neighbor__pack
                     (const Cdb__TblBgpNeighbor   *message,
                      uint8_t             *out);
size_t cdb__tbl_bgp_neighbor__pack_to_buffer
                     (const Cdb__TblBgpNeighbor   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblBgpNeighbor *
       cdb__tbl_bgp_neighbor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_bgp_neighbor__free_unpacked
                     (Cdb__TblBgpNeighbor *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspfKey methods */
void   cdb__tbl_ospf_key__init
                     (Cdb__TblOspfKey         *message);
size_t cdb__tbl_ospf_key__get_packed_size
                     (const Cdb__TblOspfKey   *message);
size_t cdb__tbl_ospf_key__pack
                     (const Cdb__TblOspfKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf_key__pack_to_buffer
                     (const Cdb__TblOspfKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspfKey *
       cdb__tbl_ospf_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf_key__free_unpacked
                     (Cdb__TblOspfKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspf methods */
void   cdb__tbl_ospf__init
                     (Cdb__TblOspf         *message);
size_t cdb__tbl_ospf__get_packed_size
                     (const Cdb__TblOspf   *message);
size_t cdb__tbl_ospf__pack
                     (const Cdb__TblOspf   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf__pack_to_buffer
                     (const Cdb__TblOspf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspf *
       cdb__tbl_ospf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf__free_unpacked
                     (Cdb__TblOspf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspf6Key methods */
void   cdb__tbl_ospf6_key__init
                     (Cdb__TblOspf6Key         *message);
size_t cdb__tbl_ospf6_key__get_packed_size
                     (const Cdb__TblOspf6Key   *message);
size_t cdb__tbl_ospf6_key__pack
                     (const Cdb__TblOspf6Key   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf6_key__pack_to_buffer
                     (const Cdb__TblOspf6Key   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspf6Key *
       cdb__tbl_ospf6_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf6_key__free_unpacked
                     (Cdb__TblOspf6Key *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspf6 methods */
void   cdb__tbl_ospf6__init
                     (Cdb__TblOspf6         *message);
size_t cdb__tbl_ospf6__get_packed_size
                     (const Cdb__TblOspf6   *message);
size_t cdb__tbl_ospf6__pack
                     (const Cdb__TblOspf6   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf6__pack_to_buffer
                     (const Cdb__TblOspf6   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspf6 *
       cdb__tbl_ospf6__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf6__free_unpacked
                     (Cdb__TblOspf6 *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspf6InterfaceKey methods */
void   cdb__tbl_ospf6_interface_key__init
                     (Cdb__TblOspf6InterfaceKey         *message);
size_t cdb__tbl_ospf6_interface_key__get_packed_size
                     (const Cdb__TblOspf6InterfaceKey   *message);
size_t cdb__tbl_ospf6_interface_key__pack
                     (const Cdb__TblOspf6InterfaceKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf6_interface_key__pack_to_buffer
                     (const Cdb__TblOspf6InterfaceKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspf6InterfaceKey *
       cdb__tbl_ospf6_interface_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf6_interface_key__free_unpacked
                     (Cdb__TblOspf6InterfaceKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspf6Interface methods */
void   cdb__tbl_ospf6_interface__init
                     (Cdb__TblOspf6Interface         *message);
size_t cdb__tbl_ospf6_interface__get_packed_size
                     (const Cdb__TblOspf6Interface   *message);
size_t cdb__tbl_ospf6_interface__pack
                     (const Cdb__TblOspf6Interface   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf6_interface__pack_to_buffer
                     (const Cdb__TblOspf6Interface   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspf6Interface *
       cdb__tbl_ospf6_interface__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf6_interface__free_unpacked
                     (Cdb__TblOspf6Interface *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspfNetwork methods */
void   cdb__tbl_ospf_network__init
                     (Cdb__TblOspfNetwork         *message);
size_t cdb__tbl_ospf_network__get_packed_size
                     (const Cdb__TblOspfNetwork   *message);
size_t cdb__tbl_ospf_network__pack
                     (const Cdb__TblOspfNetwork   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf_network__pack_to_buffer
                     (const Cdb__TblOspfNetwork   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspfNetwork *
       cdb__tbl_ospf_network__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf_network__free_unpacked
                     (Cdb__TblOspfNetwork *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspfAreaAuthKey methods */
void   cdb__tbl_ospf_area_auth_key__init
                     (Cdb__TblOspfAreaAuthKey         *message);
size_t cdb__tbl_ospf_area_auth_key__get_packed_size
                     (const Cdb__TblOspfAreaAuthKey   *message);
size_t cdb__tbl_ospf_area_auth_key__pack
                     (const Cdb__TblOspfAreaAuthKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf_area_auth_key__pack_to_buffer
                     (const Cdb__TblOspfAreaAuthKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspfAreaAuthKey *
       cdb__tbl_ospf_area_auth_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf_area_auth_key__free_unpacked
                     (Cdb__TblOspfAreaAuthKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspfAreaAuth methods */
void   cdb__tbl_ospf_area_auth__init
                     (Cdb__TblOspfAreaAuth         *message);
size_t cdb__tbl_ospf_area_auth__get_packed_size
                     (const Cdb__TblOspfAreaAuth   *message);
size_t cdb__tbl_ospf_area_auth__pack
                     (const Cdb__TblOspfAreaAuth   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf_area_auth__pack_to_buffer
                     (const Cdb__TblOspfAreaAuth   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspfAreaAuth *
       cdb__tbl_ospf_area_auth__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf_area_auth__free_unpacked
                     (Cdb__TblOspfAreaAuth *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspfAreaRange methods */
void   cdb__tbl_ospf_area_range__init
                     (Cdb__TblOspfAreaRange         *message);
size_t cdb__tbl_ospf_area_range__get_packed_size
                     (const Cdb__TblOspfAreaRange   *message);
size_t cdb__tbl_ospf_area_range__pack
                     (const Cdb__TblOspfAreaRange   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf_area_range__pack_to_buffer
                     (const Cdb__TblOspfAreaRange   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspfAreaRange *
       cdb__tbl_ospf_area_range__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf_area_range__free_unpacked
                     (Cdb__TblOspfAreaRange *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspf6AreaRange methods */
void   cdb__tbl_ospf6_area_range__init
                     (Cdb__TblOspf6AreaRange         *message);
size_t cdb__tbl_ospf6_area_range__get_packed_size
                     (const Cdb__TblOspf6AreaRange   *message);
size_t cdb__tbl_ospf6_area_range__pack
                     (const Cdb__TblOspf6AreaRange   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf6_area_range__pack_to_buffer
                     (const Cdb__TblOspf6AreaRange   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspf6AreaRange *
       cdb__tbl_ospf6_area_range__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf6_area_range__free_unpacked
                     (Cdb__TblOspf6AreaRange *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIprouteNode methods */
void   cdb__tbl_iproute_node__init
                     (Cdb__TblIprouteNode         *message);
size_t cdb__tbl_iproute_node__get_packed_size
                     (const Cdb__TblIprouteNode   *message);
size_t cdb__tbl_iproute_node__pack
                     (const Cdb__TblIprouteNode   *message,
                      uint8_t             *out);
size_t cdb__tbl_iproute_node__pack_to_buffer
                     (const Cdb__TblIprouteNode   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIprouteNode *
       cdb__tbl_iproute_node__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_iproute_node__free_unpacked
                     (Cdb__TblIprouteNode *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIprouteNodeAddFail methods */
void   cdb__tbl_iproute_node_add_fail__init
                     (Cdb__TblIprouteNodeAddFail         *message);
size_t cdb__tbl_iproute_node_add_fail__get_packed_size
                     (const Cdb__TblIprouteNodeAddFail   *message);
size_t cdb__tbl_iproute_node_add_fail__pack
                     (const Cdb__TblIprouteNodeAddFail   *message,
                      uint8_t             *out);
size_t cdb__tbl_iproute_node_add_fail__pack_to_buffer
                     (const Cdb__TblIprouteNodeAddFail   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIprouteNodeAddFail *
       cdb__tbl_iproute_node_add_fail__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_iproute_node_add_fail__free_unpacked
                     (Cdb__TblIprouteNodeAddFail *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIprouteNodeAddFailCount methods */
void   cdb__tbl_iproute_node_add_fail_count__init
                     (Cdb__TblIprouteNodeAddFailCount         *message);
size_t cdb__tbl_iproute_node_add_fail_count__get_packed_size
                     (const Cdb__TblIprouteNodeAddFailCount   *message);
size_t cdb__tbl_iproute_node_add_fail_count__pack
                     (const Cdb__TblIprouteNodeAddFailCount   *message,
                      uint8_t             *out);
size_t cdb__tbl_iproute_node_add_fail_count__pack_to_buffer
                     (const Cdb__TblIprouteNodeAddFailCount   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIprouteNodeAddFailCount *
       cdb__tbl_iproute_node_add_fail_count__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_iproute_node_add_fail_count__free_unpacked
                     (Cdb__TblIprouteNodeAddFailCount *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblStaticRouteCfg methods */
void   cdb__tbl_static_route_cfg__init
                     (Cdb__TblStaticRouteCfg         *message);
size_t cdb__tbl_static_route_cfg__get_packed_size
                     (const Cdb__TblStaticRouteCfg   *message);
size_t cdb__tbl_static_route_cfg__pack
                     (const Cdb__TblStaticRouteCfg   *message,
                      uint8_t             *out);
size_t cdb__tbl_static_route_cfg__pack_to_buffer
                     (const Cdb__TblStaticRouteCfg   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblStaticRouteCfg *
       cdb__tbl_static_route_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_static_route_cfg__free_unpacked
                     (Cdb__TblStaticRouteCfg *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblStaticRtCnt methods */
void   cdb__tbl_static_rt_cnt__init
                     (Cdb__TblStaticRtCnt         *message);
size_t cdb__tbl_static_rt_cnt__get_packed_size
                     (const Cdb__TblStaticRtCnt   *message);
size_t cdb__tbl_static_rt_cnt__pack
                     (const Cdb__TblStaticRtCnt   *message,
                      uint8_t             *out);
size_t cdb__tbl_static_rt_cnt__pack_to_buffer
                     (const Cdb__TblStaticRtCnt   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblStaticRtCnt *
       cdb__tbl_static_rt_cnt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_static_rt_cnt__free_unpacked
                     (Cdb__TblStaticRtCnt *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblArpFibKey methods */
void   cdb__tbl_arp_fib_key__init
                     (Cdb__TblArpFibKey         *message);
size_t cdb__tbl_arp_fib_key__get_packed_size
                     (const Cdb__TblArpFibKey   *message);
size_t cdb__tbl_arp_fib_key__pack
                     (const Cdb__TblArpFibKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_arp_fib_key__pack_to_buffer
                     (const Cdb__TblArpFibKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblArpFibKey *
       cdb__tbl_arp_fib_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_arp_fib_key__free_unpacked
                     (Cdb__TblArpFibKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblArpFib methods */
void   cdb__tbl_arp_fib__init
                     (Cdb__TblArpFib         *message);
size_t cdb__tbl_arp_fib__get_packed_size
                     (const Cdb__TblArpFib   *message);
size_t cdb__tbl_arp_fib__pack
                     (const Cdb__TblArpFib   *message,
                      uint8_t             *out);
size_t cdb__tbl_arp_fib__pack_to_buffer
                     (const Cdb__TblArpFib   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblArpFib *
       cdb__tbl_arp_fib__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_arp_fib__free_unpacked
                     (Cdb__TblArpFib *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblArpKey methods */
void   cdb__tbl_arp_key__init
                     (Cdb__TblArpKey         *message);
size_t cdb__tbl_arp_key__get_packed_size
                     (const Cdb__TblArpKey   *message);
size_t cdb__tbl_arp_key__pack
                     (const Cdb__TblArpKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_arp_key__pack_to_buffer
                     (const Cdb__TblArpKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblArpKey *
       cdb__tbl_arp_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_arp_key__free_unpacked
                     (Cdb__TblArpKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblArp methods */
void   cdb__tbl_arp__init
                     (Cdb__TblArp         *message);
size_t cdb__tbl_arp__get_packed_size
                     (const Cdb__TblArp   *message);
size_t cdb__tbl_arp__pack
                     (const Cdb__TblArp   *message,
                      uint8_t             *out);
size_t cdb__tbl_arp__pack_to_buffer
                     (const Cdb__TblArp   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblArp *
       cdb__tbl_arp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_arp__free_unpacked
                     (Cdb__TblArp *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNexthop methods */
void   cdb__tbl_nexthop__init
                     (Cdb__TblNexthop         *message);
size_t cdb__tbl_nexthop__get_packed_size
                     (const Cdb__TblNexthop   *message);
size_t cdb__tbl_nexthop__pack
                     (const Cdb__TblNexthop   *message,
                      uint8_t             *out);
size_t cdb__tbl_nexthop__pack_to_buffer
                     (const Cdb__TblNexthop   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNexthop *
       cdb__tbl_nexthop__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nexthop__free_unpacked
                     (Cdb__TblNexthop *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNexthopGroup methods */
void   cdb__tbl_nexthop_group__init
                     (Cdb__TblNexthopGroup         *message);
size_t cdb__tbl_nexthop_group__get_packed_size
                     (const Cdb__TblNexthopGroup   *message);
size_t cdb__tbl_nexthop_group__pack
                     (const Cdb__TblNexthopGroup   *message,
                      uint8_t             *out);
size_t cdb__tbl_nexthop_group__pack_to_buffer
                     (const Cdb__TblNexthopGroup   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNexthopGroup *
       cdb__tbl_nexthop_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nexthop_group__free_unpacked
                     (Cdb__TblNexthopGroup *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNexthopGroupRouted methods */
void   cdb__tbl_nexthop_group_routed__init
                     (Cdb__TblNexthopGroupRouted         *message);
size_t cdb__tbl_nexthop_group_routed__get_packed_size
                     (const Cdb__TblNexthopGroupRouted   *message);
size_t cdb__tbl_nexthop_group_routed__pack
                     (const Cdb__TblNexthopGroupRouted   *message,
                      uint8_t             *out);
size_t cdb__tbl_nexthop_group_routed__pack_to_buffer
                     (const Cdb__TblNexthopGroupRouted   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNexthopGroupRouted *
       cdb__tbl_nexthop_group_routed__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nexthop_group_routed__free_unpacked
                     (Cdb__TblNexthopGroupRouted *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaNexthop methods */
void   cdb__tbl_fea_nexthop__init
                     (Cdb__TblFeaNexthop         *message);
size_t cdb__tbl_fea_nexthop__get_packed_size
                     (const Cdb__TblFeaNexthop   *message);
size_t cdb__tbl_fea_nexthop__pack
                     (const Cdb__TblFeaNexthop   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_nexthop__pack_to_buffer
                     (const Cdb__TblFeaNexthop   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaNexthop *
       cdb__tbl_fea_nexthop__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_nexthop__free_unpacked
                     (Cdb__TblFeaNexthop *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMrt methods */
void   cdb__tbl_mrt__init
                     (Cdb__TblMrt         *message);
size_t cdb__tbl_mrt__get_packed_size
                     (const Cdb__TblMrt   *message);
size_t cdb__tbl_mrt__pack
                     (const Cdb__TblMrt   *message,
                      uint8_t             *out);
size_t cdb__tbl_mrt__pack_to_buffer
                     (const Cdb__TblMrt   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMrt *
       cdb__tbl_mrt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mrt__free_unpacked
                     (Cdb__TblMrt *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIpmcGlobal methods */
void   cdb__tbl_ipmc_global__init
                     (Cdb__TblIpmcGlobal         *message);
size_t cdb__tbl_ipmc_global__get_packed_size
                     (const Cdb__TblIpmcGlobal   *message);
size_t cdb__tbl_ipmc_global__pack
                     (const Cdb__TblIpmcGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_ipmc_global__pack_to_buffer
                     (const Cdb__TblIpmcGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIpmcGlobal *
       cdb__tbl_ipmc_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ipmc_global__free_unpacked
                     (Cdb__TblIpmcGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIpmcIntfKey methods */
void   cdb__tbl_ipmc_intf_key__init
                     (Cdb__TblIpmcIntfKey         *message);
size_t cdb__tbl_ipmc_intf_key__get_packed_size
                     (const Cdb__TblIpmcIntfKey   *message);
size_t cdb__tbl_ipmc_intf_key__pack
                     (const Cdb__TblIpmcIntfKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ipmc_intf_key__pack_to_buffer
                     (const Cdb__TblIpmcIntfKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIpmcIntfKey *
       cdb__tbl_ipmc_intf_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ipmc_intf_key__free_unpacked
                     (Cdb__TblIpmcIntfKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIpmcIntf methods */
void   cdb__tbl_ipmc_intf__init
                     (Cdb__TblIpmcIntf         *message);
size_t cdb__tbl_ipmc_intf__get_packed_size
                     (const Cdb__TblIpmcIntf   *message);
size_t cdb__tbl_ipmc_intf__pack
                     (const Cdb__TblIpmcIntf   *message,
                      uint8_t             *out);
size_t cdb__tbl_ipmc_intf__pack_to_buffer
                     (const Cdb__TblIpmcIntf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIpmcIntf *
       cdb__tbl_ipmc_intf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ipmc_intf__free_unpacked
                     (Cdb__TblIpmcIntf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPimStaticRpKey methods */
void   cdb__tbl_pim_static_rp_key__init
                     (Cdb__TblPimStaticRpKey         *message);
size_t cdb__tbl_pim_static_rp_key__get_packed_size
                     (const Cdb__TblPimStaticRpKey   *message);
size_t cdb__tbl_pim_static_rp_key__pack
                     (const Cdb__TblPimStaticRpKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_pim_static_rp_key__pack_to_buffer
                     (const Cdb__TblPimStaticRpKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPimStaticRpKey *
       cdb__tbl_pim_static_rp_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pim_static_rp_key__free_unpacked
                     (Cdb__TblPimStaticRpKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPimStaticRp methods */
void   cdb__tbl_pim_static_rp__init
                     (Cdb__TblPimStaticRp         *message);
size_t cdb__tbl_pim_static_rp__get_packed_size
                     (const Cdb__TblPimStaticRp   *message);
size_t cdb__tbl_pim_static_rp__pack
                     (const Cdb__TblPimStaticRp   *message,
                      uint8_t             *out);
size_t cdb__tbl_pim_static_rp__pack_to_buffer
                     (const Cdb__TblPimStaticRp   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPimStaticRp *
       cdb__tbl_pim_static_rp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pim_static_rp__free_unpacked
                     (Cdb__TblPimStaticRp *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSysGlobal methods */
void   cdb__tbl_sys_global__init
                     (Cdb__TblSysGlobal         *message);
size_t cdb__tbl_sys_global__get_packed_size
                     (const Cdb__TblSysGlobal   *message);
size_t cdb__tbl_sys_global__pack
                     (const Cdb__TblSysGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_sys_global__pack_to_buffer
                     (const Cdb__TblSysGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSysGlobal *
       cdb__tbl_sys_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_sys_global__free_unpacked
                     (Cdb__TblSysGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLagGlobal methods */
void   cdb__tbl_lag_global__init
                     (Cdb__TblLagGlobal         *message);
size_t cdb__tbl_lag_global__get_packed_size
                     (const Cdb__TblLagGlobal   *message);
size_t cdb__tbl_lag_global__pack
                     (const Cdb__TblLagGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_lag_global__pack_to_buffer
                     (const Cdb__TblLagGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLagGlobal *
       cdb__tbl_lag_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_lag_global__free_unpacked
                     (Cdb__TblLagGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblEcmpGlobal methods */
void   cdb__tbl_ecmp_global__init
                     (Cdb__TblEcmpGlobal         *message);
size_t cdb__tbl_ecmp_global__get_packed_size
                     (const Cdb__TblEcmpGlobal   *message);
size_t cdb__tbl_ecmp_global__pack
                     (const Cdb__TblEcmpGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_ecmp_global__pack_to_buffer
                     (const Cdb__TblEcmpGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblEcmpGlobal *
       cdb__tbl_ecmp_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ecmp_global__free_unpacked
                     (Cdb__TblEcmpGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRrPrefixKey methods */
void   cdb__tbl_rr_prefix_key__init
                     (Cdb__TblRrPrefixKey         *message);
size_t cdb__tbl_rr_prefix_key__get_packed_size
                     (const Cdb__TblRrPrefixKey   *message);
size_t cdb__tbl_rr_prefix_key__pack
                     (const Cdb__TblRrPrefixKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_rr_prefix_key__pack_to_buffer
                     (const Cdb__TblRrPrefixKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRrPrefixKey *
       cdb__tbl_rr_prefix_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rr_prefix_key__free_unpacked
                     (Cdb__TblRrPrefixKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRrPrefix methods */
void   cdb__tbl_rr_prefix__init
                     (Cdb__TblRrPrefix         *message);
size_t cdb__tbl_rr_prefix__get_packed_size
                     (const Cdb__TblRrPrefix   *message);
size_t cdb__tbl_rr_prefix__pack
                     (const Cdb__TblRrPrefix   *message,
                      uint8_t             *out);
size_t cdb__tbl_rr_prefix__pack_to_buffer
                     (const Cdb__TblRrPrefix   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRrPrefix *
       cdb__tbl_rr_prefix__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rr_prefix__free_unpacked
                     (Cdb__TblRrPrefix *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMemSummary methods */
void   cdb__tbl_mem_summary__init
                     (Cdb__TblMemSummary         *message);
size_t cdb__tbl_mem_summary__get_packed_size
                     (const Cdb__TblMemSummary   *message);
size_t cdb__tbl_mem_summary__pack
                     (const Cdb__TblMemSummary   *message,
                      uint8_t             *out);
size_t cdb__tbl_mem_summary__pack_to_buffer
                     (const Cdb__TblMemSummary   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMemSummary *
       cdb__tbl_mem_summary__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mem_summary__free_unpacked
                     (Cdb__TblMemSummary *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCpuMemHistory methods */
void   cdb__tbl_cpu_mem_history__init
                     (Cdb__TblCpuMemHistory         *message);
size_t cdb__tbl_cpu_mem_history__get_packed_size
                     (const Cdb__TblCpuMemHistory   *message);
size_t cdb__tbl_cpu_mem_history__pack
                     (const Cdb__TblCpuMemHistory   *message,
                      uint8_t             *out);
size_t cdb__tbl_cpu_mem_history__pack_to_buffer
                     (const Cdb__TblCpuMemHistory   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCpuMemHistory *
       cdb__tbl_cpu_mem_history__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cpu_mem_history__free_unpacked
                     (Cdb__TblCpuMemHistory *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblChsmDebug methods */
void   cdb__tbl_chsm_debug__init
                     (Cdb__TblChsmDebug         *message);
size_t cdb__tbl_chsm_debug__get_packed_size
                     (const Cdb__TblChsmDebug   *message);
size_t cdb__tbl_chsm_debug__pack
                     (const Cdb__TblChsmDebug   *message,
                      uint8_t             *out);
size_t cdb__tbl_chsm_debug__pack_to_buffer
                     (const Cdb__TblChsmDebug   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblChsmDebug *
       cdb__tbl_chsm_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_chsm_debug__free_unpacked
                     (Cdb__TblChsmDebug *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSwitchDebug methods */
void   cdb__tbl_switch_debug__init
                     (Cdb__TblSwitchDebug         *message);
size_t cdb__tbl_switch_debug__get_packed_size
                     (const Cdb__TblSwitchDebug   *message);
size_t cdb__tbl_switch_debug__pack
                     (const Cdb__TblSwitchDebug   *message,
                      uint8_t             *out);
size_t cdb__tbl_switch_debug__pack_to_buffer
                     (const Cdb__TblSwitchDebug   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSwitchDebug *
       cdb__tbl_switch_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_switch_debug__free_unpacked
                     (Cdb__TblSwitchDebug *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRouteDebug methods */
void   cdb__tbl_route_debug__init
                     (Cdb__TblRouteDebug         *message);
size_t cdb__tbl_route_debug__get_packed_size
                     (const Cdb__TblRouteDebug   *message);
size_t cdb__tbl_route_debug__pack
                     (const Cdb__TblRouteDebug   *message,
                      uint8_t             *out);
size_t cdb__tbl_route_debug__pack_to_buffer
                     (const Cdb__TblRouteDebug   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRouteDebug *
       cdb__tbl_route_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_route_debug__free_unpacked
                     (Cdb__TblRouteDebug *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSsmDebug methods */
void   cdb__tbl_ssm_debug__init
                     (Cdb__TblSsmDebug         *message);
size_t cdb__tbl_ssm_debug__get_packed_size
                     (const Cdb__TblSsmDebug   *message);
size_t cdb__tbl_ssm_debug__pack
                     (const Cdb__TblSsmDebug   *message,
                      uint8_t             *out);
size_t cdb__tbl_ssm_debug__pack_to_buffer
                     (const Cdb__TblSsmDebug   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSsmDebug *
       cdb__tbl_ssm_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ssm_debug__free_unpacked
                     (Cdb__TblSsmDebug *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPtpDebug methods */
void   cdb__tbl_ptp_debug__init
                     (Cdb__TblPtpDebug         *message);
size_t cdb__tbl_ptp_debug__get_packed_size
                     (const Cdb__TblPtpDebug   *message);
size_t cdb__tbl_ptp_debug__pack
                     (const Cdb__TblPtpDebug   *message,
                      uint8_t             *out);
size_t cdb__tbl_ptp_debug__pack_to_buffer
                     (const Cdb__TblPtpDebug   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPtpDebug *
       cdb__tbl_ptp_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ptp_debug__free_unpacked
                     (Cdb__TblPtpDebug *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQuaggaDebug methods */
void   cdb__tbl_quagga_debug__init
                     (Cdb__TblQuaggaDebug         *message);
size_t cdb__tbl_quagga_debug__get_packed_size
                     (const Cdb__TblQuaggaDebug   *message);
size_t cdb__tbl_quagga_debug__pack
                     (const Cdb__TblQuaggaDebug   *message,
                      uint8_t             *out);
size_t cdb__tbl_quagga_debug__pack_to_buffer
                     (const Cdb__TblQuaggaDebug   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQuaggaDebug *
       cdb__tbl_quagga_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_quagga_debug__free_unpacked
                     (Cdb__TblQuaggaDebug *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLsrvDebug methods */
void   cdb__tbl_lsrv_debug__init
                     (Cdb__TblLsrvDebug         *message);
size_t cdb__tbl_lsrv_debug__get_packed_size
                     (const Cdb__TblLsrvDebug   *message);
size_t cdb__tbl_lsrv_debug__pack
                     (const Cdb__TblLsrvDebug   *message,
                      uint8_t             *out);
size_t cdb__tbl_lsrv_debug__pack_to_buffer
                     (const Cdb__TblLsrvDebug   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLsrvDebug *
       cdb__tbl_lsrv_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_lsrv_debug__free_unpacked
                     (Cdb__TblLsrvDebug *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblHsrvDebug methods */
void   cdb__tbl_hsrv_debug__init
                     (Cdb__TblHsrvDebug         *message);
size_t cdb__tbl_hsrv_debug__get_packed_size
                     (const Cdb__TblHsrvDebug   *message);
size_t cdb__tbl_hsrv_debug__pack
                     (const Cdb__TblHsrvDebug   *message,
                      uint8_t             *out);
size_t cdb__tbl_hsrv_debug__pack_to_buffer
                     (const Cdb__TblHsrvDebug   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblHsrvDebug *
       cdb__tbl_hsrv_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_hsrv_debug__free_unpacked
                     (Cdb__TblHsrvDebug *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAppDebug methods */
void   cdb__tbl_app_debug__init
                     (Cdb__TblAppDebug         *message);
size_t cdb__tbl_app_debug__get_packed_size
                     (const Cdb__TblAppDebug   *message);
size_t cdb__tbl_app_debug__pack
                     (const Cdb__TblAppDebug   *message,
                      uint8_t             *out);
size_t cdb__tbl_app_debug__pack_to_buffer
                     (const Cdb__TblAppDebug   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAppDebug *
       cdb__tbl_app_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_app_debug__free_unpacked
                     (Cdb__TblAppDebug *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOpenflowDebug methods */
void   cdb__tbl_openflow_debug__init
                     (Cdb__TblOpenflowDebug         *message);
size_t cdb__tbl_openflow_debug__get_packed_size
                     (const Cdb__TblOpenflowDebug   *message);
size_t cdb__tbl_openflow_debug__pack
                     (const Cdb__TblOpenflowDebug   *message,
                      uint8_t             *out);
size_t cdb__tbl_openflow_debug__pack_to_buffer
                     (const Cdb__TblOpenflowDebug   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOpenflowDebug *
       cdb__tbl_openflow_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_openflow_debug__free_unpacked
                     (Cdb__TblOpenflowDebug *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRifKey methods */
void   cdb__tbl_rif_key__init
                     (Cdb__TblRifKey         *message);
size_t cdb__tbl_rif_key__get_packed_size
                     (const Cdb__TblRifKey   *message);
size_t cdb__tbl_rif_key__pack
                     (const Cdb__TblRifKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_rif_key__pack_to_buffer
                     (const Cdb__TblRifKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRifKey *
       cdb__tbl_rif_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rif_key__free_unpacked
                     (Cdb__TblRifKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRif methods */
void   cdb__tbl_rif__init
                     (Cdb__TblRif         *message);
size_t cdb__tbl_rif__get_packed_size
                     (const Cdb__TblRif   *message);
size_t cdb__tbl_rif__pack
                     (const Cdb__TblRif   *message,
                      uint8_t             *out);
size_t cdb__tbl_rif__pack_to_buffer
                     (const Cdb__TblRif   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRif *
       cdb__tbl_rif__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rif__free_unpacked
                     (Cdb__TblRif *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaLagKey methods */
void   cdb__tbl_fea_lag_key__init
                     (Cdb__TblFeaLagKey         *message);
size_t cdb__tbl_fea_lag_key__get_packed_size
                     (const Cdb__TblFeaLagKey   *message);
size_t cdb__tbl_fea_lag_key__pack
                     (const Cdb__TblFeaLagKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_lag_key__pack_to_buffer
                     (const Cdb__TblFeaLagKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaLagKey *
       cdb__tbl_fea_lag_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_lag_key__free_unpacked
                     (Cdb__TblFeaLagKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaLag methods */
void   cdb__tbl_fea_lag__init
                     (Cdb__TblFeaLag         *message);
size_t cdb__tbl_fea_lag__get_packed_size
                     (const Cdb__TblFeaLag   *message);
size_t cdb__tbl_fea_lag__pack
                     (const Cdb__TblFeaLag   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_lag__pack_to_buffer
                     (const Cdb__TblFeaLag   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaLag *
       cdb__tbl_fea_lag__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_lag__free_unpacked
                     (Cdb__TblFeaLag *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaGlobal methods */
void   cdb__tbl_fea_global__init
                     (Cdb__TblFeaGlobal         *message);
size_t cdb__tbl_fea_global__get_packed_size
                     (const Cdb__TblFeaGlobal   *message);
size_t cdb__tbl_fea_global__pack
                     (const Cdb__TblFeaGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_global__pack_to_buffer
                     (const Cdb__TblFeaGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaGlobal *
       cdb__tbl_fea_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_global__free_unpacked
                     (Cdb__TblFeaGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaAclTableKey methods */
void   cdb__tbl_fea_acl_table_key__init
                     (Cdb__TblFeaAclTableKey         *message);
size_t cdb__tbl_fea_acl_table_key__get_packed_size
                     (const Cdb__TblFeaAclTableKey   *message);
size_t cdb__tbl_fea_acl_table_key__pack
                     (const Cdb__TblFeaAclTableKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_acl_table_key__pack_to_buffer
                     (const Cdb__TblFeaAclTableKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaAclTableKey *
       cdb__tbl_fea_acl_table_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_acl_table_key__free_unpacked
                     (Cdb__TblFeaAclTableKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaAclTable methods */
void   cdb__tbl_fea_acl_table__init
                     (Cdb__TblFeaAclTable         *message);
size_t cdb__tbl_fea_acl_table__get_packed_size
                     (const Cdb__TblFeaAclTable   *message);
size_t cdb__tbl_fea_acl_table__pack
                     (const Cdb__TblFeaAclTable   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_acl_table__pack_to_buffer
                     (const Cdb__TblFeaAclTable   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaAclTable *
       cdb__tbl_fea_acl_table__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_acl_table__free_unpacked
                     (Cdb__TblFeaAclTable *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaAclKey methods */
void   cdb__tbl_fea_acl_key__init
                     (Cdb__TblFeaAclKey         *message);
size_t cdb__tbl_fea_acl_key__get_packed_size
                     (const Cdb__TblFeaAclKey   *message);
size_t cdb__tbl_fea_acl_key__pack
                     (const Cdb__TblFeaAclKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_acl_key__pack_to_buffer
                     (const Cdb__TblFeaAclKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaAclKey *
       cdb__tbl_fea_acl_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_acl_key__free_unpacked
                     (Cdb__TblFeaAclKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaAcl methods */
void   cdb__tbl_fea_acl__init
                     (Cdb__TblFeaAcl         *message);
size_t cdb__tbl_fea_acl__get_packed_size
                     (const Cdb__TblFeaAcl   *message);
size_t cdb__tbl_fea_acl__pack
                     (const Cdb__TblFeaAcl   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_acl__pack_to_buffer
                     (const Cdb__TblFeaAcl   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaAcl *
       cdb__tbl_fea_acl__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_acl__free_unpacked
                     (Cdb__TblFeaAcl *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaFdb methods */
void   cdb__tbl_fea_fdb__init
                     (Cdb__TblFeaFdb         *message);
size_t cdb__tbl_fea_fdb__get_packed_size
                     (const Cdb__TblFeaFdb   *message);
size_t cdb__tbl_fea_fdb__pack
                     (const Cdb__TblFeaFdb   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_fdb__pack_to_buffer
                     (const Cdb__TblFeaFdb   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaFdb *
       cdb__tbl_fea_fdb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_fdb__free_unpacked
                     (Cdb__TblFeaFdb *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaBrgIfKey methods */
void   cdb__tbl_fea_brg_if_key__init
                     (Cdb__TblFeaBrgIfKey         *message);
size_t cdb__tbl_fea_brg_if_key__get_packed_size
                     (const Cdb__TblFeaBrgIfKey   *message);
size_t cdb__tbl_fea_brg_if_key__pack
                     (const Cdb__TblFeaBrgIfKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_brg_if_key__pack_to_buffer
                     (const Cdb__TblFeaBrgIfKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaBrgIfKey *
       cdb__tbl_fea_brg_if_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_brg_if_key__free_unpacked
                     (Cdb__TblFeaBrgIfKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaBrgIf methods */
void   cdb__tbl_fea_brg_if__init
                     (Cdb__TblFeaBrgIf         *message);
size_t cdb__tbl_fea_brg_if__get_packed_size
                     (const Cdb__TblFeaBrgIf   *message);
size_t cdb__tbl_fea_brg_if__pack
                     (const Cdb__TblFeaBrgIf   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_brg_if__pack_to_buffer
                     (const Cdb__TblFeaBrgIf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaBrgIf *
       cdb__tbl_fea_brg_if__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_brg_if__free_unpacked
                     (Cdb__TblFeaBrgIf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclWormFilterKey methods */
void   cdb__tbl_acl_worm_filter_key__init
                     (Cdb__TblAclWormFilterKey         *message);
size_t cdb__tbl_acl_worm_filter_key__get_packed_size
                     (const Cdb__TblAclWormFilterKey   *message);
size_t cdb__tbl_acl_worm_filter_key__pack
                     (const Cdb__TblAclWormFilterKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_worm_filter_key__pack_to_buffer
                     (const Cdb__TblAclWormFilterKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclWormFilterKey *
       cdb__tbl_acl_worm_filter_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_worm_filter_key__free_unpacked
                     (Cdb__TblAclWormFilterKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclWormFilter methods */
void   cdb__tbl_acl_worm_filter__init
                     (Cdb__TblAclWormFilter         *message);
size_t cdb__tbl_acl_worm_filter__get_packed_size
                     (const Cdb__TblAclWormFilter   *message);
size_t cdb__tbl_acl_worm_filter__pack
                     (const Cdb__TblAclWormFilter   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_worm_filter__pack_to_buffer
                     (const Cdb__TblAclWormFilter   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclWormFilter *
       cdb__tbl_acl_worm_filter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_worm_filter__free_unpacked
                     (Cdb__TblAclWormFilter *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclConfigKey methods */
void   cdb__tbl_acl_config_key__init
                     (Cdb__TblAclConfigKey         *message);
size_t cdb__tbl_acl_config_key__get_packed_size
                     (const Cdb__TblAclConfigKey   *message);
size_t cdb__tbl_acl_config_key__pack
                     (const Cdb__TblAclConfigKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_config_key__pack_to_buffer
                     (const Cdb__TblAclConfigKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclConfigKey *
       cdb__tbl_acl_config_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_config_key__free_unpacked
                     (Cdb__TblAclConfigKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclConfig methods */
void   cdb__tbl_acl_config__init
                     (Cdb__TblAclConfig         *message);
size_t cdb__tbl_acl_config__get_packed_size
                     (const Cdb__TblAclConfig   *message);
size_t cdb__tbl_acl_config__pack
                     (const Cdb__TblAclConfig   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_config__pack_to_buffer
                     (const Cdb__TblAclConfig   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclConfig *
       cdb__tbl_acl_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_config__free_unpacked
                     (Cdb__TblAclConfig *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAceConfig methods */
void   cdb__tbl_ace_config__init
                     (Cdb__TblAceConfig         *message);
size_t cdb__tbl_ace_config__get_packed_size
                     (const Cdb__TblAceConfig   *message);
size_t cdb__tbl_ace_config__pack
                     (const Cdb__TblAceConfig   *message,
                      uint8_t             *out);
size_t cdb__tbl_ace_config__pack_to_buffer
                     (const Cdb__TblAceConfig   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAceConfig *
       cdb__tbl_ace_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ace_config__free_unpacked
                     (Cdb__TblAceConfig *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclEntryKey methods */
void   cdb__tbl_acl_entry_key__init
                     (Cdb__TblAclEntryKey         *message);
size_t cdb__tbl_acl_entry_key__get_packed_size
                     (const Cdb__TblAclEntryKey   *message);
size_t cdb__tbl_acl_entry_key__pack
                     (const Cdb__TblAclEntryKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_entry_key__pack_to_buffer
                     (const Cdb__TblAclEntryKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclEntryKey *
       cdb__tbl_acl_entry_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_entry_key__free_unpacked
                     (Cdb__TblAclEntryKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclEntry methods */
void   cdb__tbl_acl_entry__init
                     (Cdb__TblAclEntry         *message);
size_t cdb__tbl_acl_entry__get_packed_size
                     (const Cdb__TblAclEntry   *message);
size_t cdb__tbl_acl_entry__pack
                     (const Cdb__TblAclEntry   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_entry__pack_to_buffer
                     (const Cdb__TblAclEntry   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclEntry *
       cdb__tbl_acl_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_entry__free_unpacked
                     (Cdb__TblAclEntry *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclEntryActionKey methods */
void   cdb__tbl_acl_entry_action_key__init
                     (Cdb__TblAclEntryActionKey         *message);
size_t cdb__tbl_acl_entry_action_key__get_packed_size
                     (const Cdb__TblAclEntryActionKey   *message);
size_t cdb__tbl_acl_entry_action_key__pack
                     (const Cdb__TblAclEntryActionKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_entry_action_key__pack_to_buffer
                     (const Cdb__TblAclEntryActionKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclEntryActionKey *
       cdb__tbl_acl_entry_action_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_entry_action_key__free_unpacked
                     (Cdb__TblAclEntryActionKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclEntryAction methods */
void   cdb__tbl_acl_entry_action__init
                     (Cdb__TblAclEntryAction         *message);
size_t cdb__tbl_acl_entry_action__get_packed_size
                     (const Cdb__TblAclEntryAction   *message);
size_t cdb__tbl_acl_entry_action__pack
                     (const Cdb__TblAclEntryAction   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_entry_action__pack_to_buffer
                     (const Cdb__TblAclEntryAction   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclEntryAction *
       cdb__tbl_acl_entry_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_entry_action__free_unpacked
                     (Cdb__TblAclEntryAction *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclNexthopGroupKey methods */
void   cdb__tbl_acl_nexthop_group_key__init
                     (Cdb__TblAclNexthopGroupKey         *message);
size_t cdb__tbl_acl_nexthop_group_key__get_packed_size
                     (const Cdb__TblAclNexthopGroupKey   *message);
size_t cdb__tbl_acl_nexthop_group_key__pack
                     (const Cdb__TblAclNexthopGroupKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_nexthop_group_key__pack_to_buffer
                     (const Cdb__TblAclNexthopGroupKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclNexthopGroupKey *
       cdb__tbl_acl_nexthop_group_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_nexthop_group_key__free_unpacked
                     (Cdb__TblAclNexthopGroupKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclNexthopGroup methods */
void   cdb__tbl_acl_nexthop_group__init
                     (Cdb__TblAclNexthopGroup         *message);
size_t cdb__tbl_acl_nexthop_group__get_packed_size
                     (const Cdb__TblAclNexthopGroup   *message);
size_t cdb__tbl_acl_nexthop_group__pack
                     (const Cdb__TblAclNexthopGroup   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_nexthop_group__pack_to_buffer
                     (const Cdb__TblAclNexthopGroup   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclNexthopGroup *
       cdb__tbl_acl_nexthop_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_nexthop_group__free_unpacked
                     (Cdb__TblAclNexthopGroup *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclNexthopKey methods */
void   cdb__tbl_acl_nexthop_key__init
                     (Cdb__TblAclNexthopKey         *message);
size_t cdb__tbl_acl_nexthop_key__get_packed_size
                     (const Cdb__TblAclNexthopKey   *message);
size_t cdb__tbl_acl_nexthop_key__pack
                     (const Cdb__TblAclNexthopKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_nexthop_key__pack_to_buffer
                     (const Cdb__TblAclNexthopKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclNexthopKey *
       cdb__tbl_acl_nexthop_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_nexthop_key__free_unpacked
                     (Cdb__TblAclNexthopKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclNexthop methods */
void   cdb__tbl_acl_nexthop__init
                     (Cdb__TblAclNexthop         *message);
size_t cdb__tbl_acl_nexthop__get_packed_size
                     (const Cdb__TblAclNexthop   *message);
size_t cdb__tbl_acl_nexthop__pack
                     (const Cdb__TblAclNexthop   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_nexthop__pack_to_buffer
                     (const Cdb__TblAclNexthop   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclNexthop *
       cdb__tbl_acl_nexthop__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_nexthop__free_unpacked
                     (Cdb__TblAclNexthop *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTimeRangeKey methods */
void   cdb__tbl_time_range_key__init
                     (Cdb__TblTimeRangeKey         *message);
size_t cdb__tbl_time_range_key__get_packed_size
                     (const Cdb__TblTimeRangeKey   *message);
size_t cdb__tbl_time_range_key__pack
                     (const Cdb__TblTimeRangeKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_time_range_key__pack_to_buffer
                     (const Cdb__TblTimeRangeKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTimeRangeKey *
       cdb__tbl_time_range_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_time_range_key__free_unpacked
                     (Cdb__TblTimeRangeKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTimeRange methods */
void   cdb__tbl_time_range__init
                     (Cdb__TblTimeRange         *message);
size_t cdb__tbl_time_range__get_packed_size
                     (const Cdb__TblTimeRange   *message);
size_t cdb__tbl_time_range__pack
                     (const Cdb__TblTimeRange   *message,
                      uint8_t             *out);
size_t cdb__tbl_time_range__pack_to_buffer
                     (const Cdb__TblTimeRange   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTimeRange *
       cdb__tbl_time_range__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_time_range__free_unpacked
                     (Cdb__TblTimeRange *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSshCfg methods */
void   cdb__tbl_ssh_cfg__init
                     (Cdb__TblSshCfg         *message);
size_t cdb__tbl_ssh_cfg__get_packed_size
                     (const Cdb__TblSshCfg   *message);
size_t cdb__tbl_ssh_cfg__pack
                     (const Cdb__TblSshCfg   *message,
                      uint8_t             *out);
size_t cdb__tbl_ssh_cfg__pack_to_buffer
                     (const Cdb__TblSshCfg   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSshCfg *
       cdb__tbl_ssh_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ssh_cfg__free_unpacked
                     (Cdb__TblSshCfg *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpCfg methods */
void   cdb__tbl_snmp_cfg__init
                     (Cdb__TblSnmpCfg         *message);
size_t cdb__tbl_snmp_cfg__get_packed_size
                     (const Cdb__TblSnmpCfg   *message);
size_t cdb__tbl_snmp_cfg__pack
                     (const Cdb__TblSnmpCfg   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_cfg__pack_to_buffer
                     (const Cdb__TblSnmpCfg   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpCfg *
       cdb__tbl_snmp_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_cfg__free_unpacked
                     (Cdb__TblSnmpCfg *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpViewKey methods */
void   cdb__tbl_snmp_view_key__init
                     (Cdb__TblSnmpViewKey         *message);
size_t cdb__tbl_snmp_view_key__get_packed_size
                     (const Cdb__TblSnmpViewKey   *message);
size_t cdb__tbl_snmp_view_key__pack
                     (const Cdb__TblSnmpViewKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_view_key__pack_to_buffer
                     (const Cdb__TblSnmpViewKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpViewKey *
       cdb__tbl_snmp_view_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_view_key__free_unpacked
                     (Cdb__TblSnmpViewKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpView methods */
void   cdb__tbl_snmp_view__init
                     (Cdb__TblSnmpView         *message);
size_t cdb__tbl_snmp_view__get_packed_size
                     (const Cdb__TblSnmpView   *message);
size_t cdb__tbl_snmp_view__pack
                     (const Cdb__TblSnmpView   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_view__pack_to_buffer
                     (const Cdb__TblSnmpView   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpView *
       cdb__tbl_snmp_view__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_view__free_unpacked
                     (Cdb__TblSnmpView *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpCommunityKey methods */
void   cdb__tbl_snmp_community_key__init
                     (Cdb__TblSnmpCommunityKey         *message);
size_t cdb__tbl_snmp_community_key__get_packed_size
                     (const Cdb__TblSnmpCommunityKey   *message);
size_t cdb__tbl_snmp_community_key__pack
                     (const Cdb__TblSnmpCommunityKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_community_key__pack_to_buffer
                     (const Cdb__TblSnmpCommunityKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpCommunityKey *
       cdb__tbl_snmp_community_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_community_key__free_unpacked
                     (Cdb__TblSnmpCommunityKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpCommunity methods */
void   cdb__tbl_snmp_community__init
                     (Cdb__TblSnmpCommunity         *message);
size_t cdb__tbl_snmp_community__get_packed_size
                     (const Cdb__TblSnmpCommunity   *message);
size_t cdb__tbl_snmp_community__pack
                     (const Cdb__TblSnmpCommunity   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_community__pack_to_buffer
                     (const Cdb__TblSnmpCommunity   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpCommunity *
       cdb__tbl_snmp_community__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_community__free_unpacked
                     (Cdb__TblSnmpCommunity *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpContextKey methods */
void   cdb__tbl_snmp_context_key__init
                     (Cdb__TblSnmpContextKey         *message);
size_t cdb__tbl_snmp_context_key__get_packed_size
                     (const Cdb__TblSnmpContextKey   *message);
size_t cdb__tbl_snmp_context_key__pack
                     (const Cdb__TblSnmpContextKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_context_key__pack_to_buffer
                     (const Cdb__TblSnmpContextKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpContextKey *
       cdb__tbl_snmp_context_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_context_key__free_unpacked
                     (Cdb__TblSnmpContextKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpContext methods */
void   cdb__tbl_snmp_context__init
                     (Cdb__TblSnmpContext         *message);
size_t cdb__tbl_snmp_context__get_packed_size
                     (const Cdb__TblSnmpContext   *message);
size_t cdb__tbl_snmp_context__pack
                     (const Cdb__TblSnmpContext   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_context__pack_to_buffer
                     (const Cdb__TblSnmpContext   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpContext *
       cdb__tbl_snmp_context__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_context__free_unpacked
                     (Cdb__TblSnmpContext *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpUsmUserKey methods */
void   cdb__tbl_snmp_usm_user_key__init
                     (Cdb__TblSnmpUsmUserKey         *message);
size_t cdb__tbl_snmp_usm_user_key__get_packed_size
                     (const Cdb__TblSnmpUsmUserKey   *message);
size_t cdb__tbl_snmp_usm_user_key__pack
                     (const Cdb__TblSnmpUsmUserKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_usm_user_key__pack_to_buffer
                     (const Cdb__TblSnmpUsmUserKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpUsmUserKey *
       cdb__tbl_snmp_usm_user_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_usm_user_key__free_unpacked
                     (Cdb__TblSnmpUsmUserKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpUsmUser methods */
void   cdb__tbl_snmp_usm_user__init
                     (Cdb__TblSnmpUsmUser         *message);
size_t cdb__tbl_snmp_usm_user__get_packed_size
                     (const Cdb__TblSnmpUsmUser   *message);
size_t cdb__tbl_snmp_usm_user__pack
                     (const Cdb__TblSnmpUsmUser   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_usm_user__pack_to_buffer
                     (const Cdb__TblSnmpUsmUser   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpUsmUser *
       cdb__tbl_snmp_usm_user__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_usm_user__free_unpacked
                     (Cdb__TblSnmpUsmUser *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpGroupUsmKey methods */
void   cdb__tbl_snmp_group_usm_key__init
                     (Cdb__TblSnmpGroupUsmKey         *message);
size_t cdb__tbl_snmp_group_usm_key__get_packed_size
                     (const Cdb__TblSnmpGroupUsmKey   *message);
size_t cdb__tbl_snmp_group_usm_key__pack
                     (const Cdb__TblSnmpGroupUsmKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_group_usm_key__pack_to_buffer
                     (const Cdb__TblSnmpGroupUsmKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpGroupUsmKey *
       cdb__tbl_snmp_group_usm_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_group_usm_key__free_unpacked
                     (Cdb__TblSnmpGroupUsmKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpGroupUsm methods */
void   cdb__tbl_snmp_group_usm__init
                     (Cdb__TblSnmpGroupUsm         *message);
size_t cdb__tbl_snmp_group_usm__get_packed_size
                     (const Cdb__TblSnmpGroupUsm   *message);
size_t cdb__tbl_snmp_group_usm__pack
                     (const Cdb__TblSnmpGroupUsm   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_group_usm__pack_to_buffer
                     (const Cdb__TblSnmpGroupUsm   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpGroupUsm *
       cdb__tbl_snmp_group_usm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_group_usm__free_unpacked
                     (Cdb__TblSnmpGroupUsm *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpAccessUsmKey methods */
void   cdb__tbl_snmp_access_usm_key__init
                     (Cdb__TblSnmpAccessUsmKey         *message);
size_t cdb__tbl_snmp_access_usm_key__get_packed_size
                     (const Cdb__TblSnmpAccessUsmKey   *message);
size_t cdb__tbl_snmp_access_usm_key__pack
                     (const Cdb__TblSnmpAccessUsmKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_access_usm_key__pack_to_buffer
                     (const Cdb__TblSnmpAccessUsmKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpAccessUsmKey *
       cdb__tbl_snmp_access_usm_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_access_usm_key__free_unpacked
                     (Cdb__TblSnmpAccessUsmKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpAccessUsm methods */
void   cdb__tbl_snmp_access_usm__init
                     (Cdb__TblSnmpAccessUsm         *message);
size_t cdb__tbl_snmp_access_usm__get_packed_size
                     (const Cdb__TblSnmpAccessUsm   *message);
size_t cdb__tbl_snmp_access_usm__pack
                     (const Cdb__TblSnmpAccessUsm   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_access_usm__pack_to_buffer
                     (const Cdb__TblSnmpAccessUsm   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpAccessUsm *
       cdb__tbl_snmp_access_usm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_access_usm__free_unpacked
                     (Cdb__TblSnmpAccessUsm *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpNotifyKey methods */
void   cdb__tbl_snmp_notify_key__init
                     (Cdb__TblSnmpNotifyKey         *message);
size_t cdb__tbl_snmp_notify_key__get_packed_size
                     (const Cdb__TblSnmpNotifyKey   *message);
size_t cdb__tbl_snmp_notify_key__pack
                     (const Cdb__TblSnmpNotifyKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_notify_key__pack_to_buffer
                     (const Cdb__TblSnmpNotifyKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpNotifyKey *
       cdb__tbl_snmp_notify_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_notify_key__free_unpacked
                     (Cdb__TblSnmpNotifyKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpNotify methods */
void   cdb__tbl_snmp_notify__init
                     (Cdb__TblSnmpNotify         *message);
size_t cdb__tbl_snmp_notify__get_packed_size
                     (const Cdb__TblSnmpNotify   *message);
size_t cdb__tbl_snmp_notify__pack
                     (const Cdb__TblSnmpNotify   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_notify__pack_to_buffer
                     (const Cdb__TblSnmpNotify   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpNotify *
       cdb__tbl_snmp_notify__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_notify__free_unpacked
                     (Cdb__TblSnmpNotify *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpTargetAddrKey methods */
void   cdb__tbl_snmp_target_addr_key__init
                     (Cdb__TblSnmpTargetAddrKey         *message);
size_t cdb__tbl_snmp_target_addr_key__get_packed_size
                     (const Cdb__TblSnmpTargetAddrKey   *message);
size_t cdb__tbl_snmp_target_addr_key__pack
                     (const Cdb__TblSnmpTargetAddrKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_target_addr_key__pack_to_buffer
                     (const Cdb__TblSnmpTargetAddrKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpTargetAddrKey *
       cdb__tbl_snmp_target_addr_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_target_addr_key__free_unpacked
                     (Cdb__TblSnmpTargetAddrKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpTargetAddr methods */
void   cdb__tbl_snmp_target_addr__init
                     (Cdb__TblSnmpTargetAddr         *message);
size_t cdb__tbl_snmp_target_addr__get_packed_size
                     (const Cdb__TblSnmpTargetAddr   *message);
size_t cdb__tbl_snmp_target_addr__pack
                     (const Cdb__TblSnmpTargetAddr   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_target_addr__pack_to_buffer
                     (const Cdb__TblSnmpTargetAddr   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpTargetAddr *
       cdb__tbl_snmp_target_addr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_target_addr__free_unpacked
                     (Cdb__TblSnmpTargetAddr *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpTargetParamsKey methods */
void   cdb__tbl_snmp_target_params_key__init
                     (Cdb__TblSnmpTargetParamsKey         *message);
size_t cdb__tbl_snmp_target_params_key__get_packed_size
                     (const Cdb__TblSnmpTargetParamsKey   *message);
size_t cdb__tbl_snmp_target_params_key__pack
                     (const Cdb__TblSnmpTargetParamsKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_target_params_key__pack_to_buffer
                     (const Cdb__TblSnmpTargetParamsKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpTargetParamsKey *
       cdb__tbl_snmp_target_params_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_target_params_key__free_unpacked
                     (Cdb__TblSnmpTargetParamsKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpTargetParams methods */
void   cdb__tbl_snmp_target_params__init
                     (Cdb__TblSnmpTargetParams         *message);
size_t cdb__tbl_snmp_target_params__get_packed_size
                     (const Cdb__TblSnmpTargetParams   *message);
size_t cdb__tbl_snmp_target_params__pack
                     (const Cdb__TblSnmpTargetParams   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_target_params__pack_to_buffer
                     (const Cdb__TblSnmpTargetParams   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpTargetParams *
       cdb__tbl_snmp_target_params__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_target_params__free_unpacked
                     (Cdb__TblSnmpTargetParams *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpTrapKey methods */
void   cdb__tbl_snmp_trap_key__init
                     (Cdb__TblSnmpTrapKey         *message);
size_t cdb__tbl_snmp_trap_key__get_packed_size
                     (const Cdb__TblSnmpTrapKey   *message);
size_t cdb__tbl_snmp_trap_key__pack
                     (const Cdb__TblSnmpTrapKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_trap_key__pack_to_buffer
                     (const Cdb__TblSnmpTrapKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpTrapKey *
       cdb__tbl_snmp_trap_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_trap_key__free_unpacked
                     (Cdb__TblSnmpTrapKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpTrap methods */
void   cdb__tbl_snmp_trap__init
                     (Cdb__TblSnmpTrap         *message);
size_t cdb__tbl_snmp_trap__get_packed_size
                     (const Cdb__TblSnmpTrap   *message);
size_t cdb__tbl_snmp_trap__pack
                     (const Cdb__TblSnmpTrap   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_trap__pack_to_buffer
                     (const Cdb__TblSnmpTrap   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpTrap *
       cdb__tbl_snmp_trap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_trap__free_unpacked
                     (Cdb__TblSnmpTrap *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpInformKey methods */
void   cdb__tbl_snmp_inform_key__init
                     (Cdb__TblSnmpInformKey         *message);
size_t cdb__tbl_snmp_inform_key__get_packed_size
                     (const Cdb__TblSnmpInformKey   *message);
size_t cdb__tbl_snmp_inform_key__pack
                     (const Cdb__TblSnmpInformKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_inform_key__pack_to_buffer
                     (const Cdb__TblSnmpInformKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpInformKey *
       cdb__tbl_snmp_inform_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_inform_key__free_unpacked
                     (Cdb__TblSnmpInformKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpInform methods */
void   cdb__tbl_snmp_inform__init
                     (Cdb__TblSnmpInform         *message);
size_t cdb__tbl_snmp_inform__get_packed_size
                     (const Cdb__TblSnmpInform   *message);
size_t cdb__tbl_snmp_inform__pack
                     (const Cdb__TblSnmpInform   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_inform__pack_to_buffer
                     (const Cdb__TblSnmpInform   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpInform *
       cdb__tbl_snmp_inform__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_inform__free_unpacked
                     (Cdb__TblSnmpInform *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSnmpTrapMsg methods */
void   cdb__tbl_snmp_trap_msg__init
                     (Cdb__TblSnmpTrapMsg         *message);
size_t cdb__tbl_snmp_trap_msg__get_packed_size
                     (const Cdb__TblSnmpTrapMsg   *message);
size_t cdb__tbl_snmp_trap_msg__pack
                     (const Cdb__TblSnmpTrapMsg   *message,
                      uint8_t             *out);
size_t cdb__tbl_snmp_trap_msg__pack_to_buffer
                     (const Cdb__TblSnmpTrapMsg   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSnmpTrapMsg *
       cdb__tbl_snmp_trap_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_snmp_trap_msg__free_unpacked
                     (Cdb__TblSnmpTrapMsg *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRmonEventKey methods */
void   cdb__tbl_rmon_event_key__init
                     (Cdb__TblRmonEventKey         *message);
size_t cdb__tbl_rmon_event_key__get_packed_size
                     (const Cdb__TblRmonEventKey   *message);
size_t cdb__tbl_rmon_event_key__pack
                     (const Cdb__TblRmonEventKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_rmon_event_key__pack_to_buffer
                     (const Cdb__TblRmonEventKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRmonEventKey *
       cdb__tbl_rmon_event_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rmon_event_key__free_unpacked
                     (Cdb__TblRmonEventKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRmonEvent methods */
void   cdb__tbl_rmon_event__init
                     (Cdb__TblRmonEvent         *message);
size_t cdb__tbl_rmon_event__get_packed_size
                     (const Cdb__TblRmonEvent   *message);
size_t cdb__tbl_rmon_event__pack
                     (const Cdb__TblRmonEvent   *message,
                      uint8_t             *out);
size_t cdb__tbl_rmon_event__pack_to_buffer
                     (const Cdb__TblRmonEvent   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRmonEvent *
       cdb__tbl_rmon_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rmon_event__free_unpacked
                     (Cdb__TblRmonEvent *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRmonAlarmKey methods */
void   cdb__tbl_rmon_alarm_key__init
                     (Cdb__TblRmonAlarmKey         *message);
size_t cdb__tbl_rmon_alarm_key__get_packed_size
                     (const Cdb__TblRmonAlarmKey   *message);
size_t cdb__tbl_rmon_alarm_key__pack
                     (const Cdb__TblRmonAlarmKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_rmon_alarm_key__pack_to_buffer
                     (const Cdb__TblRmonAlarmKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRmonAlarmKey *
       cdb__tbl_rmon_alarm_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rmon_alarm_key__free_unpacked
                     (Cdb__TblRmonAlarmKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRmonAlarm methods */
void   cdb__tbl_rmon_alarm__init
                     (Cdb__TblRmonAlarm         *message);
size_t cdb__tbl_rmon_alarm__get_packed_size
                     (const Cdb__TblRmonAlarm   *message);
size_t cdb__tbl_rmon_alarm__pack
                     (const Cdb__TblRmonAlarm   *message,
                      uint8_t             *out);
size_t cdb__tbl_rmon_alarm__pack_to_buffer
                     (const Cdb__TblRmonAlarm   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRmonAlarm *
       cdb__tbl_rmon_alarm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rmon_alarm__free_unpacked
                     (Cdb__TblRmonAlarm *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRmonEtherStatsKey methods */
void   cdb__tbl_rmon_ether_stats_key__init
                     (Cdb__TblRmonEtherStatsKey         *message);
size_t cdb__tbl_rmon_ether_stats_key__get_packed_size
                     (const Cdb__TblRmonEtherStatsKey   *message);
size_t cdb__tbl_rmon_ether_stats_key__pack
                     (const Cdb__TblRmonEtherStatsKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_rmon_ether_stats_key__pack_to_buffer
                     (const Cdb__TblRmonEtherStatsKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRmonEtherStatsKey *
       cdb__tbl_rmon_ether_stats_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rmon_ether_stats_key__free_unpacked
                     (Cdb__TblRmonEtherStatsKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRmonEtherStats methods */
void   cdb__tbl_rmon_ether_stats__init
                     (Cdb__TblRmonEtherStats         *message);
size_t cdb__tbl_rmon_ether_stats__get_packed_size
                     (const Cdb__TblRmonEtherStats   *message);
size_t cdb__tbl_rmon_ether_stats__pack
                     (const Cdb__TblRmonEtherStats   *message,
                      uint8_t             *out);
size_t cdb__tbl_rmon_ether_stats__pack_to_buffer
                     (const Cdb__TblRmonEtherStats   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRmonEtherStats *
       cdb__tbl_rmon_ether_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rmon_ether_stats__free_unpacked
                     (Cdb__TblRmonEtherStats *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRmonHistoryKey methods */
void   cdb__tbl_rmon_history_key__init
                     (Cdb__TblRmonHistoryKey         *message);
size_t cdb__tbl_rmon_history_key__get_packed_size
                     (const Cdb__TblRmonHistoryKey   *message);
size_t cdb__tbl_rmon_history_key__pack
                     (const Cdb__TblRmonHistoryKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_rmon_history_key__pack_to_buffer
                     (const Cdb__TblRmonHistoryKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRmonHistoryKey *
       cdb__tbl_rmon_history_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rmon_history_key__free_unpacked
                     (Cdb__TblRmonHistoryKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRmonHistory methods */
void   cdb__tbl_rmon_history__init
                     (Cdb__TblRmonHistory         *message);
size_t cdb__tbl_rmon_history__get_packed_size
                     (const Cdb__TblRmonHistory   *message);
size_t cdb__tbl_rmon_history__pack
                     (const Cdb__TblRmonHistory   *message,
                      uint8_t             *out);
size_t cdb__tbl_rmon_history__pack_to_buffer
                     (const Cdb__TblRmonHistory   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRmonHistory *
       cdb__tbl_rmon_history__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rmon_history__free_unpacked
                     (Cdb__TblRmonHistory *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRmonStatsHistory methods */
void   cdb__tbl_rmon_stats_history__init
                     (Cdb__TblRmonStatsHistory         *message);
size_t cdb__tbl_rmon_stats_history__get_packed_size
                     (const Cdb__TblRmonStatsHistory   *message);
size_t cdb__tbl_rmon_stats_history__pack
                     (const Cdb__TblRmonStatsHistory   *message,
                      uint8_t             *out);
size_t cdb__tbl_rmon_stats_history__pack_to_buffer
                     (const Cdb__TblRmonStatsHistory   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRmonStatsHistory *
       cdb__tbl_rmon_stats_history__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rmon_stats_history__free_unpacked
                     (Cdb__TblRmonStatsHistory *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSyslogCfg methods */
void   cdb__tbl_syslog_cfg__init
                     (Cdb__TblSyslogCfg         *message);
size_t cdb__tbl_syslog_cfg__get_packed_size
                     (const Cdb__TblSyslogCfg   *message);
size_t cdb__tbl_syslog_cfg__pack
                     (const Cdb__TblSyslogCfg   *message,
                      uint8_t             *out);
size_t cdb__tbl_syslog_cfg__pack_to_buffer
                     (const Cdb__TblSyslogCfg   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSyslogCfg *
       cdb__tbl_syslog_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_syslog_cfg__free_unpacked
                     (Cdb__TblSyslogCfg *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNtpServerKey methods */
void   cdb__tbl_ntp_server_key__init
                     (Cdb__TblNtpServerKey         *message);
size_t cdb__tbl_ntp_server_key__get_packed_size
                     (const Cdb__TblNtpServerKey   *message);
size_t cdb__tbl_ntp_server_key__pack
                     (const Cdb__TblNtpServerKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ntp_server_key__pack_to_buffer
                     (const Cdb__TblNtpServerKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNtpServerKey *
       cdb__tbl_ntp_server_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ntp_server_key__free_unpacked
                     (Cdb__TblNtpServerKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNtpServer methods */
void   cdb__tbl_ntp_server__init
                     (Cdb__TblNtpServer         *message);
size_t cdb__tbl_ntp_server__get_packed_size
                     (const Cdb__TblNtpServer   *message);
size_t cdb__tbl_ntp_server__pack
                     (const Cdb__TblNtpServer   *message,
                      uint8_t             *out);
size_t cdb__tbl_ntp_server__pack_to_buffer
                     (const Cdb__TblNtpServer   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNtpServer *
       cdb__tbl_ntp_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ntp_server__free_unpacked
                     (Cdb__TblNtpServer *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNtpAceKey methods */
void   cdb__tbl_ntp_ace_key__init
                     (Cdb__TblNtpAceKey         *message);
size_t cdb__tbl_ntp_ace_key__get_packed_size
                     (const Cdb__TblNtpAceKey   *message);
size_t cdb__tbl_ntp_ace_key__pack
                     (const Cdb__TblNtpAceKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ntp_ace_key__pack_to_buffer
                     (const Cdb__TblNtpAceKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNtpAceKey *
       cdb__tbl_ntp_ace_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ntp_ace_key__free_unpacked
                     (Cdb__TblNtpAceKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNtpAce methods */
void   cdb__tbl_ntp_ace__init
                     (Cdb__TblNtpAce         *message);
size_t cdb__tbl_ntp_ace__get_packed_size
                     (const Cdb__TblNtpAce   *message);
size_t cdb__tbl_ntp_ace__pack
                     (const Cdb__TblNtpAce   *message,
                      uint8_t             *out);
size_t cdb__tbl_ntp_ace__pack_to_buffer
                     (const Cdb__TblNtpAce   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNtpAce *
       cdb__tbl_ntp_ace__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ntp_ace__free_unpacked
                     (Cdb__TblNtpAce *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNtpKeyKey methods */
void   cdb__tbl_ntp_key_key__init
                     (Cdb__TblNtpKeyKey         *message);
size_t cdb__tbl_ntp_key_key__get_packed_size
                     (const Cdb__TblNtpKeyKey   *message);
size_t cdb__tbl_ntp_key_key__pack
                     (const Cdb__TblNtpKeyKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ntp_key_key__pack_to_buffer
                     (const Cdb__TblNtpKeyKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNtpKeyKey *
       cdb__tbl_ntp_key_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ntp_key_key__free_unpacked
                     (Cdb__TblNtpKeyKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNtpKey methods */
void   cdb__tbl_ntp_key__init
                     (Cdb__TblNtpKey         *message);
size_t cdb__tbl_ntp_key__get_packed_size
                     (const Cdb__TblNtpKey   *message);
size_t cdb__tbl_ntp_key__pack
                     (const Cdb__TblNtpKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ntp_key__pack_to_buffer
                     (const Cdb__TblNtpKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNtpKey *
       cdb__tbl_ntp_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ntp_key__free_unpacked
                     (Cdb__TblNtpKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNtpCfg methods */
void   cdb__tbl_ntp_cfg__init
                     (Cdb__TblNtpCfg         *message);
size_t cdb__tbl_ntp_cfg__get_packed_size
                     (const Cdb__TblNtpCfg   *message);
size_t cdb__tbl_ntp_cfg__pack
                     (const Cdb__TblNtpCfg   *message,
                      uint8_t             *out);
size_t cdb__tbl_ntp_cfg__pack_to_buffer
                     (const Cdb__TblNtpCfg   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNtpCfg *
       cdb__tbl_ntp_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ntp_cfg__free_unpacked
                     (Cdb__TblNtpCfg *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNtpIf methods */
void   cdb__tbl_ntp_if__init
                     (Cdb__TblNtpIf         *message);
size_t cdb__tbl_ntp_if__get_packed_size
                     (const Cdb__TblNtpIf   *message);
size_t cdb__tbl_ntp_if__pack
                     (const Cdb__TblNtpIf   *message,
                      uint8_t             *out);
size_t cdb__tbl_ntp_if__pack_to_buffer
                     (const Cdb__TblNtpIf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNtpIf *
       cdb__tbl_ntp_if__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ntp_if__free_unpacked
                     (Cdb__TblNtpIf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNtpSyncstatus methods */
void   cdb__tbl_ntp_syncstatus__init
                     (Cdb__TblNtpSyncstatus         *message);
size_t cdb__tbl_ntp_syncstatus__get_packed_size
                     (const Cdb__TblNtpSyncstatus   *message);
size_t cdb__tbl_ntp_syncstatus__pack
                     (const Cdb__TblNtpSyncstatus   *message,
                      uint8_t             *out);
size_t cdb__tbl_ntp_syncstatus__pack_to_buffer
                     (const Cdb__TblNtpSyncstatus   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNtpSyncstatus *
       cdb__tbl_ntp_syncstatus__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ntp_syncstatus__free_unpacked
                     (Cdb__TblNtpSyncstatus *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblStaticDnsKey methods */
void   cdb__tbl_static_dns_key__init
                     (Cdb__TblStaticDnsKey         *message);
size_t cdb__tbl_static_dns_key__get_packed_size
                     (const Cdb__TblStaticDnsKey   *message);
size_t cdb__tbl_static_dns_key__pack
                     (const Cdb__TblStaticDnsKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_static_dns_key__pack_to_buffer
                     (const Cdb__TblStaticDnsKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblStaticDnsKey *
       cdb__tbl_static_dns_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_static_dns_key__free_unpacked
                     (Cdb__TblStaticDnsKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblStaticDns methods */
void   cdb__tbl_static_dns__init
                     (Cdb__TblStaticDns         *message);
size_t cdb__tbl_static_dns__get_packed_size
                     (const Cdb__TblStaticDns   *message);
size_t cdb__tbl_static_dns__pack
                     (const Cdb__TblStaticDns   *message,
                      uint8_t             *out);
size_t cdb__tbl_static_dns__pack_to_buffer
                     (const Cdb__TblStaticDns   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblStaticDns *
       cdb__tbl_static_dns__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_static_dns__free_unpacked
                     (Cdb__TblStaticDns *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDynamicDnsDomainKey methods */
void   cdb__tbl_dynamic_dns_domain_key__init
                     (Cdb__TblDynamicDnsDomainKey         *message);
size_t cdb__tbl_dynamic_dns_domain_key__get_packed_size
                     (const Cdb__TblDynamicDnsDomainKey   *message);
size_t cdb__tbl_dynamic_dns_domain_key__pack
                     (const Cdb__TblDynamicDnsDomainKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_dynamic_dns_domain_key__pack_to_buffer
                     (const Cdb__TblDynamicDnsDomainKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDynamicDnsDomainKey *
       cdb__tbl_dynamic_dns_domain_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dynamic_dns_domain_key__free_unpacked
                     (Cdb__TblDynamicDnsDomainKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDynamicDnsDomain methods */
void   cdb__tbl_dynamic_dns_domain__init
                     (Cdb__TblDynamicDnsDomain         *message);
size_t cdb__tbl_dynamic_dns_domain__get_packed_size
                     (const Cdb__TblDynamicDnsDomain   *message);
size_t cdb__tbl_dynamic_dns_domain__pack
                     (const Cdb__TblDynamicDnsDomain   *message,
                      uint8_t             *out);
size_t cdb__tbl_dynamic_dns_domain__pack_to_buffer
                     (const Cdb__TblDynamicDnsDomain   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDynamicDnsDomain *
       cdb__tbl_dynamic_dns_domain__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dynamic_dns_domain__free_unpacked
                     (Cdb__TblDynamicDnsDomain *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDynamicDnsServerKey methods */
void   cdb__tbl_dynamic_dns_server_key__init
                     (Cdb__TblDynamicDnsServerKey         *message);
size_t cdb__tbl_dynamic_dns_server_key__get_packed_size
                     (const Cdb__TblDynamicDnsServerKey   *message);
size_t cdb__tbl_dynamic_dns_server_key__pack
                     (const Cdb__TblDynamicDnsServerKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_dynamic_dns_server_key__pack_to_buffer
                     (const Cdb__TblDynamicDnsServerKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDynamicDnsServerKey *
       cdb__tbl_dynamic_dns_server_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dynamic_dns_server_key__free_unpacked
                     (Cdb__TblDynamicDnsServerKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDynamicDnsServer methods */
void   cdb__tbl_dynamic_dns_server__init
                     (Cdb__TblDynamicDnsServer         *message);
size_t cdb__tbl_dynamic_dns_server__get_packed_size
                     (const Cdb__TblDynamicDnsServer   *message);
size_t cdb__tbl_dynamic_dns_server__pack
                     (const Cdb__TblDynamicDnsServer   *message,
                      uint8_t             *out);
size_t cdb__tbl_dynamic_dns_server__pack_to_buffer
                     (const Cdb__TblDynamicDnsServer   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDynamicDnsServer *
       cdb__tbl_dynamic_dns_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dynamic_dns_server__free_unpacked
                     (Cdb__TblDynamicDnsServer *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosDomainKey methods */
void   cdb__tbl_qos_domain_key__init
                     (Cdb__TblQosDomainKey         *message);
size_t cdb__tbl_qos_domain_key__get_packed_size
                     (const Cdb__TblQosDomainKey   *message);
size_t cdb__tbl_qos_domain_key__pack
                     (const Cdb__TblQosDomainKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_domain_key__pack_to_buffer
                     (const Cdb__TblQosDomainKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosDomainKey *
       cdb__tbl_qos_domain_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_domain_key__free_unpacked
                     (Cdb__TblQosDomainKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosDomain methods */
void   cdb__tbl_qos_domain__init
                     (Cdb__TblQosDomain         *message);
size_t cdb__tbl_qos_domain__get_packed_size
                     (const Cdb__TblQosDomain   *message);
size_t cdb__tbl_qos_domain__pack
                     (const Cdb__TblQosDomain   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_domain__pack_to_buffer
                     (const Cdb__TblQosDomain   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosDomain *
       cdb__tbl_qos_domain__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_domain__free_unpacked
                     (Cdb__TblQosDomain *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosMplsDomainKey methods */
void   cdb__tbl_qos_mpls_domain_key__init
                     (Cdb__TblQosMplsDomainKey         *message);
size_t cdb__tbl_qos_mpls_domain_key__get_packed_size
                     (const Cdb__TblQosMplsDomainKey   *message);
size_t cdb__tbl_qos_mpls_domain_key__pack
                     (const Cdb__TblQosMplsDomainKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_mpls_domain_key__pack_to_buffer
                     (const Cdb__TblQosMplsDomainKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosMplsDomainKey *
       cdb__tbl_qos_mpls_domain_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_mpls_domain_key__free_unpacked
                     (Cdb__TblQosMplsDomainKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosMplsDomain methods */
void   cdb__tbl_qos_mpls_domain__init
                     (Cdb__TblQosMplsDomain         *message);
size_t cdb__tbl_qos_mpls_domain__get_packed_size
                     (const Cdb__TblQosMplsDomain   *message);
size_t cdb__tbl_qos_mpls_domain__pack
                     (const Cdb__TblQosMplsDomain   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_mpls_domain__pack_to_buffer
                     (const Cdb__TblQosMplsDomain   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosMplsDomain *
       cdb__tbl_qos_mpls_domain__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_mpls_domain__free_unpacked
                     (Cdb__TblQosMplsDomain *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosPolicerRes methods */
void   cdb__tbl_qos_policer_res__init
                     (Cdb__TblQosPolicerRes         *message);
size_t cdb__tbl_qos_policer_res__get_packed_size
                     (const Cdb__TblQosPolicerRes   *message);
size_t cdb__tbl_qos_policer_res__pack
                     (const Cdb__TblQosPolicerRes   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_policer_res__pack_to_buffer
                     (const Cdb__TblQosPolicerRes   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosPolicerRes *
       cdb__tbl_qos_policer_res__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_policer_res__free_unpacked
                     (Cdb__TblQosPolicerRes *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosPolicerActionProfileKey methods */
void   cdb__tbl_qos_policer_action_profile_key__init
                     (Cdb__TblQosPolicerActionProfileKey         *message);
size_t cdb__tbl_qos_policer_action_profile_key__get_packed_size
                     (const Cdb__TblQosPolicerActionProfileKey   *message);
size_t cdb__tbl_qos_policer_action_profile_key__pack
                     (const Cdb__TblQosPolicerActionProfileKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_policer_action_profile_key__pack_to_buffer
                     (const Cdb__TblQosPolicerActionProfileKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosPolicerActionProfileKey *
       cdb__tbl_qos_policer_action_profile_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_policer_action_profile_key__free_unpacked
                     (Cdb__TblQosPolicerActionProfileKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosPolicerActionProfile methods */
void   cdb__tbl_qos_policer_action_profile__init
                     (Cdb__TblQosPolicerActionProfile         *message);
size_t cdb__tbl_qos_policer_action_profile__get_packed_size
                     (const Cdb__TblQosPolicerActionProfile   *message);
size_t cdb__tbl_qos_policer_action_profile__pack
                     (const Cdb__TblQosPolicerActionProfile   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_policer_action_profile__pack_to_buffer
                     (const Cdb__TblQosPolicerActionProfile   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosPolicerActionProfile *
       cdb__tbl_qos_policer_action_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_policer_action_profile__free_unpacked
                     (Cdb__TblQosPolicerActionProfile *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosPolicerProfileKey methods */
void   cdb__tbl_qos_policer_profile_key__init
                     (Cdb__TblQosPolicerProfileKey         *message);
size_t cdb__tbl_qos_policer_profile_key__get_packed_size
                     (const Cdb__TblQosPolicerProfileKey   *message);
size_t cdb__tbl_qos_policer_profile_key__pack
                     (const Cdb__TblQosPolicerProfileKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_policer_profile_key__pack_to_buffer
                     (const Cdb__TblQosPolicerProfileKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosPolicerProfileKey *
       cdb__tbl_qos_policer_profile_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_policer_profile_key__free_unpacked
                     (Cdb__TblQosPolicerProfileKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosPolicerProfile methods */
void   cdb__tbl_qos_policer_profile__init
                     (Cdb__TblQosPolicerProfile         *message);
size_t cdb__tbl_qos_policer_profile__get_packed_size
                     (const Cdb__TblQosPolicerProfile   *message);
size_t cdb__tbl_qos_policer_profile__pack
                     (const Cdb__TblQosPolicerProfile   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_policer_profile__pack_to_buffer
                     (const Cdb__TblQosPolicerProfile   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosPolicerProfile *
       cdb__tbl_qos_policer_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_policer_profile__free_unpacked
                     (Cdb__TblQosPolicerProfile *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosDropProfileKey methods */
void   cdb__tbl_qos_drop_profile_key__init
                     (Cdb__TblQosDropProfileKey         *message);
size_t cdb__tbl_qos_drop_profile_key__get_packed_size
                     (const Cdb__TblQosDropProfileKey   *message);
size_t cdb__tbl_qos_drop_profile_key__pack
                     (const Cdb__TblQosDropProfileKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_drop_profile_key__pack_to_buffer
                     (const Cdb__TblQosDropProfileKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosDropProfileKey *
       cdb__tbl_qos_drop_profile_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_drop_profile_key__free_unpacked
                     (Cdb__TblQosDropProfileKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosDropProfile methods */
void   cdb__tbl_qos_drop_profile__init
                     (Cdb__TblQosDropProfile         *message);
size_t cdb__tbl_qos_drop_profile__get_packed_size
                     (const Cdb__TblQosDropProfile   *message);
size_t cdb__tbl_qos_drop_profile__pack
                     (const Cdb__TblQosDropProfile   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_drop_profile__pack_to_buffer
                     (const Cdb__TblQosDropProfile   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosDropProfile *
       cdb__tbl_qos_drop_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_drop_profile__free_unpacked
                     (Cdb__TblQosDropProfile *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosQueueShapeProfileKey methods */
void   cdb__tbl_qos_queue_shape_profile_key__init
                     (Cdb__TblQosQueueShapeProfileKey         *message);
size_t cdb__tbl_qos_queue_shape_profile_key__get_packed_size
                     (const Cdb__TblQosQueueShapeProfileKey   *message);
size_t cdb__tbl_qos_queue_shape_profile_key__pack
                     (const Cdb__TblQosQueueShapeProfileKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_queue_shape_profile_key__pack_to_buffer
                     (const Cdb__TblQosQueueShapeProfileKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosQueueShapeProfileKey *
       cdb__tbl_qos_queue_shape_profile_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_queue_shape_profile_key__free_unpacked
                     (Cdb__TblQosQueueShapeProfileKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosQueueShapeProfile methods */
void   cdb__tbl_qos_queue_shape_profile__init
                     (Cdb__TblQosQueueShapeProfile         *message);
size_t cdb__tbl_qos_queue_shape_profile__get_packed_size
                     (const Cdb__TblQosQueueShapeProfile   *message);
size_t cdb__tbl_qos_queue_shape_profile__pack
                     (const Cdb__TblQosQueueShapeProfile   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_queue_shape_profile__pack_to_buffer
                     (const Cdb__TblQosQueueShapeProfile   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosQueueShapeProfile *
       cdb__tbl_qos_queue_shape_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_queue_shape_profile__free_unpacked
                     (Cdb__TblQosQueueShapeProfile *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosPortShapeProfileKey methods */
void   cdb__tbl_qos_port_shape_profile_key__init
                     (Cdb__TblQosPortShapeProfileKey         *message);
size_t cdb__tbl_qos_port_shape_profile_key__get_packed_size
                     (const Cdb__TblQosPortShapeProfileKey   *message);
size_t cdb__tbl_qos_port_shape_profile_key__pack
                     (const Cdb__TblQosPortShapeProfileKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_port_shape_profile_key__pack_to_buffer
                     (const Cdb__TblQosPortShapeProfileKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosPortShapeProfileKey *
       cdb__tbl_qos_port_shape_profile_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_port_shape_profile_key__free_unpacked
                     (Cdb__TblQosPortShapeProfileKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosPortShapeProfile methods */
void   cdb__tbl_qos_port_shape_profile__init
                     (Cdb__TblQosPortShapeProfile         *message);
size_t cdb__tbl_qos_port_shape_profile__get_packed_size
                     (const Cdb__TblQosPortShapeProfile   *message);
size_t cdb__tbl_qos_port_shape_profile__pack
                     (const Cdb__TblQosPortShapeProfile   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_port_shape_profile__pack_to_buffer
                     (const Cdb__TblQosPortShapeProfile   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosPortShapeProfile *
       cdb__tbl_qos_port_shape_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_port_shape_profile__free_unpacked
                     (Cdb__TblQosPortShapeProfile *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosQueueSmartBufferKey methods */
void   cdb__tbl_qos_queue_smart_buffer_key__init
                     (Cdb__TblQosQueueSmartBufferKey         *message);
size_t cdb__tbl_qos_queue_smart_buffer_key__get_packed_size
                     (const Cdb__TblQosQueueSmartBufferKey   *message);
size_t cdb__tbl_qos_queue_smart_buffer_key__pack
                     (const Cdb__TblQosQueueSmartBufferKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_queue_smart_buffer_key__pack_to_buffer
                     (const Cdb__TblQosQueueSmartBufferKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosQueueSmartBufferKey *
       cdb__tbl_qos_queue_smart_buffer_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_queue_smart_buffer_key__free_unpacked
                     (Cdb__TblQosQueueSmartBufferKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosQueueSmartBuffer methods */
void   cdb__tbl_qos_queue_smart_buffer__init
                     (Cdb__TblQosQueueSmartBuffer         *message);
size_t cdb__tbl_qos_queue_smart_buffer__get_packed_size
                     (const Cdb__TblQosQueueSmartBuffer   *message);
size_t cdb__tbl_qos_queue_smart_buffer__pack
                     (const Cdb__TblQosQueueSmartBuffer   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_queue_smart_buffer__pack_to_buffer
                     (const Cdb__TblQosQueueSmartBuffer   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosQueueSmartBuffer *
       cdb__tbl_qos_queue_smart_buffer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_queue_smart_buffer__free_unpacked
                     (Cdb__TblQosQueueSmartBuffer *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblQosGlobal methods */
void   cdb__tbl_qos_global__init
                     (Cdb__TblQosGlobal         *message);
size_t cdb__tbl_qos_global__get_packed_size
                     (const Cdb__TblQosGlobal   *message);
size_t cdb__tbl_qos_global__pack
                     (const Cdb__TblQosGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_qos_global__pack_to_buffer
                     (const Cdb__TblQosGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblQosGlobal *
       cdb__tbl_qos_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_qos_global__free_unpacked
                     (Cdb__TblQosGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMirrorKey methods */
void   cdb__tbl_mirror_key__init
                     (Cdb__TblMirrorKey         *message);
size_t cdb__tbl_mirror_key__get_packed_size
                     (const Cdb__TblMirrorKey   *message);
size_t cdb__tbl_mirror_key__pack
                     (const Cdb__TblMirrorKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_mirror_key__pack_to_buffer
                     (const Cdb__TblMirrorKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMirrorKey *
       cdb__tbl_mirror_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mirror_key__free_unpacked
                     (Cdb__TblMirrorKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMirror methods */
void   cdb__tbl_mirror__init
                     (Cdb__TblMirror         *message);
size_t cdb__tbl_mirror__get_packed_size
                     (const Cdb__TblMirror   *message);
size_t cdb__tbl_mirror__pack
                     (const Cdb__TblMirror   *message,
                      uint8_t             *out);
size_t cdb__tbl_mirror__pack_to_buffer
                     (const Cdb__TblMirror   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMirror *
       cdb__tbl_mirror__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mirror__free_unpacked
                     (Cdb__TblMirror *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMirrorMacEscape methods */
void   cdb__tbl_mirror_mac_escape__init
                     (Cdb__TblMirrorMacEscape         *message);
size_t cdb__tbl_mirror_mac_escape__get_packed_size
                     (const Cdb__TblMirrorMacEscape   *message);
size_t cdb__tbl_mirror_mac_escape__pack
                     (const Cdb__TblMirrorMacEscape   *message,
                      uint8_t             *out);
size_t cdb__tbl_mirror_mac_escape__pack_to_buffer
                     (const Cdb__TblMirrorMacEscape   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMirrorMacEscape *
       cdb__tbl_mirror_mac_escape__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mirror_mac_escape__free_unpacked
                     (Cdb__TblMirrorMacEscape *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTapGroupIngress methods */
void   cdb__tbl_tap_group_ingress__init
                     (Cdb__TblTapGroupIngress         *message);
size_t cdb__tbl_tap_group_ingress__get_packed_size
                     (const Cdb__TblTapGroupIngress   *message);
size_t cdb__tbl_tap_group_ingress__pack
                     (const Cdb__TblTapGroupIngress   *message,
                      uint8_t             *out);
size_t cdb__tbl_tap_group_ingress__pack_to_buffer
                     (const Cdb__TblTapGroupIngress   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTapGroupIngress *
       cdb__tbl_tap_group_ingress__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_tap_group_ingress__free_unpacked
                     (Cdb__TblTapGroupIngress *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTapGroupIngressFlow methods */
void   cdb__tbl_tap_group_ingress_flow__init
                     (Cdb__TblTapGroupIngressFlow         *message);
size_t cdb__tbl_tap_group_ingress_flow__get_packed_size
                     (const Cdb__TblTapGroupIngressFlow   *message);
size_t cdb__tbl_tap_group_ingress_flow__pack
                     (const Cdb__TblTapGroupIngressFlow   *message,
                      uint8_t             *out);
size_t cdb__tbl_tap_group_ingress_flow__pack_to_buffer
                     (const Cdb__TblTapGroupIngressFlow   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTapGroupIngressFlow *
       cdb__tbl_tap_group_ingress_flow__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_tap_group_ingress_flow__free_unpacked
                     (Cdb__TblTapGroupIngressFlow *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTapGroupEgress methods */
void   cdb__tbl_tap_group_egress__init
                     (Cdb__TblTapGroupEgress         *message);
size_t cdb__tbl_tap_group_egress__get_packed_size
                     (const Cdb__TblTapGroupEgress   *message);
size_t cdb__tbl_tap_group_egress__pack
                     (const Cdb__TblTapGroupEgress   *message,
                      uint8_t             *out);
size_t cdb__tbl_tap_group_egress__pack_to_buffer
                     (const Cdb__TblTapGroupEgress   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTapGroupEgress *
       cdb__tbl_tap_group_egress__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_tap_group_egress__free_unpacked
                     (Cdb__TblTapGroupEgress *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTapGroupKey methods */
void   cdb__tbl_tap_group_key__init
                     (Cdb__TblTapGroupKey         *message);
size_t cdb__tbl_tap_group_key__get_packed_size
                     (const Cdb__TblTapGroupKey   *message);
size_t cdb__tbl_tap_group_key__pack
                     (const Cdb__TblTapGroupKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_tap_group_key__pack_to_buffer
                     (const Cdb__TblTapGroupKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTapGroupKey *
       cdb__tbl_tap_group_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_tap_group_key__free_unpacked
                     (Cdb__TblTapGroupKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTapGroup methods */
void   cdb__tbl_tap_group__init
                     (Cdb__TblTapGroup         *message);
size_t cdb__tbl_tap_group__get_packed_size
                     (const Cdb__TblTapGroup   *message);
size_t cdb__tbl_tap_group__pack
                     (const Cdb__TblTapGroup   *message,
                      uint8_t             *out);
size_t cdb__tbl_tap_group__pack_to_buffer
                     (const Cdb__TblTapGroup   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTapGroup *
       cdb__tbl_tap_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_tap_group__free_unpacked
                     (Cdb__TblTapGroup *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTapFiveTuple methods */
void   cdb__tbl_tap_five_tuple__init
                     (Cdb__TblTapFiveTuple         *message);
size_t cdb__tbl_tap_five_tuple__get_packed_size
                     (const Cdb__TblTapFiveTuple   *message);
size_t cdb__tbl_tap_five_tuple__pack
                     (const Cdb__TblTapFiveTuple   *message,
                      uint8_t             *out);
size_t cdb__tbl_tap_five_tuple__pack_to_buffer
                     (const Cdb__TblTapFiveTuple   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTapFiveTuple *
       cdb__tbl_tap_five_tuple__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_tap_five_tuple__free_unpacked
                     (Cdb__TblTapFiveTuple *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTapDpiGlobal methods */
void   cdb__tbl_tap_dpi_global__init
                     (Cdb__TblTapDpiGlobal         *message);
size_t cdb__tbl_tap_dpi_global__get_packed_size
                     (const Cdb__TblTapDpiGlobal   *message);
size_t cdb__tbl_tap_dpi_global__pack
                     (const Cdb__TblTapDpiGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_tap_dpi_global__pack_to_buffer
                     (const Cdb__TblTapDpiGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTapDpiGlobal *
       cdb__tbl_tap_dpi_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_tap_dpi_global__free_unpacked
                     (Cdb__TblTapDpiGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblUserKey methods */
void   cdb__tbl_user_key__init
                     (Cdb__TblUserKey         *message);
size_t cdb__tbl_user_key__get_packed_size
                     (const Cdb__TblUserKey   *message);
size_t cdb__tbl_user_key__pack
                     (const Cdb__TblUserKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_user_key__pack_to_buffer
                     (const Cdb__TblUserKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblUserKey *
       cdb__tbl_user_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_user_key__free_unpacked
                     (Cdb__TblUserKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblUser methods */
void   cdb__tbl_user__init
                     (Cdb__TblUser         *message);
size_t cdb__tbl_user__get_packed_size
                     (const Cdb__TblUser   *message);
size_t cdb__tbl_user__pack
                     (const Cdb__TblUser   *message,
                      uint8_t             *out);
size_t cdb__tbl_user__pack_to_buffer
                     (const Cdb__TblUser   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblUser *
       cdb__tbl_user__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_user__free_unpacked
                     (Cdb__TblUser *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLoginRecordKey methods */
void   cdb__tbl_login_record_key__init
                     (Cdb__TblLoginRecordKey         *message);
size_t cdb__tbl_login_record_key__get_packed_size
                     (const Cdb__TblLoginRecordKey   *message);
size_t cdb__tbl_login_record_key__pack
                     (const Cdb__TblLoginRecordKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_login_record_key__pack_to_buffer
                     (const Cdb__TblLoginRecordKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLoginRecordKey *
       cdb__tbl_login_record_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_login_record_key__free_unpacked
                     (Cdb__TblLoginRecordKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLoginRecord methods */
void   cdb__tbl_login_record__init
                     (Cdb__TblLoginRecord         *message);
size_t cdb__tbl_login_record__get_packed_size
                     (const Cdb__TblLoginRecord   *message);
size_t cdb__tbl_login_record__pack
                     (const Cdb__TblLoginRecord   *message,
                      uint8_t             *out);
size_t cdb__tbl_login_record__pack_to_buffer
                     (const Cdb__TblLoginRecord   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLoginRecord *
       cdb__tbl_login_record__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_login_record__free_unpacked
                     (Cdb__TblLoginRecord *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLoginSecurityGlb methods */
void   cdb__tbl_login_security_glb__init
                     (Cdb__TblLoginSecurityGlb         *message);
size_t cdb__tbl_login_security_glb__get_packed_size
                     (const Cdb__TblLoginSecurityGlb   *message);
size_t cdb__tbl_login_security_glb__pack
                     (const Cdb__TblLoginSecurityGlb   *message,
                      uint8_t             *out);
size_t cdb__tbl_login_security_glb__pack_to_buffer
                     (const Cdb__TblLoginSecurityGlb   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLoginSecurityGlb *
       cdb__tbl_login_security_glb__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_login_security_glb__free_unpacked
                     (Cdb__TblLoginSecurityGlb *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVtyKey methods */
void   cdb__tbl_vty_key__init
                     (Cdb__TblVtyKey         *message);
size_t cdb__tbl_vty_key__get_packed_size
                     (const Cdb__TblVtyKey   *message);
size_t cdb__tbl_vty_key__pack
                     (const Cdb__TblVtyKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_vty_key__pack_to_buffer
                     (const Cdb__TblVtyKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVtyKey *
       cdb__tbl_vty_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vty_key__free_unpacked
                     (Cdb__TblVtyKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVty methods */
void   cdb__tbl_vty__init
                     (Cdb__TblVty         *message);
size_t cdb__tbl_vty__get_packed_size
                     (const Cdb__TblVty   *message);
size_t cdb__tbl_vty__pack
                     (const Cdb__TblVty   *message,
                      uint8_t             *out);
size_t cdb__tbl_vty__pack_to_buffer
                     (const Cdb__TblVty   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVty *
       cdb__tbl_vty__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vty__free_unpacked
                     (Cdb__TblVty *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblConsole methods */
void   cdb__tbl_console__init
                     (Cdb__TblConsole         *message);
size_t cdb__tbl_console__get_packed_size
                     (const Cdb__TblConsole   *message);
size_t cdb__tbl_console__pack
                     (const Cdb__TblConsole   *message,
                      uint8_t             *out);
size_t cdb__tbl_console__pack_to_buffer
                     (const Cdb__TblConsole   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblConsole *
       cdb__tbl_console__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_console__free_unpacked
                     (Cdb__TblConsole *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAuthenKey methods */
void   cdb__tbl_authen_key__init
                     (Cdb__TblAuthenKey         *message);
size_t cdb__tbl_authen_key__get_packed_size
                     (const Cdb__TblAuthenKey   *message);
size_t cdb__tbl_authen_key__pack
                     (const Cdb__TblAuthenKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_authen_key__pack_to_buffer
                     (const Cdb__TblAuthenKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAuthenKey *
       cdb__tbl_authen_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_authen_key__free_unpacked
                     (Cdb__TblAuthenKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAuthen methods */
void   cdb__tbl_authen__init
                     (Cdb__TblAuthen         *message);
size_t cdb__tbl_authen__get_packed_size
                     (const Cdb__TblAuthen   *message);
size_t cdb__tbl_authen__pack
                     (const Cdb__TblAuthen   *message,
                      uint8_t             *out);
size_t cdb__tbl_authen__pack_to_buffer
                     (const Cdb__TblAuthen   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAuthen *
       cdb__tbl_authen__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_authen__free_unpacked
                     (Cdb__TblAuthen *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLoginKey methods */
void   cdb__tbl_login_key__init
                     (Cdb__TblLoginKey         *message);
size_t cdb__tbl_login_key__get_packed_size
                     (const Cdb__TblLoginKey   *message);
size_t cdb__tbl_login_key__pack
                     (const Cdb__TblLoginKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_login_key__pack_to_buffer
                     (const Cdb__TblLoginKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLoginKey *
       cdb__tbl_login_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_login_key__free_unpacked
                     (Cdb__TblLoginKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLogin methods */
void   cdb__tbl_login__init
                     (Cdb__TblLogin         *message);
size_t cdb__tbl_login__get_packed_size
                     (const Cdb__TblLogin   *message);
size_t cdb__tbl_login__pack
                     (const Cdb__TblLogin   *message,
                      uint8_t             *out);
size_t cdb__tbl_login__pack_to_buffer
                     (const Cdb__TblLogin   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLogin *
       cdb__tbl_login__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_login__free_unpacked
                     (Cdb__TblLogin *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRsaKey methods */
void   cdb__tbl_rsa_key__init
                     (Cdb__TblRsaKey         *message);
size_t cdb__tbl_rsa_key__get_packed_size
                     (const Cdb__TblRsaKey   *message);
size_t cdb__tbl_rsa_key__pack
                     (const Cdb__TblRsaKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_rsa_key__pack_to_buffer
                     (const Cdb__TblRsaKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRsaKey *
       cdb__tbl_rsa_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rsa_key__free_unpacked
                     (Cdb__TblRsaKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRsa methods */
void   cdb__tbl_rsa__init
                     (Cdb__TblRsa         *message);
size_t cdb__tbl_rsa__get_packed_size
                     (const Cdb__TblRsa   *message);
size_t cdb__tbl_rsa__pack
                     (const Cdb__TblRsa   *message,
                      uint8_t             *out);
size_t cdb__tbl_rsa__pack_to_buffer
                     (const Cdb__TblRsa   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRsa *
       cdb__tbl_rsa__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rsa__free_unpacked
                     (Cdb__TblRsa *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOpenflow methods */
void   cdb__tbl_openflow__init
                     (Cdb__TblOpenflow         *message);
size_t cdb__tbl_openflow__get_packed_size
                     (const Cdb__TblOpenflow   *message);
size_t cdb__tbl_openflow__pack
                     (const Cdb__TblOpenflow   *message,
                      uint8_t             *out);
size_t cdb__tbl_openflow__pack_to_buffer
                     (const Cdb__TblOpenflow   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOpenflow *
       cdb__tbl_openflow__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_openflow__free_unpacked
                     (Cdb__TblOpenflow *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCpuTrafficKey methods */
void   cdb__tbl_cpu_traffic_key__init
                     (Cdb__TblCpuTrafficKey         *message);
size_t cdb__tbl_cpu_traffic_key__get_packed_size
                     (const Cdb__TblCpuTrafficKey   *message);
size_t cdb__tbl_cpu_traffic_key__pack
                     (const Cdb__TblCpuTrafficKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_cpu_traffic_key__pack_to_buffer
                     (const Cdb__TblCpuTrafficKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCpuTrafficKey *
       cdb__tbl_cpu_traffic_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cpu_traffic_key__free_unpacked
                     (Cdb__TblCpuTrafficKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCpuTraffic methods */
void   cdb__tbl_cpu_traffic__init
                     (Cdb__TblCpuTraffic         *message);
size_t cdb__tbl_cpu_traffic__get_packed_size
                     (const Cdb__TblCpuTraffic   *message);
size_t cdb__tbl_cpu_traffic__pack
                     (const Cdb__TblCpuTraffic   *message,
                      uint8_t             *out);
size_t cdb__tbl_cpu_traffic__pack_to_buffer
                     (const Cdb__TblCpuTraffic   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCpuTraffic *
       cdb__tbl_cpu_traffic__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cpu_traffic__free_unpacked
                     (Cdb__TblCpuTraffic *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCpuTrafficGroupKey methods */
void   cdb__tbl_cpu_traffic_group_key__init
                     (Cdb__TblCpuTrafficGroupKey         *message);
size_t cdb__tbl_cpu_traffic_group_key__get_packed_size
                     (const Cdb__TblCpuTrafficGroupKey   *message);
size_t cdb__tbl_cpu_traffic_group_key__pack
                     (const Cdb__TblCpuTrafficGroupKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_cpu_traffic_group_key__pack_to_buffer
                     (const Cdb__TblCpuTrafficGroupKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCpuTrafficGroupKey *
       cdb__tbl_cpu_traffic_group_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cpu_traffic_group_key__free_unpacked
                     (Cdb__TblCpuTrafficGroupKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCpuTrafficGroup methods */
void   cdb__tbl_cpu_traffic_group__init
                     (Cdb__TblCpuTrafficGroup         *message);
size_t cdb__tbl_cpu_traffic_group__get_packed_size
                     (const Cdb__TblCpuTrafficGroup   *message);
size_t cdb__tbl_cpu_traffic_group__pack
                     (const Cdb__TblCpuTrafficGroup   *message,
                      uint8_t             *out);
size_t cdb__tbl_cpu_traffic_group__pack_to_buffer
                     (const Cdb__TblCpuTrafficGroup   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCpuTrafficGroup *
       cdb__tbl_cpu_traffic_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cpu_traffic_group__free_unpacked
                     (Cdb__TblCpuTrafficGroup *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCpuUtilizationKey methods */
void   cdb__tbl_cpu_utilization_key__init
                     (Cdb__TblCpuUtilizationKey         *message);
size_t cdb__tbl_cpu_utilization_key__get_packed_size
                     (const Cdb__TblCpuUtilizationKey   *message);
size_t cdb__tbl_cpu_utilization_key__pack
                     (const Cdb__TblCpuUtilizationKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_cpu_utilization_key__pack_to_buffer
                     (const Cdb__TblCpuUtilizationKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCpuUtilizationKey *
       cdb__tbl_cpu_utilization_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cpu_utilization_key__free_unpacked
                     (Cdb__TblCpuUtilizationKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCpuUtilization methods */
void   cdb__tbl_cpu_utilization__init
                     (Cdb__TblCpuUtilization         *message);
size_t cdb__tbl_cpu_utilization__get_packed_size
                     (const Cdb__TblCpuUtilization   *message);
size_t cdb__tbl_cpu_utilization__pack
                     (const Cdb__TblCpuUtilization   *message,
                      uint8_t             *out);
size_t cdb__tbl_cpu_utilization__pack_to_buffer
                     (const Cdb__TblCpuUtilization   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCpuUtilization *
       cdb__tbl_cpu_utilization__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cpu_utilization__free_unpacked
                     (Cdb__TblCpuUtilization *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCpuLimitKey methods */
void   cdb__tbl_cpu_limit_key__init
                     (Cdb__TblCpuLimitKey         *message);
size_t cdb__tbl_cpu_limit_key__get_packed_size
                     (const Cdb__TblCpuLimitKey   *message);
size_t cdb__tbl_cpu_limit_key__pack
                     (const Cdb__TblCpuLimitKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_cpu_limit_key__pack_to_buffer
                     (const Cdb__TblCpuLimitKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCpuLimitKey *
       cdb__tbl_cpu_limit_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cpu_limit_key__free_unpacked
                     (Cdb__TblCpuLimitKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCpuLimit methods */
void   cdb__tbl_cpu_limit__init
                     (Cdb__TblCpuLimit         *message);
size_t cdb__tbl_cpu_limit__get_packed_size
                     (const Cdb__TblCpuLimit   *message);
size_t cdb__tbl_cpu_limit__pack
                     (const Cdb__TblCpuLimit   *message,
                      uint8_t             *out);
size_t cdb__tbl_cpu_limit__pack_to_buffer
                     (const Cdb__TblCpuLimit   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCpuLimit *
       cdb__tbl_cpu_limit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cpu_limit__free_unpacked
                     (Cdb__TblCpuLimit *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDhcrelay methods */
void   cdb__tbl_dhcrelay__init
                     (Cdb__TblDhcrelay         *message);
size_t cdb__tbl_dhcrelay__get_packed_size
                     (const Cdb__TblDhcrelay   *message);
size_t cdb__tbl_dhcrelay__pack
                     (const Cdb__TblDhcrelay   *message,
                      uint8_t             *out);
size_t cdb__tbl_dhcrelay__pack_to_buffer
                     (const Cdb__TblDhcrelay   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDhcrelay *
       cdb__tbl_dhcrelay__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dhcrelay__free_unpacked
                     (Cdb__TblDhcrelay *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDhcsrvgrpKey methods */
void   cdb__tbl_dhcsrvgrp_key__init
                     (Cdb__TblDhcsrvgrpKey         *message);
size_t cdb__tbl_dhcsrvgrp_key__get_packed_size
                     (const Cdb__TblDhcsrvgrpKey   *message);
size_t cdb__tbl_dhcsrvgrp_key__pack
                     (const Cdb__TblDhcsrvgrpKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_dhcsrvgrp_key__pack_to_buffer
                     (const Cdb__TblDhcsrvgrpKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDhcsrvgrpKey *
       cdb__tbl_dhcsrvgrp_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dhcsrvgrp_key__free_unpacked
                     (Cdb__TblDhcsrvgrpKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDhcsrvgrp methods */
void   cdb__tbl_dhcsrvgrp__init
                     (Cdb__TblDhcsrvgrp         *message);
size_t cdb__tbl_dhcsrvgrp__get_packed_size
                     (const Cdb__TblDhcsrvgrp   *message);
size_t cdb__tbl_dhcsrvgrp__pack
                     (const Cdb__TblDhcsrvgrp   *message,
                      uint8_t             *out);
size_t cdb__tbl_dhcsrvgrp__pack_to_buffer
                     (const Cdb__TblDhcsrvgrp   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDhcsrvgrp *
       cdb__tbl_dhcsrvgrp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dhcsrvgrp__free_unpacked
                     (Cdb__TblDhcsrvgrp *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDhcpDebug methods */
void   cdb__tbl_dhcp_debug__init
                     (Cdb__TblDhcpDebug         *message);
size_t cdb__tbl_dhcp_debug__get_packed_size
                     (const Cdb__TblDhcpDebug   *message);
size_t cdb__tbl_dhcp_debug__pack
                     (const Cdb__TblDhcpDebug   *message,
                      uint8_t             *out);
size_t cdb__tbl_dhcp_debug__pack_to_buffer
                     (const Cdb__TblDhcpDebug   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDhcpDebug *
       cdb__tbl_dhcp_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dhcp_debug__free_unpacked
                     (Cdb__TblDhcpDebug *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDhclient methods */
void   cdb__tbl_dhclient__init
                     (Cdb__TblDhclient         *message);
size_t cdb__tbl_dhclient__get_packed_size
                     (const Cdb__TblDhclient   *message);
size_t cdb__tbl_dhclient__pack
                     (const Cdb__TblDhclient   *message,
                      uint8_t             *out);
size_t cdb__tbl_dhclient__pack_to_buffer
                     (const Cdb__TblDhclient   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDhclient *
       cdb__tbl_dhclient__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dhclient__free_unpacked
                     (Cdb__TblDhclient *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDhcsnooping methods */
void   cdb__tbl_dhcsnooping__init
                     (Cdb__TblDhcsnooping         *message);
size_t cdb__tbl_dhcsnooping__get_packed_size
                     (const Cdb__TblDhcsnooping   *message);
size_t cdb__tbl_dhcsnooping__pack
                     (const Cdb__TblDhcsnooping   *message,
                      uint8_t             *out);
size_t cdb__tbl_dhcsnooping__pack_to_buffer
                     (const Cdb__TblDhcsnooping   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDhcsnooping *
       cdb__tbl_dhcsnooping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dhcsnooping__free_unpacked
                     (Cdb__TblDhcsnooping *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDhcbinding methods */
void   cdb__tbl_dhcbinding__init
                     (Cdb__TblDhcbinding         *message);
size_t cdb__tbl_dhcbinding__get_packed_size
                     (const Cdb__TblDhcbinding   *message);
size_t cdb__tbl_dhcbinding__pack
                     (const Cdb__TblDhcbinding   *message,
                      uint8_t             *out);
size_t cdb__tbl_dhcbinding__pack_to_buffer
                     (const Cdb__TblDhcbinding   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDhcbinding *
       cdb__tbl_dhcbinding__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dhcbinding__free_unpacked
                     (Cdb__TblDhcbinding *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIptablesPrevent methods */
void   cdb__tbl_iptables_prevent__init
                     (Cdb__TblIptablesPrevent         *message);
size_t cdb__tbl_iptables_prevent__get_packed_size
                     (const Cdb__TblIptablesPrevent   *message);
size_t cdb__tbl_iptables_prevent__pack
                     (const Cdb__TblIptablesPrevent   *message,
                      uint8_t             *out);
size_t cdb__tbl_iptables_prevent__pack_to_buffer
                     (const Cdb__TblIptablesPrevent   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIptablesPrevent *
       cdb__tbl_iptables_prevent__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_iptables_prevent__free_unpacked
                     (Cdb__TblIptablesPrevent *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblErrdisableKey methods */
void   cdb__tbl_errdisable_key__init
                     (Cdb__TblErrdisableKey         *message);
size_t cdb__tbl_errdisable_key__get_packed_size
                     (const Cdb__TblErrdisableKey   *message);
size_t cdb__tbl_errdisable_key__pack
                     (const Cdb__TblErrdisableKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_errdisable_key__pack_to_buffer
                     (const Cdb__TblErrdisableKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblErrdisableKey *
       cdb__tbl_errdisable_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_errdisable_key__free_unpacked
                     (Cdb__TblErrdisableKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblErrdisable methods */
void   cdb__tbl_errdisable__init
                     (Cdb__TblErrdisable         *message);
size_t cdb__tbl_errdisable__get_packed_size
                     (const Cdb__TblErrdisable   *message);
size_t cdb__tbl_errdisable__pack
                     (const Cdb__TblErrdisable   *message,
                      uint8_t             *out);
size_t cdb__tbl_errdisable__pack_to_buffer
                     (const Cdb__TblErrdisable   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblErrdisable *
       cdb__tbl_errdisable__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_errdisable__free_unpacked
                     (Cdb__TblErrdisable *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNsPortForwarding methods */
void   cdb__tbl_ns_port_forwarding__init
                     (Cdb__TblNsPortForwarding         *message);
size_t cdb__tbl_ns_port_forwarding__get_packed_size
                     (const Cdb__TblNsPortForwarding   *message);
size_t cdb__tbl_ns_port_forwarding__pack
                     (const Cdb__TblNsPortForwarding   *message,
                      uint8_t             *out);
size_t cdb__tbl_ns_port_forwarding__pack_to_buffer
                     (const Cdb__TblNsPortForwarding   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNsPortForwarding *
       cdb__tbl_ns_port_forwarding__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ns_port_forwarding__free_unpacked
                     (Cdb__TblNsPortForwarding *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLogGlobal methods */
void   cdb__tbl_log_global__init
                     (Cdb__TblLogGlobal         *message);
size_t cdb__tbl_log_global__get_packed_size
                     (const Cdb__TblLogGlobal   *message);
size_t cdb__tbl_log_global__pack
                     (const Cdb__TblLogGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_log_global__pack_to_buffer
                     (const Cdb__TblLogGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLogGlobal *
       cdb__tbl_log_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_log_global__free_unpacked
                     (Cdb__TblLogGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLogKey methods */
void   cdb__tbl_log_key__init
                     (Cdb__TblLogKey         *message);
size_t cdb__tbl_log_key__get_packed_size
                     (const Cdb__TblLogKey   *message);
size_t cdb__tbl_log_key__pack
                     (const Cdb__TblLogKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_log_key__pack_to_buffer
                     (const Cdb__TblLogKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLogKey *
       cdb__tbl_log_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_log_key__free_unpacked
                     (Cdb__TblLogKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLog methods */
void   cdb__tbl_log__init
                     (Cdb__TblLog         *message);
size_t cdb__tbl_log__get_packed_size
                     (const Cdb__TblLog   *message);
size_t cdb__tbl_log__pack
                     (const Cdb__TblLog   *message,
                      uint8_t             *out);
size_t cdb__tbl_log__pack_to_buffer
                     (const Cdb__TblLog   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLog *
       cdb__tbl_log__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_log__free_unpacked
                     (Cdb__TblLog *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSysLoad methods */
void   cdb__tbl_sys_load__init
                     (Cdb__TblSysLoad         *message);
size_t cdb__tbl_sys_load__get_packed_size
                     (const Cdb__TblSysLoad   *message);
size_t cdb__tbl_sys_load__pack
                     (const Cdb__TblSysLoad   *message,
                      uint8_t             *out);
size_t cdb__tbl_sys_load__pack_to_buffer
                     (const Cdb__TblSysLoad   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSysLoad *
       cdb__tbl_sys_load__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_sys_load__free_unpacked
                     (Cdb__TblSysLoad *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCemKey methods */
void   cdb__tbl_cem_key__init
                     (Cdb__TblCemKey         *message);
size_t cdb__tbl_cem_key__get_packed_size
                     (const Cdb__TblCemKey   *message);
size_t cdb__tbl_cem_key__pack
                     (const Cdb__TblCemKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_cem_key__pack_to_buffer
                     (const Cdb__TblCemKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCemKey *
       cdb__tbl_cem_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cem_key__free_unpacked
                     (Cdb__TblCemKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCem methods */
void   cdb__tbl_cem__init
                     (Cdb__TblCem         *message);
size_t cdb__tbl_cem__get_packed_size
                     (const Cdb__TblCem   *message);
size_t cdb__tbl_cem__pack
                     (const Cdb__TblCem   *message,
                      uint8_t             *out);
size_t cdb__tbl_cem__pack_to_buffer
                     (const Cdb__TblCem   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCem *
       cdb__tbl_cem__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cem__free_unpacked
                     (Cdb__TblCem *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblClock methods */
void   cdb__tbl_clock__init
                     (Cdb__TblClock         *message);
size_t cdb__tbl_clock__get_packed_size
                     (const Cdb__TblClock   *message);
size_t cdb__tbl_clock__pack
                     (const Cdb__TblClock   *message,
                      uint8_t             *out);
size_t cdb__tbl_clock__pack_to_buffer
                     (const Cdb__TblClock   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblClock *
       cdb__tbl_clock__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_clock__free_unpacked
                     (Cdb__TblClock *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTagSummerClock methods */
void   cdb__tbl_tag_summer_clock__init
                     (Cdb__TblTagSummerClock         *message);
size_t cdb__tbl_tag_summer_clock__get_packed_size
                     (const Cdb__TblTagSummerClock   *message);
size_t cdb__tbl_tag_summer_clock__pack
                     (const Cdb__TblTagSummerClock   *message,
                      uint8_t             *out);
size_t cdb__tbl_tag_summer_clock__pack_to_buffer
                     (const Cdb__TblTagSummerClock   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTagSummerClock *
       cdb__tbl_tag_summer_clock__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_tag_summer_clock__free_unpacked
                     (Cdb__TblTagSummerClock *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPortStatsKey methods */
void   cdb__tbl_port_stats_key__init
                     (Cdb__TblPortStatsKey         *message);
size_t cdb__tbl_port_stats_key__get_packed_size
                     (const Cdb__TblPortStatsKey   *message);
size_t cdb__tbl_port_stats_key__pack
                     (const Cdb__TblPortStatsKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_port_stats_key__pack_to_buffer
                     (const Cdb__TblPortStatsKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPortStatsKey *
       cdb__tbl_port_stats_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_port_stats_key__free_unpacked
                     (Cdb__TblPortStatsKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPortStats methods */
void   cdb__tbl_port_stats__init
                     (Cdb__TblPortStats         *message);
size_t cdb__tbl_port_stats__get_packed_size
                     (const Cdb__TblPortStats   *message);
size_t cdb__tbl_port_stats__pack
                     (const Cdb__TblPortStats   *message,
                      uint8_t             *out);
size_t cdb__tbl_port_stats__pack_to_buffer
                     (const Cdb__TblPortStats   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPortStats *
       cdb__tbl_port_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_port_stats__free_unpacked
                     (Cdb__TblPortStats *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVlanStatsKey methods */
void   cdb__tbl_vlan_stats_key__init
                     (Cdb__TblVlanStatsKey         *message);
size_t cdb__tbl_vlan_stats_key__get_packed_size
                     (const Cdb__TblVlanStatsKey   *message);
size_t cdb__tbl_vlan_stats_key__pack
                     (const Cdb__TblVlanStatsKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_vlan_stats_key__pack_to_buffer
                     (const Cdb__TblVlanStatsKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVlanStatsKey *
       cdb__tbl_vlan_stats_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vlan_stats_key__free_unpacked
                     (Cdb__TblVlanStatsKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVlanStats methods */
void   cdb__tbl_vlan_stats__init
                     (Cdb__TblVlanStats         *message);
size_t cdb__tbl_vlan_stats__get_packed_size
                     (const Cdb__TblVlanStats   *message);
size_t cdb__tbl_vlan_stats__pack
                     (const Cdb__TblVlanStats   *message,
                      uint8_t             *out);
size_t cdb__tbl_vlan_stats__pack_to_buffer
                     (const Cdb__TblVlanStats   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVlanStats *
       cdb__tbl_vlan_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vlan_stats__free_unpacked
                     (Cdb__TblVlanStats *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPortStatsRateKey methods */
void   cdb__tbl_port_stats_rate_key__init
                     (Cdb__TblPortStatsRateKey         *message);
size_t cdb__tbl_port_stats_rate_key__get_packed_size
                     (const Cdb__TblPortStatsRateKey   *message);
size_t cdb__tbl_port_stats_rate_key__pack
                     (const Cdb__TblPortStatsRateKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_port_stats_rate_key__pack_to_buffer
                     (const Cdb__TblPortStatsRateKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPortStatsRateKey *
       cdb__tbl_port_stats_rate_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_port_stats_rate_key__free_unpacked
                     (Cdb__TblPortStatsRateKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPortStatsRate methods */
void   cdb__tbl_port_stats_rate__init
                     (Cdb__TblPortStatsRate         *message);
size_t cdb__tbl_port_stats_rate__get_packed_size
                     (const Cdb__TblPortStatsRate   *message);
size_t cdb__tbl_port_stats_rate__pack
                     (const Cdb__TblPortStatsRate   *message,
                      uint8_t             *out);
size_t cdb__tbl_port_stats_rate__pack_to_buffer
                     (const Cdb__TblPortStatsRate   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPortStatsRate *
       cdb__tbl_port_stats_rate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_port_stats_rate__free_unpacked
                     (Cdb__TblPortStatsRate *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclqosIfKey methods */
void   cdb__tbl_aclqos_if_key__init
                     (Cdb__TblAclqosIfKey         *message);
size_t cdb__tbl_aclqos_if_key__get_packed_size
                     (const Cdb__TblAclqosIfKey   *message);
size_t cdb__tbl_aclqos_if_key__pack
                     (const Cdb__TblAclqosIfKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_aclqos_if_key__pack_to_buffer
                     (const Cdb__TblAclqosIfKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclqosIfKey *
       cdb__tbl_aclqos_if_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_aclqos_if_key__free_unpacked
                     (Cdb__TblAclqosIfKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclqosIf methods */
void   cdb__tbl_aclqos_if__init
                     (Cdb__TblAclqosIf         *message);
size_t cdb__tbl_aclqos_if__get_packed_size
                     (const Cdb__TblAclqosIf   *message);
size_t cdb__tbl_aclqos_if__pack
                     (const Cdb__TblAclqosIf   *message,
                      uint8_t             *out);
size_t cdb__tbl_aclqos_if__pack_to_buffer
                     (const Cdb__TblAclqosIf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclqosIf *
       cdb__tbl_aclqos_if__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_aclqos_if__free_unpacked
                     (Cdb__TblAclqosIf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblL2Action methods */
void   cdb__tbl_l2_action__init
                     (Cdb__TblL2Action         *message);
size_t cdb__tbl_l2_action__get_packed_size
                     (const Cdb__TblL2Action   *message);
size_t cdb__tbl_l2_action__pack
                     (const Cdb__TblL2Action   *message,
                      uint8_t             *out);
size_t cdb__tbl_l2_action__pack_to_buffer
                     (const Cdb__TblL2Action   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblL2Action *
       cdb__tbl_l2_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_l2_action__free_unpacked
                     (Cdb__TblL2Action *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaQosDropProfileKey methods */
void   cdb__tbl_fea_qos_drop_profile_key__init
                     (Cdb__TblFeaQosDropProfileKey         *message);
size_t cdb__tbl_fea_qos_drop_profile_key__get_packed_size
                     (const Cdb__TblFeaQosDropProfileKey   *message);
size_t cdb__tbl_fea_qos_drop_profile_key__pack
                     (const Cdb__TblFeaQosDropProfileKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_qos_drop_profile_key__pack_to_buffer
                     (const Cdb__TblFeaQosDropProfileKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaQosDropProfileKey *
       cdb__tbl_fea_qos_drop_profile_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_qos_drop_profile_key__free_unpacked
                     (Cdb__TblFeaQosDropProfileKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaQosDropProfile methods */
void   cdb__tbl_fea_qos_drop_profile__init
                     (Cdb__TblFeaQosDropProfile         *message);
size_t cdb__tbl_fea_qos_drop_profile__get_packed_size
                     (const Cdb__TblFeaQosDropProfile   *message);
size_t cdb__tbl_fea_qos_drop_profile__pack
                     (const Cdb__TblFeaQosDropProfile   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_qos_drop_profile__pack_to_buffer
                     (const Cdb__TblFeaQosDropProfile   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaQosDropProfile *
       cdb__tbl_fea_qos_drop_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_qos_drop_profile__free_unpacked
                     (Cdb__TblFeaQosDropProfile *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaQosDomainKey methods */
void   cdb__tbl_fea_qos_domain_key__init
                     (Cdb__TblFeaQosDomainKey         *message);
size_t cdb__tbl_fea_qos_domain_key__get_packed_size
                     (const Cdb__TblFeaQosDomainKey   *message);
size_t cdb__tbl_fea_qos_domain_key__pack
                     (const Cdb__TblFeaQosDomainKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_qos_domain_key__pack_to_buffer
                     (const Cdb__TblFeaQosDomainKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaQosDomainKey *
       cdb__tbl_fea_qos_domain_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_qos_domain_key__free_unpacked
                     (Cdb__TblFeaQosDomainKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaQosDomain methods */
void   cdb__tbl_fea_qos_domain__init
                     (Cdb__TblFeaQosDomain         *message);
size_t cdb__tbl_fea_qos_domain__get_packed_size
                     (const Cdb__TblFeaQosDomain   *message);
size_t cdb__tbl_fea_qos_domain__pack
                     (const Cdb__TblFeaQosDomain   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_qos_domain__pack_to_buffer
                     (const Cdb__TblFeaQosDomain   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaQosDomain *
       cdb__tbl_fea_qos_domain__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_qos_domain__free_unpacked
                     (Cdb__TblFeaQosDomain *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaG8032Ring methods */
void   cdb__tbl_fea_g8032_ring__init
                     (Cdb__TblFeaG8032Ring         *message);
size_t cdb__tbl_fea_g8032_ring__get_packed_size
                     (const Cdb__TblFeaG8032Ring   *message);
size_t cdb__tbl_fea_g8032_ring__pack
                     (const Cdb__TblFeaG8032Ring   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_g8032_ring__pack_to_buffer
                     (const Cdb__TblFeaG8032Ring   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaG8032Ring *
       cdb__tbl_fea_g8032_ring__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_g8032_ring__free_unpacked
                     (Cdb__TblFeaG8032Ring *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaG8032RingMcGroupKey methods */
void   cdb__tbl_fea_g8032_ring_mc_group_key__init
                     (Cdb__TblFeaG8032RingMcGroupKey         *message);
size_t cdb__tbl_fea_g8032_ring_mc_group_key__get_packed_size
                     (const Cdb__TblFeaG8032RingMcGroupKey   *message);
size_t cdb__tbl_fea_g8032_ring_mc_group_key__pack
                     (const Cdb__TblFeaG8032RingMcGroupKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_g8032_ring_mc_group_key__pack_to_buffer
                     (const Cdb__TblFeaG8032RingMcGroupKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaG8032RingMcGroupKey *
       cdb__tbl_fea_g8032_ring_mc_group_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_g8032_ring_mc_group_key__free_unpacked
                     (Cdb__TblFeaG8032RingMcGroupKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaG8032RingMcGroup methods */
void   cdb__tbl_fea_g8032_ring_mc_group__init
                     (Cdb__TblFeaG8032RingMcGroup         *message);
size_t cdb__tbl_fea_g8032_ring_mc_group__get_packed_size
                     (const Cdb__TblFeaG8032RingMcGroup   *message);
size_t cdb__tbl_fea_g8032_ring_mc_group__pack
                     (const Cdb__TblFeaG8032RingMcGroup   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_g8032_ring_mc_group__pack_to_buffer
                     (const Cdb__TblFeaG8032RingMcGroup   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaG8032RingMcGroup *
       cdb__tbl_fea_g8032_ring_mc_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_g8032_ring_mc_group__free_unpacked
                     (Cdb__TblFeaG8032RingMcGroup *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaQosQueueShapeProfileKey methods */
void   cdb__tbl_fea_qos_queue_shape_profile_key__init
                     (Cdb__TblFeaQosQueueShapeProfileKey         *message);
size_t cdb__tbl_fea_qos_queue_shape_profile_key__get_packed_size
                     (const Cdb__TblFeaQosQueueShapeProfileKey   *message);
size_t cdb__tbl_fea_qos_queue_shape_profile_key__pack
                     (const Cdb__TblFeaQosQueueShapeProfileKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_qos_queue_shape_profile_key__pack_to_buffer
                     (const Cdb__TblFeaQosQueueShapeProfileKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaQosQueueShapeProfileKey *
       cdb__tbl_fea_qos_queue_shape_profile_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_qos_queue_shape_profile_key__free_unpacked
                     (Cdb__TblFeaQosQueueShapeProfileKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaQosQueueShapeProfile methods */
void   cdb__tbl_fea_qos_queue_shape_profile__init
                     (Cdb__TblFeaQosQueueShapeProfile         *message);
size_t cdb__tbl_fea_qos_queue_shape_profile__get_packed_size
                     (const Cdb__TblFeaQosQueueShapeProfile   *message);
size_t cdb__tbl_fea_qos_queue_shape_profile__pack
                     (const Cdb__TblFeaQosQueueShapeProfile   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_qos_queue_shape_profile__pack_to_buffer
                     (const Cdb__TblFeaQosQueueShapeProfile   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaQosQueueShapeProfile *
       cdb__tbl_fea_qos_queue_shape_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_qos_queue_shape_profile__free_unpacked
                     (Cdb__TblFeaQosQueueShapeProfile *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaQosPortShapeProfileKey methods */
void   cdb__tbl_fea_qos_port_shape_profile_key__init
                     (Cdb__TblFeaQosPortShapeProfileKey         *message);
size_t cdb__tbl_fea_qos_port_shape_profile_key__get_packed_size
                     (const Cdb__TblFeaQosPortShapeProfileKey   *message);
size_t cdb__tbl_fea_qos_port_shape_profile_key__pack
                     (const Cdb__TblFeaQosPortShapeProfileKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_qos_port_shape_profile_key__pack_to_buffer
                     (const Cdb__TblFeaQosPortShapeProfileKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaQosPortShapeProfileKey *
       cdb__tbl_fea_qos_port_shape_profile_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_qos_port_shape_profile_key__free_unpacked
                     (Cdb__TblFeaQosPortShapeProfileKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaQosPortShapeProfile methods */
void   cdb__tbl_fea_qos_port_shape_profile__init
                     (Cdb__TblFeaQosPortShapeProfile         *message);
size_t cdb__tbl_fea_qos_port_shape_profile__get_packed_size
                     (const Cdb__TblFeaQosPortShapeProfile   *message);
size_t cdb__tbl_fea_qos_port_shape_profile__pack
                     (const Cdb__TblFeaQosPortShapeProfile   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_qos_port_shape_profile__pack_to_buffer
                     (const Cdb__TblFeaQosPortShapeProfile   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaQosPortShapeProfile *
       cdb__tbl_fea_qos_port_shape_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_qos_port_shape_profile__free_unpacked
                     (Cdb__TblFeaQosPortShapeProfile *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaPortPolicerApplyKey methods */
void   cdb__tbl_fea_port_policer_apply_key__init
                     (Cdb__TblFeaPortPolicerApplyKey         *message);
size_t cdb__tbl_fea_port_policer_apply_key__get_packed_size
                     (const Cdb__TblFeaPortPolicerApplyKey   *message);
size_t cdb__tbl_fea_port_policer_apply_key__pack
                     (const Cdb__TblFeaPortPolicerApplyKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_port_policer_apply_key__pack_to_buffer
                     (const Cdb__TblFeaPortPolicerApplyKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaPortPolicerApplyKey *
       cdb__tbl_fea_port_policer_apply_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_port_policer_apply_key__free_unpacked
                     (Cdb__TblFeaPortPolicerApplyKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaPortPolicerApply methods */
void   cdb__tbl_fea_port_policer_apply__init
                     (Cdb__TblFeaPortPolicerApply         *message);
size_t cdb__tbl_fea_port_policer_apply__get_packed_size
                     (const Cdb__TblFeaPortPolicerApply   *message);
size_t cdb__tbl_fea_port_policer_apply__pack
                     (const Cdb__TblFeaPortPolicerApply   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_port_policer_apply__pack_to_buffer
                     (const Cdb__TblFeaPortPolicerApply   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaPortPolicerApply *
       cdb__tbl_fea_port_policer_apply__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_port_policer_apply__free_unpacked
                     (Cdb__TblFeaPortPolicerApply *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclqosIfStatsKey methods */
void   cdb__tbl_aclqos_if_stats_key__init
                     (Cdb__TblAclqosIfStatsKey         *message);
size_t cdb__tbl_aclqos_if_stats_key__get_packed_size
                     (const Cdb__TblAclqosIfStatsKey   *message);
size_t cdb__tbl_aclqos_if_stats_key__pack
                     (const Cdb__TblAclqosIfStatsKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_aclqos_if_stats_key__pack_to_buffer
                     (const Cdb__TblAclqosIfStatsKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclqosIfStatsKey *
       cdb__tbl_aclqos_if_stats_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_aclqos_if_stats_key__free_unpacked
                     (Cdb__TblAclqosIfStatsKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclqosIfStats methods */
void   cdb__tbl_aclqos_if_stats__init
                     (Cdb__TblAclqosIfStats         *message);
size_t cdb__tbl_aclqos_if_stats__get_packed_size
                     (const Cdb__TblAclqosIfStats   *message);
size_t cdb__tbl_aclqos_if_stats__pack
                     (const Cdb__TblAclqosIfStats   *message,
                      uint8_t             *out);
size_t cdb__tbl_aclqos_if_stats__pack_to_buffer
                     (const Cdb__TblAclqosIfStats   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclqosIfStats *
       cdb__tbl_aclqos_if_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_aclqos_if_stats__free_unpacked
                     (Cdb__TblAclqosIfStats *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVersion methods */
void   cdb__tbl_version__init
                     (Cdb__TblVersion         *message);
size_t cdb__tbl_version__get_packed_size
                     (const Cdb__TblVersion   *message);
size_t cdb__tbl_version__pack
                     (const Cdb__TblVersion   *message,
                      uint8_t             *out);
size_t cdb__tbl_version__pack_to_buffer
                     (const Cdb__TblVersion   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVersion *
       cdb__tbl_version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_version__free_unpacked
                     (Cdb__TblVersion *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblManageIf methods */
void   cdb__tbl_manage_if__init
                     (Cdb__TblManageIf         *message);
size_t cdb__tbl_manage_if__get_packed_size
                     (const Cdb__TblManageIf   *message);
size_t cdb__tbl_manage_if__pack
                     (const Cdb__TblManageIf   *message,
                      uint8_t             *out);
size_t cdb__tbl_manage_if__pack_to_buffer
                     (const Cdb__TblManageIf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblManageIf *
       cdb__tbl_manage_if__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_manage_if__free_unpacked
                     (Cdb__TblManageIf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblBootimage methods */
void   cdb__tbl_bootimage__init
                     (Cdb__TblBootimage         *message);
size_t cdb__tbl_bootimage__get_packed_size
                     (const Cdb__TblBootimage   *message);
size_t cdb__tbl_bootimage__pack
                     (const Cdb__TblBootimage   *message,
                      uint8_t             *out);
size_t cdb__tbl_bootimage__pack_to_buffer
                     (const Cdb__TblBootimage   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblBootimage *
       cdb__tbl_bootimage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_bootimage__free_unpacked
                     (Cdb__TblBootimage *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblChassis methods */
void   cdb__tbl_chassis__init
                     (Cdb__TblChassis         *message);
size_t cdb__tbl_chassis__get_packed_size
                     (const Cdb__TblChassis   *message);
size_t cdb__tbl_chassis__pack
                     (const Cdb__TblChassis   *message,
                      uint8_t             *out);
size_t cdb__tbl_chassis__pack_to_buffer
                     (const Cdb__TblChassis   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblChassis *
       cdb__tbl_chassis__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_chassis__free_unpacked
                     (Cdb__TblChassis *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIfnameInfo methods */
void   cdb__tbl_ifname_info__init
                     (Cdb__TblIfnameInfo         *message);
size_t cdb__tbl_ifname_info__get_packed_size
                     (const Cdb__TblIfnameInfo   *message);
size_t cdb__tbl_ifname_info__pack
                     (const Cdb__TblIfnameInfo   *message,
                      uint8_t             *out);
size_t cdb__tbl_ifname_info__pack_to_buffer
                     (const Cdb__TblIfnameInfo   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIfnameInfo *
       cdb__tbl_ifname_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ifname_info__free_unpacked
                     (Cdb__TblIfnameInfo *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCardKey methods */
void   cdb__tbl_card_key__init
                     (Cdb__TblCardKey         *message);
size_t cdb__tbl_card_key__get_packed_size
                     (const Cdb__TblCardKey   *message);
size_t cdb__tbl_card_key__pack
                     (const Cdb__TblCardKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_card_key__pack_to_buffer
                     (const Cdb__TblCardKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCardKey *
       cdb__tbl_card_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_card_key__free_unpacked
                     (Cdb__TblCardKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCard methods */
void   cdb__tbl_card__init
                     (Cdb__TblCard         *message);
size_t cdb__tbl_card__get_packed_size
                     (const Cdb__TblCard   *message);
size_t cdb__tbl_card__pack
                     (const Cdb__TblCard   *message,
                      uint8_t             *out);
size_t cdb__tbl_card__pack_to_buffer
                     (const Cdb__TblCard   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCard *
       cdb__tbl_card__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_card__free_unpacked
                     (Cdb__TblCard *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPortKey methods */
void   cdb__tbl_port_key__init
                     (Cdb__TblPortKey         *message);
size_t cdb__tbl_port_key__get_packed_size
                     (const Cdb__TblPortKey   *message);
size_t cdb__tbl_port_key__pack
                     (const Cdb__TblPortKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_port_key__pack_to_buffer
                     (const Cdb__TblPortKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPortKey *
       cdb__tbl_port_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_port_key__free_unpacked
                     (Cdb__TblPortKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPort methods */
void   cdb__tbl_port__init
                     (Cdb__TblPort         *message);
size_t cdb__tbl_port__get_packed_size
                     (const Cdb__TblPort   *message);
size_t cdb__tbl_port__pack
                     (const Cdb__TblPort   *message,
                      uint8_t             *out);
size_t cdb__tbl_port__pack_to_buffer
                     (const Cdb__TblPort   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPort *
       cdb__tbl_port__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_port__free_unpacked
                     (Cdb__TblPort *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFiberKey methods */
void   cdb__tbl_fiber_key__init
                     (Cdb__TblFiberKey         *message);
size_t cdb__tbl_fiber_key__get_packed_size
                     (const Cdb__TblFiberKey   *message);
size_t cdb__tbl_fiber_key__pack
                     (const Cdb__TblFiberKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fiber_key__pack_to_buffer
                     (const Cdb__TblFiberKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFiberKey *
       cdb__tbl_fiber_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fiber_key__free_unpacked
                     (Cdb__TblFiberKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFiber methods */
void   cdb__tbl_fiber__init
                     (Cdb__TblFiber         *message);
size_t cdb__tbl_fiber__get_packed_size
                     (const Cdb__TblFiber   *message);
size_t cdb__tbl_fiber__pack
                     (const Cdb__TblFiber   *message,
                      uint8_t             *out);
size_t cdb__tbl_fiber__pack_to_buffer
                     (const Cdb__TblFiber   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFiber *
       cdb__tbl_fiber__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fiber__free_unpacked
                     (Cdb__TblFiber *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSysSpecKey methods */
void   cdb__tbl_sys_spec_key__init
                     (Cdb__TblSysSpecKey         *message);
size_t cdb__tbl_sys_spec_key__get_packed_size
                     (const Cdb__TblSysSpecKey   *message);
size_t cdb__tbl_sys_spec_key__pack
                     (const Cdb__TblSysSpecKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_sys_spec_key__pack_to_buffer
                     (const Cdb__TblSysSpecKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSysSpecKey *
       cdb__tbl_sys_spec_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_sys_spec_key__free_unpacked
                     (Cdb__TblSysSpecKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSysSpec methods */
void   cdb__tbl_sys_spec__init
                     (Cdb__TblSysSpec         *message);
size_t cdb__tbl_sys_spec__get_packed_size
                     (const Cdb__TblSysSpec   *message);
size_t cdb__tbl_sys_spec__pack
                     (const Cdb__TblSysSpec   *message,
                      uint8_t             *out);
size_t cdb__tbl_sys_spec__pack_to_buffer
                     (const Cdb__TblSysSpec   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSysSpec *
       cdb__tbl_sys_spec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_sys_spec__free_unpacked
                     (Cdb__TblSysSpec *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFanKey methods */
void   cdb__tbl_fan_key__init
                     (Cdb__TblFanKey         *message);
size_t cdb__tbl_fan_key__get_packed_size
                     (const Cdb__TblFanKey   *message);
size_t cdb__tbl_fan_key__pack
                     (const Cdb__TblFanKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fan_key__pack_to_buffer
                     (const Cdb__TblFanKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFanKey *
       cdb__tbl_fan_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fan_key__free_unpacked
                     (Cdb__TblFanKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFan methods */
void   cdb__tbl_fan__init
                     (Cdb__TblFan         *message);
size_t cdb__tbl_fan__get_packed_size
                     (const Cdb__TblFan   *message);
size_t cdb__tbl_fan__pack
                     (const Cdb__TblFan   *message,
                      uint8_t             *out);
size_t cdb__tbl_fan__pack_to_buffer
                     (const Cdb__TblFan   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFan *
       cdb__tbl_fan__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fan__free_unpacked
                     (Cdb__TblFan *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPsuKey methods */
void   cdb__tbl_psu_key__init
                     (Cdb__TblPsuKey         *message);
size_t cdb__tbl_psu_key__get_packed_size
                     (const Cdb__TblPsuKey   *message);
size_t cdb__tbl_psu_key__pack
                     (const Cdb__TblPsuKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_psu_key__pack_to_buffer
                     (const Cdb__TblPsuKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPsuKey *
       cdb__tbl_psu_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_psu_key__free_unpacked
                     (Cdb__TblPsuKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPsu methods */
void   cdb__tbl_psu__init
                     (Cdb__TblPsu         *message);
size_t cdb__tbl_psu__get_packed_size
                     (const Cdb__TblPsu   *message);
size_t cdb__tbl_psu__pack
                     (const Cdb__TblPsu   *message,
                      uint8_t             *out);
size_t cdb__tbl_psu__pack_to_buffer
                     (const Cdb__TblPsu   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPsu *
       cdb__tbl_psu__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_psu__free_unpacked
                     (Cdb__TblPsu *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLedKey methods */
void   cdb__tbl_led_key__init
                     (Cdb__TblLedKey         *message);
size_t cdb__tbl_led_key__get_packed_size
                     (const Cdb__TblLedKey   *message);
size_t cdb__tbl_led_key__pack
                     (const Cdb__TblLedKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_led_key__pack_to_buffer
                     (const Cdb__TblLedKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLedKey *
       cdb__tbl_led_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_led_key__free_unpacked
                     (Cdb__TblLedKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLed methods */
void   cdb__tbl_led__init
                     (Cdb__TblLed         *message);
size_t cdb__tbl_led__get_packed_size
                     (const Cdb__TblLed   *message);
size_t cdb__tbl_led__pack
                     (const Cdb__TblLed   *message,
                      uint8_t             *out);
size_t cdb__tbl_led__pack_to_buffer
                     (const Cdb__TblLed   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLed *
       cdb__tbl_led__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_led__free_unpacked
                     (Cdb__TblLed *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSensorKey methods */
void   cdb__tbl_sensor_key__init
                     (Cdb__TblSensorKey         *message);
size_t cdb__tbl_sensor_key__get_packed_size
                     (const Cdb__TblSensorKey   *message);
size_t cdb__tbl_sensor_key__pack
                     (const Cdb__TblSensorKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_sensor_key__pack_to_buffer
                     (const Cdb__TblSensorKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSensorKey *
       cdb__tbl_sensor_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_sensor_key__free_unpacked
                     (Cdb__TblSensorKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSensor methods */
void   cdb__tbl_sensor__init
                     (Cdb__TblSensor         *message);
size_t cdb__tbl_sensor__get_packed_size
                     (const Cdb__TblSensor   *message);
size_t cdb__tbl_sensor__pack
                     (const Cdb__TblSensor   *message,
                      uint8_t             *out);
size_t cdb__tbl_sensor__pack_to_buffer
                     (const Cdb__TblSensor   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSensor *
       cdb__tbl_sensor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_sensor__free_unpacked
                     (Cdb__TblSensor *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVcmKey methods */
void   cdb__tbl_vcm_key__init
                     (Cdb__TblVcmKey         *message);
size_t cdb__tbl_vcm_key__get_packed_size
                     (const Cdb__TblVcmKey   *message);
size_t cdb__tbl_vcm_key__pack
                     (const Cdb__TblVcmKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_vcm_key__pack_to_buffer
                     (const Cdb__TblVcmKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVcmKey *
       cdb__tbl_vcm_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vcm_key__free_unpacked
                     (Cdb__TblVcmKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVcm methods */
void   cdb__tbl_vcm__init
                     (Cdb__TblVcm         *message);
size_t cdb__tbl_vcm__get_packed_size
                     (const Cdb__TblVcm   *message);
size_t cdb__tbl_vcm__pack
                     (const Cdb__TblVcm   *message,
                      uint8_t             *out);
size_t cdb__tbl_vcm__pack_to_buffer
                     (const Cdb__TblVcm   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVcm *
       cdb__tbl_vcm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vcm__free_unpacked
                     (Cdb__TblVcm *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPoeKey methods */
void   cdb__tbl_poe_key__init
                     (Cdb__TblPoeKey         *message);
size_t cdb__tbl_poe_key__get_packed_size
                     (const Cdb__TblPoeKey   *message);
size_t cdb__tbl_poe_key__pack
                     (const Cdb__TblPoeKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_poe_key__pack_to_buffer
                     (const Cdb__TblPoeKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPoeKey *
       cdb__tbl_poe_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_poe_key__free_unpacked
                     (Cdb__TblPoeKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPoe methods */
void   cdb__tbl_poe__init
                     (Cdb__TblPoe         *message);
size_t cdb__tbl_poe__get_packed_size
                     (const Cdb__TblPoe   *message);
size_t cdb__tbl_poe__pack
                     (const Cdb__TblPoe   *message,
                      uint8_t             *out);
size_t cdb__tbl_poe__pack_to_buffer
                     (const Cdb__TblPoe   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPoe *
       cdb__tbl_poe__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_poe__free_unpacked
                     (Cdb__TblPoe *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRebootInfoKey methods */
void   cdb__tbl_reboot_info_key__init
                     (Cdb__TblRebootInfoKey         *message);
size_t cdb__tbl_reboot_info_key__get_packed_size
                     (const Cdb__TblRebootInfoKey   *message);
size_t cdb__tbl_reboot_info_key__pack
                     (const Cdb__TblRebootInfoKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_reboot_info_key__pack_to_buffer
                     (const Cdb__TblRebootInfoKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRebootInfoKey *
       cdb__tbl_reboot_info_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_reboot_info_key__free_unpacked
                     (Cdb__TblRebootInfoKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRebootInfo methods */
void   cdb__tbl_reboot_info__init
                     (Cdb__TblRebootInfo         *message);
size_t cdb__tbl_reboot_info__get_packed_size
                     (const Cdb__TblRebootInfo   *message);
size_t cdb__tbl_reboot_info__pack
                     (const Cdb__TblRebootInfo   *message,
                      uint8_t             *out);
size_t cdb__tbl_reboot_info__pack_to_buffer
                     (const Cdb__TblRebootInfo   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRebootInfo *
       cdb__tbl_reboot_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_reboot_info__free_unpacked
                     (Cdb__TblRebootInfo *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblErrdisableFlapKey methods */
void   cdb__tbl_errdisable_flap_key__init
                     (Cdb__TblErrdisableFlapKey         *message);
size_t cdb__tbl_errdisable_flap_key__get_packed_size
                     (const Cdb__TblErrdisableFlapKey   *message);
size_t cdb__tbl_errdisable_flap_key__pack
                     (const Cdb__TblErrdisableFlapKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_errdisable_flap_key__pack_to_buffer
                     (const Cdb__TblErrdisableFlapKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblErrdisableFlapKey *
       cdb__tbl_errdisable_flap_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_errdisable_flap_key__free_unpacked
                     (Cdb__TblErrdisableFlapKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblErrdisableFlap methods */
void   cdb__tbl_errdisable_flap__init
                     (Cdb__TblErrdisableFlap         *message);
size_t cdb__tbl_errdisable_flap__get_packed_size
                     (const Cdb__TblErrdisableFlap   *message);
size_t cdb__tbl_errdisable_flap__pack
                     (const Cdb__TblErrdisableFlap   *message,
                      uint8_t             *out);
size_t cdb__tbl_errdisable_flap__pack_to_buffer
                     (const Cdb__TblErrdisableFlap   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblErrdisableFlap *
       cdb__tbl_errdisable_flap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_errdisable_flap__free_unpacked
                     (Cdb__TblErrdisableFlap *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOpmGlobal methods */
void   cdb__tbl_opm_global__init
                     (Cdb__TblOpmGlobal         *message);
size_t cdb__tbl_opm_global__get_packed_size
                     (const Cdb__TblOpmGlobal   *message);
size_t cdb__tbl_opm_global__pack
                     (const Cdb__TblOpmGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_opm_global__pack_to_buffer
                     (const Cdb__TblOpmGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOpmGlobal *
       cdb__tbl_opm_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_opm_global__free_unpacked
                     (Cdb__TblOpmGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblErpsRing methods */
void   cdb__tbl_erps_ring__init
                     (Cdb__TblErpsRing         *message);
size_t cdb__tbl_erps_ring__get_packed_size
                     (const Cdb__TblErpsRing   *message);
size_t cdb__tbl_erps_ring__pack
                     (const Cdb__TblErpsRing   *message,
                      uint8_t             *out);
size_t cdb__tbl_erps_ring__pack_to_buffer
                     (const Cdb__TblErpsRing   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblErpsRing *
       cdb__tbl_erps_ring__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_erps_ring__free_unpacked
                     (Cdb__TblErpsRing *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblErpsDomainKey methods */
void   cdb__tbl_erps_domain_key__init
                     (Cdb__TblErpsDomainKey         *message);
size_t cdb__tbl_erps_domain_key__get_packed_size
                     (const Cdb__TblErpsDomainKey   *message);
size_t cdb__tbl_erps_domain_key__pack
                     (const Cdb__TblErpsDomainKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_erps_domain_key__pack_to_buffer
                     (const Cdb__TblErpsDomainKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblErpsDomainKey *
       cdb__tbl_erps_domain_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_erps_domain_key__free_unpacked
                     (Cdb__TblErpsDomainKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblErpsDomain methods */
void   cdb__tbl_erps_domain__init
                     (Cdb__TblErpsDomain         *message);
size_t cdb__tbl_erps_domain__get_packed_size
                     (const Cdb__TblErpsDomain   *message);
size_t cdb__tbl_erps_domain__pack
                     (const Cdb__TblErpsDomain   *message,
                      uint8_t             *out);
size_t cdb__tbl_erps_domain__pack_to_buffer
                     (const Cdb__TblErpsDomain   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblErpsDomain *
       cdb__tbl_erps_domain__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_erps_domain__free_unpacked
                     (Cdb__TblErpsDomain *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOpmDebug methods */
void   cdb__tbl_opm_debug__init
                     (Cdb__TblOpmDebug         *message);
size_t cdb__tbl_opm_debug__get_packed_size
                     (const Cdb__TblOpmDebug   *message);
size_t cdb__tbl_opm_debug__pack
                     (const Cdb__TblOpmDebug   *message,
                      uint8_t             *out);
size_t cdb__tbl_opm_debug__pack_to_buffer
                     (const Cdb__TblOpmDebug   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOpmDebug *
       cdb__tbl_opm_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_opm_debug__free_unpacked
                     (Cdb__TblOpmDebug *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPolicyMapConfigKey methods */
void   cdb__tbl_policy_map_config_key__init
                     (Cdb__TblPolicyMapConfigKey         *message);
size_t cdb__tbl_policy_map_config_key__get_packed_size
                     (const Cdb__TblPolicyMapConfigKey   *message);
size_t cdb__tbl_policy_map_config_key__pack
                     (const Cdb__TblPolicyMapConfigKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_policy_map_config_key__pack_to_buffer
                     (const Cdb__TblPolicyMapConfigKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPolicyMapConfigKey *
       cdb__tbl_policy_map_config_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_policy_map_config_key__free_unpacked
                     (Cdb__TblPolicyMapConfigKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPolicyMapConfig methods */
void   cdb__tbl_policy_map_config__init
                     (Cdb__TblPolicyMapConfig         *message);
size_t cdb__tbl_policy_map_config__get_packed_size
                     (const Cdb__TblPolicyMapConfig   *message);
size_t cdb__tbl_policy_map_config__pack
                     (const Cdb__TblPolicyMapConfig   *message,
                      uint8_t             *out);
size_t cdb__tbl_policy_map_config__pack_to_buffer
                     (const Cdb__TblPolicyMapConfig   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPolicyMapConfig *
       cdb__tbl_policy_map_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_policy_map_config__free_unpacked
                     (Cdb__TblPolicyMapConfig *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblClassMapConfigKey methods */
void   cdb__tbl_class_map_config_key__init
                     (Cdb__TblClassMapConfigKey         *message);
size_t cdb__tbl_class_map_config_key__get_packed_size
                     (const Cdb__TblClassMapConfigKey   *message);
size_t cdb__tbl_class_map_config_key__pack
                     (const Cdb__TblClassMapConfigKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_class_map_config_key__pack_to_buffer
                     (const Cdb__TblClassMapConfigKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblClassMapConfigKey *
       cdb__tbl_class_map_config_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_class_map_config_key__free_unpacked
                     (Cdb__TblClassMapConfigKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblClassMapConfig methods */
void   cdb__tbl_class_map_config__init
                     (Cdb__TblClassMapConfig         *message);
size_t cdb__tbl_class_map_config__get_packed_size
                     (const Cdb__TblClassMapConfig   *message);
size_t cdb__tbl_class_map_config__pack
                     (const Cdb__TblClassMapConfig   *message,
                      uint8_t             *out);
size_t cdb__tbl_class_map_config__pack_to_buffer
                     (const Cdb__TblClassMapConfig   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblClassMapConfig *
       cdb__tbl_class_map_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_class_map_config__free_unpacked
                     (Cdb__TblClassMapConfig *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblClassInPolicyConfig methods */
void   cdb__tbl_class_in_policy_config__init
                     (Cdb__TblClassInPolicyConfig         *message);
size_t cdb__tbl_class_in_policy_config__get_packed_size
                     (const Cdb__TblClassInPolicyConfig   *message);
size_t cdb__tbl_class_in_policy_config__pack
                     (const Cdb__TblClassInPolicyConfig   *message,
                      uint8_t             *out);
size_t cdb__tbl_class_in_policy_config__pack_to_buffer
                     (const Cdb__TblClassInPolicyConfig   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblClassInPolicyConfig *
       cdb__tbl_class_in_policy_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_class_in_policy_config__free_unpacked
                     (Cdb__TblClassInPolicyConfig *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclInClassConfig methods */
void   cdb__tbl_acl_in_class_config__init
                     (Cdb__TblAclInClassConfig         *message);
size_t cdb__tbl_acl_in_class_config__get_packed_size
                     (const Cdb__TblAclInClassConfig   *message);
size_t cdb__tbl_acl_in_class_config__pack
                     (const Cdb__TblAclInClassConfig   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_in_class_config__pack_to_buffer
                     (const Cdb__TblAclInClassConfig   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclInClassConfig *
       cdb__tbl_acl_in_class_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_in_class_config__free_unpacked
                     (Cdb__TblAclInClassConfig *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblClassMapActionConfig methods */
void   cdb__tbl_class_map_action_config__init
                     (Cdb__TblClassMapActionConfig         *message);
size_t cdb__tbl_class_map_action_config__get_packed_size
                     (const Cdb__TblClassMapActionConfig   *message);
size_t cdb__tbl_class_map_action_config__pack
                     (const Cdb__TblClassMapActionConfig   *message,
                      uint8_t             *out);
size_t cdb__tbl_class_map_action_config__pack_to_buffer
                     (const Cdb__TblClassMapActionConfig   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblClassMapActionConfig *
       cdb__tbl_class_map_action_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_class_map_action_config__free_unpacked
                     (Cdb__TblClassMapActionConfig *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaAclPolicyActionKey methods */
void   cdb__tbl_fea_acl_policy_action_key__init
                     (Cdb__TblFeaAclPolicyActionKey         *message);
size_t cdb__tbl_fea_acl_policy_action_key__get_packed_size
                     (const Cdb__TblFeaAclPolicyActionKey   *message);
size_t cdb__tbl_fea_acl_policy_action_key__pack
                     (const Cdb__TblFeaAclPolicyActionKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_acl_policy_action_key__pack_to_buffer
                     (const Cdb__TblFeaAclPolicyActionKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaAclPolicyActionKey *
       cdb__tbl_fea_acl_policy_action_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_acl_policy_action_key__free_unpacked
                     (Cdb__TblFeaAclPolicyActionKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaAclPolicyAction methods */
void   cdb__tbl_fea_acl_policy_action__init
                     (Cdb__TblFeaAclPolicyAction         *message);
size_t cdb__tbl_fea_acl_policy_action__get_packed_size
                     (const Cdb__TblFeaAclPolicyAction   *message);
size_t cdb__tbl_fea_acl_policy_action__pack
                     (const Cdb__TblFeaAclPolicyAction   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_acl_policy_action__pack_to_buffer
                     (const Cdb__TblFeaAclPolicyAction   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaAclPolicyAction *
       cdb__tbl_fea_acl_policy_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_acl_policy_action__free_unpacked
                     (Cdb__TblFeaAclPolicyAction *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIgspGlobal methods */
void   cdb__tbl_igsp_global__init
                     (Cdb__TblIgspGlobal         *message);
size_t cdb__tbl_igsp_global__get_packed_size
                     (const Cdb__TblIgspGlobal   *message);
size_t cdb__tbl_igsp_global__pack
                     (const Cdb__TblIgspGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_igsp_global__pack_to_buffer
                     (const Cdb__TblIgspGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIgspGlobal *
       cdb__tbl_igsp_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_igsp_global__free_unpacked
                     (Cdb__TblIgspGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIgspIntfKey methods */
void   cdb__tbl_igsp_intf_key__init
                     (Cdb__TblIgspIntfKey         *message);
size_t cdb__tbl_igsp_intf_key__get_packed_size
                     (const Cdb__TblIgspIntfKey   *message);
size_t cdb__tbl_igsp_intf_key__pack
                     (const Cdb__TblIgspIntfKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_igsp_intf_key__pack_to_buffer
                     (const Cdb__TblIgspIntfKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIgspIntfKey *
       cdb__tbl_igsp_intf_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_igsp_intf_key__free_unpacked
                     (Cdb__TblIgspIntfKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIgspIntf methods */
void   cdb__tbl_igsp_intf__init
                     (Cdb__TblIgspIntf         *message);
size_t cdb__tbl_igsp_intf__get_packed_size
                     (const Cdb__TblIgspIntf   *message);
size_t cdb__tbl_igsp_intf__pack
                     (const Cdb__TblIgspIntf   *message,
                      uint8_t             *out);
size_t cdb__tbl_igsp_intf__pack_to_buffer
                     (const Cdb__TblIgspIntf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIgspIntf *
       cdb__tbl_igsp_intf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_igsp_intf__free_unpacked
                     (Cdb__TblIgspIntf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIgspGroup methods */
void   cdb__tbl_igsp_group__init
                     (Cdb__TblIgspGroup         *message);
size_t cdb__tbl_igsp_group__get_packed_size
                     (const Cdb__TblIgspGroup   *message);
size_t cdb__tbl_igsp_group__pack
                     (const Cdb__TblIgspGroup   *message,
                      uint8_t             *out);
size_t cdb__tbl_igsp_group__pack_to_buffer
                     (const Cdb__TblIgspGroup   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIgspGroup *
       cdb__tbl_igsp_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_igsp_group__free_unpacked
                     (Cdb__TblIgspGroup *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAuthCfg methods */
void   cdb__tbl_auth_cfg__init
                     (Cdb__TblAuthCfg         *message);
size_t cdb__tbl_auth_cfg__get_packed_size
                     (const Cdb__TblAuthCfg   *message);
size_t cdb__tbl_auth_cfg__pack
                     (const Cdb__TblAuthCfg   *message,
                      uint8_t             *out);
size_t cdb__tbl_auth_cfg__pack_to_buffer
                     (const Cdb__TblAuthCfg   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAuthCfg *
       cdb__tbl_auth_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_auth_cfg__free_unpacked
                     (Cdb__TblAuthCfg *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAuthServer methods */
void   cdb__tbl_auth_server__init
                     (Cdb__TblAuthServer         *message);
size_t cdb__tbl_auth_server__get_packed_size
                     (const Cdb__TblAuthServer   *message);
size_t cdb__tbl_auth_server__pack
                     (const Cdb__TblAuthServer   *message,
                      uint8_t             *out);
size_t cdb__tbl_auth_server__pack_to_buffer
                     (const Cdb__TblAuthServer   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAuthServer *
       cdb__tbl_auth_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_auth_server__free_unpacked
                     (Cdb__TblAuthServer *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAuthSession methods */
void   cdb__tbl_auth_session__init
                     (Cdb__TblAuthSession         *message);
size_t cdb__tbl_auth_session__get_packed_size
                     (const Cdb__TblAuthSession   *message);
size_t cdb__tbl_auth_session__pack
                     (const Cdb__TblAuthSession   *message,
                      uint8_t             *out);
size_t cdb__tbl_auth_session__pack_to_buffer
                     (const Cdb__TblAuthSession   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAuthSession *
       cdb__tbl_auth_session__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_auth_session__free_unpacked
                     (Cdb__TblAuthSession *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAuthdDebug methods */
void   cdb__tbl_authd_debug__init
                     (Cdb__TblAuthdDebug         *message);
size_t cdb__tbl_authd_debug__get_packed_size
                     (const Cdb__TblAuthdDebug   *message);
size_t cdb__tbl_authd_debug__pack
                     (const Cdb__TblAuthdDebug   *message,
                      uint8_t             *out);
size_t cdb__tbl_authd_debug__pack_to_buffer
                     (const Cdb__TblAuthdDebug   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAuthdDebug *
       cdb__tbl_authd_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_authd_debug__free_unpacked
                     (Cdb__TblAuthdDebug *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDot1xGlobal methods */
void   cdb__tbl_dot1x_global__init
                     (Cdb__TblDot1xGlobal         *message);
size_t cdb__tbl_dot1x_global__get_packed_size
                     (const Cdb__TblDot1xGlobal   *message);
size_t cdb__tbl_dot1x_global__pack
                     (const Cdb__TblDot1xGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_dot1x_global__pack_to_buffer
                     (const Cdb__TblDot1xGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDot1xGlobal *
       cdb__tbl_dot1x_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dot1x_global__free_unpacked
                     (Cdb__TblDot1xGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDot1xPortKey methods */
void   cdb__tbl_dot1x_port_key__init
                     (Cdb__TblDot1xPortKey         *message);
size_t cdb__tbl_dot1x_port_key__get_packed_size
                     (const Cdb__TblDot1xPortKey   *message);
size_t cdb__tbl_dot1x_port_key__pack
                     (const Cdb__TblDot1xPortKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_dot1x_port_key__pack_to_buffer
                     (const Cdb__TblDot1xPortKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDot1xPortKey *
       cdb__tbl_dot1x_port_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dot1x_port_key__free_unpacked
                     (Cdb__TblDot1xPortKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDot1xPort methods */
void   cdb__tbl_dot1x_port__init
                     (Cdb__TblDot1xPort         *message);
size_t cdb__tbl_dot1x_port__get_packed_size
                     (const Cdb__TblDot1xPort   *message);
size_t cdb__tbl_dot1x_port__pack
                     (const Cdb__TblDot1xPort   *message,
                      uint8_t             *out);
size_t cdb__tbl_dot1x_port__pack_to_buffer
                     (const Cdb__TblDot1xPort   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDot1xPort *
       cdb__tbl_dot1x_port__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dot1x_port__free_unpacked
                     (Cdb__TblDot1xPort *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDot1xRadius methods */
void   cdb__tbl_dot1x_radius__init
                     (Cdb__TblDot1xRadius         *message);
size_t cdb__tbl_dot1x_radius__get_packed_size
                     (const Cdb__TblDot1xRadius   *message);
size_t cdb__tbl_dot1x_radius__pack
                     (const Cdb__TblDot1xRadius   *message,
                      uint8_t             *out);
size_t cdb__tbl_dot1x_radius__pack_to_buffer
                     (const Cdb__TblDot1xRadius   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDot1xRadius *
       cdb__tbl_dot1x_radius__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dot1x_radius__free_unpacked
                     (Cdb__TblDot1xRadius *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDot1xMac methods */
void   cdb__tbl_dot1x_mac__init
                     (Cdb__TblDot1xMac         *message);
size_t cdb__tbl_dot1x_mac__get_packed_size
                     (const Cdb__TblDot1xMac   *message);
size_t cdb__tbl_dot1x_mac__pack
                     (const Cdb__TblDot1xMac   *message,
                      uint8_t             *out);
size_t cdb__tbl_dot1x_mac__pack_to_buffer
                     (const Cdb__TblDot1xMac   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDot1xMac *
       cdb__tbl_dot1x_mac__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dot1x_mac__free_unpacked
                     (Cdb__TblDot1xMac *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblEnableKey methods */
void   cdb__tbl_enable_key__init
                     (Cdb__TblEnableKey         *message);
size_t cdb__tbl_enable_key__get_packed_size
                     (const Cdb__TblEnableKey   *message);
size_t cdb__tbl_enable_key__pack
                     (const Cdb__TblEnableKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_enable_key__pack_to_buffer
                     (const Cdb__TblEnableKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblEnableKey *
       cdb__tbl_enable_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_enable_key__free_unpacked
                     (Cdb__TblEnableKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblEnable methods */
void   cdb__tbl_enable__init
                     (Cdb__TblEnable         *message);
size_t cdb__tbl_enable__get_packed_size
                     (const Cdb__TblEnable   *message);
size_t cdb__tbl_enable__pack
                     (const Cdb__TblEnable   *message,
                      uint8_t             *out);
size_t cdb__tbl_enable__pack_to_buffer
                     (const Cdb__TblEnable   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblEnable *
       cdb__tbl_enable__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_enable__free_unpacked
                     (Cdb__TblEnable *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblChip methods */
void   cdb__tbl_chip__init
                     (Cdb__TblChip         *message);
size_t cdb__tbl_chip__get_packed_size
                     (const Cdb__TblChip   *message);
size_t cdb__tbl_chip__pack
                     (const Cdb__TblChip   *message,
                      uint8_t             *out);
size_t cdb__tbl_chip__pack_to_buffer
                     (const Cdb__TblChip   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblChip *
       cdb__tbl_chip__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_chip__free_unpacked
                     (Cdb__TblChip *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblClearAclPolicy methods */
void   cdb__tbl_clear_acl_policy__init
                     (Cdb__TblClearAclPolicy         *message);
size_t cdb__tbl_clear_acl_policy__get_packed_size
                     (const Cdb__TblClearAclPolicy   *message);
size_t cdb__tbl_clear_acl_policy__pack
                     (const Cdb__TblClearAclPolicy   *message,
                      uint8_t             *out);
size_t cdb__tbl_clear_acl_policy__pack_to_buffer
                     (const Cdb__TblClearAclPolicy   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblClearAclPolicy *
       cdb__tbl_clear_acl_policy__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_clear_acl_policy__free_unpacked
                     (Cdb__TblClearAclPolicy *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAuthorKey methods */
void   cdb__tbl_author_key__init
                     (Cdb__TblAuthorKey         *message);
size_t cdb__tbl_author_key__get_packed_size
                     (const Cdb__TblAuthorKey   *message);
size_t cdb__tbl_author_key__pack
                     (const Cdb__TblAuthorKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_author_key__pack_to_buffer
                     (const Cdb__TblAuthorKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAuthorKey *
       cdb__tbl_author_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_author_key__free_unpacked
                     (Cdb__TblAuthorKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAuthor methods */
void   cdb__tbl_author__init
                     (Cdb__TblAuthor         *message);
size_t cdb__tbl_author__get_packed_size
                     (const Cdb__TblAuthor   *message);
size_t cdb__tbl_author__pack
                     (const Cdb__TblAuthor   *message,
                      uint8_t             *out);
size_t cdb__tbl_author__pack_to_buffer
                     (const Cdb__TblAuthor   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAuthor *
       cdb__tbl_author__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_author__free_unpacked
                     (Cdb__TblAuthor *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAccountKey methods */
void   cdb__tbl_account_key__init
                     (Cdb__TblAccountKey         *message);
size_t cdb__tbl_account_key__get_packed_size
                     (const Cdb__TblAccountKey   *message);
size_t cdb__tbl_account_key__pack
                     (const Cdb__TblAccountKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_account_key__pack_to_buffer
                     (const Cdb__TblAccountKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAccountKey *
       cdb__tbl_account_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_account_key__free_unpacked
                     (Cdb__TblAccountKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAccount methods */
void   cdb__tbl_account__init
                     (Cdb__TblAccount         *message);
size_t cdb__tbl_account__get_packed_size
                     (const Cdb__TblAccount   *message);
size_t cdb__tbl_account__pack
                     (const Cdb__TblAccount   *message,
                      uint8_t             *out);
size_t cdb__tbl_account__pack_to_buffer
                     (const Cdb__TblAccount   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAccount *
       cdb__tbl_account__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_account__free_unpacked
                     (Cdb__TblAccount *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAccountcmdKey methods */
void   cdb__tbl_accountcmd_key__init
                     (Cdb__TblAccountcmdKey         *message);
size_t cdb__tbl_accountcmd_key__get_packed_size
                     (const Cdb__TblAccountcmdKey   *message);
size_t cdb__tbl_accountcmd_key__pack
                     (const Cdb__TblAccountcmdKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_accountcmd_key__pack_to_buffer
                     (const Cdb__TblAccountcmdKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAccountcmdKey *
       cdb__tbl_accountcmd_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_accountcmd_key__free_unpacked
                     (Cdb__TblAccountcmdKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAccountcmd methods */
void   cdb__tbl_accountcmd__init
                     (Cdb__TblAccountcmd         *message);
size_t cdb__tbl_accountcmd__get_packed_size
                     (const Cdb__TblAccountcmd   *message);
size_t cdb__tbl_accountcmd__pack
                     (const Cdb__TblAccountcmd   *message,
                      uint8_t             *out);
size_t cdb__tbl_accountcmd__pack_to_buffer
                     (const Cdb__TblAccountcmd   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAccountcmd *
       cdb__tbl_accountcmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_accountcmd__free_unpacked
                     (Cdb__TblAccountcmd *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVlanclassRuleKey methods */
void   cdb__tbl_vlanclass_rule_key__init
                     (Cdb__TblVlanclassRuleKey         *message);
size_t cdb__tbl_vlanclass_rule_key__get_packed_size
                     (const Cdb__TblVlanclassRuleKey   *message);
size_t cdb__tbl_vlanclass_rule_key__pack
                     (const Cdb__TblVlanclassRuleKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_vlanclass_rule_key__pack_to_buffer
                     (const Cdb__TblVlanclassRuleKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVlanclassRuleKey *
       cdb__tbl_vlanclass_rule_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vlanclass_rule_key__free_unpacked
                     (Cdb__TblVlanclassRuleKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVlanclassRule methods */
void   cdb__tbl_vlanclass_rule__init
                     (Cdb__TblVlanclassRule         *message);
size_t cdb__tbl_vlanclass_rule__get_packed_size
                     (const Cdb__TblVlanclassRule   *message);
size_t cdb__tbl_vlanclass_rule__pack
                     (const Cdb__TblVlanclassRule   *message,
                      uint8_t             *out);
size_t cdb__tbl_vlanclass_rule__pack_to_buffer
                     (const Cdb__TblVlanclassRule   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVlanclassRule *
       cdb__tbl_vlanclass_rule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vlanclass_rule__free_unpacked
                     (Cdb__TblVlanclassRule *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVlanclassGroupKey methods */
void   cdb__tbl_vlanclass_group_key__init
                     (Cdb__TblVlanclassGroupKey         *message);
size_t cdb__tbl_vlanclass_group_key__get_packed_size
                     (const Cdb__TblVlanclassGroupKey   *message);
size_t cdb__tbl_vlanclass_group_key__pack
                     (const Cdb__TblVlanclassGroupKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_vlanclass_group_key__pack_to_buffer
                     (const Cdb__TblVlanclassGroupKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVlanclassGroupKey *
       cdb__tbl_vlanclass_group_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vlanclass_group_key__free_unpacked
                     (Cdb__TblVlanclassGroupKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVlanclassGroup methods */
void   cdb__tbl_vlanclass_group__init
                     (Cdb__TblVlanclassGroup         *message);
size_t cdb__tbl_vlanclass_group__get_packed_size
                     (const Cdb__TblVlanclassGroup   *message);
size_t cdb__tbl_vlanclass_group__pack
                     (const Cdb__TblVlanclassGroup   *message,
                      uint8_t             *out);
size_t cdb__tbl_vlanclass_group__pack_to_buffer
                     (const Cdb__TblVlanclassGroup   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVlanclassGroup *
       cdb__tbl_vlanclass_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vlanclass_group__free_unpacked
                     (Cdb__TblVlanclassGroup *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclL4PortRangeKey methods */
void   cdb__tbl_acl_l4_port_range_key__init
                     (Cdb__TblAclL4PortRangeKey         *message);
size_t cdb__tbl_acl_l4_port_range_key__get_packed_size
                     (const Cdb__TblAclL4PortRangeKey   *message);
size_t cdb__tbl_acl_l4_port_range_key__pack
                     (const Cdb__TblAclL4PortRangeKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_l4_port_range_key__pack_to_buffer
                     (const Cdb__TblAclL4PortRangeKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclL4PortRangeKey *
       cdb__tbl_acl_l4_port_range_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_l4_port_range_key__free_unpacked
                     (Cdb__TblAclL4PortRangeKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclL4PortRange methods */
void   cdb__tbl_acl_l4_port_range__init
                     (Cdb__TblAclL4PortRange         *message);
size_t cdb__tbl_acl_l4_port_range__get_packed_size
                     (const Cdb__TblAclL4PortRange   *message);
size_t cdb__tbl_acl_l4_port_range__pack
                     (const Cdb__TblAclL4PortRange   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_l4_port_range__pack_to_buffer
                     (const Cdb__TblAclL4PortRange   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclL4PortRange *
       cdb__tbl_acl_l4_port_range__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_l4_port_range__free_unpacked
                     (Cdb__TblAclL4PortRange *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclUdfGroupKey methods */
void   cdb__tbl_acl_udf_group_key__init
                     (Cdb__TblAclUdfGroupKey         *message);
size_t cdb__tbl_acl_udf_group_key__get_packed_size
                     (const Cdb__TblAclUdfGroupKey   *message);
size_t cdb__tbl_acl_udf_group_key__pack
                     (const Cdb__TblAclUdfGroupKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_udf_group_key__pack_to_buffer
                     (const Cdb__TblAclUdfGroupKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclUdfGroupKey *
       cdb__tbl_acl_udf_group_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_udf_group_key__free_unpacked
                     (Cdb__TblAclUdfGroupKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclUdfGroup methods */
void   cdb__tbl_acl_udf_group__init
                     (Cdb__TblAclUdfGroup         *message);
size_t cdb__tbl_acl_udf_group__get_packed_size
                     (const Cdb__TblAclUdfGroup   *message);
size_t cdb__tbl_acl_udf_group__pack
                     (const Cdb__TblAclUdfGroup   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_udf_group__pack_to_buffer
                     (const Cdb__TblAclUdfGroup   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclUdfGroup *
       cdb__tbl_acl_udf_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_udf_group__free_unpacked
                     (Cdb__TblAclUdfGroup *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclUdfEntryKey methods */
void   cdb__tbl_acl_udf_entry_key__init
                     (Cdb__TblAclUdfEntryKey         *message);
size_t cdb__tbl_acl_udf_entry_key__get_packed_size
                     (const Cdb__TblAclUdfEntryKey   *message);
size_t cdb__tbl_acl_udf_entry_key__pack
                     (const Cdb__TblAclUdfEntryKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_udf_entry_key__pack_to_buffer
                     (const Cdb__TblAclUdfEntryKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclUdfEntryKey *
       cdb__tbl_acl_udf_entry_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_udf_entry_key__free_unpacked
                     (Cdb__TblAclUdfEntryKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblAclUdfEntry methods */
void   cdb__tbl_acl_udf_entry__init
                     (Cdb__TblAclUdfEntry         *message);
size_t cdb__tbl_acl_udf_entry__get_packed_size
                     (const Cdb__TblAclUdfEntry   *message);
size_t cdb__tbl_acl_udf_entry__pack
                     (const Cdb__TblAclUdfEntry   *message,
                      uint8_t             *out);
size_t cdb__tbl_acl_udf_entry__pack_to_buffer
                     (const Cdb__TblAclUdfEntry   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblAclUdfEntry *
       cdb__tbl_acl_udf_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_acl_udf_entry__free_unpacked
                     (Cdb__TblAclUdfEntry *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaPcap methods */
void   cdb__tbl_fea_pcap__init
                     (Cdb__TblFeaPcap         *message);
size_t cdb__tbl_fea_pcap__get_packed_size
                     (const Cdb__TblFeaPcap   *message);
size_t cdb__tbl_fea_pcap__pack
                     (const Cdb__TblFeaPcap   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_pcap__pack_to_buffer
                     (const Cdb__TblFeaPcap   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaPcap *
       cdb__tbl_fea_pcap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_pcap__free_unpacked
                     (Cdb__TblFeaPcap *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblControllerKey methods */
void   cdb__tbl_controller_key__init
                     (Cdb__TblControllerKey         *message);
size_t cdb__tbl_controller_key__get_packed_size
                     (const Cdb__TblControllerKey   *message);
size_t cdb__tbl_controller_key__pack
                     (const Cdb__TblControllerKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_controller_key__pack_to_buffer
                     (const Cdb__TblControllerKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblControllerKey *
       cdb__tbl_controller_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_controller_key__free_unpacked
                     (Cdb__TblControllerKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblController methods */
void   cdb__tbl_controller__init
                     (Cdb__TblController         *message);
size_t cdb__tbl_controller__get_packed_size
                     (const Cdb__TblController   *message);
size_t cdb__tbl_controller__pack
                     (const Cdb__TblController   *message,
                      uint8_t             *out);
size_t cdb__tbl_controller__pack_to_buffer
                     (const Cdb__TblController   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblController *
       cdb__tbl_controller__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_controller__free_unpacked
                     (Cdb__TblController *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCpuPackets methods */
void   cdb__tbl_cpu_packets__init
                     (Cdb__TblCpuPackets         *message);
size_t cdb__tbl_cpu_packets__get_packed_size
                     (const Cdb__TblCpuPackets   *message);
size_t cdb__tbl_cpu_packets__pack
                     (const Cdb__TblCpuPackets   *message,
                      uint8_t             *out);
size_t cdb__tbl_cpu_packets__pack_to_buffer
                     (const Cdb__TblCpuPackets   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCpuPackets *
       cdb__tbl_cpu_packets__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cpu_packets__free_unpacked
                     (Cdb__TblCpuPackets *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNsRoute methods */
void   cdb__tbl_ns_route__init
                     (Cdb__TblNsRoute         *message);
size_t cdb__tbl_ns_route__get_packed_size
                     (const Cdb__TblNsRoute   *message);
size_t cdb__tbl_ns_route__pack
                     (const Cdb__TblNsRoute   *message,
                      uint8_t             *out);
size_t cdb__tbl_ns_route__pack_to_buffer
                     (const Cdb__TblNsRoute   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNsRoute *
       cdb__tbl_ns_route__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ns_route__free_unpacked
                     (Cdb__TblNsRoute *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNsRouteIpKey methods */
void   cdb__tbl_ns_route_ip_key__init
                     (Cdb__TblNsRouteIpKey         *message);
size_t cdb__tbl_ns_route_ip_key__get_packed_size
                     (const Cdb__TblNsRouteIpKey   *message);
size_t cdb__tbl_ns_route_ip_key__pack
                     (const Cdb__TblNsRouteIpKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ns_route_ip_key__pack_to_buffer
                     (const Cdb__TblNsRouteIpKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNsRouteIpKey *
       cdb__tbl_ns_route_ip_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ns_route_ip_key__free_unpacked
                     (Cdb__TblNsRouteIpKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNsRouteIp methods */
void   cdb__tbl_ns_route_ip__init
                     (Cdb__TblNsRouteIp         *message);
size_t cdb__tbl_ns_route_ip__get_packed_size
                     (const Cdb__TblNsRouteIp   *message);
size_t cdb__tbl_ns_route_ip__pack
                     (const Cdb__TblNsRouteIp   *message,
                      uint8_t             *out);
size_t cdb__tbl_ns_route_ip__pack_to_buffer
                     (const Cdb__TblNsRouteIp   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNsRouteIp *
       cdb__tbl_ns_route_ip__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ns_route_ip__free_unpacked
                     (Cdb__TblNsRouteIp *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOpenflowInterfaceKey methods */
void   cdb__tbl_openflow_interface_key__init
                     (Cdb__TblOpenflowInterfaceKey         *message);
size_t cdb__tbl_openflow_interface_key__get_packed_size
                     (const Cdb__TblOpenflowInterfaceKey   *message);
size_t cdb__tbl_openflow_interface_key__pack
                     (const Cdb__TblOpenflowInterfaceKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_openflow_interface_key__pack_to_buffer
                     (const Cdb__TblOpenflowInterfaceKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOpenflowInterfaceKey *
       cdb__tbl_openflow_interface_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_openflow_interface_key__free_unpacked
                     (Cdb__TblOpenflowInterfaceKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOpenflowInterface methods */
void   cdb__tbl_openflow_interface__init
                     (Cdb__TblOpenflowInterface         *message);
size_t cdb__tbl_openflow_interface__get_packed_size
                     (const Cdb__TblOpenflowInterface   *message);
size_t cdb__tbl_openflow_interface__pack
                     (const Cdb__TblOpenflowInterface   *message,
                      uint8_t             *out);
size_t cdb__tbl_openflow_interface__pack_to_buffer
                     (const Cdb__TblOpenflowInterface   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOpenflowInterface *
       cdb__tbl_openflow_interface__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_openflow_interface__free_unpacked
                     (Cdb__TblOpenflowInterface *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOpenflowManager methods */
void   cdb__tbl_openflow_manager__init
                     (Cdb__TblOpenflowManager         *message);
size_t cdb__tbl_openflow_manager__get_packed_size
                     (const Cdb__TblOpenflowManager   *message);
size_t cdb__tbl_openflow_manager__pack
                     (const Cdb__TblOpenflowManager   *message,
                      uint8_t             *out);
size_t cdb__tbl_openflow_manager__pack_to_buffer
                     (const Cdb__TblOpenflowManager   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOpenflowManager *
       cdb__tbl_openflow_manager__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_openflow_manager__free_unpacked
                     (Cdb__TblOpenflowManager *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPtpGlobal methods */
void   cdb__tbl_ptp_global__init
                     (Cdb__TblPtpGlobal         *message);
size_t cdb__tbl_ptp_global__get_packed_size
                     (const Cdb__TblPtpGlobal   *message);
size_t cdb__tbl_ptp_global__pack
                     (const Cdb__TblPtpGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_ptp_global__pack_to_buffer
                     (const Cdb__TblPtpGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPtpGlobal *
       cdb__tbl_ptp_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ptp_global__free_unpacked
                     (Cdb__TblPtpGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPtpPortKey methods */
void   cdb__tbl_ptp_port_key__init
                     (Cdb__TblPtpPortKey         *message);
size_t cdb__tbl_ptp_port_key__get_packed_size
                     (const Cdb__TblPtpPortKey   *message);
size_t cdb__tbl_ptp_port_key__pack
                     (const Cdb__TblPtpPortKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ptp_port_key__pack_to_buffer
                     (const Cdb__TblPtpPortKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPtpPortKey *
       cdb__tbl_ptp_port_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ptp_port_key__free_unpacked
                     (Cdb__TblPtpPortKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPtpPort methods */
void   cdb__tbl_ptp_port__init
                     (Cdb__TblPtpPort         *message);
size_t cdb__tbl_ptp_port__get_packed_size
                     (const Cdb__TblPtpPort   *message);
size_t cdb__tbl_ptp_port__pack
                     (const Cdb__TblPtpPort   *message,
                      uint8_t             *out);
size_t cdb__tbl_ptp_port__pack_to_buffer
                     (const Cdb__TblPtpPort   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPtpPort *
       cdb__tbl_ptp_port__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ptp_port__free_unpacked
                     (Cdb__TblPtpPort *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPtpForeign methods */
void   cdb__tbl_ptp_foreign__init
                     (Cdb__TblPtpForeign         *message);
size_t cdb__tbl_ptp_foreign__get_packed_size
                     (const Cdb__TblPtpForeign   *message);
size_t cdb__tbl_ptp_foreign__pack
                     (const Cdb__TblPtpForeign   *message,
                      uint8_t             *out);
size_t cdb__tbl_ptp_foreign__pack_to_buffer
                     (const Cdb__TblPtpForeign   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPtpForeign *
       cdb__tbl_ptp_foreign__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ptp_foreign__free_unpacked
                     (Cdb__TblPtpForeign *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPtpResidenceTimeCache methods */
void   cdb__tbl_ptp_residence_time_cache__init
                     (Cdb__TblPtpResidenceTimeCache         *message);
size_t cdb__tbl_ptp_residence_time_cache__get_packed_size
                     (const Cdb__TblPtpResidenceTimeCache   *message);
size_t cdb__tbl_ptp_residence_time_cache__pack
                     (const Cdb__TblPtpResidenceTimeCache   *message,
                      uint8_t             *out);
size_t cdb__tbl_ptp_residence_time_cache__pack_to_buffer
                     (const Cdb__TblPtpResidenceTimeCache   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPtpResidenceTimeCache *
       cdb__tbl_ptp_residence_time_cache__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ptp_residence_time_cache__free_unpacked
                     (Cdb__TblPtpResidenceTimeCache *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaPtpGlobal methods */
void   cdb__tbl_fea_ptp_global__init
                     (Cdb__TblFeaPtpGlobal         *message);
size_t cdb__tbl_fea_ptp_global__get_packed_size
                     (const Cdb__TblFeaPtpGlobal   *message);
size_t cdb__tbl_fea_ptp_global__pack
                     (const Cdb__TblFeaPtpGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_ptp_global__pack_to_buffer
                     (const Cdb__TblFeaPtpGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaPtpGlobal *
       cdb__tbl_fea_ptp_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_ptp_global__free_unpacked
                     (Cdb__TblFeaPtpGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaPtpTsKey methods */
void   cdb__tbl_fea_ptp_ts_key__init
                     (Cdb__TblFeaPtpTsKey         *message);
size_t cdb__tbl_fea_ptp_ts_key__get_packed_size
                     (const Cdb__TblFeaPtpTsKey   *message);
size_t cdb__tbl_fea_ptp_ts_key__pack
                     (const Cdb__TblFeaPtpTsKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_ptp_ts_key__pack_to_buffer
                     (const Cdb__TblFeaPtpTsKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaPtpTsKey *
       cdb__tbl_fea_ptp_ts_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_ptp_ts_key__free_unpacked
                     (Cdb__TblFeaPtpTsKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaPtpTs methods */
void   cdb__tbl_fea_ptp_ts__init
                     (Cdb__TblFeaPtpTs         *message);
size_t cdb__tbl_fea_ptp_ts__get_packed_size
                     (const Cdb__TblFeaPtpTs   *message);
size_t cdb__tbl_fea_ptp_ts__pack
                     (const Cdb__TblFeaPtpTs   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_ptp_ts__pack_to_buffer
                     (const Cdb__TblFeaPtpTs   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaPtpTs *
       cdb__tbl_fea_ptp_ts__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_ptp_ts__free_unpacked
                     (Cdb__TblFeaPtpTs *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaTime methods */
void   cdb__tbl_fea_time__init
                     (Cdb__TblFeaTime         *message);
size_t cdb__tbl_fea_time__get_packed_size
                     (const Cdb__TblFeaTime   *message);
size_t cdb__tbl_fea_time__pack
                     (const Cdb__TblFeaTime   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_time__pack_to_buffer
                     (const Cdb__TblFeaTime   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaTime *
       cdb__tbl_fea_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_time__free_unpacked
                     (Cdb__TblFeaTime *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblBhmGlobal methods */
void   cdb__tbl_bhm_global__init
                     (Cdb__TblBhmGlobal         *message);
size_t cdb__tbl_bhm_global__get_packed_size
                     (const Cdb__TblBhmGlobal   *message);
size_t cdb__tbl_bhm_global__pack
                     (const Cdb__TblBhmGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_bhm_global__pack_to_buffer
                     (const Cdb__TblBhmGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblBhmGlobal *
       cdb__tbl_bhm_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_bhm_global__free_unpacked
                     (Cdb__TblBhmGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblBhmModuleKey methods */
void   cdb__tbl_bhm_module_key__init
                     (Cdb__TblBhmModuleKey         *message);
size_t cdb__tbl_bhm_module_key__get_packed_size
                     (const Cdb__TblBhmModuleKey   *message);
size_t cdb__tbl_bhm_module_key__pack
                     (const Cdb__TblBhmModuleKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_bhm_module_key__pack_to_buffer
                     (const Cdb__TblBhmModuleKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblBhmModuleKey *
       cdb__tbl_bhm_module_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_bhm_module_key__free_unpacked
                     (Cdb__TblBhmModuleKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblBhmModule methods */
void   cdb__tbl_bhm_module__init
                     (Cdb__TblBhmModule         *message);
size_t cdb__tbl_bhm_module__get_packed_size
                     (const Cdb__TblBhmModule   *message);
size_t cdb__tbl_bhm_module__pack
                     (const Cdb__TblBhmModule   *message,
                      uint8_t             *out);
size_t cdb__tbl_bhm_module__pack_to_buffer
                     (const Cdb__TblBhmModule   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblBhmModule *
       cdb__tbl_bhm_module__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_bhm_module__free_unpacked
                     (Cdb__TblBhmModule *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOpenflowTunnelInterfaceKey methods */
void   cdb__tbl_openflow_tunnel_interface_key__init
                     (Cdb__TblOpenflowTunnelInterfaceKey         *message);
size_t cdb__tbl_openflow_tunnel_interface_key__get_packed_size
                     (const Cdb__TblOpenflowTunnelInterfaceKey   *message);
size_t cdb__tbl_openflow_tunnel_interface_key__pack
                     (const Cdb__TblOpenflowTunnelInterfaceKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_openflow_tunnel_interface_key__pack_to_buffer
                     (const Cdb__TblOpenflowTunnelInterfaceKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOpenflowTunnelInterfaceKey *
       cdb__tbl_openflow_tunnel_interface_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_openflow_tunnel_interface_key__free_unpacked
                     (Cdb__TblOpenflowTunnelInterfaceKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOpenflowTunnelInterface methods */
void   cdb__tbl_openflow_tunnel_interface__init
                     (Cdb__TblOpenflowTunnelInterface         *message);
size_t cdb__tbl_openflow_tunnel_interface__get_packed_size
                     (const Cdb__TblOpenflowTunnelInterface   *message);
size_t cdb__tbl_openflow_tunnel_interface__pack
                     (const Cdb__TblOpenflowTunnelInterface   *message,
                      uint8_t             *out);
size_t cdb__tbl_openflow_tunnel_interface__pack_to_buffer
                     (const Cdb__TblOpenflowTunnelInterface   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOpenflowTunnelInterface *
       cdb__tbl_openflow_tunnel_interface__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_openflow_tunnel_interface__free_unpacked
                     (Cdb__TblOpenflowTunnelInterface *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOpenflowTunnelLocalIpCntKey methods */
void   cdb__tbl_openflow_tunnel_local_ip_cnt_key__init
                     (Cdb__TblOpenflowTunnelLocalIpCntKey         *message);
size_t cdb__tbl_openflow_tunnel_local_ip_cnt_key__get_packed_size
                     (const Cdb__TblOpenflowTunnelLocalIpCntKey   *message);
size_t cdb__tbl_openflow_tunnel_local_ip_cnt_key__pack
                     (const Cdb__TblOpenflowTunnelLocalIpCntKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_openflow_tunnel_local_ip_cnt_key__pack_to_buffer
                     (const Cdb__TblOpenflowTunnelLocalIpCntKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOpenflowTunnelLocalIpCntKey *
       cdb__tbl_openflow_tunnel_local_ip_cnt_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_openflow_tunnel_local_ip_cnt_key__free_unpacked
                     (Cdb__TblOpenflowTunnelLocalIpCntKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOpenflowTunnelLocalIpCnt methods */
void   cdb__tbl_openflow_tunnel_local_ip_cnt__init
                     (Cdb__TblOpenflowTunnelLocalIpCnt         *message);
size_t cdb__tbl_openflow_tunnel_local_ip_cnt__get_packed_size
                     (const Cdb__TblOpenflowTunnelLocalIpCnt   *message);
size_t cdb__tbl_openflow_tunnel_local_ip_cnt__pack
                     (const Cdb__TblOpenflowTunnelLocalIpCnt   *message,
                      uint8_t             *out);
size_t cdb__tbl_openflow_tunnel_local_ip_cnt__pack_to_buffer
                     (const Cdb__TblOpenflowTunnelLocalIpCnt   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOpenflowTunnelLocalIpCnt *
       cdb__tbl_openflow_tunnel_local_ip_cnt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_openflow_tunnel_local_ip_cnt__free_unpacked
                     (Cdb__TblOpenflowTunnelLocalIpCnt *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblInbandSnat methods */
void   cdb__tbl_inband_snat__init
                     (Cdb__TblInbandSnat         *message);
size_t cdb__tbl_inband_snat__get_packed_size
                     (const Cdb__TblInbandSnat   *message);
size_t cdb__tbl_inband_snat__pack
                     (const Cdb__TblInbandSnat   *message,
                      uint8_t             *out);
size_t cdb__tbl_inband_snat__pack_to_buffer
                     (const Cdb__TblInbandSnat   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblInbandSnat *
       cdb__tbl_inband_snat__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_inband_snat__free_unpacked
                     (Cdb__TblInbandSnat *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblArpinspKey methods */
void   cdb__tbl_arpinsp_key__init
                     (Cdb__TblArpinspKey         *message);
size_t cdb__tbl_arpinsp_key__get_packed_size
                     (const Cdb__TblArpinspKey   *message);
size_t cdb__tbl_arpinsp_key__pack
                     (const Cdb__TblArpinspKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_arpinsp_key__pack_to_buffer
                     (const Cdb__TblArpinspKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblArpinspKey *
       cdb__tbl_arpinsp_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_arpinsp_key__free_unpacked
                     (Cdb__TblArpinspKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblArpinsp methods */
void   cdb__tbl_arpinsp__init
                     (Cdb__TblArpinsp         *message);
size_t cdb__tbl_arpinsp__get_packed_size
                     (const Cdb__TblArpinsp   *message);
size_t cdb__tbl_arpinsp__pack
                     (const Cdb__TblArpinsp   *message,
                      uint8_t             *out);
size_t cdb__tbl_arpinsp__pack_to_buffer
                     (const Cdb__TblArpinsp   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblArpinsp *
       cdb__tbl_arpinsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_arpinsp__free_unpacked
                     (Cdb__TblArpinsp *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblArpaclConfigKey methods */
void   cdb__tbl_arpacl_config_key__init
                     (Cdb__TblArpaclConfigKey         *message);
size_t cdb__tbl_arpacl_config_key__get_packed_size
                     (const Cdb__TblArpaclConfigKey   *message);
size_t cdb__tbl_arpacl_config_key__pack
                     (const Cdb__TblArpaclConfigKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_arpacl_config_key__pack_to_buffer
                     (const Cdb__TblArpaclConfigKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblArpaclConfigKey *
       cdb__tbl_arpacl_config_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_arpacl_config_key__free_unpacked
                     (Cdb__TblArpaclConfigKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblArpaclConfig methods */
void   cdb__tbl_arpacl_config__init
                     (Cdb__TblArpaclConfig         *message);
size_t cdb__tbl_arpacl_config__get_packed_size
                     (const Cdb__TblArpaclConfig   *message);
size_t cdb__tbl_arpacl_config__pack
                     (const Cdb__TblArpaclConfig   *message,
                      uint8_t             *out);
size_t cdb__tbl_arpacl_config__pack_to_buffer
                     (const Cdb__TblArpaclConfig   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblArpaclConfig *
       cdb__tbl_arpacl_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_arpacl_config__free_unpacked
                     (Cdb__TblArpaclConfig *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblArpaceConfig methods */
void   cdb__tbl_arpace_config__init
                     (Cdb__TblArpaceConfig         *message);
size_t cdb__tbl_arpace_config__get_packed_size
                     (const Cdb__TblArpaceConfig   *message);
size_t cdb__tbl_arpace_config__pack
                     (const Cdb__TblArpaceConfig   *message,
                      uint8_t             *out);
size_t cdb__tbl_arpace_config__pack_to_buffer
                     (const Cdb__TblArpaceConfig   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblArpaceConfig *
       cdb__tbl_arpace_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_arpace_config__free_unpacked
                     (Cdb__TblArpaceConfig *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCoppCfg methods */
void   cdb__tbl_copp_cfg__init
                     (Cdb__TblCoppCfg         *message);
size_t cdb__tbl_copp_cfg__get_packed_size
                     (const Cdb__TblCoppCfg   *message);
size_t cdb__tbl_copp_cfg__pack
                     (const Cdb__TblCoppCfg   *message,
                      uint8_t             *out);
size_t cdb__tbl_copp_cfg__pack_to_buffer
                     (const Cdb__TblCoppCfg   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCoppCfg *
       cdb__tbl_copp_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_copp_cfg__free_unpacked
                     (Cdb__TblCoppCfg *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaCoppTrapGroupKey methods */
void   cdb__tbl_fea_copp_trap_group_key__init
                     (Cdb__TblFeaCoppTrapGroupKey         *message);
size_t cdb__tbl_fea_copp_trap_group_key__get_packed_size
                     (const Cdb__TblFeaCoppTrapGroupKey   *message);
size_t cdb__tbl_fea_copp_trap_group_key__pack
                     (const Cdb__TblFeaCoppTrapGroupKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_copp_trap_group_key__pack_to_buffer
                     (const Cdb__TblFeaCoppTrapGroupKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaCoppTrapGroupKey *
       cdb__tbl_fea_copp_trap_group_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_copp_trap_group_key__free_unpacked
                     (Cdb__TblFeaCoppTrapGroupKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblFeaCoppTrapGroup methods */
void   cdb__tbl_fea_copp_trap_group__init
                     (Cdb__TblFeaCoppTrapGroup         *message);
size_t cdb__tbl_fea_copp_trap_group__get_packed_size
                     (const Cdb__TblFeaCoppTrapGroup   *message);
size_t cdb__tbl_fea_copp_trap_group__pack
                     (const Cdb__TblFeaCoppTrapGroup   *message,
                      uint8_t             *out);
size_t cdb__tbl_fea_copp_trap_group__pack_to_buffer
                     (const Cdb__TblFeaCoppTrapGroup   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblFeaCoppTrapGroup *
       cdb__tbl_fea_copp_trap_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_fea_copp_trap_group__free_unpacked
                     (Cdb__TblFeaCoppTrapGroup *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSflowGlobal methods */
void   cdb__tbl_sflow_global__init
                     (Cdb__TblSflowGlobal         *message);
size_t cdb__tbl_sflow_global__get_packed_size
                     (const Cdb__TblSflowGlobal   *message);
size_t cdb__tbl_sflow_global__pack
                     (const Cdb__TblSflowGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_sflow_global__pack_to_buffer
                     (const Cdb__TblSflowGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSflowGlobal *
       cdb__tbl_sflow_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_sflow_global__free_unpacked
                     (Cdb__TblSflowGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSflowCollector methods */
void   cdb__tbl_sflow_collector__init
                     (Cdb__TblSflowCollector         *message);
size_t cdb__tbl_sflow_collector__get_packed_size
                     (const Cdb__TblSflowCollector   *message);
size_t cdb__tbl_sflow_collector__pack
                     (const Cdb__TblSflowCollector   *message,
                      uint8_t             *out);
size_t cdb__tbl_sflow_collector__pack_to_buffer
                     (const Cdb__TblSflowCollector   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSflowCollector *
       cdb__tbl_sflow_collector__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_sflow_collector__free_unpacked
                     (Cdb__TblSflowCollector *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSflowCounterPortKey methods */
void   cdb__tbl_sflow_counter_port_key__init
                     (Cdb__TblSflowCounterPortKey         *message);
size_t cdb__tbl_sflow_counter_port_key__get_packed_size
                     (const Cdb__TblSflowCounterPortKey   *message);
size_t cdb__tbl_sflow_counter_port_key__pack
                     (const Cdb__TblSflowCounterPortKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_sflow_counter_port_key__pack_to_buffer
                     (const Cdb__TblSflowCounterPortKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSflowCounterPortKey *
       cdb__tbl_sflow_counter_port_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_sflow_counter_port_key__free_unpacked
                     (Cdb__TblSflowCounterPortKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSflowCounterPort methods */
void   cdb__tbl_sflow_counter_port__init
                     (Cdb__TblSflowCounterPort         *message);
size_t cdb__tbl_sflow_counter_port__get_packed_size
                     (const Cdb__TblSflowCounterPort   *message);
size_t cdb__tbl_sflow_counter_port__pack
                     (const Cdb__TblSflowCounterPort   *message,
                      uint8_t             *out);
size_t cdb__tbl_sflow_counter_port__pack_to_buffer
                     (const Cdb__TblSflowCounterPort   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSflowCounterPort *
       cdb__tbl_sflow_counter_port__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_sflow_counter_port__free_unpacked
                     (Cdb__TblSflowCounterPort *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVrrpGlobal methods */
void   cdb__tbl_vrrp_global__init
                     (Cdb__TblVrrpGlobal         *message);
size_t cdb__tbl_vrrp_global__get_packed_size
                     (const Cdb__TblVrrpGlobal   *message);
size_t cdb__tbl_vrrp_global__pack
                     (const Cdb__TblVrrpGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_vrrp_global__pack_to_buffer
                     (const Cdb__TblVrrpGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVrrpGlobal *
       cdb__tbl_vrrp_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vrrp_global__free_unpacked
                     (Cdb__TblVrrpGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVrrpVmacKey methods */
void   cdb__tbl_vrrp_vmac_key__init
                     (Cdb__TblVrrpVmacKey         *message);
size_t cdb__tbl_vrrp_vmac_key__get_packed_size
                     (const Cdb__TblVrrpVmacKey   *message);
size_t cdb__tbl_vrrp_vmac_key__pack
                     (const Cdb__TblVrrpVmacKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_vrrp_vmac_key__pack_to_buffer
                     (const Cdb__TblVrrpVmacKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVrrpVmacKey *
       cdb__tbl_vrrp_vmac_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vrrp_vmac_key__free_unpacked
                     (Cdb__TblVrrpVmacKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVrrpVmac methods */
void   cdb__tbl_vrrp_vmac__init
                     (Cdb__TblVrrpVmac         *message);
size_t cdb__tbl_vrrp_vmac__get_packed_size
                     (const Cdb__TblVrrpVmac   *message);
size_t cdb__tbl_vrrp_vmac__pack
                     (const Cdb__TblVrrpVmac   *message,
                      uint8_t             *out);
size_t cdb__tbl_vrrp_vmac__pack_to_buffer
                     (const Cdb__TblVrrpVmac   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVrrpVmac *
       cdb__tbl_vrrp_vmac__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vrrp_vmac__free_unpacked
                     (Cdb__TblVrrpVmac *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVrrpVip methods */
void   cdb__tbl_vrrp_vip__init
                     (Cdb__TblVrrpVip         *message);
size_t cdb__tbl_vrrp_vip__get_packed_size
                     (const Cdb__TblVrrpVip   *message);
size_t cdb__tbl_vrrp_vip__pack
                     (const Cdb__TblVrrpVip   *message,
                      uint8_t             *out);
size_t cdb__tbl_vrrp_vip__pack_to_buffer
                     (const Cdb__TblVrrpVip   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVrrpVip *
       cdb__tbl_vrrp_vip__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vrrp_vip__free_unpacked
                     (Cdb__TblVrrpVip *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVrrpSessionKey methods */
void   cdb__tbl_vrrp_session_key__init
                     (Cdb__TblVrrpSessionKey         *message);
size_t cdb__tbl_vrrp_session_key__get_packed_size
                     (const Cdb__TblVrrpSessionKey   *message);
size_t cdb__tbl_vrrp_session_key__pack
                     (const Cdb__TblVrrpSessionKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_vrrp_session_key__pack_to_buffer
                     (const Cdb__TblVrrpSessionKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVrrpSessionKey *
       cdb__tbl_vrrp_session_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vrrp_session_key__free_unpacked
                     (Cdb__TblVrrpSessionKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVrrpSession methods */
void   cdb__tbl_vrrp_session__init
                     (Cdb__TblVrrpSession         *message);
size_t cdb__tbl_vrrp_session__get_packed_size
                     (const Cdb__TblVrrpSession   *message);
size_t cdb__tbl_vrrp_session__pack
                     (const Cdb__TblVrrpSession   *message,
                      uint8_t             *out);
size_t cdb__tbl_vrrp_session__pack_to_buffer
                     (const Cdb__TblVrrpSession   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVrrpSession *
       cdb__tbl_vrrp_session__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vrrp_session__free_unpacked
                     (Cdb__TblVrrpSession *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSsmGlobal methods */
void   cdb__tbl_ssm_global__init
                     (Cdb__TblSsmGlobal         *message);
size_t cdb__tbl_ssm_global__get_packed_size
                     (const Cdb__TblSsmGlobal   *message);
size_t cdb__tbl_ssm_global__pack
                     (const Cdb__TblSsmGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_ssm_global__pack_to_buffer
                     (const Cdb__TblSsmGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSsmGlobal *
       cdb__tbl_ssm_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ssm_global__free_unpacked
                     (Cdb__TblSsmGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSsmPortKey methods */
void   cdb__tbl_ssm_port_key__init
                     (Cdb__TblSsmPortKey         *message);
size_t cdb__tbl_ssm_port_key__get_packed_size
                     (const Cdb__TblSsmPortKey   *message);
size_t cdb__tbl_ssm_port_key__pack
                     (const Cdb__TblSsmPortKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ssm_port_key__pack_to_buffer
                     (const Cdb__TblSsmPortKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSsmPortKey *
       cdb__tbl_ssm_port_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ssm_port_key__free_unpacked
                     (Cdb__TblSsmPortKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSsmPort methods */
void   cdb__tbl_ssm_port__init
                     (Cdb__TblSsmPort         *message);
size_t cdb__tbl_ssm_port__get_packed_size
                     (const Cdb__TblSsmPort   *message);
size_t cdb__tbl_ssm_port__pack
                     (const Cdb__TblSsmPort   *message,
                      uint8_t             *out);
size_t cdb__tbl_ssm_port__pack_to_buffer
                     (const Cdb__TblSsmPort   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSsmPort *
       cdb__tbl_ssm_port__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ssm_port__free_unpacked
                     (Cdb__TblSsmPort *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIpslaGlobal methods */
void   cdb__tbl_ipsla_global__init
                     (Cdb__TblIpslaGlobal         *message);
size_t cdb__tbl_ipsla_global__get_packed_size
                     (const Cdb__TblIpslaGlobal   *message);
size_t cdb__tbl_ipsla_global__pack
                     (const Cdb__TblIpslaGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_ipsla_global__pack_to_buffer
                     (const Cdb__TblIpslaGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIpslaGlobal *
       cdb__tbl_ipsla_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ipsla_global__free_unpacked
                     (Cdb__TblIpslaGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIpslaEntryKey methods */
void   cdb__tbl_ipsla_entry_key__init
                     (Cdb__TblIpslaEntryKey         *message);
size_t cdb__tbl_ipsla_entry_key__get_packed_size
                     (const Cdb__TblIpslaEntryKey   *message);
size_t cdb__tbl_ipsla_entry_key__pack
                     (const Cdb__TblIpslaEntryKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ipsla_entry_key__pack_to_buffer
                     (const Cdb__TblIpslaEntryKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIpslaEntryKey *
       cdb__tbl_ipsla_entry_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ipsla_entry_key__free_unpacked
                     (Cdb__TblIpslaEntryKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIpslaEntry methods */
void   cdb__tbl_ipsla_entry__init
                     (Cdb__TblIpslaEntry         *message);
size_t cdb__tbl_ipsla_entry__get_packed_size
                     (const Cdb__TblIpslaEntry   *message);
size_t cdb__tbl_ipsla_entry__pack
                     (const Cdb__TblIpslaEntry   *message,
                      uint8_t             *out);
size_t cdb__tbl_ipsla_entry__pack_to_buffer
                     (const Cdb__TblIpslaEntry   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIpslaEntry *
       cdb__tbl_ipsla_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ipsla_entry__free_unpacked
                     (Cdb__TblIpslaEntry *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIpslaPacketStats methods */
void   cdb__tbl_ipsla_packet_stats__init
                     (Cdb__TblIpslaPacketStats         *message);
size_t cdb__tbl_ipsla_packet_stats__get_packed_size
                     (const Cdb__TblIpslaPacketStats   *message);
size_t cdb__tbl_ipsla_packet_stats__pack
                     (const Cdb__TblIpslaPacketStats   *message,
                      uint8_t             *out);
size_t cdb__tbl_ipsla_packet_stats__pack_to_buffer
                     (const Cdb__TblIpslaPacketStats   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIpslaPacketStats *
       cdb__tbl_ipsla_packet_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ipsla_packet_stats__free_unpacked
                     (Cdb__TblIpslaPacketStats *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIpslaTestStats methods */
void   cdb__tbl_ipsla_test_stats__init
                     (Cdb__TblIpslaTestStats         *message);
size_t cdb__tbl_ipsla_test_stats__get_packed_size
                     (const Cdb__TblIpslaTestStats   *message);
size_t cdb__tbl_ipsla_test_stats__pack
                     (const Cdb__TblIpslaTestStats   *message,
                      uint8_t             *out);
size_t cdb__tbl_ipsla_test_stats__pack_to_buffer
                     (const Cdb__TblIpslaTestStats   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIpslaTestStats *
       cdb__tbl_ipsla_test_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ipsla_test_stats__free_unpacked
                     (Cdb__TblIpslaTestStats *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTrackGlobal methods */
void   cdb__tbl_track_global__init
                     (Cdb__TblTrackGlobal         *message);
size_t cdb__tbl_track_global__get_packed_size
                     (const Cdb__TblTrackGlobal   *message);
size_t cdb__tbl_track_global__pack
                     (const Cdb__TblTrackGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_track_global__pack_to_buffer
                     (const Cdb__TblTrackGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTrackGlobal *
       cdb__tbl_track_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_track_global__free_unpacked
                     (Cdb__TblTrackGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTrackObjectKey methods */
void   cdb__tbl_track_object_key__init
                     (Cdb__TblTrackObjectKey         *message);
size_t cdb__tbl_track_object_key__get_packed_size
                     (const Cdb__TblTrackObjectKey   *message);
size_t cdb__tbl_track_object_key__pack
                     (const Cdb__TblTrackObjectKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_track_object_key__pack_to_buffer
                     (const Cdb__TblTrackObjectKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTrackObjectKey *
       cdb__tbl_track_object_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_track_object_key__free_unpacked
                     (Cdb__TblTrackObjectKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTrackObject methods */
void   cdb__tbl_track_object__init
                     (Cdb__TblTrackObject         *message);
size_t cdb__tbl_track_object__get_packed_size
                     (const Cdb__TblTrackObject   *message);
size_t cdb__tbl_track_object__pack
                     (const Cdb__TblTrackObject   *message,
                      uint8_t             *out);
size_t cdb__tbl_track_object__pack_to_buffer
                     (const Cdb__TblTrackObject   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTrackObject *
       cdb__tbl_track_object__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_track_object__free_unpacked
                     (Cdb__TblTrackObject *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblControllerAttr methods */
void   cdb__tbl_controller_attr__init
                     (Cdb__TblControllerAttr         *message);
size_t cdb__tbl_controller_attr__get_packed_size
                     (const Cdb__TblControllerAttr   *message);
size_t cdb__tbl_controller_attr__pack
                     (const Cdb__TblControllerAttr   *message,
                      uint8_t             *out);
size_t cdb__tbl_controller_attr__pack_to_buffer
                     (const Cdb__TblControllerAttr   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblControllerAttr *
       cdb__tbl_controller_attr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_controller_attr__free_unpacked
                     (Cdb__TblControllerAttr *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOamSessionKey methods */
void   cdb__tbl_oam_session_key__init
                     (Cdb__TblOamSessionKey         *message);
size_t cdb__tbl_oam_session_key__get_packed_size
                     (const Cdb__TblOamSessionKey   *message);
size_t cdb__tbl_oam_session_key__pack
                     (const Cdb__TblOamSessionKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_oam_session_key__pack_to_buffer
                     (const Cdb__TblOamSessionKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOamSessionKey *
       cdb__tbl_oam_session_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_oam_session_key__free_unpacked
                     (Cdb__TblOamSessionKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOamSession methods */
void   cdb__tbl_oam_session__init
                     (Cdb__TblOamSession         *message);
size_t cdb__tbl_oam_session__get_packed_size
                     (const Cdb__TblOamSession   *message);
size_t cdb__tbl_oam_session__pack
                     (const Cdb__TblOamSession   *message,
                      uint8_t             *out);
size_t cdb__tbl_oam_session__pack_to_buffer
                     (const Cdb__TblOamSession   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOamSession *
       cdb__tbl_oam_session__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_oam_session__free_unpacked
                     (Cdb__TblOamSession *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOamSessionUploadKey methods */
void   cdb__tbl_oam_session_upload_key__init
                     (Cdb__TblOamSessionUploadKey         *message);
size_t cdb__tbl_oam_session_upload_key__get_packed_size
                     (const Cdb__TblOamSessionUploadKey   *message);
size_t cdb__tbl_oam_session_upload_key__pack
                     (const Cdb__TblOamSessionUploadKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_oam_session_upload_key__pack_to_buffer
                     (const Cdb__TblOamSessionUploadKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOamSessionUploadKey *
       cdb__tbl_oam_session_upload_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_oam_session_upload_key__free_unpacked
                     (Cdb__TblOamSessionUploadKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOamSessionUpload methods */
void   cdb__tbl_oam_session_upload__init
                     (Cdb__TblOamSessionUpload         *message);
size_t cdb__tbl_oam_session_upload__get_packed_size
                     (const Cdb__TblOamSessionUpload   *message);
size_t cdb__tbl_oam_session_upload__pack
                     (const Cdb__TblOamSessionUpload   *message,
                      uint8_t             *out);
size_t cdb__tbl_oam_session_upload__pack_to_buffer
                     (const Cdb__TblOamSessionUpload   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOamSessionUpload *
       cdb__tbl_oam_session_upload__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_oam_session_upload__free_unpacked
                     (Cdb__TblOamSessionUpload *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLspApsGroupKey methods */
void   cdb__tbl_lsp_aps_group_key__init
                     (Cdb__TblLspApsGroupKey         *message);
size_t cdb__tbl_lsp_aps_group_key__get_packed_size
                     (const Cdb__TblLspApsGroupKey   *message);
size_t cdb__tbl_lsp_aps_group_key__pack
                     (const Cdb__TblLspApsGroupKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_lsp_aps_group_key__pack_to_buffer
                     (const Cdb__TblLspApsGroupKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLspApsGroupKey *
       cdb__tbl_lsp_aps_group_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_lsp_aps_group_key__free_unpacked
                     (Cdb__TblLspApsGroupKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLspApsGroup methods */
void   cdb__tbl_lsp_aps_group__init
                     (Cdb__TblLspApsGroup         *message);
size_t cdb__tbl_lsp_aps_group__get_packed_size
                     (const Cdb__TblLspApsGroup   *message);
size_t cdb__tbl_lsp_aps_group__pack
                     (const Cdb__TblLspApsGroup   *message,
                      uint8_t             *out);
size_t cdb__tbl_lsp_aps_group__pack_to_buffer
                     (const Cdb__TblLspApsGroup   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLspApsGroup *
       cdb__tbl_lsp_aps_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_lsp_aps_group__free_unpacked
                     (Cdb__TblLspApsGroup *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPwApsGroupKey methods */
void   cdb__tbl_pw_aps_group_key__init
                     (Cdb__TblPwApsGroupKey         *message);
size_t cdb__tbl_pw_aps_group_key__get_packed_size
                     (const Cdb__TblPwApsGroupKey   *message);
size_t cdb__tbl_pw_aps_group_key__pack
                     (const Cdb__TblPwApsGroupKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_pw_aps_group_key__pack_to_buffer
                     (const Cdb__TblPwApsGroupKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPwApsGroupKey *
       cdb__tbl_pw_aps_group_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pw_aps_group_key__free_unpacked
                     (Cdb__TblPwApsGroupKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPwApsGroup methods */
void   cdb__tbl_pw_aps_group__init
                     (Cdb__TblPwApsGroup         *message);
size_t cdb__tbl_pw_aps_group__get_packed_size
                     (const Cdb__TblPwApsGroup   *message);
size_t cdb__tbl_pw_aps_group__pack
                     (const Cdb__TblPwApsGroup   *message,
                      uint8_t             *out);
size_t cdb__tbl_pw_aps_group__pack_to_buffer
                     (const Cdb__TblPwApsGroup   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPwApsGroup *
       cdb__tbl_pw_aps_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pw_aps_group__free_unpacked
                     (Cdb__TblPwApsGroup *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLspPeKey methods */
void   cdb__tbl_lsp_pe_key__init
                     (Cdb__TblLspPeKey         *message);
size_t cdb__tbl_lsp_pe_key__get_packed_size
                     (const Cdb__TblLspPeKey   *message);
size_t cdb__tbl_lsp_pe_key__pack
                     (const Cdb__TblLspPeKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_lsp_pe_key__pack_to_buffer
                     (const Cdb__TblLspPeKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLspPeKey *
       cdb__tbl_lsp_pe_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_lsp_pe_key__free_unpacked
                     (Cdb__TblLspPeKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLspPe methods */
void   cdb__tbl_lsp_pe__init
                     (Cdb__TblLspPe         *message);
size_t cdb__tbl_lsp_pe__get_packed_size
                     (const Cdb__TblLspPe   *message);
size_t cdb__tbl_lsp_pe__pack
                     (const Cdb__TblLspPe   *message,
                      uint8_t             *out);
size_t cdb__tbl_lsp_pe__pack_to_buffer
                     (const Cdb__TblLspPe   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLspPe *
       cdb__tbl_lsp_pe__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_lsp_pe__free_unpacked
                     (Cdb__TblLspPe *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLspPKey methods */
void   cdb__tbl_lsp_p_key__init
                     (Cdb__TblLspPKey         *message);
size_t cdb__tbl_lsp_p_key__get_packed_size
                     (const Cdb__TblLspPKey   *message);
size_t cdb__tbl_lsp_p_key__pack
                     (const Cdb__TblLspPKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_lsp_p_key__pack_to_buffer
                     (const Cdb__TblLspPKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLspPKey *
       cdb__tbl_lsp_p_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_lsp_p_key__free_unpacked
                     (Cdb__TblLspPKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblLspP methods */
void   cdb__tbl_lsp_p__init
                     (Cdb__TblLspP         *message);
size_t cdb__tbl_lsp_p__get_packed_size
                     (const Cdb__TblLspP   *message);
size_t cdb__tbl_lsp_p__pack
                     (const Cdb__TblLspP   *message,
                      uint8_t             *out);
size_t cdb__tbl_lsp_p__pack_to_buffer
                     (const Cdb__TblLspP   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblLspP *
       cdb__tbl_lsp_p__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_lsp_p__free_unpacked
                     (Cdb__TblLspP *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPwTpeKey methods */
void   cdb__tbl_pw_tpe_key__init
                     (Cdb__TblPwTpeKey         *message);
size_t cdb__tbl_pw_tpe_key__get_packed_size
                     (const Cdb__TblPwTpeKey   *message);
size_t cdb__tbl_pw_tpe_key__pack
                     (const Cdb__TblPwTpeKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_pw_tpe_key__pack_to_buffer
                     (const Cdb__TblPwTpeKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPwTpeKey *
       cdb__tbl_pw_tpe_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pw_tpe_key__free_unpacked
                     (Cdb__TblPwTpeKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPwTpe methods */
void   cdb__tbl_pw_tpe__init
                     (Cdb__TblPwTpe         *message);
size_t cdb__tbl_pw_tpe__get_packed_size
                     (const Cdb__TblPwTpe   *message);
size_t cdb__tbl_pw_tpe__pack
                     (const Cdb__TblPwTpe   *message,
                      uint8_t             *out);
size_t cdb__tbl_pw_tpe__pack_to_buffer
                     (const Cdb__TblPwTpe   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPwTpe *
       cdb__tbl_pw_tpe__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pw_tpe__free_unpacked
                     (Cdb__TblPwTpe *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSectionOamKey methods */
void   cdb__tbl_section_oam_key__init
                     (Cdb__TblSectionOamKey         *message);
size_t cdb__tbl_section_oam_key__get_packed_size
                     (const Cdb__TblSectionOamKey   *message);
size_t cdb__tbl_section_oam_key__pack
                     (const Cdb__TblSectionOamKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_section_oam_key__pack_to_buffer
                     (const Cdb__TblSectionOamKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSectionOamKey *
       cdb__tbl_section_oam_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_section_oam_key__free_unpacked
                     (Cdb__TblSectionOamKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblSectionOam methods */
void   cdb__tbl_section_oam__init
                     (Cdb__TblSectionOam         *message);
size_t cdb__tbl_section_oam__get_packed_size
                     (const Cdb__TblSectionOam   *message);
size_t cdb__tbl_section_oam__pack
                     (const Cdb__TblSectionOam   *message,
                      uint8_t             *out);
size_t cdb__tbl_section_oam__pack_to_buffer
                     (const Cdb__TblSectionOam   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblSectionOam *
       cdb__tbl_section_oam__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_section_oam__free_unpacked
                     (Cdb__TblSectionOam *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOamFlowInfoKey methods */
void   cdb__tbl_oam_flow_info_key__init
                     (Cdb__TblOamFlowInfoKey         *message);
size_t cdb__tbl_oam_flow_info_key__get_packed_size
                     (const Cdb__TblOamFlowInfoKey   *message);
size_t cdb__tbl_oam_flow_info_key__pack
                     (const Cdb__TblOamFlowInfoKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_oam_flow_info_key__pack_to_buffer
                     (const Cdb__TblOamFlowInfoKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOamFlowInfoKey *
       cdb__tbl_oam_flow_info_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_oam_flow_info_key__free_unpacked
                     (Cdb__TblOamFlowInfoKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOamFlowInfo methods */
void   cdb__tbl_oam_flow_info__init
                     (Cdb__TblOamFlowInfo         *message);
size_t cdb__tbl_oam_flow_info__get_packed_size
                     (const Cdb__TblOamFlowInfo   *message);
size_t cdb__tbl_oam_flow_info__pack
                     (const Cdb__TblOamFlowInfo   *message,
                      uint8_t             *out);
size_t cdb__tbl_oam_flow_info__pack_to_buffer
                     (const Cdb__TblOamFlowInfo   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOamFlowInfo *
       cdb__tbl_oam_flow_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_oam_flow_info__free_unpacked
                     (Cdb__TblOamFlowInfo *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTpoamGlobal methods */
void   cdb__tbl_tpoam_global__init
                     (Cdb__TblTpoamGlobal         *message);
size_t cdb__tbl_tpoam_global__get_packed_size
                     (const Cdb__TblTpoamGlobal   *message);
size_t cdb__tbl_tpoam_global__pack
                     (const Cdb__TblTpoamGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_tpoam_global__pack_to_buffer
                     (const Cdb__TblTpoamGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTpoamGlobal *
       cdb__tbl_tpoam_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_tpoam_global__free_unpacked
                     (Cdb__TblTpoamGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTpoamExecGlobal methods */
void   cdb__tbl_tpoam_exec_global__init
                     (Cdb__TblTpoamExecGlobal         *message);
size_t cdb__tbl_tpoam_exec_global__get_packed_size
                     (const Cdb__TblTpoamExecGlobal   *message);
size_t cdb__tbl_tpoam_exec_global__pack
                     (const Cdb__TblTpoamExecGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_tpoam_exec_global__pack_to_buffer
                     (const Cdb__TblTpoamExecGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTpoamExecGlobal *
       cdb__tbl_tpoam_exec_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_tpoam_exec_global__free_unpacked
                     (Cdb__TblTpoamExecGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblApsGroupInfoKey methods */
void   cdb__tbl_aps_group_info_key__init
                     (Cdb__TblApsGroupInfoKey         *message);
size_t cdb__tbl_aps_group_info_key__get_packed_size
                     (const Cdb__TblApsGroupInfoKey   *message);
size_t cdb__tbl_aps_group_info_key__pack
                     (const Cdb__TblApsGroupInfoKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_aps_group_info_key__pack_to_buffer
                     (const Cdb__TblApsGroupInfoKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblApsGroupInfoKey *
       cdb__tbl_aps_group_info_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_aps_group_info_key__free_unpacked
                     (Cdb__TblApsGroupInfoKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblApsGroupInfo methods */
void   cdb__tbl_aps_group_info__init
                     (Cdb__TblApsGroupInfo         *message);
size_t cdb__tbl_aps_group_info__get_packed_size
                     (const Cdb__TblApsGroupInfo   *message);
size_t cdb__tbl_aps_group_info__pack
                     (const Cdb__TblApsGroupInfo   *message,
                      uint8_t             *out);
size_t cdb__tbl_aps_group_info__pack_to_buffer
                     (const Cdb__TblApsGroupInfo   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblApsGroupInfo *
       cdb__tbl_aps_group_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_aps_group_info__free_unpacked
                     (Cdb__TblApsGroupInfo *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOamInlabelInfoKey methods */
void   cdb__tbl_oam_inlabel_info_key__init
                     (Cdb__TblOamInlabelInfoKey         *message);
size_t cdb__tbl_oam_inlabel_info_key__get_packed_size
                     (const Cdb__TblOamInlabelInfoKey   *message);
size_t cdb__tbl_oam_inlabel_info_key__pack
                     (const Cdb__TblOamInlabelInfoKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_oam_inlabel_info_key__pack_to_buffer
                     (const Cdb__TblOamInlabelInfoKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOamInlabelInfoKey *
       cdb__tbl_oam_inlabel_info_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_oam_inlabel_info_key__free_unpacked
                     (Cdb__TblOamInlabelInfoKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOamInlabelInfo methods */
void   cdb__tbl_oam_inlabel_info__init
                     (Cdb__TblOamInlabelInfo         *message);
size_t cdb__tbl_oam_inlabel_info__get_packed_size
                     (const Cdb__TblOamInlabelInfo   *message);
size_t cdb__tbl_oam_inlabel_info__pack
                     (const Cdb__TblOamInlabelInfo   *message,
                      uint8_t             *out);
size_t cdb__tbl_oam_inlabel_info__pack_to_buffer
                     (const Cdb__TblOamInlabelInfo   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOamInlabelInfo *
       cdb__tbl_oam_inlabel_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_oam_inlabel_info__free_unpacked
                     (Cdb__TblOamInlabelInfo *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOamMplsApsCheckKey methods */
void   cdb__tbl_oam_mpls_aps_check_key__init
                     (Cdb__TblOamMplsApsCheckKey         *message);
size_t cdb__tbl_oam_mpls_aps_check_key__get_packed_size
                     (const Cdb__TblOamMplsApsCheckKey   *message);
size_t cdb__tbl_oam_mpls_aps_check_key__pack
                     (const Cdb__TblOamMplsApsCheckKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_oam_mpls_aps_check_key__pack_to_buffer
                     (const Cdb__TblOamMplsApsCheckKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOamMplsApsCheckKey *
       cdb__tbl_oam_mpls_aps_check_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_oam_mpls_aps_check_key__free_unpacked
                     (Cdb__TblOamMplsApsCheckKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOamMplsApsCheck methods */
void   cdb__tbl_oam_mpls_aps_check__init
                     (Cdb__TblOamMplsApsCheck         *message);
size_t cdb__tbl_oam_mpls_aps_check__get_packed_size
                     (const Cdb__TblOamMplsApsCheck   *message);
size_t cdb__tbl_oam_mpls_aps_check__pack
                     (const Cdb__TblOamMplsApsCheck   *message,
                      uint8_t             *out);
size_t cdb__tbl_oam_mpls_aps_check__pack_to_buffer
                     (const Cdb__TblOamMplsApsCheck   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOamMplsApsCheck *
       cdb__tbl_oam_mpls_aps_check__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_oam_mpls_aps_check__free_unpacked
                     (Cdb__TblOamMplsApsCheck *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVlanMappingTableKey methods */
void   cdb__tbl_vlan_mapping_table_key__init
                     (Cdb__TblVlanMappingTableKey         *message);
size_t cdb__tbl_vlan_mapping_table_key__get_packed_size
                     (const Cdb__TblVlanMappingTableKey   *message);
size_t cdb__tbl_vlan_mapping_table_key__pack
                     (const Cdb__TblVlanMappingTableKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_vlan_mapping_table_key__pack_to_buffer
                     (const Cdb__TblVlanMappingTableKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVlanMappingTableKey *
       cdb__tbl_vlan_mapping_table_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vlan_mapping_table_key__free_unpacked
                     (Cdb__TblVlanMappingTableKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVlanMappingTable methods */
void   cdb__tbl_vlan_mapping_table__init
                     (Cdb__TblVlanMappingTable         *message);
size_t cdb__tbl_vlan_mapping_table__get_packed_size
                     (const Cdb__TblVlanMappingTable   *message);
size_t cdb__tbl_vlan_mapping_table__pack
                     (const Cdb__TblVlanMappingTable   *message,
                      uint8_t             *out);
size_t cdb__tbl_vlan_mapping_table__pack_to_buffer
                     (const Cdb__TblVlanMappingTable   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVlanMappingTable *
       cdb__tbl_vlan_mapping_table__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vlan_mapping_table__free_unpacked
                     (Cdb__TblVlanMappingTable *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVlanMappingEntry methods */
void   cdb__tbl_vlan_mapping_entry__init
                     (Cdb__TblVlanMappingEntry         *message);
size_t cdb__tbl_vlan_mapping_entry__get_packed_size
                     (const Cdb__TblVlanMappingEntry   *message);
size_t cdb__tbl_vlan_mapping_entry__pack
                     (const Cdb__TblVlanMappingEntry   *message,
                      uint8_t             *out);
size_t cdb__tbl_vlan_mapping_entry__pack_to_buffer
                     (const Cdb__TblVlanMappingEntry   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVlanMappingEntry *
       cdb__tbl_vlan_mapping_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vlan_mapping_entry__free_unpacked
                     (Cdb__TblVlanMappingEntry *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblEgressMappingEntry methods */
void   cdb__tbl_egress_mapping_entry__init
                     (Cdb__TblEgressMappingEntry         *message);
size_t cdb__tbl_egress_mapping_entry__get_packed_size
                     (const Cdb__TblEgressMappingEntry   *message);
size_t cdb__tbl_egress_mapping_entry__pack
                     (const Cdb__TblEgressMappingEntry   *message,
                      uint8_t             *out);
size_t cdb__tbl_egress_mapping_entry__pack_to_buffer
                     (const Cdb__TblEgressMappingEntry   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblEgressMappingEntry *
       cdb__tbl_egress_mapping_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_egress_mapping_entry__free_unpacked
                     (Cdb__TblEgressMappingEntry *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVlanGroupKey methods */
void   cdb__tbl_vlan_group_key__init
                     (Cdb__TblVlanGroupKey         *message);
size_t cdb__tbl_vlan_group_key__get_packed_size
                     (const Cdb__TblVlanGroupKey   *message);
size_t cdb__tbl_vlan_group_key__pack
                     (const Cdb__TblVlanGroupKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_vlan_group_key__pack_to_buffer
                     (const Cdb__TblVlanGroupKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVlanGroupKey *
       cdb__tbl_vlan_group_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vlan_group_key__free_unpacked
                     (Cdb__TblVlanGroupKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblVlanGroup methods */
void   cdb__tbl_vlan_group__init
                     (Cdb__TblVlanGroup         *message);
size_t cdb__tbl_vlan_group__get_packed_size
                     (const Cdb__TblVlanGroup   *message);
size_t cdb__tbl_vlan_group__pack
                     (const Cdb__TblVlanGroup   *message,
                      uint8_t             *out);
size_t cdb__tbl_vlan_group__pack_to_buffer
                     (const Cdb__TblVlanGroup   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblVlanGroup *
       cdb__tbl_vlan_group__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_vlan_group__free_unpacked
                     (Cdb__TblVlanGroup *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblEvcEntryKey methods */
void   cdb__tbl_evc_entry_key__init
                     (Cdb__TblEvcEntryKey         *message);
size_t cdb__tbl_evc_entry_key__get_packed_size
                     (const Cdb__TblEvcEntryKey   *message);
size_t cdb__tbl_evc_entry_key__pack
                     (const Cdb__TblEvcEntryKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_evc_entry_key__pack_to_buffer
                     (const Cdb__TblEvcEntryKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblEvcEntryKey *
       cdb__tbl_evc_entry_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_evc_entry_key__free_unpacked
                     (Cdb__TblEvcEntryKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblEvcEntry methods */
void   cdb__tbl_evc_entry__init
                     (Cdb__TblEvcEntry         *message);
size_t cdb__tbl_evc_entry__get_packed_size
                     (const Cdb__TblEvcEntry   *message);
size_t cdb__tbl_evc_entry__pack
                     (const Cdb__TblEvcEntry   *message,
                      uint8_t             *out);
size_t cdb__tbl_evc_entry__pack_to_buffer
                     (const Cdb__TblEvcEntry   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblEvcEntry *
       cdb__tbl_evc_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_evc_entry__free_unpacked
                     (Cdb__TblEvcEntry *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblMappedVlanInfo methods */
void   cdb__tbl_mapped_vlan_info__init
                     (Cdb__TblMappedVlanInfo         *message);
size_t cdb__tbl_mapped_vlan_info__get_packed_size
                     (const Cdb__TblMappedVlanInfo   *message);
size_t cdb__tbl_mapped_vlan_info__pack
                     (const Cdb__TblMappedVlanInfo   *message,
                      uint8_t             *out);
size_t cdb__tbl_mapped_vlan_info__pack_to_buffer
                     (const Cdb__TblMappedVlanInfo   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblMappedVlanInfo *
       cdb__tbl_mapped_vlan_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_mapped_vlan_info__free_unpacked
                     (Cdb__TblMappedVlanInfo *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblL2ProtocolKey methods */
void   cdb__tbl_l2_protocol_key__init
                     (Cdb__TblL2ProtocolKey         *message);
size_t cdb__tbl_l2_protocol_key__get_packed_size
                     (const Cdb__TblL2ProtocolKey   *message);
size_t cdb__tbl_l2_protocol_key__pack
                     (const Cdb__TblL2ProtocolKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_l2_protocol_key__pack_to_buffer
                     (const Cdb__TblL2ProtocolKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblL2ProtocolKey *
       cdb__tbl_l2_protocol_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_l2_protocol_key__free_unpacked
                     (Cdb__TblL2ProtocolKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblL2Protocol methods */
void   cdb__tbl_l2_protocol__init
                     (Cdb__TblL2Protocol         *message);
size_t cdb__tbl_l2_protocol__get_packed_size
                     (const Cdb__TblL2Protocol   *message);
size_t cdb__tbl_l2_protocol__pack
                     (const Cdb__TblL2Protocol   *message,
                      uint8_t             *out);
size_t cdb__tbl_l2_protocol__pack_to_buffer
                     (const Cdb__TblL2Protocol   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblL2Protocol *
       cdb__tbl_l2_protocol__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_l2_protocol__free_unpacked
                     (Cdb__TblL2Protocol *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNdFib methods */
void   cdb__tbl_nd_fib__init
                     (Cdb__TblNdFib         *message);
size_t cdb__tbl_nd_fib__get_packed_size
                     (const Cdb__TblNdFib   *message);
size_t cdb__tbl_nd_fib__pack
                     (const Cdb__TblNdFib   *message,
                      uint8_t             *out);
size_t cdb__tbl_nd_fib__pack_to_buffer
                     (const Cdb__TblNdFib   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNdFib *
       cdb__tbl_nd_fib__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nd_fib__free_unpacked
                     (Cdb__TblNdFib *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNdStats methods */
void   cdb__tbl_nd_stats__init
                     (Cdb__TblNdStats         *message);
size_t cdb__tbl_nd_stats__get_packed_size
                     (const Cdb__TblNdStats   *message);
size_t cdb__tbl_nd_stats__pack
                     (const Cdb__TblNdStats   *message,
                      uint8_t             *out);
size_t cdb__tbl_nd_stats__pack_to_buffer
                     (const Cdb__TblNdStats   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNdStats *
       cdb__tbl_nd_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nd_stats__free_unpacked
                     (Cdb__TblNdStats *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCpuMirrorGlobal methods */
void   cdb__tbl_cpu_mirror_global__init
                     (Cdb__TblCpuMirrorGlobal         *message);
size_t cdb__tbl_cpu_mirror_global__get_packed_size
                     (const Cdb__TblCpuMirrorGlobal   *message);
size_t cdb__tbl_cpu_mirror_global__pack
                     (const Cdb__TblCpuMirrorGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_cpu_mirror_global__pack_to_buffer
                     (const Cdb__TblCpuMirrorGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCpuMirrorGlobal *
       cdb__tbl_cpu_mirror_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cpu_mirror_global__free_unpacked
                     (Cdb__TblCpuMirrorGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblTapServer methods */
void   cdb__tbl_tap_server__init
                     (Cdb__TblTapServer         *message);
size_t cdb__tbl_tap_server__get_packed_size
                     (const Cdb__TblTapServer   *message);
size_t cdb__tbl_tap_server__pack
                     (const Cdb__TblTapServer   *message,
                      uint8_t             *out);
size_t cdb__tbl_tap_server__pack_to_buffer
                     (const Cdb__TblTapServer   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblTapServer *
       cdb__tbl_tap_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_tap_server__free_unpacked
                     (Cdb__TblTapServer *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblDhcpv6Debug methods */
void   cdb__tbl_dhcpv6_debug__init
                     (Cdb__TblDhcpv6Debug         *message);
size_t cdb__tbl_dhcpv6_debug__get_packed_size
                     (const Cdb__TblDhcpv6Debug   *message);
size_t cdb__tbl_dhcpv6_debug__pack
                     (const Cdb__TblDhcpv6Debug   *message,
                      uint8_t             *out);
size_t cdb__tbl_dhcpv6_debug__pack_to_buffer
                     (const Cdb__TblDhcpv6Debug   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblDhcpv6Debug *
       cdb__tbl_dhcpv6_debug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_dhcpv6_debug__free_unpacked
                     (Cdb__TblDhcpv6Debug *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblL2edit methods */
void   cdb__tbl_l2edit__init
                     (Cdb__TblL2edit         *message);
size_t cdb__tbl_l2edit__get_packed_size
                     (const Cdb__TblL2edit   *message);
size_t cdb__tbl_l2edit__pack
                     (const Cdb__TblL2edit   *message,
                      uint8_t             *out);
size_t cdb__tbl_l2edit__pack_to_buffer
                     (const Cdb__TblL2edit   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblL2edit *
       cdb__tbl_l2edit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_l2edit__free_unpacked
                     (Cdb__TblL2edit *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblHashFieldProfileKey methods */
void   cdb__tbl_hash_field_profile_key__init
                     (Cdb__TblHashFieldProfileKey         *message);
size_t cdb__tbl_hash_field_profile_key__get_packed_size
                     (const Cdb__TblHashFieldProfileKey   *message);
size_t cdb__tbl_hash_field_profile_key__pack
                     (const Cdb__TblHashFieldProfileKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_hash_field_profile_key__pack_to_buffer
                     (const Cdb__TblHashFieldProfileKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblHashFieldProfileKey *
       cdb__tbl_hash_field_profile_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_hash_field_profile_key__free_unpacked
                     (Cdb__TblHashFieldProfileKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblHashFieldProfile methods */
void   cdb__tbl_hash_field_profile__init
                     (Cdb__TblHashFieldProfile         *message);
size_t cdb__tbl_hash_field_profile__get_packed_size
                     (const Cdb__TblHashFieldProfile   *message);
size_t cdb__tbl_hash_field_profile__pack
                     (const Cdb__TblHashFieldProfile   *message,
                      uint8_t             *out);
size_t cdb__tbl_hash_field_profile__pack_to_buffer
                     (const Cdb__TblHashFieldProfile   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblHashFieldProfile *
       cdb__tbl_hash_field_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_hash_field_profile__free_unpacked
                     (Cdb__TblHashFieldProfile *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblHashValueProfileKey methods */
void   cdb__tbl_hash_value_profile_key__init
                     (Cdb__TblHashValueProfileKey         *message);
size_t cdb__tbl_hash_value_profile_key__get_packed_size
                     (const Cdb__TblHashValueProfileKey   *message);
size_t cdb__tbl_hash_value_profile_key__pack
                     (const Cdb__TblHashValueProfileKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_hash_value_profile_key__pack_to_buffer
                     (const Cdb__TblHashValueProfileKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblHashValueProfileKey *
       cdb__tbl_hash_value_profile_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_hash_value_profile_key__free_unpacked
                     (Cdb__TblHashValueProfileKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblHashValueProfile methods */
void   cdb__tbl_hash_value_profile__init
                     (Cdb__TblHashValueProfile         *message);
size_t cdb__tbl_hash_value_profile__get_packed_size
                     (const Cdb__TblHashValueProfile   *message);
size_t cdb__tbl_hash_value_profile__pack
                     (const Cdb__TblHashValueProfile   *message,
                      uint8_t             *out);
size_t cdb__tbl_hash_value_profile__pack_to_buffer
                     (const Cdb__TblHashValueProfile   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblHashValueProfile *
       cdb__tbl_hash_value_profile__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_hash_value_profile__free_unpacked
                     (Cdb__TblHashValueProfile *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblHashValueGlobal methods */
void   cdb__tbl_hash_value_global__init
                     (Cdb__TblHashValueGlobal         *message);
size_t cdb__tbl_hash_value_global__get_packed_size
                     (const Cdb__TblHashValueGlobal   *message);
size_t cdb__tbl_hash_value_global__pack
                     (const Cdb__TblHashValueGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_hash_value_global__pack_to_buffer
                     (const Cdb__TblHashValueGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblHashValueGlobal *
       cdb__tbl_hash_value_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_hash_value_global__free_unpacked
                     (Cdb__TblHashValueGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNatGlobal methods */
void   cdb__tbl_nat_global__init
                     (Cdb__TblNatGlobal         *message);
size_t cdb__tbl_nat_global__get_packed_size
                     (const Cdb__TblNatGlobal   *message);
size_t cdb__tbl_nat_global__pack
                     (const Cdb__TblNatGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_nat_global__pack_to_buffer
                     (const Cdb__TblNatGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNatGlobal *
       cdb__tbl_nat_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nat_global__free_unpacked
                     (Cdb__TblNatGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNatPoolKey methods */
void   cdb__tbl_nat_pool_key__init
                     (Cdb__TblNatPoolKey         *message);
size_t cdb__tbl_nat_pool_key__get_packed_size
                     (const Cdb__TblNatPoolKey   *message);
size_t cdb__tbl_nat_pool_key__pack
                     (const Cdb__TblNatPoolKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_nat_pool_key__pack_to_buffer
                     (const Cdb__TblNatPoolKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNatPoolKey *
       cdb__tbl_nat_pool_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nat_pool_key__free_unpacked
                     (Cdb__TblNatPoolKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNatPool methods */
void   cdb__tbl_nat_pool__init
                     (Cdb__TblNatPool         *message);
size_t cdb__tbl_nat_pool__get_packed_size
                     (const Cdb__TblNatPool   *message);
size_t cdb__tbl_nat_pool__pack
                     (const Cdb__TblNatPool   *message,
                      uint8_t             *out);
size_t cdb__tbl_nat_pool__pack_to_buffer
                     (const Cdb__TblNatPool   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNatPool *
       cdb__tbl_nat_pool__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nat_pool__free_unpacked
                     (Cdb__TblNatPool *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNatRule methods */
void   cdb__tbl_nat_rule__init
                     (Cdb__TblNatRule         *message);
size_t cdb__tbl_nat_rule__get_packed_size
                     (const Cdb__TblNatRule   *message);
size_t cdb__tbl_nat_rule__pack
                     (const Cdb__TblNatRule   *message,
                      uint8_t             *out);
size_t cdb__tbl_nat_rule__pack_to_buffer
                     (const Cdb__TblNatRule   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNatRule *
       cdb__tbl_nat_rule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nat_rule__free_unpacked
                     (Cdb__TblNatRule *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNatSession methods */
void   cdb__tbl_nat_session__init
                     (Cdb__TblNatSession         *message);
size_t cdb__tbl_nat_session__get_packed_size
                     (const Cdb__TblNatSession   *message);
size_t cdb__tbl_nat_session__pack
                     (const Cdb__TblNatSession   *message,
                      uint8_t             *out);
size_t cdb__tbl_nat_session__pack_to_buffer
                     (const Cdb__TblNatSession   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNatSession *
       cdb__tbl_nat_session__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nat_session__free_unpacked
                     (Cdb__TblNatSession *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNatSessionLimit methods */
void   cdb__tbl_nat_session_limit__init
                     (Cdb__TblNatSessionLimit         *message);
size_t cdb__tbl_nat_session_limit__get_packed_size
                     (const Cdb__TblNatSessionLimit   *message);
size_t cdb__tbl_nat_session_limit__pack
                     (const Cdb__TblNatSessionLimit   *message,
                      uint8_t             *out);
size_t cdb__tbl_nat_session_limit__pack_to_buffer
                     (const Cdb__TblNatSessionLimit   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNatSessionLimit *
       cdb__tbl_nat_session_limit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nat_session_limit__free_unpacked
                     (Cdb__TblNatSessionLimit *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNatProxyArp methods */
void   cdb__tbl_nat_proxy_arp__init
                     (Cdb__TblNatProxyArp         *message);
size_t cdb__tbl_nat_proxy_arp__get_packed_size
                     (const Cdb__TblNatProxyArp   *message);
size_t cdb__tbl_nat_proxy_arp__pack
                     (const Cdb__TblNatProxyArp   *message,
                      uint8_t             *out);
size_t cdb__tbl_nat_proxy_arp__pack_to_buffer
                     (const Cdb__TblNatProxyArp   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNatProxyArp *
       cdb__tbl_nat_proxy_arp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nat_proxy_arp__free_unpacked
                     (Cdb__TblNatProxyArp *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNatRtifInsideKey methods */
void   cdb__tbl_nat_rtif_inside_key__init
                     (Cdb__TblNatRtifInsideKey         *message);
size_t cdb__tbl_nat_rtif_inside_key__get_packed_size
                     (const Cdb__TblNatRtifInsideKey   *message);
size_t cdb__tbl_nat_rtif_inside_key__pack
                     (const Cdb__TblNatRtifInsideKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_nat_rtif_inside_key__pack_to_buffer
                     (const Cdb__TblNatRtifInsideKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNatRtifInsideKey *
       cdb__tbl_nat_rtif_inside_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nat_rtif_inside_key__free_unpacked
                     (Cdb__TblNatRtifInsideKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNatRtifInside methods */
void   cdb__tbl_nat_rtif_inside__init
                     (Cdb__TblNatRtifInside         *message);
size_t cdb__tbl_nat_rtif_inside__get_packed_size
                     (const Cdb__TblNatRtifInside   *message);
size_t cdb__tbl_nat_rtif_inside__pack
                     (const Cdb__TblNatRtifInside   *message,
                      uint8_t             *out);
size_t cdb__tbl_nat_rtif_inside__pack_to_buffer
                     (const Cdb__TblNatRtifInside   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNatRtifInside *
       cdb__tbl_nat_rtif_inside__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nat_rtif_inside__free_unpacked
                     (Cdb__TblNatRtifInside *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNatRtifOutsideKey methods */
void   cdb__tbl_nat_rtif_outside_key__init
                     (Cdb__TblNatRtifOutsideKey         *message);
size_t cdb__tbl_nat_rtif_outside_key__get_packed_size
                     (const Cdb__TblNatRtifOutsideKey   *message);
size_t cdb__tbl_nat_rtif_outside_key__pack
                     (const Cdb__TblNatRtifOutsideKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_nat_rtif_outside_key__pack_to_buffer
                     (const Cdb__TblNatRtifOutsideKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNatRtifOutsideKey *
       cdb__tbl_nat_rtif_outside_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nat_rtif_outside_key__free_unpacked
                     (Cdb__TblNatRtifOutsideKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblNatRtifOutside methods */
void   cdb__tbl_nat_rtif_outside__init
                     (Cdb__TblNatRtifOutside         *message);
size_t cdb__tbl_nat_rtif_outside__get_packed_size
                     (const Cdb__TblNatRtifOutside   *message);
size_t cdb__tbl_nat_rtif_outside__pack
                     (const Cdb__TblNatRtifOutside   *message,
                      uint8_t             *out);
size_t cdb__tbl_nat_rtif_outside__pack_to_buffer
                     (const Cdb__TblNatRtifOutside   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblNatRtifOutside *
       cdb__tbl_nat_rtif_outside__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_nat_rtif_outside__free_unpacked
                     (Cdb__TblNatRtifOutside *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblG8032RingKey methods */
void   cdb__tbl_g8032_ring_key__init
                     (Cdb__TblG8032RingKey         *message);
size_t cdb__tbl_g8032_ring_key__get_packed_size
                     (const Cdb__TblG8032RingKey   *message);
size_t cdb__tbl_g8032_ring_key__pack
                     (const Cdb__TblG8032RingKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_g8032_ring_key__pack_to_buffer
                     (const Cdb__TblG8032RingKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblG8032RingKey *
       cdb__tbl_g8032_ring_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_g8032_ring_key__free_unpacked
                     (Cdb__TblG8032RingKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblG8032Ring methods */
void   cdb__tbl_g8032_ring__init
                     (Cdb__TblG8032Ring         *message);
size_t cdb__tbl_g8032_ring__get_packed_size
                     (const Cdb__TblG8032Ring   *message);
size_t cdb__tbl_g8032_ring__pack
                     (const Cdb__TblG8032Ring   *message,
                      uint8_t             *out);
size_t cdb__tbl_g8032_ring__pack_to_buffer
                     (const Cdb__TblG8032Ring   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblG8032Ring *
       cdb__tbl_g8032_ring__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_g8032_ring__free_unpacked
                     (Cdb__TblG8032Ring *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCfmGlobal methods */
void   cdb__tbl_cfm_global__init
                     (Cdb__TblCfmGlobal         *message);
size_t cdb__tbl_cfm_global__get_packed_size
                     (const Cdb__TblCfmGlobal   *message);
size_t cdb__tbl_cfm_global__pack
                     (const Cdb__TblCfmGlobal   *message,
                      uint8_t             *out);
size_t cdb__tbl_cfm_global__pack_to_buffer
                     (const Cdb__TblCfmGlobal   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCfmGlobal *
       cdb__tbl_cfm_global__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cfm_global__free_unpacked
                     (Cdb__TblCfmGlobal *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCfmMdKey methods */
void   cdb__tbl_cfm_md_key__init
                     (Cdb__TblCfmMdKey         *message);
size_t cdb__tbl_cfm_md_key__get_packed_size
                     (const Cdb__TblCfmMdKey   *message);
size_t cdb__tbl_cfm_md_key__pack
                     (const Cdb__TblCfmMdKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_cfm_md_key__pack_to_buffer
                     (const Cdb__TblCfmMdKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCfmMdKey *
       cdb__tbl_cfm_md_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cfm_md_key__free_unpacked
                     (Cdb__TblCfmMdKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCfmMd methods */
void   cdb__tbl_cfm_md__init
                     (Cdb__TblCfmMd         *message);
size_t cdb__tbl_cfm_md__get_packed_size
                     (const Cdb__TblCfmMd   *message);
size_t cdb__tbl_cfm_md__pack
                     (const Cdb__TblCfmMd   *message,
                      uint8_t             *out);
size_t cdb__tbl_cfm_md__pack_to_buffer
                     (const Cdb__TblCfmMd   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCfmMd *
       cdb__tbl_cfm_md__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cfm_md__free_unpacked
                     (Cdb__TblCfmMd *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCfmMa methods */
void   cdb__tbl_cfm_ma__init
                     (Cdb__TblCfmMa         *message);
size_t cdb__tbl_cfm_ma__get_packed_size
                     (const Cdb__TblCfmMa   *message);
size_t cdb__tbl_cfm_ma__pack
                     (const Cdb__TblCfmMa   *message,
                      uint8_t             *out);
size_t cdb__tbl_cfm_ma__pack_to_buffer
                     (const Cdb__TblCfmMa   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCfmMa *
       cdb__tbl_cfm_ma__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cfm_ma__free_unpacked
                     (Cdb__TblCfmMa *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCfmMaidKey methods */
void   cdb__tbl_cfm_maid_key__init
                     (Cdb__TblCfmMaidKey         *message);
size_t cdb__tbl_cfm_maid_key__get_packed_size
                     (const Cdb__TblCfmMaidKey   *message);
size_t cdb__tbl_cfm_maid_key__pack
                     (const Cdb__TblCfmMaidKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_cfm_maid_key__pack_to_buffer
                     (const Cdb__TblCfmMaidKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCfmMaidKey *
       cdb__tbl_cfm_maid_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cfm_maid_key__free_unpacked
                     (Cdb__TblCfmMaidKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCfmMaid methods */
void   cdb__tbl_cfm_maid__init
                     (Cdb__TblCfmMaid         *message);
size_t cdb__tbl_cfm_maid__get_packed_size
                     (const Cdb__TblCfmMaid   *message);
size_t cdb__tbl_cfm_maid__pack
                     (const Cdb__TblCfmMaid   *message,
                      uint8_t             *out);
size_t cdb__tbl_cfm_maid__pack_to_buffer
                     (const Cdb__TblCfmMaid   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCfmMaid *
       cdb__tbl_cfm_maid__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cfm_maid__free_unpacked
                     (Cdb__TblCfmMaid *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCfmLmep methods */
void   cdb__tbl_cfm_lmep__init
                     (Cdb__TblCfmLmep         *message);
size_t cdb__tbl_cfm_lmep__get_packed_size
                     (const Cdb__TblCfmLmep   *message);
size_t cdb__tbl_cfm_lmep__pack
                     (const Cdb__TblCfmLmep   *message,
                      uint8_t             *out);
size_t cdb__tbl_cfm_lmep__pack_to_buffer
                     (const Cdb__TblCfmLmep   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCfmLmep *
       cdb__tbl_cfm_lmep__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cfm_lmep__free_unpacked
                     (Cdb__TblCfmLmep *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblCfmRmep methods */
void   cdb__tbl_cfm_rmep__init
                     (Cdb__TblCfmRmep         *message);
size_t cdb__tbl_cfm_rmep__get_packed_size
                     (const Cdb__TblCfmRmep   *message);
size_t cdb__tbl_cfm_rmep__pack
                     (const Cdb__TblCfmRmep   *message,
                      uint8_t             *out);
size_t cdb__tbl_cfm_rmep__pack_to_buffer
                     (const Cdb__TblCfmRmep   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblCfmRmep *
       cdb__tbl_cfm_rmep__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_cfm_rmep__free_unpacked
                     (Cdb__TblCfmRmep *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPimSmKey methods */
void   cdb__tbl_pim_sm_key__init
                     (Cdb__TblPimSmKey         *message);
size_t cdb__tbl_pim_sm_key__get_packed_size
                     (const Cdb__TblPimSmKey   *message);
size_t cdb__tbl_pim_sm_key__pack
                     (const Cdb__TblPimSmKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_pim_sm_key__pack_to_buffer
                     (const Cdb__TblPimSmKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPimSmKey *
       cdb__tbl_pim_sm_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pim_sm_key__free_unpacked
                     (Cdb__TblPimSmKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPimSm methods */
void   cdb__tbl_pim_sm__init
                     (Cdb__TblPimSm         *message);
size_t cdb__tbl_pim_sm__get_packed_size
                     (const Cdb__TblPimSm   *message);
size_t cdb__tbl_pim_sm__pack
                     (const Cdb__TblPimSm   *message,
                      uint8_t             *out);
size_t cdb__tbl_pim_sm__pack_to_buffer
                     (const Cdb__TblPimSm   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPimSm *
       cdb__tbl_pim_sm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pim_sm__free_unpacked
                     (Cdb__TblPimSm *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPimSmBsrKey methods */
void   cdb__tbl_pim_sm_bsr_key__init
                     (Cdb__TblPimSmBsrKey         *message);
size_t cdb__tbl_pim_sm_bsr_key__get_packed_size
                     (const Cdb__TblPimSmBsrKey   *message);
size_t cdb__tbl_pim_sm_bsr_key__pack
                     (const Cdb__TblPimSmBsrKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_pim_sm_bsr_key__pack_to_buffer
                     (const Cdb__TblPimSmBsrKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPimSmBsrKey *
       cdb__tbl_pim_sm_bsr_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pim_sm_bsr_key__free_unpacked
                     (Cdb__TblPimSmBsrKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPimSmBsr methods */
void   cdb__tbl_pim_sm_bsr__init
                     (Cdb__TblPimSmBsr         *message);
size_t cdb__tbl_pim_sm_bsr__get_packed_size
                     (const Cdb__TblPimSmBsr   *message);
size_t cdb__tbl_pim_sm_bsr__pack
                     (const Cdb__TblPimSmBsr   *message,
                      uint8_t             *out);
size_t cdb__tbl_pim_sm_bsr__pack_to_buffer
                     (const Cdb__TblPimSmBsr   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPimSmBsr *
       cdb__tbl_pim_sm_bsr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pim_sm_bsr__free_unpacked
                     (Cdb__TblPimSmBsr *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPimSmRpKey methods */
void   cdb__tbl_pim_sm_rp_key__init
                     (Cdb__TblPimSmRpKey         *message);
size_t cdb__tbl_pim_sm_rp_key__get_packed_size
                     (const Cdb__TblPimSmRpKey   *message);
size_t cdb__tbl_pim_sm_rp_key__pack
                     (const Cdb__TblPimSmRpKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_pim_sm_rp_key__pack_to_buffer
                     (const Cdb__TblPimSmRpKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPimSmRpKey *
       cdb__tbl_pim_sm_rp_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pim_sm_rp_key__free_unpacked
                     (Cdb__TblPimSmRpKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPimSmRp methods */
void   cdb__tbl_pim_sm_rp__init
                     (Cdb__TblPimSmRp         *message);
size_t cdb__tbl_pim_sm_rp__get_packed_size
                     (const Cdb__TblPimSmRp   *message);
size_t cdb__tbl_pim_sm_rp__pack
                     (const Cdb__TblPimSmRp   *message,
                      uint8_t             *out);
size_t cdb__tbl_pim_sm_rp__pack_to_buffer
                     (const Cdb__TblPimSmRp   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPimSmRp *
       cdb__tbl_pim_sm_rp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pim_sm_rp__free_unpacked
                     (Cdb__TblPimSmRp *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPimSmRpGpKey methods */
void   cdb__tbl_pim_sm_rp_gp_key__init
                     (Cdb__TblPimSmRpGpKey         *message);
size_t cdb__tbl_pim_sm_rp_gp_key__get_packed_size
                     (const Cdb__TblPimSmRpGpKey   *message);
size_t cdb__tbl_pim_sm_rp_gp_key__pack
                     (const Cdb__TblPimSmRpGpKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_pim_sm_rp_gp_key__pack_to_buffer
                     (const Cdb__TblPimSmRpGpKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPimSmRpGpKey *
       cdb__tbl_pim_sm_rp_gp_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pim_sm_rp_gp_key__free_unpacked
                     (Cdb__TblPimSmRpGpKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPimSmRpGp methods */
void   cdb__tbl_pim_sm_rp_gp__init
                     (Cdb__TblPimSmRpGp         *message);
size_t cdb__tbl_pim_sm_rp_gp__get_packed_size
                     (const Cdb__TblPimSmRpGp   *message);
size_t cdb__tbl_pim_sm_rp_gp__pack
                     (const Cdb__TblPimSmRpGp   *message,
                      uint8_t             *out);
size_t cdb__tbl_pim_sm_rp_gp__pack_to_buffer
                     (const Cdb__TblPimSmRpGp   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPimSmRpGp *
       cdb__tbl_pim_sm_rp_gp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pim_sm_rp_gp__free_unpacked
                     (Cdb__TblPimSmRpGp *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPimDmKey methods */
void   cdb__tbl_pim_dm_key__init
                     (Cdb__TblPimDmKey         *message);
size_t cdb__tbl_pim_dm_key__get_packed_size
                     (const Cdb__TblPimDmKey   *message);
size_t cdb__tbl_pim_dm_key__pack
                     (const Cdb__TblPimDmKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_pim_dm_key__pack_to_buffer
                     (const Cdb__TblPimDmKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPimDmKey *
       cdb__tbl_pim_dm_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pim_dm_key__free_unpacked
                     (Cdb__TblPimDmKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblPimDm methods */
void   cdb__tbl_pim_dm__init
                     (Cdb__TblPimDm         *message);
size_t cdb__tbl_pim_dm__get_packed_size
                     (const Cdb__TblPimDm   *message);
size_t cdb__tbl_pim_dm__pack
                     (const Cdb__TblPimDm   *message,
                      uint8_t             *out);
size_t cdb__tbl_pim_dm__pack_to_buffer
                     (const Cdb__TblPimDm   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblPimDm *
       cdb__tbl_pim_dm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_pim_dm__free_unpacked
                     (Cdb__TblPimDm *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIgmpIntfKey methods */
void   cdb__tbl_igmp_intf_key__init
                     (Cdb__TblIgmpIntfKey         *message);
size_t cdb__tbl_igmp_intf_key__get_packed_size
                     (const Cdb__TblIgmpIntfKey   *message);
size_t cdb__tbl_igmp_intf_key__pack
                     (const Cdb__TblIgmpIntfKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_igmp_intf_key__pack_to_buffer
                     (const Cdb__TblIgmpIntfKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIgmpIntfKey *
       cdb__tbl_igmp_intf_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_igmp_intf_key__free_unpacked
                     (Cdb__TblIgmpIntfKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblIgmpIntf methods */
void   cdb__tbl_igmp_intf__init
                     (Cdb__TblIgmpIntf         *message);
size_t cdb__tbl_igmp_intf__get_packed_size
                     (const Cdb__TblIgmpIntf   *message);
size_t cdb__tbl_igmp_intf__pack
                     (const Cdb__TblIgmpIntf   *message,
                      uint8_t             *out);
size_t cdb__tbl_igmp_intf__pack_to_buffer
                     (const Cdb__TblIgmpIntf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblIgmpIntf *
       cdb__tbl_igmp_intf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_igmp_intf__free_unpacked
                     (Cdb__TblIgmpIntf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRipKey methods */
void   cdb__tbl_rip_key__init
                     (Cdb__TblRipKey         *message);
size_t cdb__tbl_rip_key__get_packed_size
                     (const Cdb__TblRipKey   *message);
size_t cdb__tbl_rip_key__pack
                     (const Cdb__TblRipKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_rip_key__pack_to_buffer
                     (const Cdb__TblRipKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRipKey *
       cdb__tbl_rip_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rip_key__free_unpacked
                     (Cdb__TblRipKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRip methods */
void   cdb__tbl_rip__init
                     (Cdb__TblRip         *message);
size_t cdb__tbl_rip__get_packed_size
                     (const Cdb__TblRip   *message);
size_t cdb__tbl_rip__pack
                     (const Cdb__TblRip   *message,
                      uint8_t             *out);
size_t cdb__tbl_rip__pack_to_buffer
                     (const Cdb__TblRip   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRip *
       cdb__tbl_rip__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rip__free_unpacked
                     (Cdb__TblRip *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRipngKey methods */
void   cdb__tbl_ripng_key__init
                     (Cdb__TblRipngKey         *message);
size_t cdb__tbl_ripng_key__get_packed_size
                     (const Cdb__TblRipngKey   *message);
size_t cdb__tbl_ripng_key__pack
                     (const Cdb__TblRipngKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ripng_key__pack_to_buffer
                     (const Cdb__TblRipngKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRipngKey *
       cdb__tbl_ripng_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ripng_key__free_unpacked
                     (Cdb__TblRipngKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRipng methods */
void   cdb__tbl_ripng__init
                     (Cdb__TblRipng         *message);
size_t cdb__tbl_ripng__get_packed_size
                     (const Cdb__TblRipng   *message);
size_t cdb__tbl_ripng__pack
                     (const Cdb__TblRipng   *message,
                      uint8_t             *out);
size_t cdb__tbl_ripng__pack_to_buffer
                     (const Cdb__TblRipng   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRipng *
       cdb__tbl_ripng__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ripng__free_unpacked
                     (Cdb__TblRipng *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRipNetwork methods */
void   cdb__tbl_rip_network__init
                     (Cdb__TblRipNetwork         *message);
size_t cdb__tbl_rip_network__get_packed_size
                     (const Cdb__TblRipNetwork   *message);
size_t cdb__tbl_rip_network__pack
                     (const Cdb__TblRipNetwork   *message,
                      uint8_t             *out);
size_t cdb__tbl_rip_network__pack_to_buffer
                     (const Cdb__TblRipNetwork   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRipNetwork *
       cdb__tbl_rip_network__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rip_network__free_unpacked
                     (Cdb__TblRipNetwork *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRipngNetwork methods */
void   cdb__tbl_ripng_network__init
                     (Cdb__TblRipngNetwork         *message);
size_t cdb__tbl_ripng_network__get_packed_size
                     (const Cdb__TblRipngNetwork   *message);
size_t cdb__tbl_ripng_network__pack
                     (const Cdb__TblRipngNetwork   *message,
                      uint8_t             *out);
size_t cdb__tbl_ripng_network__pack_to_buffer
                     (const Cdb__TblRipngNetwork   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRipngNetwork *
       cdb__tbl_ripng_network__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ripng_network__free_unpacked
                     (Cdb__TblRipngNetwork *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRipNeighbor methods */
void   cdb__tbl_rip_neighbor__init
                     (Cdb__TblRipNeighbor         *message);
size_t cdb__tbl_rip_neighbor__get_packed_size
                     (const Cdb__TblRipNeighbor   *message);
size_t cdb__tbl_rip_neighbor__pack
                     (const Cdb__TblRipNeighbor   *message,
                      uint8_t             *out);
size_t cdb__tbl_rip_neighbor__pack_to_buffer
                     (const Cdb__TblRipNeighbor   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRipNeighbor *
       cdb__tbl_rip_neighbor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rip_neighbor__free_unpacked
                     (Cdb__TblRipNeighbor *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRipPassiveIfKey methods */
void   cdb__tbl_rip_passive_if_key__init
                     (Cdb__TblRipPassiveIfKey         *message);
size_t cdb__tbl_rip_passive_if_key__get_packed_size
                     (const Cdb__TblRipPassiveIfKey   *message);
size_t cdb__tbl_rip_passive_if_key__pack
                     (const Cdb__TblRipPassiveIfKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_rip_passive_if_key__pack_to_buffer
                     (const Cdb__TblRipPassiveIfKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRipPassiveIfKey *
       cdb__tbl_rip_passive_if_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rip_passive_if_key__free_unpacked
                     (Cdb__TblRipPassiveIfKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRipPassiveIf methods */
void   cdb__tbl_rip_passive_if__init
                     (Cdb__TblRipPassiveIf         *message);
size_t cdb__tbl_rip_passive_if__get_packed_size
                     (const Cdb__TblRipPassiveIf   *message);
size_t cdb__tbl_rip_passive_if__pack
                     (const Cdb__TblRipPassiveIf   *message,
                      uint8_t             *out);
size_t cdb__tbl_rip_passive_if__pack_to_buffer
                     (const Cdb__TblRipPassiveIf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRipPassiveIf *
       cdb__tbl_rip_passive_if__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_rip_passive_if__free_unpacked
                     (Cdb__TblRipPassiveIf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRipngPassiveIfKey methods */
void   cdb__tbl_ripng_passive_if_key__init
                     (Cdb__TblRipngPassiveIfKey         *message);
size_t cdb__tbl_ripng_passive_if_key__get_packed_size
                     (const Cdb__TblRipngPassiveIfKey   *message);
size_t cdb__tbl_ripng_passive_if_key__pack
                     (const Cdb__TblRipngPassiveIfKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ripng_passive_if_key__pack_to_buffer
                     (const Cdb__TblRipngPassiveIfKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRipngPassiveIfKey *
       cdb__tbl_ripng_passive_if_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ripng_passive_if_key__free_unpacked
                     (Cdb__TblRipngPassiveIfKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblRipngPassiveIf methods */
void   cdb__tbl_ripng_passive_if__init
                     (Cdb__TblRipngPassiveIf         *message);
size_t cdb__tbl_ripng_passive_if__get_packed_size
                     (const Cdb__TblRipngPassiveIf   *message);
size_t cdb__tbl_ripng_passive_if__pack
                     (const Cdb__TblRipngPassiveIf   *message,
                      uint8_t             *out);
size_t cdb__tbl_ripng_passive_if__pack_to_buffer
                     (const Cdb__TblRipngPassiveIf   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblRipngPassiveIf *
       cdb__tbl_ripng_passive_if__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ripng_passive_if__free_unpacked
                     (Cdb__TblRipngPassiveIf *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspfAreaStubKey methods */
void   cdb__tbl_ospf_area_stub_key__init
                     (Cdb__TblOspfAreaStubKey         *message);
size_t cdb__tbl_ospf_area_stub_key__get_packed_size
                     (const Cdb__TblOspfAreaStubKey   *message);
size_t cdb__tbl_ospf_area_stub_key__pack
                     (const Cdb__TblOspfAreaStubKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf_area_stub_key__pack_to_buffer
                     (const Cdb__TblOspfAreaStubKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspfAreaStubKey *
       cdb__tbl_ospf_area_stub_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf_area_stub_key__free_unpacked
                     (Cdb__TblOspfAreaStubKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspfAreaStub methods */
void   cdb__tbl_ospf_area_stub__init
                     (Cdb__TblOspfAreaStub         *message);
size_t cdb__tbl_ospf_area_stub__get_packed_size
                     (const Cdb__TblOspfAreaStub   *message);
size_t cdb__tbl_ospf_area_stub__pack
                     (const Cdb__TblOspfAreaStub   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf_area_stub__pack_to_buffer
                     (const Cdb__TblOspfAreaStub   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspfAreaStub *
       cdb__tbl_ospf_area_stub__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf_area_stub__free_unpacked
                     (Cdb__TblOspfAreaStub *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspf6AreaStubKey methods */
void   cdb__tbl_ospf6_area_stub_key__init
                     (Cdb__TblOspf6AreaStubKey         *message);
size_t cdb__tbl_ospf6_area_stub_key__get_packed_size
                     (const Cdb__TblOspf6AreaStubKey   *message);
size_t cdb__tbl_ospf6_area_stub_key__pack
                     (const Cdb__TblOspf6AreaStubKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf6_area_stub_key__pack_to_buffer
                     (const Cdb__TblOspf6AreaStubKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspf6AreaStubKey *
       cdb__tbl_ospf6_area_stub_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf6_area_stub_key__free_unpacked
                     (Cdb__TblOspf6AreaStubKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspf6AreaStub methods */
void   cdb__tbl_ospf6_area_stub__init
                     (Cdb__TblOspf6AreaStub         *message);
size_t cdb__tbl_ospf6_area_stub__get_packed_size
                     (const Cdb__TblOspf6AreaStub   *message);
size_t cdb__tbl_ospf6_area_stub__pack
                     (const Cdb__TblOspf6AreaStub   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf6_area_stub__pack_to_buffer
                     (const Cdb__TblOspf6AreaStub   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspf6AreaStub *
       cdb__tbl_ospf6_area_stub__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf6_area_stub__free_unpacked
                     (Cdb__TblOspf6AreaStub *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspfAreaNssaKey methods */
void   cdb__tbl_ospf_area_nssa_key__init
                     (Cdb__TblOspfAreaNssaKey         *message);
size_t cdb__tbl_ospf_area_nssa_key__get_packed_size
                     (const Cdb__TblOspfAreaNssaKey   *message);
size_t cdb__tbl_ospf_area_nssa_key__pack
                     (const Cdb__TblOspfAreaNssaKey   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf_area_nssa_key__pack_to_buffer
                     (const Cdb__TblOspfAreaNssaKey   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspfAreaNssaKey *
       cdb__tbl_ospf_area_nssa_key__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf_area_nssa_key__free_unpacked
                     (Cdb__TblOspfAreaNssaKey *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspfAreaNssa methods */
void   cdb__tbl_ospf_area_nssa__init
                     (Cdb__TblOspfAreaNssa         *message);
size_t cdb__tbl_ospf_area_nssa__get_packed_size
                     (const Cdb__TblOspfAreaNssa   *message);
size_t cdb__tbl_ospf_area_nssa__pack
                     (const Cdb__TblOspfAreaNssa   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf_area_nssa__pack_to_buffer
                     (const Cdb__TblOspfAreaNssa   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspfAreaNssa *
       cdb__tbl_ospf_area_nssa__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf_area_nssa__free_unpacked
                     (Cdb__TblOspfAreaNssa *message,
                      ProtobufCAllocator *allocator);
/* Cdb__TblOspfAreaVlink methods */
void   cdb__tbl_ospf_area_vlink__init
                     (Cdb__TblOspfAreaVlink         *message);
size_t cdb__tbl_ospf_area_vlink__get_packed_size
                     (const Cdb__TblOspfAreaVlink   *message);
size_t cdb__tbl_ospf_area_vlink__pack
                     (const Cdb__TblOspfAreaVlink   *message,
                      uint8_t             *out);
size_t cdb__tbl_ospf_area_vlink__pack_to_buffer
                     (const Cdb__TblOspfAreaVlink   *message,
                      ProtobufCBuffer     *buffer);
Cdb__TblOspfAreaVlink *
       cdb__tbl_ospf_area_vlink__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdb__tbl_ospf_area_vlink__free_unpacked
                     (Cdb__TblOspfAreaVlink *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Cdb__TblInterfaceKey_Closure)
                 (const Cdb__TblInterfaceKey *message,
                  void *closure_data);
typedef void (*Cdb__TblInterface_Closure)
                 (const Cdb__TblInterface *message,
                  void *closure_data);
typedef void (*Cdb__TblRouteIfKey_Closure)
                 (const Cdb__TblRouteIfKey *message,
                  void *closure_data);
typedef void (*Cdb__TblRouteIf_Closure)
                 (const Cdb__TblRouteIf *message,
                  void *closure_data);
typedef void (*Cdb__TblKernelIfKey_Closure)
                 (const Cdb__TblKernelIfKey *message,
                  void *closure_data);
typedef void (*Cdb__TblKernelIf_Closure)
                 (const Cdb__TblKernelIf *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaPortIfKey_Closure)
                 (const Cdb__TblFeaPortIfKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaPortIf_Closure)
                 (const Cdb__TblFeaPortIf *message,
                  void *closure_data);
typedef void (*Cdb__TblVlanKey_Closure)
                 (const Cdb__TblVlanKey *message,
                  void *closure_data);
typedef void (*Cdb__TblVlan_Closure)
                 (const Cdb__TblVlan *message,
                  void *closure_data);
typedef void (*Cdb__TblPvlanKey_Closure)
                 (const Cdb__TblPvlanKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPvlan_Closure)
                 (const Cdb__TblPvlan *message,
                  void *closure_data);
typedef void (*Cdb__TblFdb_Closure)
                 (const Cdb__TblFdb *message,
                  void *closure_data);
typedef void (*Cdb__TblMcfdb_Closure)
                 (const Cdb__TblMcfdb *message,
                  void *closure_data);
typedef void (*Cdb__TblMacfilterKey_Closure)
                 (const Cdb__TblMacfilterKey *message,
                  void *closure_data);
typedef void (*Cdb__TblMacfilter_Closure)
                 (const Cdb__TblMacfilter *message,
                  void *closure_data);
typedef void (*Cdb__TblPsfdb_Closure)
                 (const Cdb__TblPsfdb *message,
                  void *closure_data);
typedef void (*Cdb__TblIpsgSIpKey_Closure)
                 (const Cdb__TblIpsgSIpKey *message,
                  void *closure_data);
typedef void (*Cdb__TblIpsgSIp_Closure)
                 (const Cdb__TblIpsgSIp *message,
                  void *closure_data);
typedef void (*Cdb__TblIpsgSMacKey_Closure)
                 (const Cdb__TblIpsgSMacKey *message,
                  void *closure_data);
typedef void (*Cdb__TblIpsgSMac_Closure)
                 (const Cdb__TblIpsgSMac *message,
                  void *closure_data);
typedef void (*Cdb__TblIpsgFib_Closure)
                 (const Cdb__TblIpsgFib *message,
                  void *closure_data);
typedef void (*Cdb__TblBrgGlobal_Closure)
                 (const Cdb__TblBrgGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblMstpPortKey_Closure)
                 (const Cdb__TblMstpPortKey *message,
                  void *closure_data);
typedef void (*Cdb__TblMstpPort_Closure)
                 (const Cdb__TblMstpPort *message,
                  void *closure_data);
typedef void (*Cdb__TblMstiPort_Closure)
                 (const Cdb__TblMstiPort *message,
                  void *closure_data);
typedef void (*Cdb__TblMstpInstanceKey_Closure)
                 (const Cdb__TblMstpInstanceKey *message,
                  void *closure_data);
typedef void (*Cdb__TblMstpInstance_Closure)
                 (const Cdb__TblMstpInstance *message,
                  void *closure_data);
typedef void (*Cdb__TblMstpGlobal_Closure)
                 (const Cdb__TblMstpGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblLldpGlobal_Closure)
                 (const Cdb__TblLldpGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblLldpIfKey_Closure)
                 (const Cdb__TblLldpIfKey *message,
                  void *closure_data);
typedef void (*Cdb__TblLldpIf_Closure)
                 (const Cdb__TblLldpIf *message,
                  void *closure_data);
typedef void (*Cdb__TblMlag_Closure)
                 (const Cdb__TblMlag *message,
                  void *closure_data);
typedef void (*Cdb__TblMlagPeer_Closure)
                 (const Cdb__TblMlagPeer *message,
                  void *closure_data);
typedef void (*Cdb__TblMlagPortKey_Closure)
                 (const Cdb__TblMlagPortKey *message,
                  void *closure_data);
typedef void (*Cdb__TblMlagPort_Closure)
                 (const Cdb__TblMlagPort *message,
                  void *closure_data);
typedef void (*Cdb__TblIsolationKey_Closure)
                 (const Cdb__TblIsolationKey *message,
                  void *closure_data);
typedef void (*Cdb__TblIsolation_Closure)
                 (const Cdb__TblIsolation *message,
                  void *closure_data);
typedef void (*Cdb__TblRouteGlobal_Closure)
                 (const Cdb__TblRouteGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblBgpKey_Closure)
                 (const Cdb__TblBgpKey *message,
                  void *closure_data);
typedef void (*Cdb__TblBgp_Closure)
                 (const Cdb__TblBgp *message,
                  void *closure_data);
typedef void (*Cdb__TblBgpNetwork_Closure)
                 (const Cdb__TblBgpNetwork *message,
                  void *closure_data);
typedef void (*Cdb__TblBgpNeighbor_Closure)
                 (const Cdb__TblBgpNeighbor *message,
                  void *closure_data);
typedef void (*Cdb__TblOspfKey_Closure)
                 (const Cdb__TblOspfKey *message,
                  void *closure_data);
typedef void (*Cdb__TblOspf_Closure)
                 (const Cdb__TblOspf *message,
                  void *closure_data);
typedef void (*Cdb__TblOspf6Key_Closure)
                 (const Cdb__TblOspf6Key *message,
                  void *closure_data);
typedef void (*Cdb__TblOspf6_Closure)
                 (const Cdb__TblOspf6 *message,
                  void *closure_data);
typedef void (*Cdb__TblOspf6InterfaceKey_Closure)
                 (const Cdb__TblOspf6InterfaceKey *message,
                  void *closure_data);
typedef void (*Cdb__TblOspf6Interface_Closure)
                 (const Cdb__TblOspf6Interface *message,
                  void *closure_data);
typedef void (*Cdb__TblOspfNetwork_Closure)
                 (const Cdb__TblOspfNetwork *message,
                  void *closure_data);
typedef void (*Cdb__TblOspfAreaAuthKey_Closure)
                 (const Cdb__TblOspfAreaAuthKey *message,
                  void *closure_data);
typedef void (*Cdb__TblOspfAreaAuth_Closure)
                 (const Cdb__TblOspfAreaAuth *message,
                  void *closure_data);
typedef void (*Cdb__TblOspfAreaRange_Closure)
                 (const Cdb__TblOspfAreaRange *message,
                  void *closure_data);
typedef void (*Cdb__TblOspf6AreaRange_Closure)
                 (const Cdb__TblOspf6AreaRange *message,
                  void *closure_data);
typedef void (*Cdb__TblIprouteNode_Closure)
                 (const Cdb__TblIprouteNode *message,
                  void *closure_data);
typedef void (*Cdb__TblIprouteNodeAddFail_Closure)
                 (const Cdb__TblIprouteNodeAddFail *message,
                  void *closure_data);
typedef void (*Cdb__TblIprouteNodeAddFailCount_Closure)
                 (const Cdb__TblIprouteNodeAddFailCount *message,
                  void *closure_data);
typedef void (*Cdb__TblStaticRouteCfg_Closure)
                 (const Cdb__TblStaticRouteCfg *message,
                  void *closure_data);
typedef void (*Cdb__TblStaticRtCnt_Closure)
                 (const Cdb__TblStaticRtCnt *message,
                  void *closure_data);
typedef void (*Cdb__TblArpFibKey_Closure)
                 (const Cdb__TblArpFibKey *message,
                  void *closure_data);
typedef void (*Cdb__TblArpFib_Closure)
                 (const Cdb__TblArpFib *message,
                  void *closure_data);
typedef void (*Cdb__TblArpKey_Closure)
                 (const Cdb__TblArpKey *message,
                  void *closure_data);
typedef void (*Cdb__TblArp_Closure)
                 (const Cdb__TblArp *message,
                  void *closure_data);
typedef void (*Cdb__TblNexthop_Closure)
                 (const Cdb__TblNexthop *message,
                  void *closure_data);
typedef void (*Cdb__TblNexthopGroup_Closure)
                 (const Cdb__TblNexthopGroup *message,
                  void *closure_data);
typedef void (*Cdb__TblNexthopGroupRouted_Closure)
                 (const Cdb__TblNexthopGroupRouted *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaNexthop_Closure)
                 (const Cdb__TblFeaNexthop *message,
                  void *closure_data);
typedef void (*Cdb__TblMrt_Closure)
                 (const Cdb__TblMrt *message,
                  void *closure_data);
typedef void (*Cdb__TblIpmcGlobal_Closure)
                 (const Cdb__TblIpmcGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblIpmcIntfKey_Closure)
                 (const Cdb__TblIpmcIntfKey *message,
                  void *closure_data);
typedef void (*Cdb__TblIpmcIntf_Closure)
                 (const Cdb__TblIpmcIntf *message,
                  void *closure_data);
typedef void (*Cdb__TblPimStaticRpKey_Closure)
                 (const Cdb__TblPimStaticRpKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPimStaticRp_Closure)
                 (const Cdb__TblPimStaticRp *message,
                  void *closure_data);
typedef void (*Cdb__TblSysGlobal_Closure)
                 (const Cdb__TblSysGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblLagGlobal_Closure)
                 (const Cdb__TblLagGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblEcmpGlobal_Closure)
                 (const Cdb__TblEcmpGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblRrPrefixKey_Closure)
                 (const Cdb__TblRrPrefixKey *message,
                  void *closure_data);
typedef void (*Cdb__TblRrPrefix_Closure)
                 (const Cdb__TblRrPrefix *message,
                  void *closure_data);
typedef void (*Cdb__TblMemSummary_Closure)
                 (const Cdb__TblMemSummary *message,
                  void *closure_data);
typedef void (*Cdb__TblCpuMemHistory_Closure)
                 (const Cdb__TblCpuMemHistory *message,
                  void *closure_data);
typedef void (*Cdb__TblChsmDebug_Closure)
                 (const Cdb__TblChsmDebug *message,
                  void *closure_data);
typedef void (*Cdb__TblSwitchDebug_Closure)
                 (const Cdb__TblSwitchDebug *message,
                  void *closure_data);
typedef void (*Cdb__TblRouteDebug_Closure)
                 (const Cdb__TblRouteDebug *message,
                  void *closure_data);
typedef void (*Cdb__TblSsmDebug_Closure)
                 (const Cdb__TblSsmDebug *message,
                  void *closure_data);
typedef void (*Cdb__TblPtpDebug_Closure)
                 (const Cdb__TblPtpDebug *message,
                  void *closure_data);
typedef void (*Cdb__TblQuaggaDebug_Closure)
                 (const Cdb__TblQuaggaDebug *message,
                  void *closure_data);
typedef void (*Cdb__TblLsrvDebug_Closure)
                 (const Cdb__TblLsrvDebug *message,
                  void *closure_data);
typedef void (*Cdb__TblHsrvDebug_Closure)
                 (const Cdb__TblHsrvDebug *message,
                  void *closure_data);
typedef void (*Cdb__TblAppDebug_Closure)
                 (const Cdb__TblAppDebug *message,
                  void *closure_data);
typedef void (*Cdb__TblOpenflowDebug_Closure)
                 (const Cdb__TblOpenflowDebug *message,
                  void *closure_data);
typedef void (*Cdb__TblRifKey_Closure)
                 (const Cdb__TblRifKey *message,
                  void *closure_data);
typedef void (*Cdb__TblRif_Closure)
                 (const Cdb__TblRif *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaLagKey_Closure)
                 (const Cdb__TblFeaLagKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaLag_Closure)
                 (const Cdb__TblFeaLag *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaGlobal_Closure)
                 (const Cdb__TblFeaGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaAclTableKey_Closure)
                 (const Cdb__TblFeaAclTableKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaAclTable_Closure)
                 (const Cdb__TblFeaAclTable *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaAclKey_Closure)
                 (const Cdb__TblFeaAclKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaAcl_Closure)
                 (const Cdb__TblFeaAcl *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaFdb_Closure)
                 (const Cdb__TblFeaFdb *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaBrgIfKey_Closure)
                 (const Cdb__TblFeaBrgIfKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaBrgIf_Closure)
                 (const Cdb__TblFeaBrgIf *message,
                  void *closure_data);
typedef void (*Cdb__TblAclWormFilterKey_Closure)
                 (const Cdb__TblAclWormFilterKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAclWormFilter_Closure)
                 (const Cdb__TblAclWormFilter *message,
                  void *closure_data);
typedef void (*Cdb__TblAclConfigKey_Closure)
                 (const Cdb__TblAclConfigKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAclConfig_Closure)
                 (const Cdb__TblAclConfig *message,
                  void *closure_data);
typedef void (*Cdb__TblAceConfig_Closure)
                 (const Cdb__TblAceConfig *message,
                  void *closure_data);
typedef void (*Cdb__TblAclEntryKey_Closure)
                 (const Cdb__TblAclEntryKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAclEntry_Closure)
                 (const Cdb__TblAclEntry *message,
                  void *closure_data);
typedef void (*Cdb__TblAclEntryActionKey_Closure)
                 (const Cdb__TblAclEntryActionKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAclEntryAction_Closure)
                 (const Cdb__TblAclEntryAction *message,
                  void *closure_data);
typedef void (*Cdb__TblAclNexthopGroupKey_Closure)
                 (const Cdb__TblAclNexthopGroupKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAclNexthopGroup_Closure)
                 (const Cdb__TblAclNexthopGroup *message,
                  void *closure_data);
typedef void (*Cdb__TblAclNexthopKey_Closure)
                 (const Cdb__TblAclNexthopKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAclNexthop_Closure)
                 (const Cdb__TblAclNexthop *message,
                  void *closure_data);
typedef void (*Cdb__TblTimeRangeKey_Closure)
                 (const Cdb__TblTimeRangeKey *message,
                  void *closure_data);
typedef void (*Cdb__TblTimeRange_Closure)
                 (const Cdb__TblTimeRange *message,
                  void *closure_data);
typedef void (*Cdb__TblSshCfg_Closure)
                 (const Cdb__TblSshCfg *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpCfg_Closure)
                 (const Cdb__TblSnmpCfg *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpViewKey_Closure)
                 (const Cdb__TblSnmpViewKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpView_Closure)
                 (const Cdb__TblSnmpView *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpCommunityKey_Closure)
                 (const Cdb__TblSnmpCommunityKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpCommunity_Closure)
                 (const Cdb__TblSnmpCommunity *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpContextKey_Closure)
                 (const Cdb__TblSnmpContextKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpContext_Closure)
                 (const Cdb__TblSnmpContext *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpUsmUserKey_Closure)
                 (const Cdb__TblSnmpUsmUserKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpUsmUser_Closure)
                 (const Cdb__TblSnmpUsmUser *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpGroupUsmKey_Closure)
                 (const Cdb__TblSnmpGroupUsmKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpGroupUsm_Closure)
                 (const Cdb__TblSnmpGroupUsm *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpAccessUsmKey_Closure)
                 (const Cdb__TblSnmpAccessUsmKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpAccessUsm_Closure)
                 (const Cdb__TblSnmpAccessUsm *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpNotifyKey_Closure)
                 (const Cdb__TblSnmpNotifyKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpNotify_Closure)
                 (const Cdb__TblSnmpNotify *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpTargetAddrKey_Closure)
                 (const Cdb__TblSnmpTargetAddrKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpTargetAddr_Closure)
                 (const Cdb__TblSnmpTargetAddr *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpTargetParamsKey_Closure)
                 (const Cdb__TblSnmpTargetParamsKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpTargetParams_Closure)
                 (const Cdb__TblSnmpTargetParams *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpTrapKey_Closure)
                 (const Cdb__TblSnmpTrapKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpTrap_Closure)
                 (const Cdb__TblSnmpTrap *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpInformKey_Closure)
                 (const Cdb__TblSnmpInformKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpInform_Closure)
                 (const Cdb__TblSnmpInform *message,
                  void *closure_data);
typedef void (*Cdb__TblSnmpTrapMsg_Closure)
                 (const Cdb__TblSnmpTrapMsg *message,
                  void *closure_data);
typedef void (*Cdb__TblRmonEventKey_Closure)
                 (const Cdb__TblRmonEventKey *message,
                  void *closure_data);
typedef void (*Cdb__TblRmonEvent_Closure)
                 (const Cdb__TblRmonEvent *message,
                  void *closure_data);
typedef void (*Cdb__TblRmonAlarmKey_Closure)
                 (const Cdb__TblRmonAlarmKey *message,
                  void *closure_data);
typedef void (*Cdb__TblRmonAlarm_Closure)
                 (const Cdb__TblRmonAlarm *message,
                  void *closure_data);
typedef void (*Cdb__TblRmonEtherStatsKey_Closure)
                 (const Cdb__TblRmonEtherStatsKey *message,
                  void *closure_data);
typedef void (*Cdb__TblRmonEtherStats_Closure)
                 (const Cdb__TblRmonEtherStats *message,
                  void *closure_data);
typedef void (*Cdb__TblRmonHistoryKey_Closure)
                 (const Cdb__TblRmonHistoryKey *message,
                  void *closure_data);
typedef void (*Cdb__TblRmonHistory_Closure)
                 (const Cdb__TblRmonHistory *message,
                  void *closure_data);
typedef void (*Cdb__TblRmonStatsHistory_Closure)
                 (const Cdb__TblRmonStatsHistory *message,
                  void *closure_data);
typedef void (*Cdb__TblSyslogCfg_Closure)
                 (const Cdb__TblSyslogCfg *message,
                  void *closure_data);
typedef void (*Cdb__TblNtpServerKey_Closure)
                 (const Cdb__TblNtpServerKey *message,
                  void *closure_data);
typedef void (*Cdb__TblNtpServer_Closure)
                 (const Cdb__TblNtpServer *message,
                  void *closure_data);
typedef void (*Cdb__TblNtpAceKey_Closure)
                 (const Cdb__TblNtpAceKey *message,
                  void *closure_data);
typedef void (*Cdb__TblNtpAce_Closure)
                 (const Cdb__TblNtpAce *message,
                  void *closure_data);
typedef void (*Cdb__TblNtpKeyKey_Closure)
                 (const Cdb__TblNtpKeyKey *message,
                  void *closure_data);
typedef void (*Cdb__TblNtpKey_Closure)
                 (const Cdb__TblNtpKey *message,
                  void *closure_data);
typedef void (*Cdb__TblNtpCfg_Closure)
                 (const Cdb__TblNtpCfg *message,
                  void *closure_data);
typedef void (*Cdb__TblNtpIf_Closure)
                 (const Cdb__TblNtpIf *message,
                  void *closure_data);
typedef void (*Cdb__TblNtpSyncstatus_Closure)
                 (const Cdb__TblNtpSyncstatus *message,
                  void *closure_data);
typedef void (*Cdb__TblStaticDnsKey_Closure)
                 (const Cdb__TblStaticDnsKey *message,
                  void *closure_data);
typedef void (*Cdb__TblStaticDns_Closure)
                 (const Cdb__TblStaticDns *message,
                  void *closure_data);
typedef void (*Cdb__TblDynamicDnsDomainKey_Closure)
                 (const Cdb__TblDynamicDnsDomainKey *message,
                  void *closure_data);
typedef void (*Cdb__TblDynamicDnsDomain_Closure)
                 (const Cdb__TblDynamicDnsDomain *message,
                  void *closure_data);
typedef void (*Cdb__TblDynamicDnsServerKey_Closure)
                 (const Cdb__TblDynamicDnsServerKey *message,
                  void *closure_data);
typedef void (*Cdb__TblDynamicDnsServer_Closure)
                 (const Cdb__TblDynamicDnsServer *message,
                  void *closure_data);
typedef void (*Cdb__TblQosDomainKey_Closure)
                 (const Cdb__TblQosDomainKey *message,
                  void *closure_data);
typedef void (*Cdb__TblQosDomain_Closure)
                 (const Cdb__TblQosDomain *message,
                  void *closure_data);
typedef void (*Cdb__TblQosMplsDomainKey_Closure)
                 (const Cdb__TblQosMplsDomainKey *message,
                  void *closure_data);
typedef void (*Cdb__TblQosMplsDomain_Closure)
                 (const Cdb__TblQosMplsDomain *message,
                  void *closure_data);
typedef void (*Cdb__TblQosPolicerRes_Closure)
                 (const Cdb__TblQosPolicerRes *message,
                  void *closure_data);
typedef void (*Cdb__TblQosPolicerActionProfileKey_Closure)
                 (const Cdb__TblQosPolicerActionProfileKey *message,
                  void *closure_data);
typedef void (*Cdb__TblQosPolicerActionProfile_Closure)
                 (const Cdb__TblQosPolicerActionProfile *message,
                  void *closure_data);
typedef void (*Cdb__TblQosPolicerProfileKey_Closure)
                 (const Cdb__TblQosPolicerProfileKey *message,
                  void *closure_data);
typedef void (*Cdb__TblQosPolicerProfile_Closure)
                 (const Cdb__TblQosPolicerProfile *message,
                  void *closure_data);
typedef void (*Cdb__TblQosDropProfileKey_Closure)
                 (const Cdb__TblQosDropProfileKey *message,
                  void *closure_data);
typedef void (*Cdb__TblQosDropProfile_Closure)
                 (const Cdb__TblQosDropProfile *message,
                  void *closure_data);
typedef void (*Cdb__TblQosQueueShapeProfileKey_Closure)
                 (const Cdb__TblQosQueueShapeProfileKey *message,
                  void *closure_data);
typedef void (*Cdb__TblQosQueueShapeProfile_Closure)
                 (const Cdb__TblQosQueueShapeProfile *message,
                  void *closure_data);
typedef void (*Cdb__TblQosPortShapeProfileKey_Closure)
                 (const Cdb__TblQosPortShapeProfileKey *message,
                  void *closure_data);
typedef void (*Cdb__TblQosPortShapeProfile_Closure)
                 (const Cdb__TblQosPortShapeProfile *message,
                  void *closure_data);
typedef void (*Cdb__TblQosQueueSmartBufferKey_Closure)
                 (const Cdb__TblQosQueueSmartBufferKey *message,
                  void *closure_data);
typedef void (*Cdb__TblQosQueueSmartBuffer_Closure)
                 (const Cdb__TblQosQueueSmartBuffer *message,
                  void *closure_data);
typedef void (*Cdb__TblQosGlobal_Closure)
                 (const Cdb__TblQosGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblMirrorKey_Closure)
                 (const Cdb__TblMirrorKey *message,
                  void *closure_data);
typedef void (*Cdb__TblMirror_Closure)
                 (const Cdb__TblMirror *message,
                  void *closure_data);
typedef void (*Cdb__TblMirrorMacEscape_Closure)
                 (const Cdb__TblMirrorMacEscape *message,
                  void *closure_data);
typedef void (*Cdb__TblTapGroupIngress_Closure)
                 (const Cdb__TblTapGroupIngress *message,
                  void *closure_data);
typedef void (*Cdb__TblTapGroupIngressFlow_Closure)
                 (const Cdb__TblTapGroupIngressFlow *message,
                  void *closure_data);
typedef void (*Cdb__TblTapGroupEgress_Closure)
                 (const Cdb__TblTapGroupEgress *message,
                  void *closure_data);
typedef void (*Cdb__TblTapGroupKey_Closure)
                 (const Cdb__TblTapGroupKey *message,
                  void *closure_data);
typedef void (*Cdb__TblTapGroup_Closure)
                 (const Cdb__TblTapGroup *message,
                  void *closure_data);
typedef void (*Cdb__TblTapFiveTuple_Closure)
                 (const Cdb__TblTapFiveTuple *message,
                  void *closure_data);
typedef void (*Cdb__TblTapDpiGlobal_Closure)
                 (const Cdb__TblTapDpiGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblUserKey_Closure)
                 (const Cdb__TblUserKey *message,
                  void *closure_data);
typedef void (*Cdb__TblUser_Closure)
                 (const Cdb__TblUser *message,
                  void *closure_data);
typedef void (*Cdb__TblLoginRecordKey_Closure)
                 (const Cdb__TblLoginRecordKey *message,
                  void *closure_data);
typedef void (*Cdb__TblLoginRecord_Closure)
                 (const Cdb__TblLoginRecord *message,
                  void *closure_data);
typedef void (*Cdb__TblLoginSecurityGlb_Closure)
                 (const Cdb__TblLoginSecurityGlb *message,
                  void *closure_data);
typedef void (*Cdb__TblVtyKey_Closure)
                 (const Cdb__TblVtyKey *message,
                  void *closure_data);
typedef void (*Cdb__TblVty_Closure)
                 (const Cdb__TblVty *message,
                  void *closure_data);
typedef void (*Cdb__TblConsole_Closure)
                 (const Cdb__TblConsole *message,
                  void *closure_data);
typedef void (*Cdb__TblAuthenKey_Closure)
                 (const Cdb__TblAuthenKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAuthen_Closure)
                 (const Cdb__TblAuthen *message,
                  void *closure_data);
typedef void (*Cdb__TblLoginKey_Closure)
                 (const Cdb__TblLoginKey *message,
                  void *closure_data);
typedef void (*Cdb__TblLogin_Closure)
                 (const Cdb__TblLogin *message,
                  void *closure_data);
typedef void (*Cdb__TblRsaKey_Closure)
                 (const Cdb__TblRsaKey *message,
                  void *closure_data);
typedef void (*Cdb__TblRsa_Closure)
                 (const Cdb__TblRsa *message,
                  void *closure_data);
typedef void (*Cdb__TblOpenflow_Closure)
                 (const Cdb__TblOpenflow *message,
                  void *closure_data);
typedef void (*Cdb__TblCpuTrafficKey_Closure)
                 (const Cdb__TblCpuTrafficKey *message,
                  void *closure_data);
typedef void (*Cdb__TblCpuTraffic_Closure)
                 (const Cdb__TblCpuTraffic *message,
                  void *closure_data);
typedef void (*Cdb__TblCpuTrafficGroupKey_Closure)
                 (const Cdb__TblCpuTrafficGroupKey *message,
                  void *closure_data);
typedef void (*Cdb__TblCpuTrafficGroup_Closure)
                 (const Cdb__TblCpuTrafficGroup *message,
                  void *closure_data);
typedef void (*Cdb__TblCpuUtilizationKey_Closure)
                 (const Cdb__TblCpuUtilizationKey *message,
                  void *closure_data);
typedef void (*Cdb__TblCpuUtilization_Closure)
                 (const Cdb__TblCpuUtilization *message,
                  void *closure_data);
typedef void (*Cdb__TblCpuLimitKey_Closure)
                 (const Cdb__TblCpuLimitKey *message,
                  void *closure_data);
typedef void (*Cdb__TblCpuLimit_Closure)
                 (const Cdb__TblCpuLimit *message,
                  void *closure_data);
typedef void (*Cdb__TblDhcrelay_Closure)
                 (const Cdb__TblDhcrelay *message,
                  void *closure_data);
typedef void (*Cdb__TblDhcsrvgrpKey_Closure)
                 (const Cdb__TblDhcsrvgrpKey *message,
                  void *closure_data);
typedef void (*Cdb__TblDhcsrvgrp_Closure)
                 (const Cdb__TblDhcsrvgrp *message,
                  void *closure_data);
typedef void (*Cdb__TblDhcpDebug_Closure)
                 (const Cdb__TblDhcpDebug *message,
                  void *closure_data);
typedef void (*Cdb__TblDhclient_Closure)
                 (const Cdb__TblDhclient *message,
                  void *closure_data);
typedef void (*Cdb__TblDhcsnooping_Closure)
                 (const Cdb__TblDhcsnooping *message,
                  void *closure_data);
typedef void (*Cdb__TblDhcbinding_Closure)
                 (const Cdb__TblDhcbinding *message,
                  void *closure_data);
typedef void (*Cdb__TblIptablesPrevent_Closure)
                 (const Cdb__TblIptablesPrevent *message,
                  void *closure_data);
typedef void (*Cdb__TblErrdisableKey_Closure)
                 (const Cdb__TblErrdisableKey *message,
                  void *closure_data);
typedef void (*Cdb__TblErrdisable_Closure)
                 (const Cdb__TblErrdisable *message,
                  void *closure_data);
typedef void (*Cdb__TblNsPortForwarding_Closure)
                 (const Cdb__TblNsPortForwarding *message,
                  void *closure_data);
typedef void (*Cdb__TblLogGlobal_Closure)
                 (const Cdb__TblLogGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblLogKey_Closure)
                 (const Cdb__TblLogKey *message,
                  void *closure_data);
typedef void (*Cdb__TblLog_Closure)
                 (const Cdb__TblLog *message,
                  void *closure_data);
typedef void (*Cdb__TblSysLoad_Closure)
                 (const Cdb__TblSysLoad *message,
                  void *closure_data);
typedef void (*Cdb__TblCemKey_Closure)
                 (const Cdb__TblCemKey *message,
                  void *closure_data);
typedef void (*Cdb__TblCem_Closure)
                 (const Cdb__TblCem *message,
                  void *closure_data);
typedef void (*Cdb__TblClock_Closure)
                 (const Cdb__TblClock *message,
                  void *closure_data);
typedef void (*Cdb__TblTagSummerClock_Closure)
                 (const Cdb__TblTagSummerClock *message,
                  void *closure_data);
typedef void (*Cdb__TblPortStatsKey_Closure)
                 (const Cdb__TblPortStatsKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPortStats_Closure)
                 (const Cdb__TblPortStats *message,
                  void *closure_data);
typedef void (*Cdb__TblVlanStatsKey_Closure)
                 (const Cdb__TblVlanStatsKey *message,
                  void *closure_data);
typedef void (*Cdb__TblVlanStats_Closure)
                 (const Cdb__TblVlanStats *message,
                  void *closure_data);
typedef void (*Cdb__TblPortStatsRateKey_Closure)
                 (const Cdb__TblPortStatsRateKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPortStatsRate_Closure)
                 (const Cdb__TblPortStatsRate *message,
                  void *closure_data);
typedef void (*Cdb__TblAclqosIfKey_Closure)
                 (const Cdb__TblAclqosIfKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAclqosIf_Closure)
                 (const Cdb__TblAclqosIf *message,
                  void *closure_data);
typedef void (*Cdb__TblL2Action_Closure)
                 (const Cdb__TblL2Action *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaQosDropProfileKey_Closure)
                 (const Cdb__TblFeaQosDropProfileKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaQosDropProfile_Closure)
                 (const Cdb__TblFeaQosDropProfile *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaQosDomainKey_Closure)
                 (const Cdb__TblFeaQosDomainKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaQosDomain_Closure)
                 (const Cdb__TblFeaQosDomain *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaG8032Ring_Closure)
                 (const Cdb__TblFeaG8032Ring *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaG8032RingMcGroupKey_Closure)
                 (const Cdb__TblFeaG8032RingMcGroupKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaG8032RingMcGroup_Closure)
                 (const Cdb__TblFeaG8032RingMcGroup *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaQosQueueShapeProfileKey_Closure)
                 (const Cdb__TblFeaQosQueueShapeProfileKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaQosQueueShapeProfile_Closure)
                 (const Cdb__TblFeaQosQueueShapeProfile *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaQosPortShapeProfileKey_Closure)
                 (const Cdb__TblFeaQosPortShapeProfileKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaQosPortShapeProfile_Closure)
                 (const Cdb__TblFeaQosPortShapeProfile *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaPortPolicerApplyKey_Closure)
                 (const Cdb__TblFeaPortPolicerApplyKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaPortPolicerApply_Closure)
                 (const Cdb__TblFeaPortPolicerApply *message,
                  void *closure_data);
typedef void (*Cdb__TblAclqosIfStatsKey_Closure)
                 (const Cdb__TblAclqosIfStatsKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAclqosIfStats_Closure)
                 (const Cdb__TblAclqosIfStats *message,
                  void *closure_data);
typedef void (*Cdb__TblVersion_Closure)
                 (const Cdb__TblVersion *message,
                  void *closure_data);
typedef void (*Cdb__TblManageIf_Closure)
                 (const Cdb__TblManageIf *message,
                  void *closure_data);
typedef void (*Cdb__TblBootimage_Closure)
                 (const Cdb__TblBootimage *message,
                  void *closure_data);
typedef void (*Cdb__TblChassis_Closure)
                 (const Cdb__TblChassis *message,
                  void *closure_data);
typedef void (*Cdb__TblIfnameInfo_Closure)
                 (const Cdb__TblIfnameInfo *message,
                  void *closure_data);
typedef void (*Cdb__TblCardKey_Closure)
                 (const Cdb__TblCardKey *message,
                  void *closure_data);
typedef void (*Cdb__TblCard_Closure)
                 (const Cdb__TblCard *message,
                  void *closure_data);
typedef void (*Cdb__TblPortKey_Closure)
                 (const Cdb__TblPortKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPort_Closure)
                 (const Cdb__TblPort *message,
                  void *closure_data);
typedef void (*Cdb__TblFiberKey_Closure)
                 (const Cdb__TblFiberKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFiber_Closure)
                 (const Cdb__TblFiber *message,
                  void *closure_data);
typedef void (*Cdb__TblSysSpecKey_Closure)
                 (const Cdb__TblSysSpecKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSysSpec_Closure)
                 (const Cdb__TblSysSpec *message,
                  void *closure_data);
typedef void (*Cdb__TblFanKey_Closure)
                 (const Cdb__TblFanKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFan_Closure)
                 (const Cdb__TblFan *message,
                  void *closure_data);
typedef void (*Cdb__TblPsuKey_Closure)
                 (const Cdb__TblPsuKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPsu_Closure)
                 (const Cdb__TblPsu *message,
                  void *closure_data);
typedef void (*Cdb__TblLedKey_Closure)
                 (const Cdb__TblLedKey *message,
                  void *closure_data);
typedef void (*Cdb__TblLed_Closure)
                 (const Cdb__TblLed *message,
                  void *closure_data);
typedef void (*Cdb__TblSensorKey_Closure)
                 (const Cdb__TblSensorKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSensor_Closure)
                 (const Cdb__TblSensor *message,
                  void *closure_data);
typedef void (*Cdb__TblVcmKey_Closure)
                 (const Cdb__TblVcmKey *message,
                  void *closure_data);
typedef void (*Cdb__TblVcm_Closure)
                 (const Cdb__TblVcm *message,
                  void *closure_data);
typedef void (*Cdb__TblPoeKey_Closure)
                 (const Cdb__TblPoeKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPoe_Closure)
                 (const Cdb__TblPoe *message,
                  void *closure_data);
typedef void (*Cdb__TblRebootInfoKey_Closure)
                 (const Cdb__TblRebootInfoKey *message,
                  void *closure_data);
typedef void (*Cdb__TblRebootInfo_Closure)
                 (const Cdb__TblRebootInfo *message,
                  void *closure_data);
typedef void (*Cdb__TblErrdisableFlapKey_Closure)
                 (const Cdb__TblErrdisableFlapKey *message,
                  void *closure_data);
typedef void (*Cdb__TblErrdisableFlap_Closure)
                 (const Cdb__TblErrdisableFlap *message,
                  void *closure_data);
typedef void (*Cdb__TblOpmGlobal_Closure)
                 (const Cdb__TblOpmGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblErpsRing_Closure)
                 (const Cdb__TblErpsRing *message,
                  void *closure_data);
typedef void (*Cdb__TblErpsDomainKey_Closure)
                 (const Cdb__TblErpsDomainKey *message,
                  void *closure_data);
typedef void (*Cdb__TblErpsDomain_Closure)
                 (const Cdb__TblErpsDomain *message,
                  void *closure_data);
typedef void (*Cdb__TblOpmDebug_Closure)
                 (const Cdb__TblOpmDebug *message,
                  void *closure_data);
typedef void (*Cdb__TblPolicyMapConfigKey_Closure)
                 (const Cdb__TblPolicyMapConfigKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPolicyMapConfig_Closure)
                 (const Cdb__TblPolicyMapConfig *message,
                  void *closure_data);
typedef void (*Cdb__TblClassMapConfigKey_Closure)
                 (const Cdb__TblClassMapConfigKey *message,
                  void *closure_data);
typedef void (*Cdb__TblClassMapConfig_Closure)
                 (const Cdb__TblClassMapConfig *message,
                  void *closure_data);
typedef void (*Cdb__TblClassInPolicyConfig_Closure)
                 (const Cdb__TblClassInPolicyConfig *message,
                  void *closure_data);
typedef void (*Cdb__TblAclInClassConfig_Closure)
                 (const Cdb__TblAclInClassConfig *message,
                  void *closure_data);
typedef void (*Cdb__TblClassMapActionConfig_Closure)
                 (const Cdb__TblClassMapActionConfig *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaAclPolicyActionKey_Closure)
                 (const Cdb__TblFeaAclPolicyActionKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaAclPolicyAction_Closure)
                 (const Cdb__TblFeaAclPolicyAction *message,
                  void *closure_data);
typedef void (*Cdb__TblIgspGlobal_Closure)
                 (const Cdb__TblIgspGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblIgspIntfKey_Closure)
                 (const Cdb__TblIgspIntfKey *message,
                  void *closure_data);
typedef void (*Cdb__TblIgspIntf_Closure)
                 (const Cdb__TblIgspIntf *message,
                  void *closure_data);
typedef void (*Cdb__TblIgspGroup_Closure)
                 (const Cdb__TblIgspGroup *message,
                  void *closure_data);
typedef void (*Cdb__TblAuthCfg_Closure)
                 (const Cdb__TblAuthCfg *message,
                  void *closure_data);
typedef void (*Cdb__TblAuthServer_Closure)
                 (const Cdb__TblAuthServer *message,
                  void *closure_data);
typedef void (*Cdb__TblAuthSession_Closure)
                 (const Cdb__TblAuthSession *message,
                  void *closure_data);
typedef void (*Cdb__TblAuthdDebug_Closure)
                 (const Cdb__TblAuthdDebug *message,
                  void *closure_data);
typedef void (*Cdb__TblDot1xGlobal_Closure)
                 (const Cdb__TblDot1xGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblDot1xPortKey_Closure)
                 (const Cdb__TblDot1xPortKey *message,
                  void *closure_data);
typedef void (*Cdb__TblDot1xPort_Closure)
                 (const Cdb__TblDot1xPort *message,
                  void *closure_data);
typedef void (*Cdb__TblDot1xRadius_Closure)
                 (const Cdb__TblDot1xRadius *message,
                  void *closure_data);
typedef void (*Cdb__TblDot1xMac_Closure)
                 (const Cdb__TblDot1xMac *message,
                  void *closure_data);
typedef void (*Cdb__TblEnableKey_Closure)
                 (const Cdb__TblEnableKey *message,
                  void *closure_data);
typedef void (*Cdb__TblEnable_Closure)
                 (const Cdb__TblEnable *message,
                  void *closure_data);
typedef void (*Cdb__TblChip_Closure)
                 (const Cdb__TblChip *message,
                  void *closure_data);
typedef void (*Cdb__TblClearAclPolicy_Closure)
                 (const Cdb__TblClearAclPolicy *message,
                  void *closure_data);
typedef void (*Cdb__TblAuthorKey_Closure)
                 (const Cdb__TblAuthorKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAuthor_Closure)
                 (const Cdb__TblAuthor *message,
                  void *closure_data);
typedef void (*Cdb__TblAccountKey_Closure)
                 (const Cdb__TblAccountKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAccount_Closure)
                 (const Cdb__TblAccount *message,
                  void *closure_data);
typedef void (*Cdb__TblAccountcmdKey_Closure)
                 (const Cdb__TblAccountcmdKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAccountcmd_Closure)
                 (const Cdb__TblAccountcmd *message,
                  void *closure_data);
typedef void (*Cdb__TblVlanclassRuleKey_Closure)
                 (const Cdb__TblVlanclassRuleKey *message,
                  void *closure_data);
typedef void (*Cdb__TblVlanclassRule_Closure)
                 (const Cdb__TblVlanclassRule *message,
                  void *closure_data);
typedef void (*Cdb__TblVlanclassGroupKey_Closure)
                 (const Cdb__TblVlanclassGroupKey *message,
                  void *closure_data);
typedef void (*Cdb__TblVlanclassGroup_Closure)
                 (const Cdb__TblVlanclassGroup *message,
                  void *closure_data);
typedef void (*Cdb__TblAclL4PortRangeKey_Closure)
                 (const Cdb__TblAclL4PortRangeKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAclL4PortRange_Closure)
                 (const Cdb__TblAclL4PortRange *message,
                  void *closure_data);
typedef void (*Cdb__TblAclUdfGroupKey_Closure)
                 (const Cdb__TblAclUdfGroupKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAclUdfGroup_Closure)
                 (const Cdb__TblAclUdfGroup *message,
                  void *closure_data);
typedef void (*Cdb__TblAclUdfEntryKey_Closure)
                 (const Cdb__TblAclUdfEntryKey *message,
                  void *closure_data);
typedef void (*Cdb__TblAclUdfEntry_Closure)
                 (const Cdb__TblAclUdfEntry *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaPcap_Closure)
                 (const Cdb__TblFeaPcap *message,
                  void *closure_data);
typedef void (*Cdb__TblControllerKey_Closure)
                 (const Cdb__TblControllerKey *message,
                  void *closure_data);
typedef void (*Cdb__TblController_Closure)
                 (const Cdb__TblController *message,
                  void *closure_data);
typedef void (*Cdb__TblCpuPackets_Closure)
                 (const Cdb__TblCpuPackets *message,
                  void *closure_data);
typedef void (*Cdb__TblNsRoute_Closure)
                 (const Cdb__TblNsRoute *message,
                  void *closure_data);
typedef void (*Cdb__TblNsRouteIpKey_Closure)
                 (const Cdb__TblNsRouteIpKey *message,
                  void *closure_data);
typedef void (*Cdb__TblNsRouteIp_Closure)
                 (const Cdb__TblNsRouteIp *message,
                  void *closure_data);
typedef void (*Cdb__TblOpenflowInterfaceKey_Closure)
                 (const Cdb__TblOpenflowInterfaceKey *message,
                  void *closure_data);
typedef void (*Cdb__TblOpenflowInterface_Closure)
                 (const Cdb__TblOpenflowInterface *message,
                  void *closure_data);
typedef void (*Cdb__TblOpenflowManager_Closure)
                 (const Cdb__TblOpenflowManager *message,
                  void *closure_data);
typedef void (*Cdb__TblPtpGlobal_Closure)
                 (const Cdb__TblPtpGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblPtpPortKey_Closure)
                 (const Cdb__TblPtpPortKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPtpPort_Closure)
                 (const Cdb__TblPtpPort *message,
                  void *closure_data);
typedef void (*Cdb__TblPtpForeign_Closure)
                 (const Cdb__TblPtpForeign *message,
                  void *closure_data);
typedef void (*Cdb__TblPtpResidenceTimeCache_Closure)
                 (const Cdb__TblPtpResidenceTimeCache *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaPtpGlobal_Closure)
                 (const Cdb__TblFeaPtpGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaPtpTsKey_Closure)
                 (const Cdb__TblFeaPtpTsKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaPtpTs_Closure)
                 (const Cdb__TblFeaPtpTs *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaTime_Closure)
                 (const Cdb__TblFeaTime *message,
                  void *closure_data);
typedef void (*Cdb__TblBhmGlobal_Closure)
                 (const Cdb__TblBhmGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblBhmModuleKey_Closure)
                 (const Cdb__TblBhmModuleKey *message,
                  void *closure_data);
typedef void (*Cdb__TblBhmModule_Closure)
                 (const Cdb__TblBhmModule *message,
                  void *closure_data);
typedef void (*Cdb__TblOpenflowTunnelInterfaceKey_Closure)
                 (const Cdb__TblOpenflowTunnelInterfaceKey *message,
                  void *closure_data);
typedef void (*Cdb__TblOpenflowTunnelInterface_Closure)
                 (const Cdb__TblOpenflowTunnelInterface *message,
                  void *closure_data);
typedef void (*Cdb__TblOpenflowTunnelLocalIpCntKey_Closure)
                 (const Cdb__TblOpenflowTunnelLocalIpCntKey *message,
                  void *closure_data);
typedef void (*Cdb__TblOpenflowTunnelLocalIpCnt_Closure)
                 (const Cdb__TblOpenflowTunnelLocalIpCnt *message,
                  void *closure_data);
typedef void (*Cdb__TblInbandSnat_Closure)
                 (const Cdb__TblInbandSnat *message,
                  void *closure_data);
typedef void (*Cdb__TblArpinspKey_Closure)
                 (const Cdb__TblArpinspKey *message,
                  void *closure_data);
typedef void (*Cdb__TblArpinsp_Closure)
                 (const Cdb__TblArpinsp *message,
                  void *closure_data);
typedef void (*Cdb__TblArpaclConfigKey_Closure)
                 (const Cdb__TblArpaclConfigKey *message,
                  void *closure_data);
typedef void (*Cdb__TblArpaclConfig_Closure)
                 (const Cdb__TblArpaclConfig *message,
                  void *closure_data);
typedef void (*Cdb__TblArpaceConfig_Closure)
                 (const Cdb__TblArpaceConfig *message,
                  void *closure_data);
typedef void (*Cdb__TblCoppCfg_Closure)
                 (const Cdb__TblCoppCfg *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaCoppTrapGroupKey_Closure)
                 (const Cdb__TblFeaCoppTrapGroupKey *message,
                  void *closure_data);
typedef void (*Cdb__TblFeaCoppTrapGroup_Closure)
                 (const Cdb__TblFeaCoppTrapGroup *message,
                  void *closure_data);
typedef void (*Cdb__TblSflowGlobal_Closure)
                 (const Cdb__TblSflowGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblSflowCollector_Closure)
                 (const Cdb__TblSflowCollector *message,
                  void *closure_data);
typedef void (*Cdb__TblSflowCounterPortKey_Closure)
                 (const Cdb__TblSflowCounterPortKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSflowCounterPort_Closure)
                 (const Cdb__TblSflowCounterPort *message,
                  void *closure_data);
typedef void (*Cdb__TblVrrpGlobal_Closure)
                 (const Cdb__TblVrrpGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblVrrpVmacKey_Closure)
                 (const Cdb__TblVrrpVmacKey *message,
                  void *closure_data);
typedef void (*Cdb__TblVrrpVmac_Closure)
                 (const Cdb__TblVrrpVmac *message,
                  void *closure_data);
typedef void (*Cdb__TblVrrpVip_Closure)
                 (const Cdb__TblVrrpVip *message,
                  void *closure_data);
typedef void (*Cdb__TblVrrpSessionKey_Closure)
                 (const Cdb__TblVrrpSessionKey *message,
                  void *closure_data);
typedef void (*Cdb__TblVrrpSession_Closure)
                 (const Cdb__TblVrrpSession *message,
                  void *closure_data);
typedef void (*Cdb__TblSsmGlobal_Closure)
                 (const Cdb__TblSsmGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblSsmPortKey_Closure)
                 (const Cdb__TblSsmPortKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSsmPort_Closure)
                 (const Cdb__TblSsmPort *message,
                  void *closure_data);
typedef void (*Cdb__TblIpslaGlobal_Closure)
                 (const Cdb__TblIpslaGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblIpslaEntryKey_Closure)
                 (const Cdb__TblIpslaEntryKey *message,
                  void *closure_data);
typedef void (*Cdb__TblIpslaEntry_Closure)
                 (const Cdb__TblIpslaEntry *message,
                  void *closure_data);
typedef void (*Cdb__TblIpslaPacketStats_Closure)
                 (const Cdb__TblIpslaPacketStats *message,
                  void *closure_data);
typedef void (*Cdb__TblIpslaTestStats_Closure)
                 (const Cdb__TblIpslaTestStats *message,
                  void *closure_data);
typedef void (*Cdb__TblTrackGlobal_Closure)
                 (const Cdb__TblTrackGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblTrackObjectKey_Closure)
                 (const Cdb__TblTrackObjectKey *message,
                  void *closure_data);
typedef void (*Cdb__TblTrackObject_Closure)
                 (const Cdb__TblTrackObject *message,
                  void *closure_data);
typedef void (*Cdb__TblControllerAttr_Closure)
                 (const Cdb__TblControllerAttr *message,
                  void *closure_data);
typedef void (*Cdb__TblOamSessionKey_Closure)
                 (const Cdb__TblOamSessionKey *message,
                  void *closure_data);
typedef void (*Cdb__TblOamSession_Closure)
                 (const Cdb__TblOamSession *message,
                  void *closure_data);
typedef void (*Cdb__TblOamSessionUploadKey_Closure)
                 (const Cdb__TblOamSessionUploadKey *message,
                  void *closure_data);
typedef void (*Cdb__TblOamSessionUpload_Closure)
                 (const Cdb__TblOamSessionUpload *message,
                  void *closure_data);
typedef void (*Cdb__TblLspApsGroupKey_Closure)
                 (const Cdb__TblLspApsGroupKey *message,
                  void *closure_data);
typedef void (*Cdb__TblLspApsGroup_Closure)
                 (const Cdb__TblLspApsGroup *message,
                  void *closure_data);
typedef void (*Cdb__TblPwApsGroupKey_Closure)
                 (const Cdb__TblPwApsGroupKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPwApsGroup_Closure)
                 (const Cdb__TblPwApsGroup *message,
                  void *closure_data);
typedef void (*Cdb__TblLspPeKey_Closure)
                 (const Cdb__TblLspPeKey *message,
                  void *closure_data);
typedef void (*Cdb__TblLspPe_Closure)
                 (const Cdb__TblLspPe *message,
                  void *closure_data);
typedef void (*Cdb__TblLspPKey_Closure)
                 (const Cdb__TblLspPKey *message,
                  void *closure_data);
typedef void (*Cdb__TblLspP_Closure)
                 (const Cdb__TblLspP *message,
                  void *closure_data);
typedef void (*Cdb__TblPwTpeKey_Closure)
                 (const Cdb__TblPwTpeKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPwTpe_Closure)
                 (const Cdb__TblPwTpe *message,
                  void *closure_data);
typedef void (*Cdb__TblSectionOamKey_Closure)
                 (const Cdb__TblSectionOamKey *message,
                  void *closure_data);
typedef void (*Cdb__TblSectionOam_Closure)
                 (const Cdb__TblSectionOam *message,
                  void *closure_data);
typedef void (*Cdb__TblOamFlowInfoKey_Closure)
                 (const Cdb__TblOamFlowInfoKey *message,
                  void *closure_data);
typedef void (*Cdb__TblOamFlowInfo_Closure)
                 (const Cdb__TblOamFlowInfo *message,
                  void *closure_data);
typedef void (*Cdb__TblTpoamGlobal_Closure)
                 (const Cdb__TblTpoamGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblTpoamExecGlobal_Closure)
                 (const Cdb__TblTpoamExecGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblApsGroupInfoKey_Closure)
                 (const Cdb__TblApsGroupInfoKey *message,
                  void *closure_data);
typedef void (*Cdb__TblApsGroupInfo_Closure)
                 (const Cdb__TblApsGroupInfo *message,
                  void *closure_data);
typedef void (*Cdb__TblOamInlabelInfoKey_Closure)
                 (const Cdb__TblOamInlabelInfoKey *message,
                  void *closure_data);
typedef void (*Cdb__TblOamInlabelInfo_Closure)
                 (const Cdb__TblOamInlabelInfo *message,
                  void *closure_data);
typedef void (*Cdb__TblOamMplsApsCheckKey_Closure)
                 (const Cdb__TblOamMplsApsCheckKey *message,
                  void *closure_data);
typedef void (*Cdb__TblOamMplsApsCheck_Closure)
                 (const Cdb__TblOamMplsApsCheck *message,
                  void *closure_data);
typedef void (*Cdb__TblVlanMappingTableKey_Closure)
                 (const Cdb__TblVlanMappingTableKey *message,
                  void *closure_data);
typedef void (*Cdb__TblVlanMappingTable_Closure)
                 (const Cdb__TblVlanMappingTable *message,
                  void *closure_data);
typedef void (*Cdb__TblVlanMappingEntry_Closure)
                 (const Cdb__TblVlanMappingEntry *message,
                  void *closure_data);
typedef void (*Cdb__TblEgressMappingEntry_Closure)
                 (const Cdb__TblEgressMappingEntry *message,
                  void *closure_data);
typedef void (*Cdb__TblVlanGroupKey_Closure)
                 (const Cdb__TblVlanGroupKey *message,
                  void *closure_data);
typedef void (*Cdb__TblVlanGroup_Closure)
                 (const Cdb__TblVlanGroup *message,
                  void *closure_data);
typedef void (*Cdb__TblEvcEntryKey_Closure)
                 (const Cdb__TblEvcEntryKey *message,
                  void *closure_data);
typedef void (*Cdb__TblEvcEntry_Closure)
                 (const Cdb__TblEvcEntry *message,
                  void *closure_data);
typedef void (*Cdb__TblMappedVlanInfo_Closure)
                 (const Cdb__TblMappedVlanInfo *message,
                  void *closure_data);
typedef void (*Cdb__TblL2ProtocolKey_Closure)
                 (const Cdb__TblL2ProtocolKey *message,
                  void *closure_data);
typedef void (*Cdb__TblL2Protocol_Closure)
                 (const Cdb__TblL2Protocol *message,
                  void *closure_data);
typedef void (*Cdb__TblNdFib_Closure)
                 (const Cdb__TblNdFib *message,
                  void *closure_data);
typedef void (*Cdb__TblNdStats_Closure)
                 (const Cdb__TblNdStats *message,
                  void *closure_data);
typedef void (*Cdb__TblCpuMirrorGlobal_Closure)
                 (const Cdb__TblCpuMirrorGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblTapServer_Closure)
                 (const Cdb__TblTapServer *message,
                  void *closure_data);
typedef void (*Cdb__TblDhcpv6Debug_Closure)
                 (const Cdb__TblDhcpv6Debug *message,
                  void *closure_data);
typedef void (*Cdb__TblL2edit_Closure)
                 (const Cdb__TblL2edit *message,
                  void *closure_data);
typedef void (*Cdb__TblHashFieldProfileKey_Closure)
                 (const Cdb__TblHashFieldProfileKey *message,
                  void *closure_data);
typedef void (*Cdb__TblHashFieldProfile_Closure)
                 (const Cdb__TblHashFieldProfile *message,
                  void *closure_data);
typedef void (*Cdb__TblHashValueProfileKey_Closure)
                 (const Cdb__TblHashValueProfileKey *message,
                  void *closure_data);
typedef void (*Cdb__TblHashValueProfile_Closure)
                 (const Cdb__TblHashValueProfile *message,
                  void *closure_data);
typedef void (*Cdb__TblHashValueGlobal_Closure)
                 (const Cdb__TblHashValueGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblNatGlobal_Closure)
                 (const Cdb__TblNatGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblNatPoolKey_Closure)
                 (const Cdb__TblNatPoolKey *message,
                  void *closure_data);
typedef void (*Cdb__TblNatPool_Closure)
                 (const Cdb__TblNatPool *message,
                  void *closure_data);
typedef void (*Cdb__TblNatRule_Closure)
                 (const Cdb__TblNatRule *message,
                  void *closure_data);
typedef void (*Cdb__TblNatSession_Closure)
                 (const Cdb__TblNatSession *message,
                  void *closure_data);
typedef void (*Cdb__TblNatSessionLimit_Closure)
                 (const Cdb__TblNatSessionLimit *message,
                  void *closure_data);
typedef void (*Cdb__TblNatProxyArp_Closure)
                 (const Cdb__TblNatProxyArp *message,
                  void *closure_data);
typedef void (*Cdb__TblNatRtifInsideKey_Closure)
                 (const Cdb__TblNatRtifInsideKey *message,
                  void *closure_data);
typedef void (*Cdb__TblNatRtifInside_Closure)
                 (const Cdb__TblNatRtifInside *message,
                  void *closure_data);
typedef void (*Cdb__TblNatRtifOutsideKey_Closure)
                 (const Cdb__TblNatRtifOutsideKey *message,
                  void *closure_data);
typedef void (*Cdb__TblNatRtifOutside_Closure)
                 (const Cdb__TblNatRtifOutside *message,
                  void *closure_data);
typedef void (*Cdb__TblG8032RingKey_Closure)
                 (const Cdb__TblG8032RingKey *message,
                  void *closure_data);
typedef void (*Cdb__TblG8032Ring_Closure)
                 (const Cdb__TblG8032Ring *message,
                  void *closure_data);
typedef void (*Cdb__TblCfmGlobal_Closure)
                 (const Cdb__TblCfmGlobal *message,
                  void *closure_data);
typedef void (*Cdb__TblCfmMdKey_Closure)
                 (const Cdb__TblCfmMdKey *message,
                  void *closure_data);
typedef void (*Cdb__TblCfmMd_Closure)
                 (const Cdb__TblCfmMd *message,
                  void *closure_data);
typedef void (*Cdb__TblCfmMa_Closure)
                 (const Cdb__TblCfmMa *message,
                  void *closure_data);
typedef void (*Cdb__TblCfmMaidKey_Closure)
                 (const Cdb__TblCfmMaidKey *message,
                  void *closure_data);
typedef void (*Cdb__TblCfmMaid_Closure)
                 (const Cdb__TblCfmMaid *message,
                  void *closure_data);
typedef void (*Cdb__TblCfmLmep_Closure)
                 (const Cdb__TblCfmLmep *message,
                  void *closure_data);
typedef void (*Cdb__TblCfmRmep_Closure)
                 (const Cdb__TblCfmRmep *message,
                  void *closure_data);
typedef void (*Cdb__TblPimSmKey_Closure)
                 (const Cdb__TblPimSmKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPimSm_Closure)
                 (const Cdb__TblPimSm *message,
                  void *closure_data);
typedef void (*Cdb__TblPimSmBsrKey_Closure)
                 (const Cdb__TblPimSmBsrKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPimSmBsr_Closure)
                 (const Cdb__TblPimSmBsr *message,
                  void *closure_data);
typedef void (*Cdb__TblPimSmRpKey_Closure)
                 (const Cdb__TblPimSmRpKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPimSmRp_Closure)
                 (const Cdb__TblPimSmRp *message,
                  void *closure_data);
typedef void (*Cdb__TblPimSmRpGpKey_Closure)
                 (const Cdb__TblPimSmRpGpKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPimSmRpGp_Closure)
                 (const Cdb__TblPimSmRpGp *message,
                  void *closure_data);
typedef void (*Cdb__TblPimDmKey_Closure)
                 (const Cdb__TblPimDmKey *message,
                  void *closure_data);
typedef void (*Cdb__TblPimDm_Closure)
                 (const Cdb__TblPimDm *message,
                  void *closure_data);
typedef void (*Cdb__TblIgmpIntfKey_Closure)
                 (const Cdb__TblIgmpIntfKey *message,
                  void *closure_data);
typedef void (*Cdb__TblIgmpIntf_Closure)
                 (const Cdb__TblIgmpIntf *message,
                  void *closure_data);
typedef void (*Cdb__TblRipKey_Closure)
                 (const Cdb__TblRipKey *message,
                  void *closure_data);
typedef void (*Cdb__TblRip_Closure)
                 (const Cdb__TblRip *message,
                  void *closure_data);
typedef void (*Cdb__TblRipngKey_Closure)
                 (const Cdb__TblRipngKey *message,
                  void *closure_data);
typedef void (*Cdb__TblRipng_Closure)
                 (const Cdb__TblRipng *message,
                  void *closure_data);
typedef void (*Cdb__TblRipNetwork_Closure)
                 (const Cdb__TblRipNetwork *message,
                  void *closure_data);
typedef void (*Cdb__TblRipngNetwork_Closure)
                 (const Cdb__TblRipngNetwork *message,
                  void *closure_data);
typedef void (*Cdb__TblRipNeighbor_Closure)
                 (const Cdb__TblRipNeighbor *message,
                  void *closure_data);
typedef void (*Cdb__TblRipPassiveIfKey_Closure)
                 (const Cdb__TblRipPassiveIfKey *message,
                  void *closure_data);
typedef void (*Cdb__TblRipPassiveIf_Closure)
                 (const Cdb__TblRipPassiveIf *message,
                  void *closure_data);
typedef void (*Cdb__TblRipngPassiveIfKey_Closure)
                 (const Cdb__TblRipngPassiveIfKey *message,
                  void *closure_data);
typedef void (*Cdb__TblRipngPassiveIf_Closure)
                 (const Cdb__TblRipngPassiveIf *message,
                  void *closure_data);
typedef void (*Cdb__TblOspfAreaStubKey_Closure)
                 (const Cdb__TblOspfAreaStubKey *message,
                  void *closure_data);
typedef void (*Cdb__TblOspfAreaStub_Closure)
                 (const Cdb__TblOspfAreaStub *message,
                  void *closure_data);
typedef void (*Cdb__TblOspf6AreaStubKey_Closure)
                 (const Cdb__TblOspf6AreaStubKey *message,
                  void *closure_data);
typedef void (*Cdb__TblOspf6AreaStub_Closure)
                 (const Cdb__TblOspf6AreaStub *message,
                  void *closure_data);
typedef void (*Cdb__TblOspfAreaNssaKey_Closure)
                 (const Cdb__TblOspfAreaNssaKey *message,
                  void *closure_data);
typedef void (*Cdb__TblOspfAreaNssa_Closure)
                 (const Cdb__TblOspfAreaNssa *message,
                  void *closure_data);
typedef void (*Cdb__TblOspfAreaVlink_Closure)
                 (const Cdb__TblOspfAreaVlink *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor cdb__tbl_interface_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_interface__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_route_if_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_route_if__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_kernel_if_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_kernel_if__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_port_if_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_port_if__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vlan_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vlan__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pvlan_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pvlan__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fdb__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mcfdb__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_macfilter_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_macfilter__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_psfdb__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ipsg_s_ip_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ipsg_s_ip__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ipsg_s_mac_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ipsg_s_mac__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ipsg_fib__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_brg_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mstp_port_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mstp_port__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_msti_port__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mstp_instance_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mstp_instance__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mstp_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_lldp_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_lldp_if_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_lldp_if__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mlag__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mlag_peer__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mlag_port_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mlag_port__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_isolation_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_isolation__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_route_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_bgp_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_bgp__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_bgp_network__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_bgp_neighbor__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf6_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf6__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf6_interface_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf6_interface__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf_network__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf_area_auth_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf_area_auth__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf_area_range__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf6_area_range__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_iproute_node__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_iproute_node_add_fail__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_iproute_node_add_fail_count__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_static_route_cfg__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_static_rt_cnt__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_arp_fib_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_arp_fib__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_arp_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_arp__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nexthop__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nexthop_group__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nexthop_group_routed__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_nexthop__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mrt__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ipmc_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ipmc_intf_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ipmc_intf__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pim_static_rp_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pim_static_rp__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_sys_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_lag_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ecmp_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rr_prefix_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rr_prefix__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mem_summary__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cpu_mem_history__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_chsm_debug__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_switch_debug__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_route_debug__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ssm_debug__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ptp_debug__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_quagga_debug__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_lsrv_debug__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_hsrv_debug__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_app_debug__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_openflow_debug__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rif_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rif__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_lag_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_lag__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_acl_table_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_acl_table__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_acl_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_acl__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_fdb__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_brg_if_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_brg_if__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_worm_filter_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_worm_filter__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_config_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_config__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ace_config__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_entry_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_entry__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_entry_action_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_entry_action__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_nexthop_group_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_nexthop_group__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_nexthop_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_nexthop__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_time_range_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_time_range__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ssh_cfg__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_cfg__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_view_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_view__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_community_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_community__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_context_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_context__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_usm_user_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_usm_user__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_group_usm_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_group_usm__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_access_usm_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_access_usm__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_notify_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_notify__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_target_addr_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_target_addr__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_target_params_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_target_params__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_trap_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_trap__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_inform_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_inform__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_snmp_trap_msg__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rmon_event_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rmon_event__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rmon_alarm_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rmon_alarm__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rmon_ether_stats_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rmon_ether_stats__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rmon_history_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rmon_history__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rmon_stats_history__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_syslog_cfg__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ntp_server_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ntp_server__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ntp_ace_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ntp_ace__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ntp_key_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ntp_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ntp_cfg__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ntp_if__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ntp_syncstatus__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_static_dns_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_static_dns__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dynamic_dns_domain_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dynamic_dns_domain__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dynamic_dns_server_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dynamic_dns_server__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_domain_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_domain__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_mpls_domain_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_mpls_domain__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_policer_res__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_policer_action_profile_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_policer_action_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_policer_profile_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_policer_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_drop_profile_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_drop_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_queue_shape_profile_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_queue_shape_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_port_shape_profile_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_port_shape_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_queue_smart_buffer_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_queue_smart_buffer__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_qos_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mirror_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mirror__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mirror_mac_escape__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_tap_group_ingress__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_tap_group_ingress_flow__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_tap_group_egress__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_tap_group_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_tap_group__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_tap_five_tuple__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_tap_dpi_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_user_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_user__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_login_record_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_login_record__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_login_security_glb__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vty_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vty__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_console__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_authen_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_authen__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_login_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_login__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rsa_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rsa__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_openflow__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cpu_traffic_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cpu_traffic__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cpu_traffic_group_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cpu_traffic_group__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cpu_utilization_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cpu_utilization__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cpu_limit_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cpu_limit__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dhcrelay__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dhcsrvgrp_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dhcsrvgrp__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dhcp_debug__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dhclient__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dhcsnooping__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dhcbinding__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_iptables_prevent__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_errdisable_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_errdisable__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ns_port_forwarding__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_log_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_log_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_log__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_sys_load__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cem_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cem__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_clock__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_tag_summer_clock__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_port_stats_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_port_stats__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vlan_stats_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vlan_stats__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_port_stats_rate_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_port_stats_rate__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_aclqos_if_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_aclqos_if__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_l2_action__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_qos_drop_profile_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_qos_drop_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_qos_domain_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_qos_domain__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_g8032_ring__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_g8032_ring_mc_group_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_g8032_ring_mc_group__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_qos_queue_shape_profile_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_qos_queue_shape_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_qos_port_shape_profile_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_qos_port_shape_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_port_policer_apply_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_port_policer_apply__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_aclqos_if_stats_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_aclqos_if_stats__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_version__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_manage_if__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_bootimage__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_chassis__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ifname_info__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_card_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_card__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_port_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_port__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fiber_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fiber__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_sys_spec_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_sys_spec__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fan_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fan__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_psu_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_psu__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_led_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_led__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_sensor_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_sensor__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vcm_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vcm__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_poe_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_poe__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_reboot_info_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_reboot_info__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_errdisable_flap_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_errdisable_flap__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_opm_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_erps_ring__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_erps_domain_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_erps_domain__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_opm_debug__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_policy_map_config_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_policy_map_config__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_class_map_config_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_class_map_config__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_class_in_policy_config__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_in_class_config__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_class_map_action_config__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_acl_policy_action_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_acl_policy_action__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_igsp_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_igsp_intf_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_igsp_intf__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_igsp_group__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_auth_cfg__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_auth_server__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_auth_session__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_authd_debug__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dot1x_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dot1x_port_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dot1x_port__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dot1x_radius__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dot1x_mac__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_enable_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_enable__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_chip__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_clear_acl_policy__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_author_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_author__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_account_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_account__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_accountcmd_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_accountcmd__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vlanclass_rule_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vlanclass_rule__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vlanclass_group_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vlanclass_group__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_l4_port_range_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_l4_port_range__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_udf_group_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_udf_group__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_udf_entry_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_acl_udf_entry__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_pcap__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_controller_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_controller__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cpu_packets__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ns_route__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ns_route_ip_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ns_route_ip__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_openflow_interface_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_openflow_interface__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_openflow_manager__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ptp_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ptp_port_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ptp_port__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ptp_foreign__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ptp_residence_time_cache__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_ptp_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_ptp_ts_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_ptp_ts__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_time__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_bhm_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_bhm_module_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_bhm_module__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_openflow_tunnel_interface_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_openflow_tunnel_interface__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_openflow_tunnel_local_ip_cnt_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_openflow_tunnel_local_ip_cnt__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_inband_snat__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_arpinsp_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_arpinsp__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_arpacl_config_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_arpacl_config__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_arpace_config__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_copp_cfg__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_copp_trap_group_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_fea_copp_trap_group__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_sflow_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_sflow_collector__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_sflow_counter_port_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_sflow_counter_port__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vrrp_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vrrp_vmac_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vrrp_vmac__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vrrp_vip__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vrrp_session_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vrrp_session__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ssm_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ssm_port_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ssm_port__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ipsla_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ipsla_entry_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ipsla_entry__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ipsla_packet_stats__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ipsla_test_stats__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_track_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_track_object_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_track_object__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_controller_attr__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_oam_session_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_oam_session__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_oam_session_upload_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_oam_session_upload__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_lsp_aps_group_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_lsp_aps_group__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pw_aps_group_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pw_aps_group__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_lsp_pe_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_lsp_pe__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_lsp_p_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_lsp_p__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pw_tpe_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pw_tpe__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_section_oam_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_section_oam__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_oam_flow_info_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_oam_flow_info__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_tpoam_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_tpoam_exec_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_aps_group_info_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_aps_group_info__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_oam_inlabel_info_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_oam_inlabel_info__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_oam_mpls_aps_check_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_oam_mpls_aps_check__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vlan_mapping_table_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vlan_mapping_table__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vlan_mapping_entry__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_egress_mapping_entry__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vlan_group_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_vlan_group__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_evc_entry_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_evc_entry__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_mapped_vlan_info__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_l2_protocol_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_l2_protocol__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nd_fib__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nd_stats__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cpu_mirror_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_tap_server__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_dhcpv6_debug__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_l2edit__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_hash_field_profile_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_hash_field_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_hash_value_profile_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_hash_value_profile__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_hash_value_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nat_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nat_pool_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nat_pool__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nat_rule__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nat_session__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nat_session_limit__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nat_proxy_arp__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nat_rtif_inside_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nat_rtif_inside__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nat_rtif_outside_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_nat_rtif_outside__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_g8032_ring_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_g8032_ring__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cfm_global__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cfm_md_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cfm_md__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cfm_ma__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cfm_maid_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cfm_maid__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cfm_lmep__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_cfm_rmep__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pim_sm_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pim_sm__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pim_sm_bsr_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pim_sm_bsr__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pim_sm_rp_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pim_sm_rp__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pim_sm_rp_gp_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pim_sm_rp_gp__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pim_dm_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_pim_dm__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_igmp_intf_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_igmp_intf__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rip_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rip__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ripng_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ripng__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rip_network__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ripng_network__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rip_neighbor__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rip_passive_if_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_rip_passive_if__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ripng_passive_if_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ripng_passive_if__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf_area_stub_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf_area_stub__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf6_area_stub_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf6_area_stub__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf_area_nssa_key__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf_area_nssa__descriptor;
extern const ProtobufCMessageDescriptor cdb__tbl_ospf_area_vlink__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_tbl_2eproto__INCLUDED */
